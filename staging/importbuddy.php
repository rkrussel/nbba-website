<?php
/* ATTENTION: IF YOU ARE READING THIS WHILE TRYING TO LOAD IMPORTBUDDY TO RESTORE YOUR SITE: Your server is not properly handling PHP files. Contact your hosting provider to fix this. Notify them that PHP files are not executing and instead are outputting their code contents. */


/* <!-- ImportBuddy Restore & Migration Tool - iThemes.com
 * @version 8.2.1.0 (downloaded 2018-02-17T02:41:27+00:00)
 * @author iThemes.com
 * @developer Dustin Bolton
 * @created Feb 11, 2010
 *
 * #############################################################################################
 * #                                                                                           #
 * # THERE ARE NO USER-EDITABLE PORTIONS OF THIS FILE! DO NOT EDIT UNLESS DIRECTED BY SUPPORT! #
 * #                                                                                           #
 * #############################################################################################
 *
 */


define( 'PB_PASSWORD', '434f6578415052ce494320279deda0ff' ); // Update this portion with the hashed password to override a forgotten password.


$php_minimum = '5.1'; // User's PHP must be equal or newer to this version.
$ignore_not_writable = false; // Set to true to ignore is_writable() returning false on this directory. Useful for servers lying about the writable status of the directory.
//error_reporting( E_ALL );

if ( version_compare( PHP_VERSION, $php_minimum ) < 0 ) {
	die( 'ERROR #9013. See <a href="http://ithemes.com/codex/page/BackupBuddy:_Error_Codes#9013">this codex page for details</a>. Sorry! PHP version ' . $php_minimum . ' or newer is required for BackupBuddy to properly run. You are running PHP version ' . PHP_VERSION . '.' );
}

global $importbuddy_file;
$importbuddy_file = basename( __FILE__ ); // filename of importbuddy.php (or whatever it is named).
global $wp_version;
$wp_version = '4.4'; // Spoof a version for new wp-db class.
$abspath = rtrim( dirname( __FILE__ ), '\\/' ) . '/';

define( 'ABSPATH', $abspath );
define( 'WP_CONTENT_DIR', $abspath . 'wp-content' );
define( 'PB_BB_VERSION', '8.2.1.0 (downloaded 2018-02-17T02:41:27+00:00)' );
define('DB_CHARSET', 'utf8'); // Default only. Overriden later if needed. Used by wpdb class.
define('DB_COLLATE', ''); // Default only. Overriden alter if needed. Used by wpdb class.

@date_default_timezone_set( @date_default_timezone_get() ); // Prevents date() from throwing a warning if the default timezone has not been set. Run prior to any file_exists()!


// Try to put an index.htm file in place during import to help prevent against file browsing. Only do if not a defined step OR a non-numeric defined step OR a defined numeric step < 5.
if (
	( ! isset( $_GET['step'] ) )
	||
	( isset( $_GET['step'] ) && !is_numeric( $_GET['step'] ) )
	||
	( isset( $_GET['step'] ) && is_numeric( $_GET['step'] ) && ( $_GET['step'] < 5 ) )
	)
{
	if ( ( ! file_exists( ABSPATH . 'index.htm' ) ) && ( ! file_exists( ABSPATH . 'index.php' ) ) ) {
		@file_put_contents( ABSPATH . 'index.htm', '<html></html>' );
	}
}


// If inside BB install then die. Else unpack importbuddy if needed.
if ( @file_exists( @dirname( @dirname( __FILE__ ) ) . '/backupbuddy.php' ) ) {
	die( '<html>Access Denied</html>' );
}


// Unpack importbuddy files into importbuddy directory. Does this when importbuddy directory does not exist OR if now request GET or POST params are sent (aka the first page only).
if ( ! file_exists( ABSPATH . 'importbuddy' ) || ( ( count( $_GET ) == 0 ) && ( count( $_POST ) == 0 ) ) ) {
	
	$importbuddy_contents = '';
	if ( false === ( $importbuddy_contents = file_get_contents( __FILE__ ) ) ) {
		die( 'Error #8494834: Unable to read in importbuddy file `' . __FILE__ . '` for validating.' );
	}
	
	// Make sure this file is complete and contains all the packed data to the end before proceeding.
	if ( false === strpos( $importbuddy_contents, '###PACKDATA' . ',END' ) ) { // Concat here so we don't false positive on this line when searching.
		die( 'ERROR: It appears your `' . __FILE__ . '` file is incomplete.  It may have not finished downloading or uploading completely.  Please try re-downloading the script from within BackupBuddy in WordPress (do not just copy the file from the plugin directory) and re-uploading it.' );
	}
	
	// Make sure no leading whitespace. Some servers introduce this to the beginning, breaking authentication due to output before auth headers being sent.
	if ( ltrim( $importbuddy_contents ) !== $importbuddy_contents ) {
		if ( false === ( file_put_contents( __FILE__, ltrim( $importbuddy_contents ) ) ) ) {
			die( 'Error #84394834: Your importbuddy file `' . __FILE__ . '` file contains leading whitespace/newslines and the script could not re-write it to fix it for you (possibly due to permissions). Please re-download it or manually edit to make sure it begins with <?php with no spaces or newlines/enters before it.' );
		} else { // Re-wrote file.
			sleep( 1 );
			die( '<meta http-equiv="refresh" content="1">Refreshing... Removed unexpected leading whitespace found in importbuddy.php file.' );
		}
	}
	
	$importbuddy_contents = '';
	
	$unpack_importbuddy = true;
	if ( file_exists( ABSPATH . 'importbuddy' ) ) { // ImportBuddy directory already exists. We may need to re-unpack it if this file has been updated since.
		$signature = @file_get_contents( ABSPATH . 'importbuddy/_signature.php' );
		$signature = trim( str_replace( '<?php die(); ?>', '', $signature ) );
		if ( md5( PB_BB_VERSION . PB_PASSWORD ) != $signature ) { // Signature mismatch. We will need to delete and unpack again to update.
			//echo '<!-- unlinking existing importbuddy directory. -->'; 5.1.0.10: Broke causing headers already sent error due to auth.
			recursive_unlink( ABSPATH . 'importbuddy' );
		} else {
			$unpack_importbuddy = false;
		}
	}
	if ( true === $unpack_importbuddy ) {
		unpack_importbuddy( $ignore_not_writable );
		@file_put_contents( ABSPATH . 'importbuddy/_signature.php', '<?php die(); ?>' . md5( PB_BB_VERSION . PB_PASSWORD ) ); // Create a hash of this ImportBuddy version & password. On accessing importbuddy.php's authentication page all importbuddy files will be freshly unpacked if the importbuddy.php version and/or password mismatches to allow users to just replace importbuddy.php to upgrade ImportBuddy or password.
	}
}


// Database wrapper.
require_once( ABSPATH . 'importbuddy/classes/wp-db.php' );
global $wpdb;
//$wpdb = new wpdb();


if ( isset( $_GET['api'] ) && ( $_GET['api'] != '' ) ) { // API ACCESS
	if ( $_GET['api'] == 'ping' ) {
		die( 'pong' );
	} else {
		die( 'Unknown API access action.' );
	}
} else { // NORMAL ACCESS.
	if ( !file_exists( ABSPATH . 'importbuddy/init.php' ) ) {
		die( 'Error: Unable to find file `' . ABSPATH . 'importbuddy/init.php`. Make sure that you downloaded this script from within BackupBuddy. Copying importbuddy files from inside the plugin directory is not sufficient as many file additions are made on demand.' );
	} else {
		require_once( ABSPATH . 'importbuddy/init.php' );
	}
}


function recursive_unlink( $path ) {
  return is_file($path)?
    @unlink($path):
array_map('recursive_unlink',glob($path.'/*'))==@rmdir($path);
}


/**
*	unpack_importbuddy()
*
*	Unpacks required files encoded in importbuddy.php into stand-alone files.
*
*	@return		null
*/
function unpack_importbuddy( $ignore_not_writable = false ) {
	if ( ( ! is_writable( ABSPATH ) ) && ( false === $ignore_not_writable ) ) {
		echo 'Error #224834. This directory, `' . ABSPATH . '`, is not write enabled according to the server. Please verify proper write permissions to continue. If this persists, contact your web hosting provider and tell them that is_writable("' . ABSPATH . '") returns FALSE in PHP.';
		die();
	} else {
		$unpack_file = '';
		
		$handle = @fopen( __FILE__, 'r' );
		if ( $handle ) {
			while ( ( $buffer = fgets( $handle ) ) !== false ) {
				if ( substr( $buffer, 0, 11 ) == '###PACKDATA' ) {
					$packdata_commands = explode( ',', trim( $buffer ) );
					array_shift( $packdata_commands );
					
					if ( $packdata_commands[0] == 'BEGIN' ) {
						// Start packed data.
					} elseif ( $packdata_commands[0] == 'FILE_START' ) {
						$unpack_file = $packdata_commands[2];
					} elseif ( $packdata_commands[0] == 'FILE_END' ) {
						$unpack_file = '';
					} elseif ( $packdata_commands[0] == 'END' ) {
						return;
					}
				} else {
					if ( $unpack_file != '' ) {
						if ( !is_dir( dirname( ABSPATH . $unpack_file ) ) ) {
							$mkdir_result = mkdir( dirname( ABSPATH . $unpack_file ), 0777, true ); // second param makes recursive.
							if ( $mkdir_result === false ) {
								echo 'Error #54455. Unable to mkdir `' . dirname( ABSPATH . $unpack_file ) . '`<br>';
							}
						}
						$fileput_result = file_put_contents( ABSPATH . $unpack_file, base64_decode( $buffer ) );
						if ( $fileput_result === false ) {
							echo 'Error #65656. Unable to put file contents to `' . ABSPATH . $unpack_file . '`.<br>';
						}
					}
				}
			}
			if ( !feof( $handle ) ) {
				echo "Error: unexpected fgets() fail.<br>";
			}
			fclose( $handle );
		} else {
			echo 'ERROR #54455: Unable to open `' . __FILE__ . '` file for reading in packaged data.<br>';
		}
	}
}
die();
?>
<?php /*
###PACKDATA,BEGIN
###PACKDATA,FILE_START,/_importbuddy/importbuddy/.htaccess,importbuddy/.htaccess

###PACKDATA,FILE_END,/_importbuddy/importbuddy/.htaccess,importbuddy/.htaccess
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.htm,importbuddy/index.htm
PGh0bWw+PC9odG1sPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.htm,importbuddy/index.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.html,importbuddy/index.html
PGh0bWw+PC9odG1sPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.html,importbuddy/index.html
###PACKDATA,FILE_START,/_importbuddy/importbuddy/index.php,importbuddy/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/index.php,importbuddy/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init.php,importbuddy/init.php
PD9waHANCi8qKg0KICoNCiAqCVBsdWdpbiBOYW1lOiBJbXBvcnRCdWRkeQ0KICoJUGx1Z2luIFVSSTogaHR0cDovL2l0aGVtZXMuY29tLw0KICoJRGVzY3JpcHRpb246IEJhY2t1cEJ1ZGR5IEltcG9ydGVyDQogKglAc2luY2UgMS4wLjINCiAqCUBhdXRob3IgRHVzdGluIEJvbHRvbg0KICoNCiAqCUluc3RhbGxhdGlvbjoNCiAqIA0KICoJMS4gRG93bmxvYWQgYW5kIHVuemlwIHRoZSBsYXRlc3QgcmVsZWFzZSB6aXAgZmlsZS4NCiAqCTIuIElmIHlvdSB1c2UgdGhlIFdvcmRQcmVzcyBwbHVnaW4gdXBsb2FkZXIgdG8gaW5zdGFsbCB0aGlzIHBsdWdpbiBza2lwIHRvIHN0ZXAgNC4NCiAqCTMuIFVwbG9hZCB0aGUgZW50aXJlIHBsdWdpbiBkaXJlY3RvcnkgdG8geW91ciBgL3dwLWNvbnRlbnQvcGx1Z2lucy9gIGRpcmVjdG9yeS4NCiAqCTQuIEFjdGl2YXRlIHRoZSBwbHVnaW4gdGhyb3VnaCB0aGUgJ1BsdWdpbnMnIG1lbnUgaW4gV29yZFByZXNzIEFkbWluaXN0cmF0aW9uLg0KICogDQogKglVc2FnZToNCiAqIA0KICoJMS4gTmF2aWdhdGUgdG8gdGhlIG5ldyBwbHVnaW4gbWVudSBpbiB0aGUgV29yZHByZXNzIEFkbWluaXN0cmF0aW9uIFBhbmVsLg0KICoNCiAqCU5PVEU6IERPIE5PVCBFRElUIFRISVMgT1IgQU5ZIE9USEVSIFBMVUdJTiBGSUxFUy4gTk8gVVNFUi1DT05GSUdVUkFCTEUgT1BUSU9OUyBXSVRISU4uDQogKi8NCg0KZXJyb3JfcmVwb3J0aW5nKCBFX0VSUk9SIHwgRV9XQVJOSU5HIHwgRV9QQVJTRSB8IEVfTk9USUNFICk7IC8vIEhJR0gNCmRlZmluZSggJ1BCX1NUQU5EQUxPTkUnLCB0cnVlICk7DQpkZWZpbmUoICdQQl9JTVBPUlRCVUREWScsIHRydWUgKTsNCg0KJHBsdWdpbmJ1ZGR5X3NldHRpbmdzID0gYXJyYXkoDQoJCQkJJ3NsdWcnCQkJCQkJPT4JCSdiYWNrdXBidWRkeScsDQoJCQkJJ3BocF9taW5pbXVtJwkJCQk9PgkJJzUuMicsDQoJCQkJJ3NlcmllcycJCQkJCT0+CQknJywNCgkJCQkncmVtb3RlX2FwaScJCQkJPT4JCScwJywgLy8gU2V0IHRvIDEgYnkgc3RhdGUgZm9yIGRlcGxveW1lbnRzLg0KCQkJCSdkZWZhdWx0X3N0YXRlX292ZXJyaWRlcycJPT4JCWFycmF5KCksIC8vIERlZmF1bHQgc3RhdGUgdG8gb3ZlcnJpZGUgdGhlIG1haW4gZGVmYXVsdHMuIEdvb2QgZm9yIGF1dG9tYXRpbmcgaW1wb3J0cy4gQXBwbGllZCBvdmVyIGRlZmF1bHRzIGR1cmluZyBjb25zdHJ1Y3Rpb24gb2YgcmVzdG9yZSBjbGFzcy4NCgkJCQknZGVmYXVsdF9vcHRpb25zJwkJCT0+CQlhcnJheSgNCgkJCQkJCQkJCQkJCQkJJ2JiX3ZlcnNpb24nCQkJCT0+CVBCX0JCX1ZFUlNJT04sCS8vIEJCIHZlcnNpb24gdG8gYmUgZmlsbGVkIGluIG9uIGRvd25sb2FkLg0KCQkJCQkJCQkJCQkJCQknYmFja3VwX2RpcmVjdG9yeScJCQk9PgknJywNCgkJCQkJCQkJCQkJCQkJJ2xvZ19sZXZlbCcJCQkJCT0+CTAsIC8vIE5vIGxvbmdlciB1c2luZyB0aGlzIG1ldGhvZCBmb3IgaGFuZGxpbmcgbG9nZ2luZy4gc3RhdHVzKCkgbWV0aG9kIGFsd2F5cyBsb2dzIGFsbCBpZiBpbXBvcnRidWRkeS4NCgkJCQkJCQkJCQkJCQkpLA0KCQkJCSdtb2R1bGVzJwkJCQkJPT4JCWFycmF5KA0KCQkJCQkJCQkJCQkJCQkndXBkYXRlcicJCQkJPT4JZmFsc2UsCQkJCQkJLy8gTG9hZCBQbHVnaW5CdWRkeSBhdXRvbWF0aWMgdXBncmFkZXMuDQoJCQkJCQkJCQkJCQkJCSdmaWxlc3lzdGVtJwkJCT0+CXRydWUsCQkJCQkJLy8gRmlsZSBzeXN0ZW0gaGVscGVyIG1ldGhvZHMuDQoJCQkJCQkJCQkJCQkJCSdmb3JtYXQnCQkJCT0+CXRydWUsCQkJCQkJLy8gVGV4dCAvIGRhdGEgZm9ybWF0dGluZyBoZWxwZXIgbWV0aG9kcy4NCgkJCQkJCQkJCQkJCQkpDQoJCQkpOw0KDQoNCg0KLy8gJHNldHRpbmdzIGlzIGV4cGVjdGVkIHRvIGJlIHBvcHVsYXRlZCBwcmlvciB0byBpbmNsdWRpbmcgUGx1Z2luQnVkZHkgZnJhbWV3b3JrLiBEbyBub3QgZWRpdCBiZWxvdy4NCnJlcXVpcmUoIGRpcm5hbWUoIF9fRklMRV9fICkgLiAnL3BsdWdpbmJ1ZGR5L19wbHVnaW5idWRkeS5waHAnICk7DQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init.php,importbuddy/init.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
PD9waHANCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkKCk7DQoNCi8vICoqKioqKioqKiogQUNUSU9OUyAoYWRtaW4pICoqKioqKioqKioNCg0KDQoNCi8vICoqKioqKioqKiogQUpBWCAoYWRtaW4pICoqKioqKioqKioNCg0KDQoNCi8vICoqKioqKioqKiogREFTSEJPQVJEIChhZG1pbikgKioqKioqKioqKg0KDQoNCg0KLy8gKioqKioqKioqKiBGSUxURVJTIChhZG1pbikgKioqKioqKioqKg0KDQoNCg0KLy8gKioqKioqKioqKiBQQUdFUyAoYWRtaW4pICoqKioqKioqKioNCg0KDQoNCi8vICoqKioqKioqKiogTElCUkFSSUVTICYgQ0xBU1NFUyAoYWRtaW4pICoqKioqKioqKioNCnJlcXVpcmVfb25jZSggJ2NsYXNzZXMvY29yZS5waHAnICk7DQoNCnJlcXVpcmVfb25jZSggJ2NsYXNzZXMvaW1wb3J0LnBocCcgKTsNCnBiX2JhY2t1cGJ1ZGR5OjokY2xhc3Nlc1snaW1wb3J0J10gPSBuZXcgcGJfYmFja3VwYnVkZHlfaW1wb3J0KCk7DQoNCg0KLy8gKioqKioqKioqKiBPVEhFUiAoYWRtaW4pICoqKioqKioqKioNCg0KDQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_admin.php,importbuddy/init_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
PD9waHANCmlmICggISBjbGFzc19leGlzdHMoICdiYWNrdXBidWRkeV9jb3JlJyApICkgew0KCXJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2NsYXNzZXMvY29yZS5waHAnICk7DQp9DQpyZXF1aXJlX29uY2UoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY2xhc3Nlcy9hdXRoLnBocCcgKTsNCg0KLy8gSWYgdmVyaWZpY2F0aW9uIGNvZGUgcGFzc2VkIHRoZW4gYXV0aGVudGljYXRlIGVhcmx5Lg0KaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2Rpc3BsYXlfbW9kZScgKSA9PSAnZW1iZWQnICkgew0KCUF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsNCn0NCg0KZ2xvYmFsICRpbXBvcnRidWRkeV9maWxlOw0KJGltcG9ydF9zZXJpYWwgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRfc2VyaWFsX2Zyb21fZmlsZSggJGltcG9ydGJ1ZGR5X2ZpbGUgKTsNCg0KDQovLyBDcmVhdGUgU1RBVEUgZmlsZSBmcm9tIElOSSBmaWxlIChpZiBleGlzdHMpLg0KLyoNCmlmICggZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHktJyAuICRpbXBvcnRfc2VyaWFsIC4gJy5pbmknICkgKSB7DQoJLy9wYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdQb3NzaWJsZSBpbXBvcnRidWRkeSAuaW5pIGZpbGUgZm9yIGF1dG8tbG9hZGluZyBzZXR0aW5ncyBmb3VuZCBhdCBgJyAuIEFCU1BBVEggLiAnaW1wb3J0YnVkZHktJyAuICRpbXBvcnRfc2VyaWFsIC4gJy5pbmknIC4gJ2AuJyApOw0KCSRpbmkgPSBwYXJzZV9pbmlfZmlsZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gJGltcG9ydF9zZXJpYWwgLiAnLmluaScsIHRydWUgKTsNCgkNCgllY2hvICc8YnI+PGJyPjxicj48YnI+PHByZT4nOw0KCXByaW50X3IoICRpbmkgKTsNCgllY2hvICc8L3ByZT4nOw0KCWlmICggaXNzZXQoICRpbmlbJ3R5cGUnXSApICkgeyAvLyBJZiB0eXBlIGlzIHNldCB0aGVuIGFzc3VtZSBpdCBtYXkgYmUgYSB2YWxpZCBpbmkgZmlsZSBmb3IgaW1wb3J0YnVkZHkgYW5kIHVzZSBpdC4NCgkJLy9wYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdDb25maXJtZWQgaW1wb3J0YnVkZHkgLmluaSBmaWxlIGZvciBhdXRvLWxvYWRpbmcgc2V0dGluZ3MgZm91bmQuJyApOw0KCQkNCgkJJG92ZXJyaWRlX3N0YXRlX2ZpbGUgPSBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LScgLiAkaW1wb3J0X3NlcmlhbCAuICctc3RhdGUucGhwJzsNCgkJaWYgKCBmaWxlX2V4aXN0cyggJG92ZXJyaWRlX3N0YXRlX2ZpbGUgKSApIHsNCgkJCUB1bmxpbmsoICRvdmVycmlkZV9zdGF0ZV9maWxlICk7DQoJCX0NCgkJaWYgKCBmYWxzZSA9PT0gZmlsZV9wdXRfY29udGVudHMoICRvdmVycmlkZV9zdGF0ZV9maWxlLCAiPD9waHAgZGllKCdBY2Nlc3MgRGVuaWVkLicpOyAvLyA8IS0tID8+XG4iIC4gYmFzZTY0X2VuY29kZSggc2VyaWFsaXplKCAkaW5pICkgKSApICkgew0KCQkJLy9wYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzQ4OTM0ODM0OiBVbmFibGUgdG8gd3JpdGUgc3RhdGUgZmlsZSBgJyAuICRvdmVycmlkZV9zdGF0ZV9maWxlIC4gJ2AgZnJvbSBpbmkgZGF0YS4gQ2hlY2sgcGVybWlzc2lvbnMuJyApOw0KCQl9DQoJfQ0KfQ0KKi8NCg0KDQppZiAoICcnICE9ICRpbXBvcnRfc2VyaWFsICkgeyAvLyBpbXBvcnRidWRkeSBoYXMgYSBzZXJpYWwuIExvb2sgZm9yIGEgZGVmYXVsdCBzdGF0ZSBmaWxlIHRoYXQgbWF0Y2hlcy4NCglwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2xvZ19zZXJpYWwnXSA9ICRpbXBvcnRfc2VyaWFsOw0KCXBiX2JhY2t1cGJ1ZGR5OjpzYXZlKCk7DQoJDQoJaWYgKCBmaWxlX2V4aXN0cyggQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gJGltcG9ydF9zZXJpYWwgLiAnLXN0YXRlLnBocCcgKSApIHsgLy8gRGVmYXVsdCBzdGF0ZSBleGlzdHMuDQoJCQ0KCQkvLyBJZiBhbiBvdmVycmlkaW5nIHN0YXRlIGZpbGUgZXhpc3RzIHRoZW4gbG9hZCBpdCBvdmVyIHRoZSBjdXJyZW50IHN0YXRlLg0KCQkkb3ZlcnJpZGVfc3RhdGVfZmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHktJyAuICRpbXBvcnRfc2VyaWFsIC4gJy1zdGF0ZS5waHAnOw0KCQlpZiAoIGZpbGVfZXhpc3RzKCAkb3ZlcnJpZGVfc3RhdGVfZmlsZSApICkgew0KCQkJJHN0YXRlZGF0YSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCAkb3ZlcnJpZGVfc3RhdGVfZmlsZSApOw0KCQkJLy8gU2tpcCBmaXJzdCBsaW5lLg0KCQkJJHNlY29uZF9saW5lX3BvcyA9IHN0cnBvcyggJHN0YXRlZGF0YSwgIlxuIiApICsgMTsNCgkJCSRzdGF0ZWRhdGEgPSBzdWJzdHIoICRzdGF0ZWRhdGEsICRzZWNvbmRfbGluZV9wb3MgKTsNCgkJCS8vIERlY29kZSBiYWNrIGludG8gYW4gYXJyYXkuDQoJCQkkc3RhdGVkYXRhID0ganNvbl9kZWNvZGUoIGJhc2U2NF9kZWNvZGUoICRzdGF0ZWRhdGEgKSwgdHJ1ZSApOw0KCQkJaWYgKCBpc19hcnJheSggJHN0YXRlZGF0YSApICkgeyAvLyBWYWxpZCBjb250ZW50Lg0KCQkJCS8vIE5vcm1hbGl6ZSBVUkxzOg0KCQkJCWlmICggaXNzZXQoICRzdGF0ZWRhdGFbJ3NpdGV1cmwnXSApICkgew0KCQkJCQkkc3RhdGVkYXRhWydzaXRldXJsJ10gPSBydHJpbSggJHN0YXRlZGF0YVsnc2l0ZXVybCddLCAnLycgKTsNCgkJCQl9DQoJCQkJaWYgKCBpc3NldCggJHN0YXRlZGF0YVsnaG9tZXVybCddICkgKSB7DQoJCQkJCSRzdGF0ZWRhdGFbJ2hvbWV1cmwnXSA9IHJ0cmltKCAkc3RhdGVkYXRhWydob21ldXJsJ10sICcvJyApOw0KCQkJCX0NCgkJCQkNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdMb2FkZWQgZGVmYXVsdCBzdGF0ZSBvdmVycmlkZSBzdGF0ZSBmaWxlIGRhdGEgYW5kIGdhdmUgaXQgcHJpb3JpdHkgb3ZlciBjdXJyZW50IHN0YXRlLiBGaWxlOiBgJyAuICRvdmVycmlkZV9zdGF0ZV9maWxlIC4gJ2AuJyApOw0KCQkJCXBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnXSA9ICRzdGF0ZWRhdGE7DQoJCQkJLy9wcmludF9yKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2RlZmF1bHRfc3RhdGVfb3ZlcnJpZGVzJ10gKTsNCgkJCQlwYl9iYWNrdXBidWRkeTo6c2F2ZSgpOw0KCQkJfSBlbHNlIHsNCgkJCQkvL3BiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICd3YXJuaW5nJywgJ0RlZmF1bHQgc3RhdGUgb3ZlcndyaXRlIGZpbGUgZm91bmQgYnV0IHVuYWJsZSB0byBhY2Nlc3MgaXQuJyApOw0KCQkJfQ0KCQl9DQoJCQ0KCX0gZWxzZSB7DQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ092ZXJyaWRlIHN0YXRlIGZpbGUgbm90IGZvdW5kIGF0IGAnIC4gJG92ZXJyaWRlX3N0YXRlX2ZpbGUgLiAnYC4gU2tpcHBpbmcuJyApOw0KCX0NCgkNCn0NCg0KLy8gSGFuZGxlIEFQSSBjYWxscyBpZiBiYWNrdXBidWRkeV9hcGlfa2V5IGlzIHBvc3RlZC4gSWYgYW55dGhpbmcgZmFpbHMgc2VjdXJpdHkgY2hlY2tzIHByZXRlbmQgbm90aGluZyBhdCBhbGwgaGFwcGVuZWQuDQppZiAoICcnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2JhY2t1cGJ1ZGR5X2FwaV9rZXknICkgKSB7IC8vIFJlbW90ZSBBUEkgYWNjZXNzLg0KCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sncmVtb3RlX2FwaSddWydrZXlzJ10gKSAmJiAoIGNvdW50KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3JlbW90ZV9hcGknXVsna2V5cyddICkgPiAwICkgKSB7IC8vIFJlbW90ZSBBUEkgZW5hYmxlZCBhbmQgMSBvciBtb3JlIGtleXMgZGVmaW5lZC4NCgkJaW5jbHVkZSggJ2NsYXNzZXMvcmVtb3RlX2FwaS5waHAnICk7DQoJCWJhY2t1cGJ1ZGR5X3JlbW90ZV9hcGk6OmxvY2FsQ2FsbCggJHNlY3VyZSA9IHRydWUsICRpbXBvcnRidWRkeSA9IHRydWUgKTsNCgkJZGllKCk7DQoJfQ0KfQ0KDQppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGlzcGxheV9tb2RlJyApID09ICdlbWJlZCcgKSB7DQoJcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkaXNwbGF5X21vZGUnXSA9ICdlbWJlZCc7DQoJcGJfYmFja3VwYnVkZHk6OnNhdmUoKTsNCn0NCg0KLy8gKioqKioqKioqKiBBQ1RJT05TIChnbG9iYWwpICoqKioqKioqKioNCg0KDQoNCi8vICoqKioqKioqKiogQUpBWCAoZ2xvYmFsKSAqKioqKioqKioqDQoNCg0KDQovLyAqKioqKioqKioqIENST04gKGdsb2JhbCkgKioqKioqKioqKg0KDQoNCg0KLy8gKioqKioqKioqKiBGSUxURVJTIChnbG9iYWwpICoqKioqKioqKioNCg0KDQoNCi8vICoqKioqKioqKiogV0lER0VUUyAoZ2xvYmFsKSAqKioqKioqKioqDQoNCg0KDQo/Pg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_global.php,importbuddy/init_global.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/init_public.php,importbuddy/init_public.php
PD9waHANCg0KDQoNCi8vICoqKioqKioqKiogQUNUSU9OUyAocHVibGljKSAqKioqKioqKioqDQoNCg0KDQovLyAqKioqKioqKioqIEFKQVggKHB1YmxpYykgKioqKioqKioqKg0KDQoNCg0KLy8gKioqKioqKioqKiBGSUxURVJTIChwdWJsaWMpICoqKioqKioqKioNCg0KDQoNCi8vICoqKioqKioqKiogU0hPUlRDT0RFUyAocHVibGljKSAqKioqKioqKioqDQoNCg0KDQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/init_public.php,importbuddy/init_public.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt

###PACKDATA,FILE_END,/_importbuddy/importbuddy/license.txt,importbuddy/license.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
ICogV2Vic2l0ZTogaHR0cDovL2l0aGVtZXMuY29tDQogKg0KICogSW5zdGFsbGF0aW9uOg0KICogDQogKiAxLiBEb3dubG9hZCBhbmQgdW56aXAgdGhlIGxhdGVzdCByZWxlYXNlIHppcCBmaWxlDQogKiAyLiBJZiB5b3UgdXNlIHRoZSBXb3JkUHJlc3MgcGx1Z2luIHVwbG9hZGVyIHRvIGluc3RhbGwgdGhpcyBwbHVnaW4gc2tpcCB0byBzdGVwIDQuDQogKiAzLiBVcGxvYWQgdGhlIGVudGlyZSBwbHVnaW4gZGlyZWN0b3J5IHRvIHlvdXIgYC93cC1jb250ZW50L3BsdWdpbnMvYCBkaXJlY3RvcnkNCiAqIDQuIEFjdGl2YXRlIHRoZSBwbHVnaW4gdGhyb3VnaCB0aGUgJ1BsdWdpbnMnIG1lbnUgaW4gV29yZFByZXNzIEFkbWluaXN0cmF0aW9uDQogKiANCiAqIFVzYWdlOg0KICogDQogKiAxLiBOYXZpZ2F0ZSB0byB0aGUgbmV3IG1lbnUgZm9yIHRoaXMgcGx1Z2luIGluIHRoZSBXb3JkcHJlc3MgQWRtaW5pc3RyYXRpb24gUGFuZWwNCiAqIDIuIFNlbGVjdCAnR2V0dGluZyBTdGFydGVkJyBmb3IgaW5zdHJ1Y3Rpb25zIGFuZCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLg0KICo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/readme.txt,importbuddy/readme.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/sample.ini.txt,importbuddy/sample.ini.txt
OyBEZWZhdWx0IHZhbHVlcyBjYW4gYmUgc2VlbiBpbjogaW1wb3J0YnVkZHkvY2xhc3Nlcy9yZXN0b3JlLnBocCAob3IgYmFja3VwYnVkZHkvY2xhc3Nlcy9yZXN0b3JlLnBocCkgaW4gdGhlIF9fY29uc3RydWN0KCkgZnVuY3Rpb24sIHdoZXJlICR0aGlzLT5fc3RhdGUgaXMgZmlyc3Qgc2V0Lg0KDQp0eXBlID0gcmVzdG9yZQ0KYXJjaGl2ZSA9IGJhY2t1cC1iYWNrdXBidWRkeS1YWFhYWFhYWFhYWC56aXANCnNpdGV1cmwgPSBodHRwOi8vZmluYWx1cmwuY29tDQpob21ldXJsID0gaHR0cDovL2ZpbmFsdXJsLmNvbQ0KcmVzdG9yZUZpbGVzID0gdHJ1ZQ0KcmVzdG9yZURhdGFiYXNlID0gdHJ1ZQ0KbWlncmF0ZUh0YWNjZXNzID0gdHJ1ZQ0KDQo7IEJvdGggb2YgdGhlc2UgbXVzdCBiZSB0cnVlIHdoZW4gdXNpbmcgLmluaSBmaWxlLg0KaW5pbW9kZSA9IHRydWUNCmF1dG9BZHZhbmNlID0gdHJ1ZQ0KDQpbZGF0YWJhc2VTZXR0aW5nc10NCnNlcnZlciA9IGxvY2FsaG9zdA0KZGF0YWJhc2UgPSBkYXRhYmFzZV9uYW1lDQp1c2VybmFtZSA9IGRhdGFiYXNlX3VzZXINCnBhc3N3b3JkID0gZGF0YWJhc2VfcGFzc3dvcmQNCnByZWZpeCA9IHdwXw0KcmVuYW1lUHJlZml4ID0gdHJ1ZQ0Kd2lwZVByZWZpeCA9IGZhbHNlDQp3aXBlRGF0YWJhc2UgPSBmYWxzZQ0KDQpbY2xlYW51cF0NCmRlbGV0ZUFyY2hpdmUgPSBmYWxzZQ0KZGVsZXRlVGVtcEZpbGVzID0gdHJ1ZQ0KZGVsZXRlSW1wb3J0QnVkZHkgPSBmYWxzZQ0Kc2V0X2Jsb2dfcHVibGljID0gDQpkZWxldGVJbXBvcnRCdWRkeURpcmVjdG9yeSA9IHRydWUNCmRlbGV0ZUltcG9ydExvZyA9IHRydWUNCg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/sample.ini.txt,importbuddy/sample.ini.txt
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
PD9waHANCmNsYXNzIEF1dGggew0KCQ0KCWNvbnN0IE1BWF9MT0dJTl9BVFRFTVBUU19BTExPV0VEID0gNDsgLy8gTWF4aW11bSBudW1iZXIgb2YgaW52YWxpZCBsb2dpbiBhdHRlbXB0cyBiZWZvcmUgbG9ja2luZyBpbXBvcnRidWRkeS4NCgljb25zdCBSRVNFVF9ERUZBVUxUU19PTl9JTlZBTElEX0xPR0lOID0gZmFsc2U7IC8vIFdoZXRoZXIgb3Igbm90IHJlc2V0IGFsbCBzZXR0aW5ncy9vcHRpb25zIGJhY2sgdG8gZGVmYXVsdHMgb24gbG9naW4gZmFpbHVyZS4NCgljb25zdCBDT09LSUVfRVhQSVJBVElPTiA9IDg2NDAwOyAvLyBOdW1iZXIgb2Ygc2Vjb25kcyBhbiBpbXBvcnRidWRkeSBjb29raWUgaXMgdmFsaWQgZm9yLg0KCXByaXZhdGUgc3RhdGljICRfYXV0aGVudGljYXRlZCA9IGZhbHNlOyAvLyBXaGV0aGVyIHVzZXIgaXMgdmFsaWRseSBhdXRoZW50aWNhdGVkIG9yIG5vdC4NCglwcml2YXRlIHN0YXRpYyAkX2NoZWNrZWQgPSBmYWxzZTsgLy8gV2hldGhlciBjaGVjaygpIGhhcyBiZWVuIHJ1biB5ZXQuDQoJDQoJDQoJDQoJLyogY2hlY2soKQ0KCSAqDQoJICogQ2hlY2sgYXV0aGVudGljYXRpb24gYmFzZWQgb24gZm9ybSBkYXRhIHN1Ym1pdHRlZC4gVGhpcyBvbmx5IG5lZWRzIHRvIGJlIHJ1biBvbmNlLiBVc2UgaXNfYXV0aGVudGljYXRlZCgpIHRvIGRldGVybWluZSBhdXRoIHN0YXR1cy4NCgkgKg0KCSAqIEBwYXJhbQlmb3JjZV9jaGVjawkJYm9vbAlJZiB0cnVlIHRoZW4gd2lsbCByZS1jaGVjayBldmVuIGlmIGNoZWNrKCkgaGFzIGFscmVhZHkgYmVlbiBydW4gdGhpcyBzZXNzaW9uLg0KCSAqDQoJICovDQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBjaGVjayggJGZvcmNlX2NoZWNrID0gZmFsc2UgKSB7DQoJCQ0KCQlpZiAoICggdHJ1ZSA9PT0gc2VsZjo6JF9jaGVja2VkICkgJiYgKCAkZm9yY2VfY2hlY2sgPT09IGZhbHNlICkgKSB7IC8vIFNraXAgY2hlY2tpbmcgaWYgYWxyZWFkeSBza2lwcGVkIHVubGVzcyBmb3JjaW5nLg0KCQkJcmV0dXJuIHNlbGY6OmlzX2F1dGhlbnRpY2F0ZWQoKTsNCgkJfQ0KCQkNCgkJJGxvZ2luX2F0dGVtcHRfZmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvX2xvZ2luX2F0dGVtcHRzLnBocCc7DQoJCSRsb2dpbl9hdHRlbXB0cyA9IDE7DQoJCWlmICggZmlsZV9leGlzdHMoICRsb2dpbl9hdHRlbXB0X2ZpbGUgKSApIHsNCgkJCSRsb2dpbl9hdHRlbXB0cyA9IEBmaWxlX2dldF9jb250ZW50cyggJGxvZ2luX2F0dGVtcHRfZmlsZSApOw0KCQl9DQoJCWlmICggZmFsc2UgIT09ICRsb2dpbl9hdHRlbXB0cyApIHsNCgkJCSRsb2dpbl9hdHRlbXB0cyA9IHRyaW0oIHN0cl9yZXBsYWNlKCAnPD9waHAgZGllKCk7ID8+JywgJycsICRsb2dpbl9hdHRlbXB0cyApICk7DQoJCQlpZiAoICRsb2dpbl9hdHRlbXB0cyA+IHNlbGY6Ok1BWF9MT0dJTl9BVFRFTVBUU19BTExPV0VEICkgew0KCQkJCWRpZSggJ0FjY2VzcyBEZW5pZWQuIE1heGltdW0gbG9naW4gYXR0ZW1wdHMgZXhjZWVkZWQuIFlvdSBtdXN0IGRlbGV0ZSB0aGUgZmlsZSAiX2xvZ2luX2F0dGVtcHRzLnBocCIgaW4gdGhlIGltcG9ydGJ1ZGR5IGRpcmVjdG9yeSBvbiB5b3VyIHNlcnZlciB0byB1bmxvY2sgdGhpcyBJbXBvcnRCdWRkeSB0byBhbGxvdyBpdCB0byBjb250aW51ZS4nICk7DQoJCQl9DQoJCX0NCgkJDQoJCSRhY3R1YWxfcGFzc19oYXNoID0gUEJfUEFTU1dPUkQ7DQoJCWlmICggKCAnI1BBU1NXT1JEIycgPT0gJGFjdHVhbF9wYXNzX2hhc2ggKSB8fCAoICcnID09ICRhY3R1YWxfcGFzc19oYXNoICkgKSB7IGRpZSggJ0Vycm9yICM4NDU3ODQ1OTc0NS4gQSBwYXNzd29yZCBtdXN0IGJlIHNldCB0byBhY2Nlc3MgSW1wb3J0QnVkZHkuIFBsZWFzZSBkb3dubG9hZCBhIGZyZXNoIGNvcHkgYWZ0ZXIgY29uZmlndXJpbmcgeW91ciBJbXBvcnRCdWRkeSBwYXNzd29yZC4nICk7IH0NCgkJDQoJCWlmICggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncGFzc3dvcmQnICkgIT0gJycgKSB7DQoJCQkkc3VwcGxpZWRfcGFzc19oYXNoID0gbWQ1KCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzd29yZCcgKSApOw0KCQl9IGVsc2VpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAncGFzc3dvcmQnICkgIT0gJycgKSB7DQoJCQkkc3VwcGxpZWRfcGFzc19oYXNoID0gbWQ1KCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3Bhc3N3b3JkJyApICk7DQoJCX0gZWxzZSB7DQoJCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAndicgKSAhPSAnJyApIHsgLy8gSGFzaCBzdWJtaXR0ZWQgYnkgbWFnaWMgbWlncmF0aW9uLg0KCQkJCSRzdXBwbGllZF9wYXNzX2hhc2ggPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3YnICk7DQoJCQl9IGVsc2UgeyAvLyBOb3JtYWwgZm9ybSBzdWJtaXR0ZWQgaGFzaC4NCgkJCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3NfaGFzaCcgKSAhPSAnJyApIHsNCgkJCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3NfaGFzaCcgKTsNCgkJCQl9IGVsc2VpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3BiX2JhY2t1cGJ1ZGR5X3Bhc3NfaGFzaCcgKSAhPSAnJyApIHsNCgkJCQkJJHN1cHBsaWVkX3Bhc3NfaGFzaCA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3BiX2JhY2t1cGJ1ZGR5X3Bhc3NfaGFzaCcgKTsNCgkJCQl9IGVsc2Ugew0KCQkJCQkkc3VwcGxpZWRfcGFzc19oYXNoID0gJyc7DQoJCQkJfQ0KCQkJfQ0KCQl9DQoJCQ0KCQlpZiAoICRzdXBwbGllZF9wYXNzX2hhc2ggPT0gJGFjdHVhbF9wYXNzX2hhc2ggKSB7DQoJCQlzZWxmOjokX2F1dGhlbnRpY2F0ZWQgPSB0cnVlOw0KCQkJc2V0Y29va2llKCAnaW1wb3J0YnVkZHlfbG9naW4nLCBtZDUoIFBCX1BBU1NXT1JEIC4gJ2JhZGdlcnMnICksICggdGltZSgpKyBzZWxmOjpDT09LSUVfRVhQSVJBVElPTiApICk7DQoJCX0gZWxzZWlmICggaXNzZXQoICRfQ09PS0lFWydpbXBvcnRidWRkeV9sb2dpbiddICkgJiYgKCAkX0NPT0tJRVsnaW1wb3J0YnVkZHlfbG9naW4nXSAhPSAnJyApICYmICggJF9DT09LSUVbJ2ltcG9ydGJ1ZGR5X2xvZ2luJ10gPT0gbWQ1KCBQQl9QQVNTV09SRCAuICdiYWRnZXJzJyApICkgKSB7DQoJCQlzZWxmOjokX2F1dGhlbnRpY2F0ZWQgPSB0cnVlOw0KCQkJc2V0Y29va2llKCAnaW1wb3J0YnVkZHlfbG9naW4nLCBtZDUoIFBCX1BBU1NXT1JEIC4gJ2JhZGdlcnMnICksICggdGltZSgpICsgc2VsZjo6Q09PS0lFX0VYUElSQVRJT04gKSApOw0KCQl9IGVsc2UgeyAvLyBJbmNvcnJlY3QgaGFzaC4gUmVzZXQgc2V0dGluZ3MgJiB0cmFjayBhdHRlbXB0cy4NCgkJCWlmICggJycgIT0gJHN1cHBsaWVkX3Bhc3NfaGFzaCApIHsgLy8gRG9udCBjb3VudCBibGFuayBoYXNoIGFzIGFuIGF0dGVtcHQuDQoJCQkJaWYgKCB0cnVlID09PSBzZWxmOjpSRVNFVF9ERUZBVUxUU19PTl9JTlZBTElEX0xPR0lOICkgew0KCQkJCQlwYl9iYWNrdXBidWRkeTo6cmVzZXRfZGVmYXVsdHMoKTsNCgkJCQl9DQoJCQkJaWYgKCBmYWxzZSAhPT0gJGxvZ2luX2F0dGVtcHRzICkgew0KCQkJCQlnbG9iYWwgJHBiX2xvZ2luX2F0dGVtcHRzOw0KCQkJCQkkcGJfbG9naW5fYXR0ZW1wdHMgPSAkbG9naW5fYXR0ZW1wdHM7DQoJCQkJCUBmaWxlX3B1dF9jb250ZW50cyggJGxvZ2luX2F0dGVtcHRfZmlsZSwgJzw/cGhwIGRpZSgpOyA/PicgLiAoICRsb2dpbl9hdHRlbXB0cyArIDEgKSApOw0KCQkJCX0NCgkJCX0NCgkJfQ0KCQkNCgkJc2VsZjo6JF9jaGVja2VkID0gdHJ1ZTsNCgkJDQoJCXJldHVybiBzZWxmOjokX2F1dGhlbnRpY2F0ZWQ7DQoJCQ0KCX0gLy8gRW5kIGNoZWNrKCkuDQoJDQoJDQoJDQoJLyogaXNfYXV0aGVudGljYXRlZCgpDQoJICoNCgkgKiBEZXRlcm1pbmUgd2hldGhlciB1c2VyIGlzIGZ1bGx5IGF1dGhlbnRpY2F0ZWQgb3Igbm90Lg0KCSAqDQoJICogQHJldHVybgkJYm9vbAkJVHJ1ZSBpZiBmdWxseSBhdXRoZW50aWNhdGVkLCBvdGhlcndpc2UgZmFsc2UuDQoJICoNCgkgKi8NCglwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzX2F1dGhlbnRpY2F0ZWQoKSB7DQoJCQ0KCQlyZXR1cm4gc2VsZjo6JF9hdXRoZW50aWNhdGVkOw0KCQkNCgl9IC8vIEVuZCBhdXRoZW50aWNhdGVkKCkuDQoJDQoJDQoJDQoJLyogcmVxdWlyZV9hdXRoZW50aWNhdGlvbigpDQoJICoNCgkgKiBSZXF1aXJlcyB2YWxpZCBhdXRoZW50aWNhdGlvbiB0byBhbGxvdyBwcm9jZWVkaW5nLiBkaWUoKSBpZiBub3QgbG9nZ2VkIGluLg0KCSAqDQoJICovDQoJcHVibGljIHN0YXRpYyBmdW5jdGlvbiByZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCkgew0KCQkNCgkJLy8gQ2hlY2sgaWYgcHJldmlvdXNseSBhdXRoZWQgYWxyZWFkeSB0aGlzIHNlc3Npb24uDQoJCWlmICggdHJ1ZSA9PT0gc2VsZjo6aXNfYXV0aGVudGljYXRlZCgpICkgew0KCQkJcmV0dXJuIHRydWU7DQoJCX0NCgkJDQoJCXNlbGY6OmNoZWNrKCk7DQoJCWlmICggdHJ1ZSA9PT0gc2VsZjo6aXNfYXV0aGVudGljYXRlZCgpICkgew0KCQkJcmV0dXJuIHRydWU7DQoJCX0gZWxzZSB7DQoJCQlkaWUoICdBY2Nlc3MgRGVuaWVkLiBZb3UgbXVzdCBsb2cgaW4gZmlyc3QuIFBsZWFzZSByZXR1cm4gdG8gdGhlIDxhIGhyZWY9ImltcG9ydGJ1ZGR5LnBocCI+aW1wb3J0YnVkZHkucGhwIGhvbWVwYWdlPC9hPiBhdXRoZW50aWNhdGUuJyApOw0KCQl9DQoJCQ0KCX0gLy8gRW5kIHJlcXVpcmVfYXV0aG9yaXphdGlvbigpOw0KCQ0KfSAvLyBFbmQgY2xhc3MuDQoNCg0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/auth.php,importbuddy/classes/auth.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/index.php,importbuddy/classes/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/index.php,importbuddy/classes/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/test-db.php,importbuddy/classes/test-db.php
PD9waHANCi8qKg0KICogQmFja3VwQnVkZHkgSW1wb3J0QnVkZHkgY2xhc3MgZm9yIHRlc3RpbmcgREIgcGVybWlzc2lvbnMNCiAqDQogKiBAcGFja2FnZSBCYWNrdXBCdWRkeQ0KICogQHN1YnBhY2thZ2UgSW1wb3J0QnVkZHkNCiAqIEBzaW5jZSA2LjQuMC4xMw0KICovDQoNCi8qKg0KICogREIgUGVybWlzc2lvbiBUZXN0cw0KICoNCiAqIEBwYWNrYWdlIEJhY2t1cEJ1ZGR5DQogKiBAc3VicGFja2FnZSBJbXBvcnRCdWRkeQ0KICogQHNpbmNlIDYuNC4wLjEzDQogKi8NCmNsYXNzIGltcG9ydGJ1ZGR5X3Rlc3RfZGJ7DQoNCgkvKioNCgkgKiBEQiBDcmVkZW50aWFscyBwYXNzZWQgdmlhIGZvcm0NCgkgKiBAYWNjZXNzIHByaXZhdGUNCgkgKiBAdmFyIGFycmF5DQoJICovDQoJcHJpdmF0ZSAkY3JlZHMgPSBhcnJheSgpOw0KDQoJLyoqDQoJICogV29yZFByZXNzIERhdGFiYXNlIENsYXNzDQoJICoNCgkgKiBAc2luY2UgNi40LjAuMTMNCgkgKiBAYWNjZXNzIHB1YmxpYw0KCSAqIEB2YXIgb2JqZWN0DQoJICovDQoJdmFyICR3cGRiOw0KDQoJLyoqDQoJICogQHNpbmNlIDYuNC4wLjEzDQoJICogQGFjY2VzcyBwdWJsaWMNCgkgKiBAdmFyIGFycmF5DQoJICovDQoJdmFyICR0ZXN0cyA9IGFycmF5KCk7DQoNCgkvKioNCgkgKiBDbGFzcyBjb25zdHJ1Y3RvciBzZXRzIHVwIHRoZSBlbnZpcm9ubWVudA0KCSAqDQoJICogQHNpbmNlIDYuNC4wLjEzDQoJICoNCgkgKiBAcmV0dXJuIHZvaWQNCgkgKi8NCglmdW5jdGlvbiBfX2NvbnN0cnVjdCgpIHsNCg0KCQkvLyBSZWdpc3RlciB0aGUgdGVzdHMNCgkJJHRoaXMtPnJlZ2lzdGVyX3Rlc3RzKCk7DQoNCgkJLy8gR3JhYiB0aGUgREIgY3JlZGVudGlhbHMgZnJvbSBQT1NUDQoJCSRjcmVkcyAgICAgICAgICAgICA9IGFycmF5KCk7DQoJCSRjcmVkc1snc2VydmVyJ10gICA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3NlcnZlcicgKTsNCgkJJGNyZWRzWyd1c2VybmFtZSddID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAndXNlcm5hbWUnICk7DQoJCSRjcmVkc1sncGFzc3dvcmQnXSA9IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApOw0KCQkkY3JlZHNbJ2RhdGFiYXNlJ10gPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdkYXRhYmFzZScgKTsNCgkJJGNyZWRzWydwcmVmaXgnXSAgID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncHJlZml4JyApOw0KDQoJCS8vIElmIHdlIGRvbid0IGhhdmUgYWxsIHRoZSBmaWVsZHMsIGRpZSB3aXRoIGVycm9yDQoJCWlmICggKCAnJyA9PSAkY3JlZHNbJ3NlcnZlciddICkgfHwgKCAnJyA9PSAkY3JlZHNbJ3VzZXJuYW1lJ10gKSB8fCAoICcnID09ICRjcmVkc1snZGF0YWJhc2UnXSApIHx8ICggJycgPT0gJGNyZWRzWydwcmVmaXgnXSApICkgew0KCQkJJHRoaXMtPnRlc3RzWydvdmVyYWxsX2Vycm9yJ10gPSAnT25lIG9yIG1vcmUgZGF0YWJhc2Ugc2V0dGluZ3Mgd2FzIGxlZnQgYmxhbmsuIEFsbCBmaWVsZHMgZXhjZXB0IG9wdGlvbmFsIHBhc3N3b3JkIGFyZSByZXF1aXJlZC4nOw0KCQkJZGllKCBqc29uX2VuY29kZSggJHRoaXMtPnRlc3RzICkgKTsNCgkJfQ0KDQoJCSR0aGlzLT5jcmVkcyA9ICRjcmVkczsNCg0KCQkvLyBSdW4gdGhlIHRlc3RzLCBvbmUgYXQgYSB0aW1lDQoJCSR0aGlzLT5ydW5fdGVzdHMoKTsNCgl9DQoNCgkvKioNCgkgKiBTZXRzIHRoZSBhcnJheSBvZiB0ZXN0cyB0aGF0IHdlIHdpbGwgcnVuIHdpdGggdGhlaXIgZGVmYXVsdCB2YWx1ZXMNCgkgKg0KCSAqIEBzaW5jZSA2LjQuMC4xMw0KCSAqDQoJICogQHJldHVybiB2b2lkDQoJICovDQoJZnVuY3Rpb24gcmVnaXN0ZXJfdGVzdHMoKSB7DQoNCgkJLy8gVGVzdHMgdmFyaWFibGVzIHRvIHBvcHVsYXRlIHdpdGggcmVzdWx0cy4NCgkJJHRoaXMtPnRlc3RzID0gYXJyYXkoDQoJCQknY29ubmVjdCcgICAgICAgICAgICAgICA9PiBmYWxzZSwgICAvLyBBYmxlIHRvIGNvbm5lY3QgJiBsb2dpbiB0byBkYiBzZXJ2ZXI/DQoJCQknY29ubmVjdF9lcnJvcicgICAgICAgICA9PiAnJywgICAgICAvLyBteXNxbCBlcnJvciBtZXNzYWdlIGluIHJlc3BvbnNlIHRvIGNvbm5lY3QgJiBsb2dpbiAoaWYgYW55KS4NCgkJCSdzZWxlY3RkYicgICAgICAgICAgICAgID0+IGZhbHNlLCAgIC8vIEFibGUgdG8gc2VsZWN0IHRoZSBkYXRhYmFzZT8NCgkJCSdzZWxlY3RkYl9lcnJvcicgICAgICAgID0+ICcnLCAgICAgIC8vIG15c3FsIGVycm9yIG1lc3NhZ2UgaW4gcmVzcG9uc2UgdG8gc2VsZWN0aW5nIChpZiBhbnkpLg0KCQkJJ2NyZWF0ZWRyb3B0YWJsZScgICAgICAgPT4gZmFsc2UsICAgLy8gYWJpbGl0eSB0byBDUkVBVEUgYSBuZXcgdGFibGUgKGFuZCBkZWxldGUgaXQpLg0KCQkJJ2NyZWF0ZWRyb3B0YWJsZV9lcnJvcicgPT4gJycsICAgICAgLy8gY3JlYXRlIHRhYmxlIG15c3FsIGVycm9yIChpZiBhbnkpLg0KCQkJJ3ByZWZpeCcgICAgICAgICAgICAgICAgPT4gZmFsc2UsICAgLy8gV2hldGhlciBvciBub3QgcHJlZml4IG1lZXRzIHRoZSBiYXJlIG1pbmltdW0gdG8gYmUgYWNjZXB0ZWQuDQoJCQkncHJlZml4X2V4aXN0cycgICAgICAgICA9PiB0cnVlLCAgICAvLyBXb3JkUHJlc3MgdGFibGVzIG1hdGNoaW5nIHByZWZpeCBmb3VuZD8NCgkJCSdwcmVmaXhfd2FybicgICAgICAgICAgID0+IHRydWUsICAgIC8vIFdhcm4gaWYgcHJlZml4IG9mIGEgYmFkIGZvcm1hdC4NCgkJCSdvdmVyYWxsX2Vycm9yJyAgICAgICAgID0+ICcnLCAgICAgIC8vIE92ZXJhbGwgZXJyb3Igb2YgdGhlIHRlc3QuIElmIG1pc3NpbmcgZmllbGRzIHRoZW4gdGhpcyB3aWxsIGJlIHdoYXQgZXJyb3JzIGFib3V0IG1pc3NpbmcgZmllbGQocykuDQoJCSk7DQoJfQ0KDQoJLyoqDQoJICogVXNlcyB0aGUgdGVzdHMgYXJyYXkgdG8gY2FsbCB0ZXN0cyBpbmRpdmlkdWFsbHkNCgkgKg0KCSAqIEBzaW5jZSA2LjQuMC4xMw0KCSAqDQoJICogQHJldHVybiB2b2lkDQoJICovDQoJZnVuY3Rpb24gcnVuX3Rlc3RzKCkgew0KCQkvLyBMb29wIHRocm91Z2ggYXJyYXkgb2YgdGVzdHMsIG9ubHkgY2FsbGluZyBvbmVzIHdoZXJlIGZ1bmN0aW9uIGV4aXN0cw0KCQlmb3JlYWNoICggJHRoaXMtPnRlc3RzIGFzICR0ZXN0ID0+ICRyZXN1bHQgKSB7DQoJCQlpZiAoIGlzX2NhbGxhYmxlKCBhcnJheSggJHRoaXMsICd0ZXN0XycgLiAkdGVzdCApICkgJiYgZW1wdHkoICR0aGlzLT50ZXN0c1skdGVzdF0gKSApIHsNCgkJCQljYWxsX3VzZXJfZnVuYyggYXJyYXkoICR0aGlzLCAndGVzdF8nIC4gJHRlc3QgKSApOw0KCQkJfQ0KCQl9DQoNCgkJZGllKCBqc29uX2VuY29kZSggJHRoaXMtPnRlc3RzICkgKTsNCgl9DQoNCgkvKioNCgkgKiBUZXN0IGZvciBEQiBDb25uZWN0IGFuZCBEQiBTZWxlY3QNCgkgKg0KCSAqIEBzaW5jZSA2LjQuMC4xMw0KCSAqDQoJICogQHJldHVybiB2b2lkDQoJICovDQoJIGZ1bmN0aW9uIHRlc3RfY29ubmVjdCgpIHsNCgkJcmVxdWlyZV9vbmNlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NsYXNzZXMvd3AtZGIucGhwJyApOw0KCQlnbG9iYWwgJHdwZGI7DQoJCSR0aGlzLT53cGRiID0gbmV3IHdwZGIoICR0aGlzLT5jcmVkc1sndXNlcm5hbWUnXSwgJHRoaXMtPmNyZWRzWydwYXNzd29yZCddLCAkdGhpcy0+Y3JlZHNbJ2RhdGFiYXNlJ10sICR0aGlzLT5jcmVkc1snc2VydmVyJ10gKTsNCgkJaWYgKCAoIGZhbHNlID09PSAkdGhpcy0+d3BkYi0+ZGJoICkgfHwgKCBudWxsID09PSAkdGhpcy0+d3BkYi0+ZGJoICkgKXsNCgkJCWlmICggZW1wdHkoICR0aGlzLT53cGRiLT51c2VfbXlzcWxpICkgKSB7DQoJCQkJJG15c3FsX2Vycm9yID0gQG15c3FsX2Vycm9yKCAkdGhpcy0+d3BkYi0+ZGJoICk7DQoJCQl9IGVsc2Ugew0KCQkJCSRteXNxbF9lcnJvciA9IEBteXNxbGlfZXJyb3IoICR0aGlzLT53cGRiLT5kYmggKTsNCgkJCX0NCgkJCSR0aGlzLT50ZXN0c1snY29ubmVjdF9lcnJvciddID0gJ1VuYWJsZSB0byBjb25uZWN0IHRvIGRhdGFiYXNlIHNlcnZlciBhbmQvb3Igc2VsZWN0IHRoZSBkYXRhYmFzZS4gRGV0YWlsczogYCcgLiAkbXlzcWxfZXJyb3IgLiAnYC4nOw0KCQkJZGllKCBqc29uX2VuY29kZSggJHRoaXMtPnRlc3RzICkgKTsNCgkJfQ0KCQkkdGhpcy0+dGVzdHNbJ2Nvbm5lY3QnXSA9IHRydWU7DQoJCSR0aGlzLT50ZXN0c1snc2VsZWN0ZGInXSA9IHRydWU7DQoJfQ0KDQoJLyoqDQoJICogVGVzdHMgdGhlIGFiaWxpdHkgdG8gY3JlYXRlIGFuZCBkcm9wIGEgdGFibGUNCgkgKg0KCSAqIEBzaW5jZSA2LjQuMC4xMw0KCSAqDQoJICogQHJldHVybiB2b2lkDQoJICovDQoJZnVuY3Rpb24gdGVzdF9jcmVhdGVkcm9wdGFibGUoKSB7DQoJCS8vIE1ha2Ugc3VyZSB3ZSd2ZSBhbHJlYWR5IGNvbm5lY3RlZC4gVGhpcyBzaG91bGQgbmV2ZXIgcnVuIHVubGVzcyBzb21lb25lIGNhbGxzIGl0IG1hbnVhbGx5IGFnYWluLg0KCQlpZiAoIGVtcHR5KCAkdGhpcy0+dGVzdHNbJ2Nvbm5lY3QnXSApICkgew0KCQkJJHRoaXMtPnRlc3RfY29ubmVjdCgpOw0KCQl9DQoNCgkJLy8gRXNjYXBlIHByZWZpeCBtYW51YWxseSBzaW5jZSB3ZSBjYW4ndCB1c2UgJHdwZGItPnByZWZpeCBhbmQgJHdwZGItPnByZXBhcmUgYWRkcyBzaW5nbGUgcXVvdGVzDQoJCWlmICggZW1wdHkoICR0aGlzLT53cGRiLT51c2VfbXlzcWxpICkgKSB7DQoJCQkkcHJlZml4ID0gbXlzcWxfcmVhbF9lc2NhcGVfc3RyaW5nKCAkdGhpcy0+Y3JlZHNbJ3ByZWZpeCddICk7DQoJCX0gZWxzZSB7DQoJCQkkcHJlZml4ID0gbXlzcWxpX3JlYWxfZXNjYXBlX3N0cmluZyggJHRoaXMtPndwZGItPmRiaCwgJHRoaXMtPmNyZWRzWydwcmVmaXgnXSApOw0KCQl9DQoNCgkJLy8gVHJ5IHRvIGRyb3AgdGVzdCB0YWJsZSBpbiBldmVudCBwcmV2aW91cyBhdHRlbXB0IGZhaWxlZC4gTm90IGEgcGFydCBvZiB0aGUgdGVzdC4gTk9URTogVGhpcyB0aHJvd3MgYW4gZXJyb3IgdG8gdGhlIFBIUCBlcnJvciBsb2cgaWYgd3BkYiBsb2dnaW5nIGVuYWJsZWQgdW5sZXNzIGVycm9ycyBhcmUgc3VwcHJlc3NlZC4NCgkJJHRoaXMtPndwZGItPnN1cHByZXNzX2Vycm9ycyggdHJ1ZSApOyAvLyBIaWRlIGVycm9ycyBpZiB0aGlzIHRlc3QgZmFpbHMgc2luY2Ugd2UgaGF2ZSBsb2dnaW5nIG9uIGJ5IGRlZmF1bHQuDQoJCSRkcm9wX3Rlc3RfdGFibGUgPSAnRFJPUCBUQUJMRSAnIC4gJHByZWZpeCAuICdidWRkeV90ZXN0JzsNCgkJJHRoaXMtPndwZGItPnF1ZXJ5KCAkZHJvcF90ZXN0X3RhYmxlICk7DQoJCSR0aGlzLT53cGRiLT5zdXBwcmVzc19lcnJvcnMoIGZhbHNlICk7DQoNCgkJLy8gQXR0ZW1wdCB0byBjcmVhdGUgdGhlIHRlc3QgdGFibGUNCgkJJGNyZWF0ZV90ZXN0X3RhYmxlID0gJ0NSRUFURSBUQUJMRSAnIC4gJHByZWZpeCAuICdidWRkeV90ZXN0IChpZCBJTlQgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQgUFJJTUFSWSBLRVkpOyc7DQoJCWlmICggRkFMU0UgIT09ICR0aGlzLT53cGRiLT5xdWVyeSggJGNyZWF0ZV90ZXN0X3RhYmxlICkgKSB7DQoJCQkvLyBEcm9wIHRlbXAgdGVzdCB0YWJsZSB3ZSBjcmVhdGVkIGJlZm9yZSB3ZSBkZWNsYXJlIHN1Y2Nlc3MuDQoJCQlpZiAoIEZBTFNFICE9PSAkdGhpcy0+d3BkYi0+cXVlcnkoICRkcm9wX3Rlc3RfdGFibGUgKSApIHsNCgkJCQkkdGhpcy0+dGVzdHNbJ2NyZWF0ZWRyb3B0YWJsZSddID0gdHJ1ZTsNCgkJCX0gZWxzZSB7IC8vIGRyb3AgZmFpbGVkLg0KCQkJCWlmICggZW1wdHkoICR0aGlzLT53cGRiLT51c2VfbXlzcWxpICkgKSB7DQoJCQkJCSRteXNxbF9lcnJubyA9IG15c3FsX2Vycm5vKCAkdGhpcy0+d3BkYi0+ZGJoICk7DQoJCQkJfSBlbHNlIHsNCgkJCQkJJG15c3FsX2Vycm5vID0gbXlzcWxpX2Vycm5vKCAkdGhpcy0+d3BkYi0+ZGJoICk7DQoJCQkJfQ0KCQkJCSR0aGlzLT50ZXN0c1snY3JlYXRlZHJvcHRhYmxlX2Vycm9yJ10gPSAnVW5hYmxlIHRvIGRlbGV0ZSB0ZW1wb3JhcnkgdGFibGUuICcgLiAkdGhpcy0+d3BkYi0+bGFzdF9lcnJvciAuICcgLSBFcnJvck5vOiBgJyAuICRteXNxbF9lcnJubyAuICdgLic7DQoJCQl9DQoJCX0NCgl9DQoNCgkvKioNCgkgKiBUZXN0cyBmb3IgZXhpc3RpbmcgdGFibGVzIHdpdGggdGhlIHNhbWUgcHJlZml4DQoJICoNCgkgKiBAc2luY2UgNi40LjAuMTMNCgkgKg0KCSAqIEByZXR1cm4gdm9pZA0KCSAqLw0KCWZ1bmN0aW9uIHRlc3RfcHJlZml4KCkgew0KCQkvLyBNYWtlIHN1cmUgd2UndmUgYWxyZWFkeSBjb25uZWN0ZWQuIFRoaXMgc2hvdWxkIG5ldmVyIGJlIHRydWUuDQoJCWlmICggZW1wdHkoICR0aGlzLT50ZXN0c1snY29ubmVjdCddICkgKSB7DQoJCQkkdGhpcy0+dGVzdF9jb25uZWN0KCk7DQoJCX0NCg0KICAgICAgICAvLyBXb3JkUHJlc3MgdGFibGVzIGV4aXN0IG1hdGNoaW5nIHByZWZpeD8NCiAgICAgICAgJHByZWZpeF9leGlzdHNfc3FsID0gJHRoaXMtPndwZGItPnByZXBhcmUoICJTSE9XIFRBQkxFUyBMSUtFICclcyc7Iiwgc3RyX3JlcGxhY2UoICdfJywgJ1xfJywgJHRoaXMtPmNyZWRzWydwcmVmaXgnXSApIC4gIiUiICk7DQoJCSRyZXN1bHQgICAgICAgICAgICA9ICR0aGlzLT53cGRiLT5nZXRfcmVzdWx0cyggJHByZWZpeF9leGlzdHNfc3FsICk7DQoJCWlmICggZW1wdHkoICRyZXN1bHQgKSApIHsgLy8gV29yZFByZXNzIHByZWZpeCBkb2VzIG5vdCBleGlzdA0KICAgICAgICAgICAgJHRoaXMtPnRlc3RzWydwcmVmaXhfZXhpc3RzJ10gPSBmYWxzZTsNCiAgICAgICAgfQ0KDQoJCS8vIE1ha2Ugc3VyZSBwcmVmaXggbWVldHMgd3Agc3RhbmRhcmRzDQoJCWlmICggISBwcmVnX21hdGNoKCd8W15hLXowLTlfXXxpJywgJHRoaXMtPmNyZWRzWydwcmVmaXgnXSApICkgeyAvLyBQcmVmaXggbWVldHMgV1Agc3RhbmRhcmRzDQoJCQkkdGhpcy0+dGVzdHNbJ3ByZWZpeCddID0gdHJ1ZTsNCgkJCWlmICggcHJlZ19tYXRjaCgnL15bYS16MC05XStfJC9pJywgJHRoaXMtPmNyZWRzWydwcmVmaXgnXSApICkgeyAvLyBQcmVmaXggcGFzc2VzIHdpdGggbm8gd2FybmluZy4NCgkJCQkkdGhpcy0+dGVzdHNbJ3ByZWZpeF93YXJuJ10gPSBmYWxzZTsNCgkJCX0gZWxzZSB7DQoJCQkJJHRoaXMtPnRlc3RzWydwcmVmaXhfd2FybiddID0gdHJ1ZTsNCgkJCX0NCgkJfQ0KDQoJfQ0KfQ0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/test-db.php,importbuddy/classes/test-db.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db.php,importbuddy/classes/wp-db.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db_NEW.php,importbuddy/classes/wp-db_NEW.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db_NEW.php,importbuddy/classes/wp-db_NEW.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/classes/wp-db_OLD.php,importbuddy/classes/wp-db_OLD.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/classes/wp-db_OLD.php,importbuddy/classes/wp-db_OLD.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
PD9waHANCmNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2FqYXggZXh0ZW5kcyBwYl9iYWNrdXBidWRkeV9hamF4Y29yZSB7DQp9
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax.php,importbuddy/controllers/ajax.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/index.php,importbuddy/controllers/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/index.php,importbuddy/controllers/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/index.php,importbuddy/css/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/index.php,importbuddy/css/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/nprogress.css,importbuddy/css/nprogress.css
LyogTWFrZSBjbGlja3MgcGFzcy10aHJvdWdoICovDQojbnByb2dyZXNzIHsNCiAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQp9DQoNCiNucHJvZ3Jlc3MgLmJhciB7DQogIGJhY2tncm91bmQ6ICMyOWQ7DQoNCiAgcG9zaXRpb246IGZpeGVkOw0KICB6LWluZGV4OiA3NTsNCiAgdG9wOiA0OHB4Ow0KICBsZWZ0OiAwOw0KDQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDRweDsNCn0NCg0KLyogRmFuY3kgYmx1ciBlZmZlY3QgKi8NCiNucHJvZ3Jlc3MgLnBlZyB7DQoNCn0NCg0KLyogUmVtb3ZlIHRoZXNlIHRvIGdldCByaWQgb2YgdGhlIHNwaW5uZXIgKi8NCiNucHJvZ3Jlc3MgLnNwaW5uZXIgew0KICBkaXNwbGF5OiBibG9jazsNCiAgcG9zaXRpb246IGZpeGVkOw0KICB6LWluZGV4OiAxMDMxOw0KICB0b3A6IDY1cHg7DQogIHJpZ2h0OiAxNXB4Ow0KfQ0KDQojbnByb2dyZXNzIC5zcGlubmVyLWljb24gew0KICB3aWR0aDogNDBweDsNCiAgaGVpZ2h0OiA0MHB4Ow0KICBib3gtc2l6aW5nOiBib3JkZXItYm94Ow0KDQogIGJvcmRlcjogc29saWQgNHB4IHRyYW5zcGFyZW50Ow0KICBib3JkZXItdG9wLWNvbG9yOiAjMjlkOw0KICBib3JkZXItbGVmdC1jb2xvcjogIzI5ZDsNCiAgYm9yZGVyLXJhZGl1czogNTAlOw0KDQogIC13ZWJraXQtYW5pbWF0aW9uOiBucHJvZ3Jlc3Mtc3Bpbm5lciA0MDBtcyBsaW5lYXIgaW5maW5pdGU7DQogICAgICAgICAgYW5pbWF0aW9uOiBucHJvZ3Jlc3Mtc3Bpbm5lciA0MDBtcyBsaW5lYXIgaW5maW5pdGU7DQp9DQoNCkAtd2Via2l0LWtleWZyYW1lcyBucHJvZ3Jlc3Mtc3Bpbm5lciB7DQogIDAlICAgeyAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9DQogIDEwMCUgeyAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH0NCn0NCg0KQGtleWZyYW1lcyBucHJvZ3Jlc3Mtc3Bpbm5lciB7DQogIDAlICAgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfQ0KICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfQ0KfQ0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/nprogress.css,importbuddy/css/nprogress.css
###PACKDATA,FILE_START,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css

###PACKDATA,FILE_END,/_importbuddy/importbuddy/css/style.css,importbuddy/css/style.css
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
R0lGODlhBgAHALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAGAAcAAAQVEAFFVUrD0HvF4RfCEYGVFAeFaFUEADs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/collapsed.gif,importbuddy/images/collapsed.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
R0lGODlhBwAGALMKAM7Ozr6+vq6urp6enoWFhaampt7e3u/v742NjX19ff///wAAAAAAAAAAAAAAAAAAACH5BAEAAAoALAAAAAAHAAYAAAQWEKU5kaETqEKHUgcxGZ8SJEL5IccXAQA7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/expanded.gif,importbuddy/images/expanded.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAfCAIAAACgQJBPAAAAA3NCSVQICAjb4U/gAAAACXBIWXMAAAsSAAALEgHS3X78AAAAIXRFWHRTb2Z0d2FyZQBNYWNyb21lZGlhIEZpcmV3b3JrcyA0LjDqJid1AAAAFnRFWHRDcmVhdGlvbiBUaW1lADEwLzI0LzA4KQ6r+wAAAClJREFUeJxjfPv2LQMSYPn//z8yn4kBFaDzqa0eXZ5U9QMtT6l5tFYPADsXLPcJwrwLAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/gray-grad.png,importbuddy/images/gray-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAAAk1JREFUeNqkkz1MU2EUhp97b6FGoSAMaoBYAimMxgSdHFCpa/1ZXIyToZMOhCgDgyFqjFGm1jhoTDT+JHo7oCYMxp/JgdiAaATibeUvESjtNdD29rscB+GKAeLgSc7ynfd87zk576uJCP8Tvq0KqYTPD0SBZDCi3myF0zabIJXwnQOigabz+5xcksL82zjQH4yosQ1gEfHSMo2QZRqx6df7pZhNylrkJvolPVArlml0r8eLCOubu9MDtZIdvyWu627I4s9vMvv+sFimEbNMI+R9YJnGLss0YjPv2iWfGxfHcWRizpaJOVuO3f0gXS9GZWgyI3P2sjiOI5mvNyU9UONNo1mmEato7olWNPd4a515PsrLsfm/Vu070kRnWz0Abj5N9uNpSvbwQR2Ibgt2o5RCKYW1sERluQ7AvUgrl9sbAfiezbOwVEAphZTV4a/vBIjqgNeslCK1uMSTTz9oCPjpCFZxqrUWgDtDM6Qyyx5O9AqAah1IOrmkV2jbvZ3eQw1M2kXCD0YIPxwG4PHxEC07yz1ccfYRwH0diOdHTlCYvO0Vs3mHky012EVFZblBR2MVi8sOSilKhQz5z2dRC6/iwYhKaCJCKuELARe06nDUaLwBRgAAcyxLXWUZB/bs+K2Z7CCu1QWufTUYUT0blJhK+K5gBC5pe69DVcefE7g2MtUHmWcJIB6MqMEtpZxK+MJAVAJHI9JwDS3/BW3qIjjTHus/veBNs2qmVdanm5oJMIAywA8Yuq4bq28aoANrDC7grqyslIAS4ADurwEAaepxmqgtIWwAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_16x16.png,importbuddy/images/icon_16x16.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAIk0lEQVR42n1WWVCb1xU2dmKaTu2x04e2k7STtn5q8lYnkzw0T+lMJ3lo7ZlMM5lkYhu8PrSk8aSk8VKQDDYBaqABswnEYkDsNkLsSGwChI2QhA3CrDb7ItCKWPT1nMs//9ipRpr55t7733PO/c6555yrfQD+D0VFxYfa2/WfWaw285DVOjtksRCsMsxDFsLQrJm/C7woY7buwUKw2myMSUNHR2V5RcV7PzwrKIGu7u5zk1NTAy6Pd9vpdsPpehEbEpweD5xeH41ekJwMl9sDt4fhhcfng8frDcw8feYYePCgUqFUvBySgFKpDH/4cNDk8/u3SRFEAu4fYmcXbgAupwvOmadwrm+ItWd3d+9QIsXw+jZl+Le2A7bh4dmbN28eCUmABSw225JkRD6UvRJkAoBjyILVmFg4LlyEO1cFx6VLWL12DY5BMzwAeb1JEAT25t49EqP2MW9iYuKvQxIggV+OjIy6+HAXRUAmQGDjc3TgzG+PYf7IESxfuIBdAKtRUVg8+iqeHjuGucxMeAUJIu99Php+TExNBVJSUn8fksDtlJQ3xycnt5mxiIBEwgfgSZYKluNvY62kFI7mZmyMjYl95/g4HK1tWK2shPWddzD2fSbLs/4L10F5gIyMOx+EJJCenv7uNN0rK8jKOztYso5Af+Q1dL3/BwwUFaGfPB1tb4eDks6u16MvPR0mtRqdtN92+GdYHhyGd3dXSkICjXPz81CpVH8NSSArK+vDZ7NzcO/dv+y9/dZ/URf2EnQ/PYra8HBUkar+88+xFAjAcOYMqsP2ie/1R49AG3YQdsV/xFW4PB45iguLSygqKroYkoC6oOD0wuIiMZaugOAH8FiRiDISLz38E1QfPoTK/fvR8PHHsJNXTZ9+Ck1YGKoPHUIZoZTIDF+NxybA+jKWlleg0Wi+DUmgtLQsmgXlHCD4dgOY7jKiPOzHSN9/AHk/Ckdx+EHk02FZb7yB/MOHUXyQ1hSB9AMvE9FwTOo74RNl6ZPtrKytoab2XlJIAtU1NYkraw65fj0S+BqM0VeRTd4lkFrygZeQSuP3hLR9YUgiYt/RPJPQ/VU0vIGA5LlXvoJVxzrqdQ15IQmQgGptfYOT5oVr4Ll7ewd9t1OR/9rrSCLVeMINaeS16ue/QG9iMlxb21TCPqkjSgRovb7hRGtbe21IAiRQs+50ygQkL6Rk8olILFI5mUtK0BodDd3582j7ZzTMRcWYn54R+y5uzS4PEWAI74XuBnXOzq7ujpAESMBAff557+WKEIbZq00/HyTglSDq3u/nfQG5cxLEKOn2m0zm+Pj4/UEJxMXFhfX1mwZJWW4eWxR2n3+LjPC3PVJMUESDiLBx3pN0+CB5zvt+0ic7siODZvPErVu3XglKICEh4RV6iMbZACstr67B9OAhxp5MiCtZWlnF7PyC2JukZmV6OEjNZYHkVoUsdVCSWYGD7nqean6KrsRssWKF9liHydmGH60kJye/GpQAbRy1DA8vsVfbVEJthg7U3K9DXkERns3No6K6Blm5ecJgQfFd9PT2oZtQV9+AWpLjUd/RKcnWoqyiktZdKNGUy6/k6NgTX1pa2m+CEkhNTf3VyKjdzYI7VEbV9+4jv7AYd3JyMfx4hA4toXURWtoNaGptB/8mpqYRdflrIqDF41E7GptbRLmVV9XgbpkGFVXVPIrwe+lKJqenA3cyM48HJZCRkfHW+MTkDicgR4C97OjqQXFZGbJV+Si4W4IsVR7ukkeaymrYn4yj29iHqtr7RLYOWl2D8PrBoJkJMMR83emSK4ofpFyV6o9BCeTk5Lw3RXfr9u2xfWwfQ2u7nr3n0FGycR7QXZPXZosNrXoDJianKA8WsUjdc5zmtkcjFCE9rZc5B8ThWzvyHxXMzs3ze/BJUAJqtfqjp7NzLMz/YNDbb+IokLdVIqna6X65Ah6N2DFktaGBwp2br+b75xoX+aKmfmAgOUo+Js5eMyGppDfFg1Sm0VwKSqCkpPTM3MICKwnW2Xn5RGKAjfLhnA9cdmxQhD1XXYAZIlxcWoaWNj1yiMyzuQVOOpEThXRlTLKyphbbZI91OVLU7q8EJVBVXf3NwuKyaKObVPvpmdnCWHJqGoz9Jj6IciMgQn9PW09rjegTnT1G1NZpSbaC655J88FCJ/rKNXqE1jkHmIAoV229LjkoAW19fRLXOgsyklPSONzioDpKsJw8tcgFlboQ+s5u3MnOxdj4hIiUobuHE5X/96GQqoVJ8qOWkZ3DjYy7oETAgeaW1vygBJpbWvKYodRKOayU1VXQNTaDHyiLbZhKqpwTUyRXY0srR4hKso3/rotDS2hf19RM+06h02sa4INlcInqDYZ7QQnoDR011MWIgPjfz62U2YuK4O/ccqVyYuM8ym8G77McJy9DehPIhuw9wSfmPcberqAEjL19/RxCNs6C7CU/oQ7GOo8btCc8k0F7MlieweQlsB0ZvB6j3tE/MPAoKAFqrdP9Aw8kb7bIOz95xz1cfhX3XkSG5JX8XRo9UlQYXimCm1vbhB1RhiayT2fMBCXwXVJSTxNlbyPdoa6hUaCeoWvgkdAg5g1aLZrq6qCjeYuWRx2a6FtjvRZa1mM0NqGBwLZkkO2WtnakpKbaghL429+jymJiFVDeiJOhuHEDCqUSsYo9KGNjcSE1E5HpKnyrvInPMosRHZeAyLRcXLx9h/eFvJL0SP9FxMUhRqFA1Jf/aA1K4Nz58xlXrl6TDlMIMCHGv8lwTEwMrscocVylxe8Km/FJYi5eL+zAidsFeDO3Ce9m3CM5JcnFso4MthcjOXDt+nVcvHSpIiiBv5w48f4XX5wyRJ49a4yIfB6RxogIAo2nz54zfnhZafzT1/HGk1H/Mn7wTYLxxJdXxPqjywrjaZaPiDCeIfkzJC/py7ZOnTrVefLkyT9DOvN/1S/OiQQ06hAAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/icon_32x32.png,importbuddy/images/icon_32x32.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/index.php,importbuddy/images/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/index.php,importbuddy/images/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
R0lGODlhEAAQAPQAAObm5iV9ptvf4oy1x87Y3VmZt4GuxCV9pmeguz+LrqbD0LXL1TSFqpu9zSd+pk2SsnOnwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAEAAQAAAFdyAgAgIJIeWoAkRCCMdBkKtIHIngyMKsErPBYbADpkSCwhDmQCBethRB6Vj4kFCkQPG4IlWDgrNRIwnO4UKBXDufzQvDMaoSDBgFb886MiQadgNABAokfCwzBA8LCg0Egl8jAggGAA1kBIA1BAYzlyILczULC2UhACH5BAkKAAAALAAAAAAQABAAAAV2ICACAmlAZTmOREEIyUEQjLKKxPHADhEvqxlgcGgkGI1DYSVAIAWMx+lwSKkICJ0QsHi9RgKBwnVTiRQQgwF4I4UFDQQEwi6/3YSGWRRmjhEETAJfIgMFCnAKM0KDV4EEEAQLiF18TAYNXDaSe3x6mjidN1s3IQAh+QQJCgAAACwAAAAAEAAQAAAFeCAgAgLZDGU5jgRECEUiCI+yioSDwDJyLKsXoHFQxBSHAoAAFBhqtMJg8DgQBgfrEsJAEAg4YhZIEiwgKtHiMBgtpg3wbUZXGO7kOb1MUKRFMysCChAoggJCIg0GC2aNe4gqQldfL4l/Ag1AXySJgn5LcoE3QXI3IQAh+QQJCgAAACwAAAAAEAAQAAAFdiAgAgLZNGU5joQhCEjxIssqEo8bC9BRjy9Ag7GILQ4QEoE0gBAEBcOpcBA0DoxSK/e8LRIHn+i1cK0IyKdg0VAoljYIg+GgnRrwVS/8IAkICyosBIQpBAMoKy9dImxPhS+GKkFrkX+TigtLlIyKXUF+NjagNiEAIfkECQoAAAAsAAAAABAAEAAABWwgIAICaRhlOY4EIgjH8R7LKhKHGwsMvb4AAy3WODBIBBKCsYA9TjuhDNDKEVSERezQEL0WrhXucRUQGuik7bFlngzqVW9LMl9XWvLdjFaJtDFqZ1cEZUB0dUgvL3dgP4WJZn4jkomWNpSTIyEAIfkECQoAAAAsAAAAABAAEAAABX4gIAICuSxlOY6CIgiD8RrEKgqGOwxwUrMlAoSwIzAGpJpgoSDAGifDY5kopBYDlEpAQBwevxfBtRIUGi8xwWkDNBCIwmC9Vq0aiQQDQuK+VgQPDXV9hCJjBwcFYU5pLwwHXQcMKSmNLQcIAExlbH8JBwttaX0ABAcNbWVbKyEAIfkECQoAAAAsAAAAABAAEAAABXkgIAICSRBlOY7CIghN8zbEKsKoIjdFzZaEgUBHKChMJtRwcWpAWoWnifm6ESAMhO8lQK0EEAV3rFopIBCEcGwDKAqPh4HUrY4ICHH1dSoTFgcHUiZjBhAJB2AHDykpKAwHAwdzf19KkASIPl9cDgcnDkdtNwiMJCshACH5BAkKAAAALAAAAAAQABAAAAV3ICACAkkQZTmOAiosiyAoxCq+KPxCNVsSMRgBsiClWrLTSWFoIQZHl6pleBh6suxKMIhlvzbAwkBWfFWrBQTxNLq2RG2yhSUkDs2b63AYDAoJXAcFRwADeAkJDX0AQCsEfAQMDAIPBz0rCgcxky0JRWE1AmwpKyEAIfkECQoAAAAsAAAAABAAEAAABXkgIAICKZzkqJ4nQZxLqZKv4NqNLKK2/Q4Ek4lFXChsg5ypJjs1II3gEDUSRInEGYAw6B6zM4JhrDAtEosVkLUtHA7RHaHAGJQEjsODcEg0FBAFVgkQJQ1pAwcDDw8KcFtSInwJAowCCA6RIwqZAgkPNgVpWndjdyohACH5BAkKAAAALAAAAAAQABAAAAV5ICACAimc5KieLEuUKvm2xAKLqDCfC2GaO9eL0LABWTiBYmA06W6kHgvCqEJiAIJiu3gcvgUsscHUERm+kaCxyxa+zRPk0SgJEgfIvbAdIAQLCAYlCj4DBw0IBQsMCjIqBAcPAooCBg9pKgsJLwUFOhCZKyQDA3YqIQAh+QQJCgAAACwAAAAAEAAQAAAFdSAgAgIpnOSonmxbqiThCrJKEHFbo8JxDDOZYFFb+A41E4H4OhkOipXwBElYITDAckFEOBgMQ3arkMkUBdxIUGZpEb7kaQBRlASPg0FQQHAbEEMGDSVEAA1QBhAED1E0NgwFAooCDWljaQIQCE5qMHcNhCkjIQAh+QQJCgAAACwAAAAAEAAQAAAFeSAgAgIpnOSoLgxxvqgKLEcCC65KEAByKK8cSpA4DAiHQ/DkKhGKh4ZCtCyZGo6F6iYYPAqFgYy02xkSaLEMV34tELyRYNEsCQyHlvWkGCzsPgMCEAY7Cg04Uk48LAsDhRA8MVQPEF0GAgqYYwSRlycNcWskCkApIyEAOwAAAAAAAAAAAA==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading.gif,importbuddy/images/loading.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif

###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/loading_large.gif,importbuddy/images/loading_large.gif
###PACKDATA,FILE_START,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
iVBORw0KGgoAAAANSUhEUgAAAAUAAAAeCAYAAADkftS9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAACF0RVh0U29mdHdhcmUATWFjcm9tZWRpYSBGaXJld29ya3MgNC4w6iYndQAAABZ0RVh0Q3JlYXRpb24gVGltZQAxMS8xNy8wONpsdXEAAAAlSURBVHicY/z///9/BjTAhC7AwMDAwIJFIXbBoaJ9qLhz+IUSAIMMOibeSzRBAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/_importbuddy/importbuddy/images/white-grad.png,importbuddy/images/white-grad.png
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ejs.js,importbuddy/js/ejs.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ejs.js,importbuddy/js/ejs.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsNCglqUXVlcnkod2luZG93KS5sb2FkKGZ1bmN0aW9uKCl7DQoJCWlmICggalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfd29ya2luZycpLmlzKCc6dmlzaWJsZScpICkgew0KCQkJalF1ZXJ5KCcjcGJfaW1wb3J0YnVkZHlfd29ya2luZycpLnJlcGxhY2VXaXRoKA0KCQkJCWpRdWVyeSgnI3BiX2ltcG9ydGJ1ZGR5X2JsYW5rYWxlcnQnKS5odG1sKCkucmVwbGFjZSggJyNUSVRMRSMnLCAnUEhQIFRpbWVvdXQgb3IgRmF0YWwgRXJyb3IgT2NjdXJyZWQnICkucmVwbGFjZSggJyNNRVNTQUdFIycsICdUaGUgcGFnZSBkaWQgbm90IGZpbmlzaCBsb2FkaW5nIGFzIGV4cGVjdGVkLiAgVGhlIG1vc3QgY29tbW9uIGNhdXNlIGZvciB0aGlzIGlzIHRoZSBQSFAgcHJvY2VzcyB0YWtpbmcgbW9yZSB0aW1lIHRoYW4gaXQgaGFzIGJlZW4gYWxsb3dlZCBieSB5b3VyIGhvc3QgKHBocC5pbmkgc2V0dGluZyA8aT5tYXhfZXhlY3V0aW9uX3RpbWU8L2k+KS4gSWYgYSBQSFAgZXJyb3IgaXMgZGlzcGxheWVkIGFib3ZlIHRoaXMgY2FuIGFsc28gY2F1c2UgdGhpcyBlcnJvci4nICkNCgkJCSk7DQoJCX0NCgl9KTsNCn0pOw0KDQpmdW5jdGlvbiBsb2FkVG9vbHRpcHMoKSB7DQoJalF1ZXJ5KCcucGx1Z2luYnVkZHlfdGlwJykudG9vbHRpcCh7DQoJCXRyYWNrOiB0cnVlLA0KCQlkZWxheTogMCwNCgkJc2hvd1VSTDogZmFsc2UsDQoJCXNob3dCb2R5OiAiIC0gIiwNCgkJZmFkZTogMjUwDQoJfSk7DQp9DQoNCmpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7DQoJbG9hZFRvb2x0aXBzKCk7DQoJDQoJalF1ZXJ5KCcudG9nZ2xlJykuY2xpY2soZnVuY3Rpb24oZSkgew0KCQlqUXVlcnkoICcjdG9nZ2xlLScgKyBqUXVlcnkodGhpcykuYXR0cignaWQnKSApLnNsaWRlVG9nZ2xlKCk7DQoJfSk7DQoJDQoJalF1ZXJ5KCcub3B0aW9uX3RvZ2dsZScpLmNoYW5nZShmdW5jdGlvbihlKSB7DQoJCWlmIChqUXVlcnkodGhpcykuYXR0cignY2hlY2tlZCcpKSB7DQoJCQlqUXVlcnkoJy4nICsgalF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykgKyAnX3RvZ2dsZScgKS5zbGlkZVRvZ2dsZSgpOw0KCQl9IGVsc2Ugew0KCQkJalF1ZXJ5KCcuJyArIGpRdWVyeSh0aGlzKS5hdHRyKCdpZCcpICsgJ190b2dnbGUnICkuc2xpZGVUb2dnbGUoKTsNCgkJfQ0KCX0pOw0KCQ0KCQ0KfSk7DQoNCmZ1bmN0aW9uIGJhY2t1cGJ1ZGR5X3NhdmVMb2dBc0ZpbGUoKSB7DQoJdmFyIHRleHRGaWxlQXNCbG9iID0gbmV3IEJsb2IoWyBqUXVlcnkoICcjYmFja3VwYnVkZHlfbWVzc2FnZXMnICkudGV4dCgpIF0sIHt0eXBlOid0ZXh0L3BsYWluJ30pOw0KCXZhciBmaWxlTmFtZVRvU2F2ZUFzID0gJ2ltcG9ydGJ1ZGR5LnR4dCc7DQoNCgl2YXIgZG93bmxvYWRMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOw0KCWRvd25sb2FkTGluay5kb3dubG9hZCA9IGZpbGVOYW1lVG9TYXZlQXM7DQoJZG93bmxvYWRMaW5rLmlubmVySFRNTCA9ICJEb3dubG9hZCBGaWxlIjsNCglkb3dubG9hZExpbmsuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCAnX25ldycpOyAvLyBTYWZhcmkgbG9hZHMgdGhpcyBsaW5rIGFzIGEgcGFnZSBpbnN0ZWFkIG9mIGRpcmVjdGx5IGRvd25sb2FkaW5nLg0KCWRvd25sb2FkTGluay5ocmVmID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwodGV4dEZpbGVBc0Jsb2IpOw0KCWRvd25sb2FkTGluay5vbmNsaWNrID0gYmFja3VwYnVkZHlfZGVzdHJveUNsaWNrZWRFbGVtZW50Ow0KCWRvd25sb2FkTGluay5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOw0KCWRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG93bmxvYWRMaW5rKTsNCg0KCWRvd25sb2FkTGluay5jbGljaygpOw0KfQ0KDQpmdW5jdGlvbiBiYWNrdXBidWRkeV9kZXN0cm95Q2xpY2tlZEVsZW1lbnQoZXZlbnQpIHsNCiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGV2ZW50LnRhcmdldCk7DQp9
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/importbuddy.js,importbuddy/js/importbuddy.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/index.php,importbuddy/js/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/index.php,importbuddy/js/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js
LyohIGpRdWVyeSB2MS4xMS4wIHwgKGMpIDIwMDUsIDIwMTQgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gfCBqcXVlcnkub3JnL2xpY2Vuc2UgKi8NCiFmdW5jdGlvbihhLGIpeyJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWEuZG9jdW1lbnQ/YihhLCEwKTpmdW5jdGlvbihhKXtpZighYS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQiKTtyZXR1cm4gYihhKX06YihhKX0oInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oYSxiKXt2YXIgYz1bXSxkPWMuc2xpY2UsZT1jLmNvbmNhdCxmPWMucHVzaCxnPWMuaW5kZXhPZixoPXt9LGk9aC50b1N0cmluZyxqPWguaGFzT3duUHJvcGVydHksaz0iIi50cmltLGw9e30sbT0iMS4xMS4wIixuPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBuLmZuLmluaXQoYSxiKX0sbz0vXltcc1x1RkVGRlx4QTBdK3xbXHNcdUZFRkZceEEwXSskL2cscD0vXi1tcy0vLHE9Ly0oW1xkYS16XSkvZ2kscj1mdW5jdGlvbihhLGIpe3JldHVybiBiLnRvVXBwZXJDYXNlKCl9O24uZm49bi5wcm90b3R5cGU9e2pxdWVyeTptLGNvbnN0cnVjdG9yOm4sc2VsZWN0b3I6IiIsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBkLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT8wPmE/dGhpc1thK3RoaXMubGVuZ3RoXTp0aGlzW2FdOmQuY2FsbCh0aGlzKX0scHVzaFN0YWNrOmZ1bmN0aW9uKGEpe3ZhciBiPW4ubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGEpO3JldHVybiBiLnByZXZPYmplY3Q9dGhpcyxiLmNvbnRleHQ9dGhpcy5jb250ZXh0LGJ9LGVhY2g6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbi5lYWNoKHRoaXMsYSxiKX0sbWFwOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhuLm1hcCh0aGlzLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEuY2FsbChiLGMsYil9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGQuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5sZW5ndGgsYz0rYSsoMD5hP2I6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGM+PTAmJmI+Yz9bdGhpc1tjXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKG51bGwpfSxwdXNoOmYsc29ydDpjLnNvcnQsc3BsaWNlOmMuc3BsaWNlfSxuLmV4dGVuZD1uLmZuLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBhLGIsYyxkLGUsZixnPWFyZ3VtZW50c1swXXx8e30saD0xLGk9YXJndW1lbnRzLmxlbmd0aCxqPSExO2ZvcigiYm9vbGVhbiI9PXR5cGVvZiBnJiYoaj1nLGc9YXJndW1lbnRzW2hdfHx7fSxoKyspLCJvYmplY3QiPT10eXBlb2YgZ3x8bi5pc0Z1bmN0aW9uKGcpfHwoZz17fSksaD09PWkmJihnPXRoaXMsaC0tKTtpPmg7aCsrKWlmKG51bGwhPShlPWFyZ3VtZW50c1toXSkpZm9yKGQgaW4gZSlhPWdbZF0sYz1lW2RdLGchPT1jJiYoaiYmYyYmKG4uaXNQbGFpbk9iamVjdChjKXx8KGI9bi5pc0FycmF5KGMpKSk/KGI/KGI9ITEsZj1hJiZuLmlzQXJyYXkoYSk/YTpbXSk6Zj1hJiZuLmlzUGxhaW5PYmplY3QoYSk/YTp7fSxnW2RdPW4uZXh0ZW5kKGosZixjKSk6dm9pZCAwIT09YyYmKGdbZF09YykpO3JldHVybiBnfSxuLmV4dGVuZCh7ZXhwYW5kbzoialF1ZXJ5IisobStNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cRC9nLCIiKSxpc1JlYWR5OiEwLGVycm9yOmZ1bmN0aW9uKGEpe3Rocm93IG5ldyBFcnJvcihhKX0sbm9vcDpmdW5jdGlvbigpe30saXNGdW5jdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4iZnVuY3Rpb24iPT09bi50eXBlKGEpfSxpc0FycmF5OkFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGEpe3JldHVybiJhcnJheSI9PT1uLnR5cGUoYSl9LGlzV2luZG93OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hJiZhPT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3JldHVybiBhLXBhcnNlRmxvYXQoYSk+PTB9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7Zm9yKGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH0saXNQbGFpbk9iamVjdDpmdW5jdGlvbihhKXt2YXIgYjtpZighYXx8Im9iamVjdCIhPT1uLnR5cGUoYSl8fGEubm9kZVR5cGV8fG4uaXNXaW5kb3coYSkpcmV0dXJuITE7dHJ5e2lmKGEuY29uc3RydWN0b3ImJiFqLmNhbGwoYSwiY29uc3RydWN0b3IiKSYmIWouY2FsbChhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwiaXNQcm90b3R5cGVPZiIpKXJldHVybiExfWNhdGNoKGMpe3JldHVybiExfWlmKGwub3duTGFzdClmb3IoYiBpbiBhKXJldHVybiBqLmNhbGwoYSxiKTtmb3IoYiBpbiBhKTtyZXR1cm4gdm9pZCAwPT09Ynx8ai5jYWxsKGEsYil9LHR5cGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/YSsiIjoib2JqZWN0Ij09dHlwZW9mIGF8fCJmdW5jdGlvbiI9PXR5cGVvZiBhP2hbaS5jYWxsKGEpXXx8Im9iamVjdCI6dHlwZW9mIGF9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oYil7YiYmbi50cmltKGIpJiYoYS5leGVjU2NyaXB0fHxmdW5jdGlvbihiKXthLmV2YWwuY2FsbChhLGIpfSkoYil9LGNhbWVsQ2FzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHAsIm1zLSIpLnJlcGxhY2UocSxyKX0sbm9kZU5hbWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yi50b0xvd2VyQ2FzZSgpfSxlYWNoOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlPTAsZj1hLmxlbmd0aCxnPXMoYSk7aWYoYyl7aWYoZyl7Zm9yKDtmPmU7ZSsrKWlmKGQ9Yi5hcHBseShhW2VdLGMpLGQ9PT0hMSlicmVha31lbHNlIGZvcihlIGluIGEpaWYoZD1iLmFwcGx5KGFbZV0sYyksZD09PSExKWJyZWFrfWVsc2UgaWYoZyl7Zm9yKDtmPmU7ZSsrKWlmKGQ9Yi5jYWxsKGFbZV0sZSxhW2VdKSxkPT09ITEpYnJlYWt9ZWxzZSBmb3IoZSBpbiBhKWlmKGQ9Yi5jYWxsKGFbZV0sZSxhW2VdKSxkPT09ITEpYnJlYWs7cmV0dXJuIGF9LHRyaW06ayYmIWsuY2FsbCgiXHVmZWZmXHhhMCIpP2Z1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPyIiOmsuY2FsbChhKX06ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/IiI6KGErIiIpLnJlcGxhY2UobywiIil9LG1ha2VBcnJheTpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fFtdO3JldHVybiBudWxsIT1hJiYocyhPYmplY3QoYSkpP24ubWVyZ2UoYywic3RyaW5nIj09dHlwZW9mIGE/W2FdOmEpOmYuY2FsbChjLGEpKSxjfSxpbkFycmF5OmZ1bmN0aW9uKGEsYixjKXt2YXIgZDtpZihiKXtpZihnKXJldHVybiBnLmNhbGwoYixhLGMpO2ZvcihkPWIubGVuZ3RoLGM9Yz8wPmM/TWF0aC5tYXgoMCxkK2MpOmM6MDtkPmM7YysrKWlmKGMgaW4gYiYmYltjXT09PWEpcmV0dXJuIGN9cmV0dXJuLTF9LG1lcmdlOmZ1bmN0aW9uKGEsYil7dmFyIGM9K2IubGVuZ3RoLGQ9MCxlPWEubGVuZ3RoO3doaWxlKGM+ZClhW2UrK109YltkKytdO2lmKGMhPT1jKXdoaWxlKHZvaWQgMCE9PWJbZF0pYVtlKytdPWJbZCsrXTtyZXR1cm4gYS5sZW5ndGg9ZSxhfSxncmVwOmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQsZT1bXSxmPTAsZz1hLmxlbmd0aCxoPSFjO2c+ZjtmKyspZD0hYihhW2ZdLGYpLGQhPT1oJiZlLnB1c2goYVtmXSk7cmV0dXJuIGV9LG1hcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZj0wLGc9YS5sZW5ndGgsaD1zKGEpLGk9W107aWYoaClmb3IoO2c+ZjtmKyspZD1iKGFbZl0sZixjKSxudWxsIT1kJiZpLnB1c2goZCk7ZWxzZSBmb3IoZiBpbiBhKWQ9YihhW2ZdLGYsYyksbnVsbCE9ZCYmaS5wdXNoKGQpO3JldHVybiBlLmFwcGx5KFtdLGkpfSxndWlkOjEscHJveHk6ZnVuY3Rpb24oYSxiKXt2YXIgYyxlLGY7cmV0dXJuInN0cmluZyI9PXR5cGVvZiBiJiYoZj1hW2JdLGI9YSxhPWYpLG4uaXNGdW5jdGlvbihhKT8oYz1kLmNhbGwoYXJndW1lbnRzLDIpLGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShifHx0aGlzLGMuY29uY2F0KGQuY2FsbChhcmd1bWVudHMpKSl9LGUuZ3VpZD1hLmd1aWQ9YS5ndWlkfHxuLmd1aWQrKyxlKTp2b2lkIDB9LG5vdzpmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX0sc3VwcG9ydDpsfSksbi5lYWNoKCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIi5zcGxpdCgiICIpLGZ1bmN0aW9uKGEsYil7aFsiW29iamVjdCAiK2IrIl0iXT1iLnRvTG93ZXJDYXNlKCl9KTtmdW5jdGlvbiBzKGEpe3ZhciBiPWEubGVuZ3RoLGM9bi50eXBlKGEpO3JldHVybiJmdW5jdGlvbiI9PT1jfHxuLmlzV2luZG93KGEpPyExOjE9PT1hLm5vZGVUeXBlJiZiPyEwOiJhcnJheSI9PT1jfHwwPT09Ynx8Im51bWJlciI9PXR5cGVvZiBiJiZiPjAmJmItMSBpbiBhfXZhciB0PWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGksaixrLGwsbSxuLG8scCxxLHIscz0ic2l6emxlIistbmV3IERhdGUsdD1hLmRvY3VtZW50LHU9MCx2PTAsdz1lYigpLHg9ZWIoKSx5PWViKCksej1mdW5jdGlvbihhLGIpe3JldHVybiBhPT09YiYmKGo9ITApLDB9LEE9InVuZGVmaW5lZCIsQj0xPDwzMSxDPXt9Lmhhc093blByb3BlcnR5LEQ9W10sRT1ELnBvcCxGPUQucHVzaCxHPUQucHVzaCxIPUQuc2xpY2UsST1ELmluZGV4T2Z8fGZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wLGM9dGhpcy5sZW5ndGg7Yz5iO2IrKylpZih0aGlzW2JdPT09YSlyZXR1cm4gYjtyZXR1cm4tMX0sSj0iY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWQiLEs9IltcXHgyMFxcdFxcclxcblxcZl0iLEw9Iig/OlxcXFwufFtcXHctXXxbXlxceDAwLVxceGEwXSkrIixNPUwucmVwbGFjZSgidyIsIncjIiksTj0iXFxbIitLKyIqKCIrTCsiKSIrSysiKig/OihbKl4kfCF+XT89KSIrSysiKig/OihbJ1wiXSkoKD86XFxcXC58W15cXFxcXSkqPylcXDN8KCIrTSsiKXwpfCkiK0srIipcXF0iLE89IjooIitMKyIpKD86XFwoKChbJ1wiXSkoKD86XFxcXC58W15cXFxcXSkqPylcXDN8KCg/OlxcXFwufFteXFxcXCgpW1xcXV18IitOLnJlcGxhY2UoMyw4KSsiKSopfC4qKVxcKXwpIixQPW5ldyBSZWdFeHAoIl4iK0srIit8KCg/Ol58W15cXFxcXSkoPzpcXFxcLikqKSIrSysiKyQiLCJnIiksUT1uZXcgUmVnRXhwKCJeIitLKyIqLCIrSysiKiIpLFI9bmV3IFJlZ0V4cCgiXiIrSysiKihbPit+XXwiK0srIikiK0srIioiKSxTPW5ldyBSZWdFeHAoIj0iK0srIiooW15cXF0nXCJdKj8pIitLKyIqXFxdIiwiZyIpLFQ9bmV3IFJlZ0V4cChPKSxVPW5ldyBSZWdFeHAoIl4iK00rIiQiKSxWPXtJRDpuZXcgUmVnRXhwKCJeIygiK0wrIikiKSxDTEFTUzpuZXcgUmVnRXhwKCJeXFwuKCIrTCsiKSIpLFRBRzpuZXcgUmVnRXhwKCJeKCIrTC5yZXBsYWNlKCJ3IiwidyoiKSsiKSIpLEFUVFI6bmV3IFJlZ0V4cCgiXiIrTiksUFNFVURPOm5ldyBSZWdFeHAoIl4iK08pLENISUxEOm5ldyBSZWdFeHAoIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcKCIrSysiKihldmVufG9kZHwoKFsrLV18KShcXGQqKW58KSIrSysiKig/OihbKy1dfCkiK0srIiooXFxkKyl8KSkiK0srIipcXCl8KSIsImkiKSxib29sOm5ldyBSZWdFeHAoIl4oPzoiK0orIikkIiwiaSIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKCJeIitLKyIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXCgiK0srIiooKD86LVxcZCk/XFxkKikiK0srIipcXCl8KSg/PVteLV18JCkiLCJpIil9LFc9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxYPS9eaFxkJC9pLFk9L15bXntdK1x7XHMqXFtuYXRpdmUgXHcvLFo9L14oPzojKFtcdy1dKyl8KFx3Kyl8XC4oW1x3LV0rKSkkLywkPS9bK35dLyxfPS8nfFxcL2csYWI9bmV3IFJlZ0V4cCgiXFxcXChbXFxkYS1mXXsxLDZ9IitLKyI/fCgiK0srIil8LikiLCJpZyIpLGJiPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD0iMHgiK2ItNjU1MzY7cmV0dXJuIGQhPT1kfHxjP2I6MD5kP1N0cmluZy5mcm9tQ2hhckNvZGUoZCs2NTUzNik6U3RyaW5nLmZyb21DaGFyQ29kZShkPj4xMHw1NTI5NiwxMDIzJmR8NTYzMjApfTt0cnl7Ry5hcHBseShEPUguY2FsbCh0LmNoaWxkTm9kZXMpLHQuY2hpbGROb2RlcyksRFt0LmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZX1jYXRjaChjYil7Rz17YXBwbHk6RC5sZW5ndGg/ZnVuY3Rpb24oYSxiKXtGLmFwcGx5KGEsSC5jYWxsKGIpKX06ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmxlbmd0aCxkPTA7d2hpbGUoYVtjKytdPWJbZCsrXSk7YS5sZW5ndGg9Yy0xfX19ZnVuY3Rpb24gZGIoYSxiLGQsZSl7dmFyIGYsZyxoLGksaixtLHAscSx1LHY7aWYoKGI/Yi5vd25lckRvY3VtZW50fHxiOnQpIT09bCYmayhiKSxiPWJ8fGwsZD1kfHxbXSwhYXx8InN0cmluZyIhPXR5cGVvZiBhKXJldHVybiBkO2lmKDEhPT0oaT1iLm5vZGVUeXBlKSYmOSE9PWkpcmV0dXJuW107aWYobiYmIWUpe2lmKGY9Wi5leGVjKGEpKWlmKGg9ZlsxXSl7aWYoOT09PWkpe2lmKGc9Yi5nZXRFbGVtZW50QnlJZChoKSwhZ3x8IWcucGFyZW50Tm9kZSlyZXR1cm4gZDtpZihnLmlkPT09aClyZXR1cm4gZC5wdXNoKGcpLGR9ZWxzZSBpZihiLm93bmVyRG9jdW1lbnQmJihnPWIub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChoKSkmJnIoYixnKSYmZy5pZD09PWgpcmV0dXJuIGQucHVzaChnKSxkfWVsc2V7aWYoZlsyXSlyZXR1cm4gRy5hcHBseShkLGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYSkpLGQ7aWYoKGg9ZlszXSkmJmMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBHLmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGgpKSxkfWlmKGMucXNhJiYoIW98fCFvLnRlc3QoYSkpKXtpZihxPXA9cyx1PWIsdj05PT09aSYmYSwxPT09aSYmIm9iamVjdCIhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpe209b2IoYSksKHA9Yi5nZXRBdHRyaWJ1dGUoImlkIikpP3E9cC5yZXBsYWNlKF8sIlxcJCYiKTpiLnNldEF0dHJpYnV0ZSgiaWQiLHEpLHE9IltpZD0nIitxKyInXSAiLGo9bS5sZW5ndGg7d2hpbGUoai0tKW1bal09cStwYihtW2pdKTt1PSQudGVzdChhKSYmbWIoYi5wYXJlbnROb2RlKXx8Yix2PW0uam9pbigiLCIpfWlmKHYpdHJ5e3JldHVybiBHLmFwcGx5KGQsdS5xdWVyeVNlbGVjdG9yQWxsKHYpKSxkfWNhdGNoKHcpe31maW5hbGx5e3B8fGIucmVtb3ZlQXR0cmlidXRlKCJpZCIpfX19cmV0dXJuIHhiKGEucmVwbGFjZShQLCIkMSIpLGIsZCxlKX1mdW5jdGlvbiBlYigpe3ZhciBhPVtdO2Z1bmN0aW9uIGIoYyxlKXtyZXR1cm4gYS5wdXNoKGMrIiAiKT5kLmNhY2hlTGVuZ3RoJiZkZWxldGUgYlthLnNoaWZ0KCldLGJbYysiICJdPWV9cmV0dXJuIGJ9ZnVuY3Rpb24gZmIoYSl7cmV0dXJuIGFbc109ITAsYX1mdW5jdGlvbiBnYihhKXt2YXIgYj1sLmNyZWF0ZUVsZW1lbnQoImRpdiIpO3RyeXtyZXR1cm4hIWEoYil9Y2F0Y2goYyl7cmV0dXJuITF9ZmluYWxseXtiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGx9fWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9YS5zcGxpdCgifCIpLGU9YS5sZW5ndGg7d2hpbGUoZS0tKWQuYXR0ckhhbmRsZVtjW2VdXT1ifWZ1bmN0aW9uIGliKGEsYil7dmFyIGM9YiYmYSxkPWMmJjE9PT1hLm5vZGVUeXBlJiYxPT09Yi5ub2RlVHlwZSYmKH5iLnNvdXJjZUluZGV4fHxCKS0ofmEuc291cmNlSW5kZXh8fEIpO2lmKGQpcmV0dXJuIGQ7aWYoYyl3aGlsZShjPWMubmV4dFNpYmxpbmcpaWYoYz09PWIpcmV0dXJuLTE7cmV0dXJuIGE/MTotMX1mdW5jdGlvbiBqYihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT1jJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBrYihhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybigiaW5wdXQiPT09Y3x8ImJ1dHRvbiI9PT1jKSYmYi50eXBlPT09YX19ZnVuY3Rpb24gbGIoYSl7cmV0dXJuIGZiKGZ1bmN0aW9uKGIpe3JldHVybiBiPStiLGZiKGZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hKFtdLGMubGVuZ3RoLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWNbZT1mW2ddXSYmKGNbZV09IShkW2VdPWNbZV0pKX0pfSl9ZnVuY3Rpb24gbWIoYSl7cmV0dXJuIGEmJnR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lIT09QSYmYX1jPWRiLnN1cHBvcnQ9e30sZj1kYi5pc1hNTD1mdW5jdGlvbihhKXt2YXIgYj1hJiYoYS5vd25lckRvY3VtZW50fHxhKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIGI/IkhUTUwiIT09Yi5ub2RlTmFtZTohMX0saz1kYi5zZXREb2N1bWVudD1mdW5jdGlvbihhKXt2YXIgYixlPWE/YS5vd25lckRvY3VtZW50fHxhOnQsZz1lLmRlZmF1bHRWaWV3O3JldHVybiBlIT09bCYmOT09PWUubm9kZVR5cGUmJmUuZG9jdW1lbnRFbGVtZW50PyhsPWUsbT1lLmRvY3VtZW50RWxlbWVudCxuPSFmKGUpLGcmJmchPT1nLnRvcCYmKGcuYWRkRXZlbnRMaXN0ZW5lcj9nLmFkZEV2ZW50TGlzdGVuZXIoInVubG9hZCIsZnVuY3Rpb24oKXtrKCl9LCExKTpnLmF0dGFjaEV2ZW50JiZnLmF0dGFjaEV2ZW50KCJvbnVubG9hZCIsZnVuY3Rpb24oKXtrKCl9KSksYy5hdHRyaWJ1dGVzPWdiKGZ1bmN0aW9uKGEpe3JldHVybiBhLmNsYXNzTmFtZT0iaSIsIWEuZ2V0QXR0cmlidXRlKCJjbGFzc05hbWUiKX0pLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWU9Z2IoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZS5jcmVhdGVDb21tZW50KCIiKSksIWEuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIioiKS5sZW5ndGh9KSxjLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9WS50ZXN0KGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSkmJmdiKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD0iPGRpdiBjbGFzcz0nYSc+PC9kaXY+PGRpdiBjbGFzcz0nYSBpJz48L2Rpdj4iLGEuZmlyc3RDaGlsZC5jbGFzc05hbWU9ImkiLDI9PT1hLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImkiKS5sZW5ndGh9KSxjLmdldEJ5SWQ9Z2IoZnVuY3Rpb24oYSl7cmV0dXJuIG0uYXBwZW5kQ2hpbGQoYSkuaWQ9cywhZS5nZXRFbGVtZW50c0J5TmFtZXx8IWUuZ2V0RWxlbWVudHNCeU5hbWUocykubGVuZ3RofSksYy5nZXRCeUlkPyhkLmZpbmQuSUQ9ZnVuY3Rpb24oYSxiKXtpZih0eXBlb2YgYi5nZXRFbGVtZW50QnlJZCE9PUEmJm4pe3ZhciBjPWIuZ2V0RWxlbWVudEJ5SWQoYSk7cmV0dXJuIGMmJmMucGFyZW50Tm9kZT9bY106W119fSxkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoYWIsYmIpO3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoImlkIik9PT1ifX0pOihkZWxldGUgZC5maW5kLklELGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShhYixiYik7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPXR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUhPT1BJiZhLmdldEF0dHJpYnV0ZU5vZGUoImlkIik7cmV0dXJuIGMmJmMudmFsdWU9PT1ifX0pLGQuZmluZC5UQUc9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZT9mdW5jdGlvbihhLGIpe3JldHVybiB0eXBlb2YgYi5nZXRFbGVtZW50c0J5VGFnTmFtZSE9PUE/Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTp2b2lkIDB9OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPTAsZj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpO2lmKCIqIj09PWEpe3doaWxlKGM9ZltlKytdKTE9PT1jLm5vZGVUeXBlJiZkLnB1c2goYyk7cmV0dXJuIGR9cmV0dXJuIGZ9LGQuZmluZC5DTEFTUz1jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGEsYil7cmV0dXJuIHR5cGVvZiBiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUhPT1BJiZuP2IuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShhKTp2b2lkIDB9LHA9W10sbz1bXSwoYy5xc2E9WS50ZXN0KGUucXVlcnlTZWxlY3RvckFsbCkpJiYoZ2IoZnVuY3Rpb24oYSl7YS5pbm5lckhUTUw9IjxzZWxlY3QgdD0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PiIsYS5xdWVyeVNlbGVjdG9yQWxsKCJbdF49JyddIikubGVuZ3RoJiZvLnB1c2goIlsqXiRdPSIrSysiKig/OicnfFwiXCIpIiksYS5xdWVyeVNlbGVjdG9yQWxsKCJbc2VsZWN0ZWRdIikubGVuZ3RofHxvLnB1c2goIlxcWyIrSysiKig/OnZhbHVlfCIrSisiKSIpLGEucXVlcnlTZWxlY3RvckFsbCgiOmNoZWNrZWQiKS5sZW5ndGh8fG8ucHVzaCgiOmNoZWNrZWQiKX0pLGdiKGZ1bmN0aW9uKGEpe3ZhciBiPWUuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTtiLnNldEF0dHJpYnV0ZSgidHlwZSIsImhpZGRlbiIpLGEuYXBwZW5kQ2hpbGQoYikuc2V0QXR0cmlidXRlKCJuYW1lIiwiRCIpLGEucXVlcnlTZWxlY3RvckFsbCgiW25hbWU9ZF0iKS5sZW5ndGgmJm8ucHVzaCgibmFtZSIrSysiKlsqXiR8IX5dPz0iKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RofHxvLnB1c2goIjplbmFibGVkIiwiOmRpc2FibGVkIiksYS5xdWVyeVNlbGVjdG9yQWxsKCIqLDp4Iiksby5wdXNoKCIsLio6Iil9KSksKGMubWF0Y2hlc1NlbGVjdG9yPVkudGVzdChxPW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yfHxtLm1vek1hdGNoZXNTZWxlY3Rvcnx8bS5vTWF0Y2hlc1NlbGVjdG9yfHxtLm1zTWF0Y2hlc1NlbGVjdG9yKSkmJmdiKGZ1bmN0aW9uKGEpe2MuZGlzY29ubmVjdGVkTWF0Y2g9cS5jYWxsKGEsImRpdiIpLHEuY2FsbChhLCJbcyE9JyddOngiKSxwLnB1c2goIiE9IixPKX0pLG89by5sZW5ndGgmJm5ldyBSZWdFeHAoby5qb2luKCJ8IikpLHA9cC5sZW5ndGgmJm5ldyBSZWdFeHAocC5qb2luKCJ8IikpLGI9WS50ZXN0KG0uY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHI9Ynx8WS50ZXN0KG0uY29udGFpbnMpP2Z1bmN0aW9uKGEsYil7dmFyIGM9OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YSxkPWImJmIucGFyZW50Tm9kZTtyZXR1cm4gYT09PWR8fCEoIWR8fDEhPT1kLm5vZGVUeXBlfHwhKGMuY29udGFpbnM/Yy5jb250YWlucyhkKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGQpKSl9OmZ1bmN0aW9uKGEsYil7aWYoYil3aGlsZShiPWIucGFyZW50Tm9kZSlpZihiPT09YSlyZXR1cm4hMDtyZXR1cm4hMX0sej1iP2Z1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuIGo9ITAsMDt2YXIgZD0hYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gZD9kOihkPShhLm93bmVyRG9jdW1lbnR8fGEpPT09KGIub3duZXJEb2N1bWVudHx8Yik/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKToxLDEmZHx8IWMuc29ydERldGFjaGVkJiZiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpPT09ZD9hPT09ZXx8YS5vd25lckRvY3VtZW50PT09dCYmcih0LGEpPy0xOmI9PT1lfHxiLm93bmVyRG9jdW1lbnQ9PT10JiZyKHQsYik/MTppP0kuY2FsbChpLGEpLUkuY2FsbChpLGIpOjA6NCZkPy0xOjEpfTpmdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBqPSEwLDA7dmFyIGMsZD0wLGY9YS5wYXJlbnROb2RlLGc9Yi5wYXJlbnROb2RlLGg9W2FdLGs9W2JdO2lmKCFmfHwhZylyZXR1cm4gYT09PWU/LTE6Yj09PWU/MTpmPy0xOmc/MTppP0kuY2FsbChpLGEpLUkuY2FsbChpLGIpOjA7aWYoZj09PWcpcmV0dXJuIGliKGEsYik7Yz1hO3doaWxlKGM9Yy5wYXJlbnROb2RlKWgudW5zaGlmdChjKTtjPWI7d2hpbGUoYz1jLnBhcmVudE5vZGUpay51bnNoaWZ0KGMpO3doaWxlKGhbZF09PT1rW2RdKWQrKztyZXR1cm4gZD9pYihoW2RdLGtbZF0pOmhbZF09PT10Py0xOmtbZF09PT10PzE6MH0sZSk6bH0sZGIubWF0Y2hlcz1mdW5jdGlvbihhLGIpe3JldHVybiBkYihhLG51bGwsbnVsbCxiKX0sZGIubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGEsYil7aWYoKGEub3duZXJEb2N1bWVudHx8YSkhPT1sJiZrKGEpLGI9Yi5yZXBsYWNlKFMsIj0nJDEnXSIpLCEoIWMubWF0Y2hlc1NlbGVjdG9yfHwhbnx8cCYmcC50ZXN0KGIpfHxvJiZvLnRlc3QoYikpKXRyeXt2YXIgZD1xLmNhbGwoYSxiKTtpZihkfHxjLmRpc2Nvbm5lY3RlZE1hdGNofHxhLmRvY3VtZW50JiYxMSE9PWEuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIGR9Y2F0Y2goZSl7fXJldHVybiBkYihiLGwsbnVsbCxbYV0pLmxlbmd0aD4wfSxkYi5jb250YWlucz1mdW5jdGlvbihhLGIpe3JldHVybihhLm93bmVyRG9jdW1lbnR8fGEpIT09bCYmayhhKSxyKGEsYil9LGRiLmF0dHI9ZnVuY3Rpb24oYSxiKXsoYS5vd25lckRvY3VtZW50fHxhKSE9PWwmJmsoYSk7dmFyIGU9ZC5hdHRySGFuZGxlW2IudG9Mb3dlckNhc2UoKV0sZj1lJiZDLmNhbGwoZC5hdHRySGFuZGxlLGIudG9Mb3dlckNhc2UoKSk/ZShhLGIsIW4pOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09Zj9mOmMuYXR0cmlidXRlc3x8IW4/YS5nZXRBdHRyaWJ1dGUoYik6KGY9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZi5zcGVjaWZpZWQ/Zi52YWx1ZTpudWxsfSxkYi5lcnJvcj1mdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246ICIrYSl9LGRiLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZD1bXSxlPTAsZj0wO2lmKGo9IWMuZGV0ZWN0RHVwbGljYXRlcyxpPSFjLnNvcnRTdGFibGUmJmEuc2xpY2UoMCksYS5zb3J0KHopLGope3doaWxlKGI9YVtmKytdKWI9PT1hW2ZdJiYoZT1kLnB1c2goZikpO3doaWxlKGUtLSlhLnNwbGljZShkW2VdLDEpfXJldHVybiBpPW51bGwsYX0sZT1kYi5nZXRUZXh0PWZ1bmN0aW9uKGEpe3ZhciBiLGM9IiIsZD0wLGY9YS5ub2RlVHlwZTtpZihmKXtpZigxPT09Znx8OT09PWZ8fDExPT09Zil7aWYoInN0cmluZyI9PXR5cGVvZiBhLnRleHRDb250ZW50KXJldHVybiBhLnRleHRDb250ZW50O2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZyljKz1lKGEpfWVsc2UgaWYoMz09PWZ8fDQ9PT1mKXJldHVybiBhLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKGI9YVtkKytdKWMrPWUoYik7cmV0dXJuIGN9LGQ9ZGIuc2VsZWN0b3JzPXtjYWNoZUxlbmd0aDo1MCxjcmVhdGVQc2V1ZG86ZmIsbWF0Y2g6VixhdHRySGFuZGxlOnt9LGZpbmQ6e30scmVsYXRpdmU6eyI+Ijp7ZGlyOiJwYXJlbnROb2RlIixmaXJzdDohMH0sIiAiOntkaXI6InBhcmVudE5vZGUifSwiKyI6e2RpcjoicHJldmlvdXNTaWJsaW5nIixmaXJzdDohMH0sIn4iOntkaXI6InByZXZpb3VzU2libGluZyJ9fSxwcmVGaWx0ZXI6e0FUVFI6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV09YVsxXS5yZXBsYWNlKGFiLGJiKSxhWzNdPShhWzRdfHxhWzVdfHwiIikucmVwbGFjZShhYixiYiksIn49Ij09PWFbMl0mJihhWzNdPSIgIithWzNdKyIgIiksYS5zbGljZSgwLDQpfSxDSElMRDpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnRvTG93ZXJDYXNlKCksIm50aCI9PT1hWzFdLnNsaWNlKDAsMyk/KGFbM118fGRiLmVycm9yKGFbMF0pLGFbNF09KyhhWzRdP2FbNV0rKGFbNl18fDEpOjIqKCJldmVuIj09PWFbM118fCJvZGQiPT09YVszXSkpLGFbNV09KyhhWzddK2FbOF18fCJvZGQiPT09YVszXSkpOmFbM10mJmRiLmVycm9yKGFbMF0pLGF9LFBTRVVETzpmdW5jdGlvbihhKXt2YXIgYixjPSFhWzVdJiZhWzJdO3JldHVybiBWLkNISUxELnRlc3QoYVswXSk/bnVsbDooYVszXSYmdm9pZCAwIT09YVs0XT9hWzJdPWFbNF06YyYmVC50ZXN0KGMpJiYoYj1vYihjLCEwKSkmJihiPWMuaW5kZXhPZigiKSIsYy5sZW5ndGgtYiktYy5sZW5ndGgpJiYoYVswXT1hWzBdLnNsaWNlKDAsYiksYVsyXT1jLnNsaWNlKDAsYikpLGEuc2xpY2UoMCwzKSl9fSxmaWx0ZXI6e1RBRzpmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoYWIsYmIpLnRvTG93ZXJDYXNlKCk7cmV0dXJuIioiPT09YT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yn19LENMQVNTOmZ1bmN0aW9uKGEpe3ZhciBiPXdbYSsiICJdO3JldHVybiBifHwoYj1uZXcgUmVnRXhwKCIoXnwiK0srIikiK2ErIigiK0srInwkKSIpKSYmdyhhLGZ1bmN0aW9uKGEpe3JldHVybiBiLnRlc3QoInN0cmluZyI9PXR5cGVvZiBhLmNsYXNzTmFtZSYmYS5jbGFzc05hbWV8fHR5cGVvZiBhLmdldEF0dHJpYnV0ZSE9PUEmJmEuZ2V0QXR0cmlidXRlKCJjbGFzcyIpfHwiIil9KX0sQVRUUjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3ZhciBlPWRiLmF0dHIoZCxhKTtyZXR1cm4gbnVsbD09ZT8iIT0iPT09YjpiPyhlKz0iIiwiPSI9PT1iP2U9PT1jOiIhPSI9PT1iP2UhPT1jOiJePSI9PT1iP2MmJjA9PT1lLmluZGV4T2YoYyk6Iio9Ij09PWI/YyYmZS5pbmRleE9mKGMpPi0xOiIkPSI9PT1iP2MmJmUuc2xpY2UoLWMubGVuZ3RoKT09PWM6In49Ij09PWI/KCIgIitlKyIgIikuaW5kZXhPZihjKT4tMToifD0iPT09Yj9lPT09Y3x8ZS5zbGljZSgwLGMubGVuZ3RoKzEpPT09YysiLSI6ITEpOiEwfX0sQ0hJTEQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj0ibnRoIiE9PWEuc2xpY2UoMCwzKSxnPSJsYXN0IiE9PWEuc2xpY2UoLTQpLGg9Im9mLXR5cGUiPT09YjtyZXR1cm4gMT09PWQmJjA9PT1lP2Z1bmN0aW9uKGEpe3JldHVybiEhYS5wYXJlbnROb2RlfTpmdW5jdGlvbihiLGMsaSl7dmFyIGosayxsLG0sbixvLHA9ZiE9PWc/Im5leHRTaWJsaW5nIjoicHJldmlvdXNTaWJsaW5nIixxPWIucGFyZW50Tm9kZSxyPWgmJmIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSx0PSFpJiYhaDtpZihxKXtpZihmKXt3aGlsZShwKXtsPWI7d2hpbGUobD1sW3BdKWlmKGg/bC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bC5ub2RlVHlwZSlyZXR1cm4hMTtvPXA9Im9ubHkiPT09YSYmIW8mJiJuZXh0U2libGluZyJ9cmV0dXJuITB9aWYobz1bZz9xLmZpcnN0Q2hpbGQ6cS5sYXN0Q2hpbGRdLGcmJnQpe2s9cVtzXXx8KHFbc109e30pLGo9a1thXXx8W10sbj1qWzBdPT09dSYmalsxXSxtPWpbMF09PT11JiZqWzJdLGw9biYmcS5jaGlsZE5vZGVzW25dO3doaWxlKGw9KytuJiZsJiZsW3BdfHwobT1uPTApfHxvLnBvcCgpKWlmKDE9PT1sLm5vZGVUeXBlJiYrK20mJmw9PT1iKXtrW2FdPVt1LG4sbV07YnJlYWt9fWVsc2UgaWYodCYmKGo9KGJbc118fChiW3NdPXt9KSlbYV0pJiZqWzBdPT09dSltPWpbMV07ZWxzZSB3aGlsZShsPSsrbiYmbCYmbFtwXXx8KG09bj0wKXx8by5wb3AoKSlpZigoaD9sLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1yOjE9PT1sLm5vZGVUeXBlKSYmKyttJiYodCYmKChsW3NdfHwobFtzXT17fSkpW2FdPVt1LG1dKSxsPT09YikpYnJlYWs7cmV0dXJuIG0tPWUsbT09PWR8fG0lZD09PTAmJm0vZD49MH19fSxQU0VVRE86ZnVuY3Rpb24oYSxiKXt2YXIgYyxlPWQucHNldWRvc1thXXx8ZC5zZXRGaWx0ZXJzW2EudG9Mb3dlckNhc2UoKV18fGRiLmVycm9yKCJ1bnN1cHBvcnRlZCBwc2V1ZG86ICIrYSk7cmV0dXJuIGVbc10/ZShiKTplLmxlbmd0aD4xPyhjPVthLGEsIiIsYl0sZC5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGEudG9Mb3dlckNhc2UoKSk/ZmIoZnVuY3Rpb24oYSxjKXt2YXIgZCxmPWUoYSxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSlkPUkuY2FsbChhLGZbZ10pLGFbZF09IShjW2RdPWZbZ10pfSk6ZnVuY3Rpb24oYSl7cmV0dXJuIGUoYSwwLGMpfSk6ZX19LHBzZXVkb3M6e25vdDpmYihmdW5jdGlvbihhKXt2YXIgYj1bXSxjPVtdLGQ9ZyhhLnJlcGxhY2UoUCwiJDEiKSk7cmV0dXJuIGRbc10/ZmIoZnVuY3Rpb24oYSxiLGMsZSl7dmFyIGYsZz1kKGEsbnVsbCxlLFtdKSxoPWEubGVuZ3RoO3doaWxlKGgtLSkoZj1nW2hdKSYmKGFbaF09IShiW2hdPWYpKX0pOmZ1bmN0aW9uKGEsZSxmKXtyZXR1cm4gYlswXT1hLGQoYixudWxsLGYsYyksIWMucG9wKCl9fSksaGFzOmZiKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gZGIoYSxiKS5sZW5ndGg+MH19KSxjb250YWluczpmYihmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuKGIudGV4dENvbnRlbnR8fGIuaW5uZXJUZXh0fHxlKGIpKS5pbmRleE9mKGEpPi0xfX0pLGxhbmc6ZmIoZnVuY3Rpb24oYSl7cmV0dXJuIFUudGVzdChhfHwiIil8fGRiLmVycm9yKCJ1bnN1cHBvcnRlZCBsYW5nOiAiK2EpLGE9YS5yZXBsYWNlKGFiLGJiKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKGIpe3ZhciBjO2RvIGlmKGM9bj9iLmxhbmc6Yi5nZXRBdHRyaWJ1dGUoInhtbDpsYW5nIil8fGIuZ2V0QXR0cmlidXRlKCJsYW5nIikpcmV0dXJuIGM9Yy50b0xvd2VyQ2FzZSgpLGM9PT1hfHwwPT09Yy5pbmRleE9mKGErIi0iKTt3aGlsZSgoYj1iLnBhcmVudE5vZGUpJiYxPT09Yi5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGIpe3ZhciBjPWEubG9jYXRpb24mJmEubG9jYXRpb24uaGFzaDtyZXR1cm4gYyYmYy5zbGljZSgxKT09PWIuaWR9LHJvb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1tfSxmb2N1czpmdW5jdGlvbihhKXtyZXR1cm4gYT09PWwuYWN0aXZlRWxlbWVudCYmKCFsLmhhc0ZvY3VzfHxsLmhhc0ZvY3VzKCkpJiYhIShhLnR5cGV8fGEuaHJlZnx8fmEudGFiSW5kZXgpfSxlbmFibGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITF9LGRpc2FibGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITB9LGNoZWNrZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT1iJiYhIWEuY2hlY2tlZHx8Im9wdGlvbiI9PT1iJiYhIWEuc2VsZWN0ZWR9LHNlbGVjdGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LGEuc2VsZWN0ZWQ9PT0hMH0sZW1wdHk6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWlmKGEubm9kZVR5cGU8NilyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGEpe3JldHVybiFkLnBzZXVkb3MuZW1wdHkoYSl9LGhlYWRlcjpmdW5jdGlvbihhKXtyZXR1cm4gWC50ZXN0KGEubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihhKXtyZXR1cm4gVy50ZXN0KGEubm9kZU5hbWUpfSxidXR0b246ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT1iJiYiYnV0dG9uIj09PWEudHlwZXx8ImJ1dHRvbiI9PT1ifSx0ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiJpbnB1dCI9PT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJiJ0ZXh0Ij09PWEudHlwZSYmKG51bGw9PShiPWEuZ2V0QXR0cmlidXRlKCJ0eXBlIikpfHwidGV4dCI9PT1iLnRvTG93ZXJDYXNlKCkpfSxmaXJzdDpsYihmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6bGIoZnVuY3Rpb24oYSxiKXtyZXR1cm5bYi0xXX0pLGVxOmxiKGZ1bmN0aW9uKGEsYixjKXtyZXR1cm5bMD5jP2MrYjpjXX0pLGV2ZW46bGIoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtiPmM7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxvZGQ6bGIoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MTtiPmM7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxsdDpsYihmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTA+Yz9jK2I6YzstLWQ+PTA7KWEucHVzaChkKTtyZXR1cm4gYX0pLGd0OmxiKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9MD5jP2MrYjpjOysrZDxiOylhLnB1c2goZCk7cmV0dXJuIGF9KX19LGQucHNldWRvcy5udGg9ZC5wc2V1ZG9zLmVxO2ZvcihiIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWQucHNldWRvc1tiXT1qYihiKTtmb3IoYiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWQucHNldWRvc1tiXT1rYihiKTtmdW5jdGlvbiBuYigpe31uYi5wcm90b3R5cGU9ZC5maWx0ZXJzPWQucHNldWRvcyxkLnNldEZpbHRlcnM9bmV3IG5iO2Z1bmN0aW9uIG9iKGEsYil7dmFyIGMsZSxmLGcsaCxpLGosaz14W2ErIiAiXTtpZihrKXJldHVybiBiPzA6ay5zbGljZSgwKTtoPWEsaT1bXSxqPWQucHJlRmlsdGVyO3doaWxlKGgpeyghY3x8KGU9US5leGVjKGgpKSkmJihlJiYoaD1oLnNsaWNlKGVbMF0ubGVuZ3RoKXx8aCksaS5wdXNoKGY9W10pKSxjPSExLChlPVIuZXhlYyhoKSkmJihjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTplWzBdLnJlcGxhY2UoUCwiICIpfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7Zm9yKGcgaW4gZC5maWx0ZXIpIShlPVZbZ10uZXhlYyhoKSl8fGpbZ10mJiEoZT1qW2ddKGUpKXx8KGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmcsbWF0Y2hlczplfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7aWYoIWMpYnJlYWt9cmV0dXJuIGI/aC5sZW5ndGg6aD9kYi5lcnJvcihhKTp4KGEsaSkuc2xpY2UoMCl9ZnVuY3Rpb24gcGIoYSl7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aCxkPSIiO2M+YjtiKyspZCs9YVtiXS52YWx1ZTtyZXR1cm4gZH1mdW5jdGlvbiBxYihhLGIsYyl7dmFyIGQ9Yi5kaXIsZT1jJiYicGFyZW50Tm9kZSI9PT1kLGY9disrO3JldHVybiBiLmZpcnN0P2Z1bmN0aW9uKGIsYyxmKXt3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGUpcmV0dXJuIGEoYixjLGYpfTpmdW5jdGlvbihiLGMsZyl7dmFyIGgsaSxqPVt1LGZdO2lmKGcpe3doaWxlKGI9YltkXSlpZigoMT09PWIubm9kZVR5cGV8fGUpJiZhKGIsYyxnKSlyZXR1cm4hMH1lbHNlIHdoaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZSl7aWYoaT1iW3NdfHwoYltzXT17fSksKGg9aVtkXSkmJmhbMF09PT11JiZoWzFdPT09ZilyZXR1cm4galsyXT1oWzJdO2lmKGlbZF09aixqWzJdPWEoYixjLGcpKXJldHVybiEwfX19ZnVuY3Rpb24gcmIoYSl7cmV0dXJuIGEubGVuZ3RoPjE/ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWEubGVuZ3RoO3doaWxlKGUtLSlpZighYVtlXShiLGMsZCkpcmV0dXJuITE7cmV0dXJuITB9OmFbMF19ZnVuY3Rpb24gc2IoYSxiLGMsZCxlKXtmb3IodmFyIGYsZz1bXSxoPTAsaT1hLmxlbmd0aCxqPW51bGwhPWI7aT5oO2grKykoZj1hW2hdKSYmKCFjfHxjKGYsZCxlKSkmJihnLnB1c2goZiksaiYmYi5wdXNoKGgpKTtyZXR1cm4gZ31mdW5jdGlvbiB0YihhLGIsYyxkLGUsZil7cmV0dXJuIGQmJiFkW3NdJiYoZD10YihkKSksZSYmIWVbc10mJihlPXRiKGUsZikpLGZiKGZ1bmN0aW9uKGYsZyxoLGkpe3ZhciBqLGssbCxtPVtdLG49W10sbz1nLmxlbmd0aCxwPWZ8fHdiKGJ8fCIqIixoLm5vZGVUeXBlP1toXTpoLFtdKSxxPSFhfHwhZiYmYj9wOnNiKHAsbSxhLGgsaSkscj1jP2V8fChmP2E6b3x8ZCk/W106ZzpxO2lmKGMmJmMocSxyLGgsaSksZCl7aj1zYihyLG4pLGQoaixbXSxoLGkpLGs9ai5sZW5ndGg7d2hpbGUoay0tKShsPWpba10pJiYocltuW2tdXT0hKHFbbltrXV09bCkpfWlmKGYpe2lmKGV8fGEpe2lmKGUpe2o9W10saz1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJmoucHVzaChxW2tdPWwpO2UobnVsbCxyPVtdLGosaSl9az1yLmxlbmd0aDt3aGlsZShrLS0pKGw9cltrXSkmJihqPWU/SS5jYWxsKGYsbCk6bVtrXSk+LTEmJihmW2pdPSEoZ1tqXT1sKSl9fWVsc2Ugcj1zYihyPT09Zz9yLnNwbGljZShvLHIubGVuZ3RoKTpyKSxlP2UobnVsbCxnLHIsaSk6Ry5hcHBseShnLHIpfSl9ZnVuY3Rpb24gdWIoYSl7Zm9yKHZhciBiLGMsZSxmPWEubGVuZ3RoLGc9ZC5yZWxhdGl2ZVthWzBdLnR5cGVdLGk9Z3x8ZC5yZWxhdGl2ZVsiICJdLGo9Zz8xOjAsaz1xYihmdW5jdGlvbihhKXtyZXR1cm4gYT09PWJ9LGksITApLGw9cWIoZnVuY3Rpb24oYSl7cmV0dXJuIEkuY2FsbChiLGEpPi0xfSxpLCEwKSxtPVtmdW5jdGlvbihhLGMsZCl7cmV0dXJuIWcmJihkfHxjIT09aCl8fCgoYj1jKS5ub2RlVHlwZT9rKGEsYyxkKTpsKGEsYyxkKSl9XTtmPmo7aisrKWlmKGM9ZC5yZWxhdGl2ZVthW2pdLnR5cGVdKW09W3FiKHJiKG0pLGMpXTtlbHNle2lmKGM9ZC5maWx0ZXJbYVtqXS50eXBlXS5hcHBseShudWxsLGFbal0ubWF0Y2hlcyksY1tzXSl7Zm9yKGU9KytqO2Y+ZTtlKyspaWYoZC5yZWxhdGl2ZVthW2VdLnR5cGVdKWJyZWFrO3JldHVybiB0YihqPjEmJnJiKG0pLGo+MSYmcGIoYS5zbGljZSgwLGotMSkuY29uY2F0KHt2YWx1ZToiICI9PT1hW2otMl0udHlwZT8iKiI6IiJ9KSkucmVwbGFjZShQLCIkMSIpLGMsZT5qJiZ1YihhLnNsaWNlKGosZSkpLGY+ZSYmdWIoYT1hLnNsaWNlKGUpKSxmPmUmJnBiKGEpKX1tLnB1c2goYyl9cmV0dXJuIHJiKG0pfWZ1bmN0aW9uIHZiKGEsYil7dmFyIGM9Yi5sZW5ndGg+MCxlPWEubGVuZ3RoPjAsZj1mdW5jdGlvbihmLGcsaSxqLGspe3ZhciBtLG4sbyxwPTAscT0iMCIscj1mJiZbXSxzPVtdLHQ9aCx2PWZ8fGUmJmQuZmluZC5UQUcoIioiLGspLHc9dSs9bnVsbD09dD8xOk1hdGgucmFuZG9tKCl8fC4xLHg9di5sZW5ndGg7Zm9yKGsmJihoPWchPT1sJiZnKTtxIT09eCYmbnVsbCE9KG09dltxXSk7cSsrKXtpZihlJiZtKXtuPTA7d2hpbGUobz1hW24rK10paWYobyhtLGcsaSkpe2oucHVzaChtKTticmVha31rJiYodT13KX1jJiYoKG09IW8mJm0pJiZwLS0sZiYmci5wdXNoKG0pKX1pZihwKz1xLGMmJnEhPT1wKXtuPTA7d2hpbGUobz1iW24rK10pbyhyLHMsZyxpKTtpZihmKXtpZihwPjApd2hpbGUocS0tKXJbcV18fHNbcV18fChzW3FdPUUuY2FsbChqKSk7cz1zYihzKX1HLmFwcGx5KGoscyksayYmIWYmJnMubGVuZ3RoPjAmJnArYi5sZW5ndGg+MSYmZGIudW5pcXVlU29ydChqKX1yZXR1cm4gayYmKHU9dyxoPXQpLHJ9O3JldHVybiBjP2ZiKGYpOmZ9Zz1kYi5jb21waWxlPWZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPVtdLGY9eVthKyIgIl07aWYoIWYpe2J8fChiPW9iKGEpKSxjPWIubGVuZ3RoO3doaWxlKGMtLSlmPXViKGJbY10pLGZbc10/ZC5wdXNoKGYpOmUucHVzaChmKTtmPXkoYSx2YihlLGQpKX1yZXR1cm4gZn07ZnVuY3Rpb24gd2IoYSxiLGMpe2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZT5kO2QrKylkYihhLGJbZF0sYyk7cmV0dXJuIGN9ZnVuY3Rpb24geGIoYSxiLGUsZil7dmFyIGgsaSxqLGssbCxtPW9iKGEpO2lmKCFmJiYxPT09bS5sZW5ndGgpe2lmKGk9bVswXT1tWzBdLnNsaWNlKDApLGkubGVuZ3RoPjImJiJJRCI9PT0oaj1pWzBdKS50eXBlJiZjLmdldEJ5SWQmJjk9PT1iLm5vZGVUeXBlJiZuJiZkLnJlbGF0aXZlW2lbMV0udHlwZV0pe2lmKGI9KGQuZmluZC5JRChqLm1hdGNoZXNbMF0ucmVwbGFjZShhYixiYiksYil8fFtdKVswXSwhYilyZXR1cm4gZTthPWEuc2xpY2UoaS5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9aD1WLm5lZWRzQ29udGV4dC50ZXN0KGEpPzA6aS5sZW5ndGg7d2hpbGUoaC0tKXtpZihqPWlbaF0sZC5yZWxhdGl2ZVtrPWoudHlwZV0pYnJlYWs7aWYoKGw9ZC5maW5kW2tdKSYmKGY9bChqLm1hdGNoZXNbMF0ucmVwbGFjZShhYixiYiksJC50ZXN0KGlbMF0udHlwZSkmJm1iKGIucGFyZW50Tm9kZSl8fGIpKSl7aWYoaS5zcGxpY2UoaCwxKSxhPWYubGVuZ3RoJiZwYihpKSwhYSlyZXR1cm4gRy5hcHBseShlLGYpLGU7YnJlYWt9fX1yZXR1cm4gZyhhLG0pKGYsYiwhbixlLCQudGVzdChhKSYmbWIoYi5wYXJlbnROb2RlKXx8YiksZX1yZXR1cm4gYy5zb3J0U3RhYmxlPXMuc3BsaXQoIiIpLnNvcnQoeikuam9pbigiIik9PT1zLGMuZGV0ZWN0RHVwbGljYXRlcz0hIWosaygpLGMuc29ydERldGFjaGVkPWdiKGZ1bmN0aW9uKGEpe3JldHVybiAxJmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24obC5jcmVhdGVFbGVtZW50KCJkaXYiKSl9KSxnYihmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9IjxhIGhyZWY9JyMnPjwvYT4iLCIjIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoImhyZWYiKX0pfHxoYigidHlwZXxocmVmfGhlaWdodHx3aWR0aCIsZnVuY3Rpb24oYSxiLGMpe3JldHVybiBjP3ZvaWQgMDphLmdldEF0dHJpYnV0ZShiLCJ0eXBlIj09PWIudG9Mb3dlckNhc2UoKT8xOjIpfSksYy5hdHRyaWJ1dGVzJiZnYihmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9IjxpbnB1dC8+IixhLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCJ2YWx1ZSIsIiIpLCIiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgidmFsdWUiKX0pfHxoYigidmFsdWUiLGZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gY3x8ImlucHV0IiE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT92b2lkIDA6YS5kZWZhdWx0VmFsdWV9KSxnYihmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YS5nZXRBdHRyaWJ1dGUoImRpc2FibGVkIil9KXx8aGIoSixmdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGM/dm9pZCAwOmFbYl09PT0hMD9iLnRvTG93ZXJDYXNlKCk6KGQ9YS5nZXRBdHRyaWJ1dGVOb2RlKGIpKSYmZC5zcGVjaWZpZWQ/ZC52YWx1ZTpudWxsfSksZGJ9KGEpO24uZmluZD10LG4uZXhwcj10LnNlbGVjdG9ycyxuLmV4cHJbIjoiXT1uLmV4cHIucHNldWRvcyxuLnVuaXF1ZT10LnVuaXF1ZVNvcnQsbi50ZXh0PXQuZ2V0VGV4dCxuLmlzWE1MRG9jPXQuaXNYTUwsbi5jb250YWlucz10LmNvbnRhaW5zO3ZhciB1PW4uZXhwci5tYXRjaC5uZWVkc0NvbnRleHQsdj0vXjwoXHcrKVxzKlwvPz4oPzo8XC9cMT58KSQvLHc9L14uW146I1xbXC4sXSokLztmdW5jdGlvbiB4KGEsYixjKXtpZihuLmlzRnVuY3Rpb24oYikpcmV0dXJuIG4uZ3JlcChhLGZ1bmN0aW9uKGEsZCl7cmV0dXJuISFiLmNhbGwoYSxkLGEpIT09Y30pO2lmKGIubm9kZVR5cGUpcmV0dXJuIG4uZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBhPT09YiE9PWN9KTtpZigic3RyaW5nIj09dHlwZW9mIGIpe2lmKHcudGVzdChiKSlyZXR1cm4gbi5maWx0ZXIoYixhLGMpO2I9bi5maWx0ZXIoYixhKX1yZXR1cm4gbi5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIG4uaW5BcnJheShhLGIpPj0wIT09Y30pfW4uZmlsdGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iWzBdO3JldHVybiBjJiYoYT0iOm5vdCgiK2ErIikiKSwxPT09Yi5sZW5ndGgmJjE9PT1kLm5vZGVUeXBlP24uZmluZC5tYXRjaGVzU2VsZWN0b3IoZCxhKT9bZF06W106bi5maW5kLm1hdGNoZXMoYSxuLmdyZXAoYixmdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV9KSl9LG4uZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGEpe3ZhciBiLGM9W10sZD10aGlzLGU9ZC5sZW5ndGg7aWYoInN0cmluZyIhPXR5cGVvZiBhKXJldHVybiB0aGlzLnB1c2hTdGFjayhuKGEpLmZpbHRlcihmdW5jdGlvbigpe2ZvcihiPTA7ZT5iO2IrKylpZihuLmNvbnRhaW5zKGRbYl0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKGI9MDtlPmI7YisrKW4uZmluZChhLGRbYl0sYyk7cmV0dXJuIGM9dGhpcy5wdXNoU3RhY2soZT4xP24udW5pcXVlKGMpOmMpLGMuc2VsZWN0b3I9dGhpcy5zZWxlY3Rvcj90aGlzLnNlbGVjdG9yKyIgIithOmEsY30sZmlsdGVyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayh4KHRoaXMsYXx8W10sITEpKX0sbm90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayh4KHRoaXMsYXx8W10sITApKX0saXM6ZnVuY3Rpb24oYSl7cmV0dXJuISF4KHRoaXMsInN0cmluZyI9PXR5cGVvZiBhJiZ1LnRlc3QoYSk/bihhKTphfHxbXSwhMSkubGVuZ3RofX0pO3ZhciB5LHo9YS5kb2N1bWVudCxBPS9eKD86XHMqKDxbXHdcV10rPilbXj5dKnwjKFtcdy1dKikpJC8sQj1uLmZuLmluaXQ9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkO2lmKCFhKXJldHVybiB0aGlzO2lmKCJzdHJpbmciPT10eXBlb2YgYSl7aWYoYz0iPCI9PT1hLmNoYXJBdCgwKSYmIj4iPT09YS5jaGFyQXQoYS5sZW5ndGgtMSkmJmEubGVuZ3RoPj0zP1tudWxsLGEsbnVsbF06QS5leGVjKGEpLCFjfHwhY1sxXSYmYilyZXR1cm4hYnx8Yi5qcXVlcnk/KGJ8fHkpLmZpbmQoYSk6dGhpcy5jb25zdHJ1Y3RvcihiKS5maW5kKGEpO2lmKGNbMV0pe2lmKGI9YiBpbnN0YW5jZW9mIG4/YlswXTpiLG4ubWVyZ2UodGhpcyxuLnBhcnNlSFRNTChjWzFdLGImJmIubm9kZVR5cGU/Yi5vd25lckRvY3VtZW50fHxiOnosITApKSx2LnRlc3QoY1sxXSkmJm4uaXNQbGFpbk9iamVjdChiKSlmb3IoYyBpbiBiKW4uaXNGdW5jdGlvbih0aGlzW2NdKT90aGlzW2NdKGJbY10pOnRoaXMuYXR0cihjLGJbY10pO3JldHVybiB0aGlzfWlmKGQ9ei5nZXRFbGVtZW50QnlJZChjWzJdKSxkJiZkLnBhcmVudE5vZGUpe2lmKGQuaWQhPT1jWzJdKXJldHVybiB5LmZpbmQoYSk7dGhpcy5sZW5ndGg9MSx0aGlzWzBdPWR9cmV0dXJuIHRoaXMuY29udGV4dD16LHRoaXMuc2VsZWN0b3I9YSx0aGlzfXJldHVybiBhLm5vZGVUeXBlPyh0aGlzLmNvbnRleHQ9dGhpc1swXT1hLHRoaXMubGVuZ3RoPTEsdGhpcyk6bi5pc0Z1bmN0aW9uKGEpPyJ1bmRlZmluZWQiIT10eXBlb2YgeS5yZWFkeT95LnJlYWR5KGEpOmEobik6KHZvaWQgMCE9PWEuc2VsZWN0b3ImJih0aGlzLnNlbGVjdG9yPWEuc2VsZWN0b3IsdGhpcy5jb250ZXh0PWEuY29udGV4dCksbi5tYWtlQXJyYXkoYSx0aGlzKSl9O0IucHJvdG90eXBlPW4uZm4seT1uKHopO3ZhciBDPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEQ9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07bi5leHRlbmQoe2RpcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9W10sZT1hW2JdO3doaWxlKGUmJjkhPT1lLm5vZGVUeXBlJiYodm9pZCAwPT09Y3x8MSE9PWUubm9kZVR5cGV8fCFuKGUpLmlzKGMpKSkxPT09ZS5ub2RlVHlwZSYmZC5wdXNoKGUpLGU9ZVtiXTtyZXR1cm4gZH0sc2libGluZzpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXTthO2E9YS5uZXh0U2libGluZykxPT09YS5ub2RlVHlwZSYmYSE9PWImJmMucHVzaChhKTtyZXR1cm4gY319KSxuLmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKGEpe3ZhciBiLGM9bihhLHRoaXMpLGQ9Yy5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKGI9MDtkPmI7YisrKWlmKG4uY29udGFpbnModGhpcyxjW2JdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjLGQ9MCxlPXRoaXMubGVuZ3RoLGY9W10sZz11LnRlc3QoYSl8fCJzdHJpbmciIT10eXBlb2YgYT9uKGEsYnx8dGhpcy5jb250ZXh0KTowO2U+ZDtkKyspZm9yKGM9dGhpc1tkXTtjJiZjIT09YjtjPWMucGFyZW50Tm9kZSlpZihjLm5vZGVUeXBlPDExJiYoZz9nLmluZGV4KGMpPi0xOjE9PT1jLm5vZGVUeXBlJiZuLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGMsYSkpKXtmLnB1c2goYyk7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYubGVuZ3RoPjE/bi51bmlxdWUoZik6Zil9LGluZGV4OmZ1bmN0aW9uKGEpe3JldHVybiBhPyJzdHJpbmciPT10eXBlb2YgYT9uLmluQXJyYXkodGhpc1swXSxuKGEpKTpuLmluQXJyYXkoYS5qcXVlcnk/YVswXTphLHRoaXMpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4udW5pcXVlKG4ubWVyZ2UodGhpcy5nZXQoKSxuKGEsYikpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWE/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoYSkpfX0pO2Z1bmN0aW9uIEUoYSxiKXtkbyBhPWFbYl07d2hpbGUoYSYmMSE9PWEubm9kZVR5cGUpO3JldHVybiBhfW4uZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmMTEhPT1iLm5vZGVUeXBlP2I6bnVsbH0scGFyZW50czpmdW5jdGlvbihhKXtyZXR1cm4gbi5kaXIoYSwicGFyZW50Tm9kZSIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuLmRpcihhLCJwYXJlbnROb2RlIixjKX0sbmV4dDpmdW5jdGlvbihhKXtyZXR1cm4gRShhLCJuZXh0U2libGluZyIpfSxwcmV2OmZ1bmN0aW9uKGEpe3JldHVybiBFKGEsInByZXZpb3VzU2libGluZyIpfSxuZXh0QWxsOmZ1bmN0aW9uKGEpe3JldHVybiBuLmRpcihhLCJuZXh0U2libGluZyIpfSxwcmV2QWxsOmZ1bmN0aW9uKGEpe3JldHVybiBuLmRpcihhLCJwcmV2aW91c1NpYmxpbmciKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbi5kaXIoYSwibmV4dFNpYmxpbmciLGMpfSxwcmV2VW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBuLmRpcihhLCJwcmV2aW91c1NpYmxpbmciLGMpfSxzaWJsaW5nczpmdW5jdGlvbihhKXtyZXR1cm4gbi5zaWJsaW5nKChhLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGEpfSxjaGlsZHJlbjpmdW5jdGlvbihhKXtyZXR1cm4gbi5zaWJsaW5nKGEuZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiBuLm5vZGVOYW1lKGEsImlmcmFtZSIpP2EuY29udGVudERvY3VtZW50fHxhLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ6bi5tZXJnZShbXSxhLmNoaWxkTm9kZXMpfX0sZnVuY3Rpb24oYSxiKXtuLmZuW2FdPWZ1bmN0aW9uKGMsZCl7dmFyIGU9bi5tYXAodGhpcyxiLGMpO3JldHVybiJVbnRpbCIhPT1hLnNsaWNlKC01KSYmKGQ9YyksZCYmInN0cmluZyI9PXR5cGVvZiBkJiYoZT1uLmZpbHRlcihkLGUpKSx0aGlzLmxlbmd0aD4xJiYoRFthXXx8KGU9bi51bmlxdWUoZSkpLEMudGVzdChhKSYmKGU9ZS5yZXZlcnNlKCkpKSx0aGlzLnB1c2hTdGFjayhlKX19KTt2YXIgRj0vXFMrL2csRz17fTtmdW5jdGlvbiBIKGEpe3ZhciBiPUdbYV09e307cmV0dXJuIG4uZWFjaChhLm1hdGNoKEYpfHxbXSxmdW5jdGlvbihhLGMpe2JbY109ITB9KSxifW4uQ2FsbGJhY2tzPWZ1bmN0aW9uKGEpe2E9InN0cmluZyI9PXR5cGVvZiBhP0dbYV18fEgoYSk6bi5leHRlbmQoe30sYSk7dmFyIGIsYyxkLGUsZixnLGg9W10saT0hYS5vbmNlJiZbXSxqPWZ1bmN0aW9uKGwpe2ZvcihjPWEubWVtb3J5JiZsLGQ9ITAsZj1nfHwwLGc9MCxlPWgubGVuZ3RoLGI9ITA7aCYmZT5mO2YrKylpZihoW2ZdLmFwcGx5KGxbMF0sbFsxXSk9PT0hMSYmYS5zdG9wT25GYWxzZSl7Yz0hMTticmVha31iPSExLGgmJihpP2kubGVuZ3RoJiZqKGkuc2hpZnQoKSk6Yz9oPVtdOmsuZGlzYWJsZSgpKX0saz17YWRkOmZ1bmN0aW9uKCl7aWYoaCl7dmFyIGQ9aC5sZW5ndGg7IWZ1bmN0aW9uIGYoYil7bi5lYWNoKGIsZnVuY3Rpb24oYixjKXt2YXIgZD1uLnR5cGUoYyk7ImZ1bmN0aW9uIj09PWQ/YS51bmlxdWUmJmsuaGFzKGMpfHxoLnB1c2goYyk6YyYmYy5sZW5ndGgmJiJzdHJpbmciIT09ZCYmZihjKX0pfShhcmd1bWVudHMpLGI/ZT1oLmxlbmd0aDpjJiYoZz1kLGooYykpfXJldHVybiB0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gaCYmbi5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihhLGMpe3ZhciBkO3doaWxlKChkPW4uaW5BcnJheShjLGgsZCkpPi0xKWguc3BsaWNlKGQsMSksYiYmKGU+PWQmJmUtLSxmPj1kJiZmLS0pfSksdGhpc30saGFzOmZ1bmN0aW9uKGEpe3JldHVybiBhP24uaW5BcnJheShhLGgpPi0xOiEoIWh8fCFoLmxlbmd0aCl9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIGg9W10sZT0wLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gaD1pPWM9dm9pZCAwLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIWh9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gaT12b2lkIDAsY3x8ay5kaXNhYmxlKCksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuIWl9LGZpcmVXaXRoOmZ1bmN0aW9uKGEsYyl7cmV0dXJuIWh8fGQmJiFpfHwoYz1jfHxbXSxjPVthLGMuc2xpY2U/Yy5zbGljZSgpOmNdLGI/aS5wdXNoKGMpOmooYykpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gay5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWR9fTtyZXR1cm4ga30sbi5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGEpe3ZhciBiPVtbInJlc29sdmUiLCJkb25lIixuLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwicmVzb2x2ZWQiXSxbInJlamVjdCIsImZhaWwiLG4uQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLCJyZWplY3RlZCJdLFsibm90aWZ5IiwicHJvZ3Jlc3MiLG4uQ2FsbGJhY2tzKCJtZW1vcnkiKV1dLGM9InBlbmRpbmciLGQ9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGN9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBlLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sdGhlbjpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50cztyZXR1cm4gbi5EZWZlcnJlZChmdW5jdGlvbihjKXtuLmVhY2goYixmdW5jdGlvbihiLGYpe3ZhciBnPW4uaXNGdW5jdGlvbihhW2JdKSYmYVtiXTtlW2ZbMV1dKGZ1bmN0aW9uKCl7dmFyIGE9ZyYmZy5hcHBseSh0aGlzLGFyZ3VtZW50cyk7YSYmbi5pc0Z1bmN0aW9uKGEucHJvbWlzZSk/YS5wcm9taXNlKCkuZG9uZShjLnJlc29sdmUpLmZhaWwoYy5yZWplY3QpLnByb2dyZXNzKGMubm90aWZ5KTpjW2ZbMF0rIldpdGgiXSh0aGlzPT09ZD9jLnByb21pc2UoKTp0aGlzLGc/W2FdOmFyZ3VtZW50cyl9KX0pLGE9bnVsbH0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT9uLmV4dGVuZChhLGQpOmR9fSxlPXt9O3JldHVybiBkLnBpcGU9ZC50aGVuLG4uZWFjaChiLGZ1bmN0aW9uKGEsZil7dmFyIGc9ZlsyXSxoPWZbM107ZFtmWzFdXT1nLmFkZCxoJiZnLmFkZChmdW5jdGlvbigpe2M9aH0sYlsxXmFdWzJdLmRpc2FibGUsYlsyXVsyXS5sb2NrKSxlW2ZbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIGVbZlswXSsiV2l0aCJdKHRoaXM9PT1lP2Q6dGhpcyxhcmd1bWVudHMpLHRoaXN9LGVbZlswXSsiV2l0aCJdPWcuZmlyZVdpdGh9KSxkLnByb21pc2UoZSksYSYmYS5jYWxsKGUsZSksZX0sd2hlbjpmdW5jdGlvbihhKXt2YXIgYj0wLGM9ZC5jYWxsKGFyZ3VtZW50cyksZT1jLmxlbmd0aCxmPTEhPT1lfHxhJiZuLmlzRnVuY3Rpb24oYS5wcm9taXNlKT9lOjAsZz0xPT09Zj9hOm4uRGVmZXJyZWQoKSxoPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZSl7YlthXT10aGlzLGNbYV09YXJndW1lbnRzLmxlbmd0aD4xP2QuY2FsbChhcmd1bWVudHMpOmUsYz09PWk/Zy5ub3RpZnlXaXRoKGIsYyk6LS1mfHxnLnJlc29sdmVXaXRoKGIsYyl9fSxpLGosaztpZihlPjEpZm9yKGk9bmV3IEFycmF5KGUpLGo9bmV3IEFycmF5KGUpLGs9bmV3IEFycmF5KGUpO2U+YjtiKyspY1tiXSYmbi5pc0Z1bmN0aW9uKGNbYl0ucHJvbWlzZSk/Y1tiXS5wcm9taXNlKCkuZG9uZShoKGIsayxjKSkuZmFpbChnLnJlamVjdCkucHJvZ3Jlc3MoaChiLGosaSkpOi0tZjtyZXR1cm4gZnx8Zy5yZXNvbHZlV2l0aChrLGMpLGcucHJvbWlzZSgpfX0pO3ZhciBJO24uZm4ucmVhZHk9ZnVuY3Rpb24oYSl7cmV0dXJuIG4ucmVhZHkucHJvbWlzZSgpLmRvbmUoYSksdGhpc30sbi5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEsaG9sZFJlYWR5OmZ1bmN0aW9uKGEpe2E/bi5yZWFkeVdhaXQrKzpuLnJlYWR5KCEwKX0scmVhZHk6ZnVuY3Rpb24oYSl7aWYoYT09PSEwPyEtLW4ucmVhZHlXYWl0OiFuLmlzUmVhZHkpe2lmKCF6LmJvZHkpcmV0dXJuIHNldFRpbWVvdXQobi5yZWFkeSk7bi5pc1JlYWR5PSEwLGEhPT0hMCYmLS1uLnJlYWR5V2FpdD4wfHwoSS5yZXNvbHZlV2l0aCh6LFtuXSksbi5mbi50cmlnZ2VyJiZuKHopLnRyaWdnZXIoInJlYWR5Iikub2ZmKCJyZWFkeSIpKX19fSk7ZnVuY3Rpb24gSigpe3ouYWRkRXZlbnRMaXN0ZW5lcj8oei5yZW1vdmVFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIixLLCExKSxhLnJlbW92ZUV2ZW50TGlzdGVuZXIoImxvYWQiLEssITEpKTooei5kZXRhY2hFdmVudCgib25yZWFkeXN0YXRlY2hhbmdlIixLKSxhLmRldGFjaEV2ZW50KCJvbmxvYWQiLEspKX1mdW5jdGlvbiBLKCl7KHouYWRkRXZlbnRMaXN0ZW5lcnx8ImxvYWQiPT09ZXZlbnQudHlwZXx8ImNvbXBsZXRlIj09PXoucmVhZHlTdGF0ZSkmJihKKCksbi5yZWFkeSgpKX1uLnJlYWR5LnByb21pc2U9ZnVuY3Rpb24oYil7aWYoIUkpaWYoST1uLkRlZmVycmVkKCksImNvbXBsZXRlIj09PXoucmVhZHlTdGF0ZSlzZXRUaW1lb3V0KG4ucmVhZHkpO2Vsc2UgaWYoei5hZGRFdmVudExpc3RlbmVyKXouYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsSywhMSksYS5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixLLCExKTtlbHNle3ouYXR0YWNoRXZlbnQoIm9ucmVhZHlzdGF0ZWNoYW5nZSIsSyksYS5hdHRhY2hFdmVudCgib25sb2FkIixLKTt2YXIgYz0hMTt0cnl7Yz1udWxsPT1hLmZyYW1lRWxlbWVudCYmei5kb2N1bWVudEVsZW1lbnR9Y2F0Y2goZCl7fWMmJmMuZG9TY3JvbGwmJiFmdW5jdGlvbiBlKCl7aWYoIW4uaXNSZWFkeSl7dHJ5e2MuZG9TY3JvbGwoImxlZnQiKX1jYXRjaChhKXtyZXR1cm4gc2V0VGltZW91dChlLDUwKX1KKCksbi5yZWFkeSgpfX0oKX1yZXR1cm4gSS5wcm9taXNlKGIpfTt2YXIgTD0idW5kZWZpbmVkIixNO2ZvcihNIGluIG4obCkpYnJlYWs7bC5vd25MYXN0PSIwIiE9PU0sbC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0PSExLG4oZnVuY3Rpb24oKXt2YXIgYSxiLGM9ei5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdO2MmJihhPXouY3JlYXRlRWxlbWVudCgiZGl2IiksYS5zdHlsZS5jc3NUZXh0PSJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6LTk5OTlweDttYXJnaW4tdG9wOjFweCIsYj16LmNyZWF0ZUVsZW1lbnQoImRpdiIpLGMuYXBwZW5kQ2hpbGQoYSkuYXBwZW5kQ2hpbGQoYiksdHlwZW9mIGIuc3R5bGUuem9vbSE9PUwmJihiLnN0eWxlLmNzc1RleHQ9ImJvcmRlcjowO21hcmdpbjowO3dpZHRoOjFweDtwYWRkaW5nOjFweDtkaXNwbGF5OmlubGluZTt6b29tOjEiLChsLmlubGluZUJsb2NrTmVlZHNMYXlvdXQ9Mz09PWIub2Zmc2V0V2lkdGgpJiYoYy5zdHlsZS56b29tPTEpKSxjLnJlbW92ZUNoaWxkKGEpLGE9Yj1udWxsKX0pLGZ1bmN0aW9uKCl7dmFyIGE9ei5jcmVhdGVFbGVtZW50KCJkaXYiKTtpZihudWxsPT1sLmRlbGV0ZUV4cGFuZG8pe2wuZGVsZXRlRXhwYW5kbz0hMDt0cnl7ZGVsZXRlIGEudGVzdH1jYXRjaChiKXtsLmRlbGV0ZUV4cGFuZG89ITF9fWE9bnVsbH0oKSxuLmFjY2VwdERhdGE9ZnVuY3Rpb24oYSl7dmFyIGI9bi5ub0RhdGFbKGEubm9kZU5hbWUrIiAiKS50b0xvd2VyQ2FzZSgpXSxjPSthLm5vZGVUeXBlfHwxO3JldHVybiAxIT09YyYmOSE9PWM/ITE6IWJ8fGIhPT0hMCYmYS5nZXRBdHRyaWJ1dGUoImNsYXNzaWQiKT09PWJ9O3ZhciBOPS9eKD86XHtbXHdcV10qXH18XFtbXHdcV10qXF0pJC8sTz0vKFtBLVpdKS9nO2Z1bmN0aW9uIFAoYSxiLGMpe2lmKHZvaWQgMD09PWMmJjE9PT1hLm5vZGVUeXBlKXt2YXIgZD0iZGF0YS0iK2IucmVwbGFjZShPLCItJDEiKS50b0xvd2VyQ2FzZSgpO2lmKGM9YS5nZXRBdHRyaWJ1dGUoZCksInN0cmluZyI9PXR5cGVvZiBjKXt0cnl7Yz0idHJ1ZSI9PT1jPyEwOiJmYWxzZSI9PT1jPyExOiJudWxsIj09PWM/bnVsbDorYysiIj09PWM/K2M6Ti50ZXN0KGMpP24ucGFyc2VKU09OKGMpOmN9Y2F0Y2goZSl7fW4uZGF0YShhLGIsYyl9ZWxzZSBjPXZvaWQgMH1yZXR1cm4gY31mdW5jdGlvbiBRKGEpe3ZhciBiO2ZvcihiIGluIGEpaWYoKCJkYXRhIiE9PWJ8fCFuLmlzRW1wdHlPYmplY3QoYVtiXSkpJiYidG9KU09OIiE9PWIpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gUihhLGIsZCxlKXtpZihuLmFjY2VwdERhdGEoYSkpe3ZhciBmLGcsaD1uLmV4cGFuZG8saT1hLm5vZGVUeXBlLGo9aT9uLmNhY2hlOmEsaz1pP2FbaF06YVtoXSYmaDtpZihrJiZqW2tdJiYoZXx8altrXS5kYXRhKXx8dm9pZCAwIT09ZHx8InN0cmluZyIhPXR5cGVvZiBiKXJldHVybiBrfHwoaz1pP2FbaF09Yy5wb3AoKXx8bi5ndWlkKys6aCksaltrXXx8KGpba109aT97fTp7dG9KU09OOm4ubm9vcH0pLCgib2JqZWN0Ij09dHlwZW9mIGJ8fCJmdW5jdGlvbiI9PXR5cGVvZiBiKSYmKGU/altrXT1uLmV4dGVuZChqW2tdLGIpOmpba10uZGF0YT1uLmV4dGVuZChqW2tdLmRhdGEsYikpLGc9altrXSxlfHwoZy5kYXRhfHwoZy5kYXRhPXt9KSxnPWcuZGF0YSksdm9pZCAwIT09ZCYmKGdbbi5jYW1lbENhc2UoYildPWQpLCJzdHJpbmciPT10eXBlb2YgYj8oZj1nW2JdLG51bGw9PWYmJihmPWdbbi5jYW1lbENhc2UoYildKSk6Zj1nLGYNCn19ZnVuY3Rpb24gUyhhLGIsYyl7aWYobi5hY2NlcHREYXRhKGEpKXt2YXIgZCxlLGY9YS5ub2RlVHlwZSxnPWY/bi5jYWNoZTphLGg9Zj9hW24uZXhwYW5kb106bi5leHBhbmRvO2lmKGdbaF0pe2lmKGImJihkPWM/Z1toXTpnW2hdLmRhdGEpKXtuLmlzQXJyYXkoYik/Yj1iLmNvbmNhdChuLm1hcChiLG4uY2FtZWxDYXNlKSk6YiBpbiBkP2I9W2JdOihiPW4uY2FtZWxDYXNlKGIpLGI9YiBpbiBkP1tiXTpiLnNwbGl0KCIgIikpLGU9Yi5sZW5ndGg7d2hpbGUoZS0tKWRlbGV0ZSBkW2JbZV1dO2lmKGM/IVEoZCk6IW4uaXNFbXB0eU9iamVjdChkKSlyZXR1cm59KGN8fChkZWxldGUgZ1toXS5kYXRhLFEoZ1toXSkpKSYmKGY/bi5jbGVhbkRhdGEoW2FdLCEwKTpsLmRlbGV0ZUV4cGFuZG98fGchPWcud2luZG93P2RlbGV0ZSBnW2hdOmdbaF09bnVsbCl9fX1uLmV4dGVuZCh7Y2FjaGU6e30sbm9EYXRhOnsiYXBwbGV0ICI6ITAsImVtYmVkICI6ITAsIm9iamVjdCAiOiJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDAifSxoYXNEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiBhPWEubm9kZVR5cGU/bi5jYWNoZVthW24uZXhwYW5kb11dOmFbbi5leHBhbmRvXSwhIWEmJiFRKGEpfSxkYXRhOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUihhLGIsYyl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUyhhLGIpfSxfZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFIoYSxiLGMsITApfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihhLGIpe3JldHVybiBTKGEsYiwhMCl9fSksbi5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj10aGlzWzBdLGc9ZiYmZi5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PWEpe2lmKHRoaXMubGVuZ3RoJiYoZT1uLmRhdGEoZiksMT09PWYubm9kZVR5cGUmJiFuLl9kYXRhKGYsInBhcnNlZEF0dHJzIikpKXtjPWcubGVuZ3RoO3doaWxlKGMtLSlkPWdbY10ubmFtZSwwPT09ZC5pbmRleE9mKCJkYXRhLSIpJiYoZD1uLmNhbWVsQ2FzZShkLnNsaWNlKDUpKSxQKGYsZCxlW2RdKSk7bi5fZGF0YShmLCJwYXJzZWRBdHRycyIsITApfXJldHVybiBlfXJldHVybiJvYmplY3QiPT10eXBlb2YgYT90aGlzLmVhY2goZnVuY3Rpb24oKXtuLmRhdGEodGhpcyxhKX0pOmFyZ3VtZW50cy5sZW5ndGg+MT90aGlzLmVhY2goZnVuY3Rpb24oKXtuLmRhdGEodGhpcyxhLGIpfSk6Zj9QKGYsYSxuLmRhdGEoZixhKSk6dm9pZCAwfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtuLnJlbW92ZURhdGEodGhpcyxhKX0pfX0pLG4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGE/KGI9KGJ8fCJmeCIpKyJxdWV1ZSIsZD1uLl9kYXRhKGEsYiksYyYmKCFkfHxuLmlzQXJyYXkoYyk/ZD1uLl9kYXRhKGEsYixuLm1ha2VBcnJheShjKSk6ZC5wdXNoKGMpKSxkfHxbXSk6dm9pZCAwfSxkZXF1ZXVlOmZ1bmN0aW9uKGEsYil7Yj1ifHwiZngiO3ZhciBjPW4ucXVldWUoYSxiKSxkPWMubGVuZ3RoLGU9Yy5zaGlmdCgpLGY9bi5fcXVldWVIb29rcyhhLGIpLGc9ZnVuY3Rpb24oKXtuLmRlcXVldWUoYSxiKX07ImlucHJvZ3Jlc3MiPT09ZSYmKGU9Yy5zaGlmdCgpLGQtLSksZSYmKCJmeCI9PT1iJiZjLnVuc2hpZnQoImlucHJvZ3Jlc3MiKSxkZWxldGUgZi5zdG9wLGUuY2FsbChhLGcsZikpLCFkJiZmJiZmLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz1iKyJxdWV1ZUhvb2tzIjtyZXR1cm4gbi5fZGF0YShhLGMpfHxuLl9kYXRhKGEsYyx7ZW1wdHk6bi5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IikuYWRkKGZ1bmN0aW9uKCl7bi5fcmVtb3ZlRGF0YShhLGIrInF1ZXVlIiksbi5fcmVtb3ZlRGF0YShhLGMpfSl9KX19KSxuLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz0yO3JldHVybiJzdHJpbmciIT10eXBlb2YgYSYmKGI9YSxhPSJmeCIsYy0tKSxhcmd1bWVudHMubGVuZ3RoPGM/bi5xdWV1ZSh0aGlzWzBdLGEpOnZvaWQgMD09PWI/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1uLnF1ZXVlKHRoaXMsYSxiKTtuLl9xdWV1ZUhvb2tzKHRoaXMsYSksImZ4Ij09PWEmJiJpbnByb2dyZXNzIiE9PWNbMF0mJm4uZGVxdWV1ZSh0aGlzLGEpfSl9LGRlcXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe24uZGVxdWV1ZSh0aGlzLGEpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucXVldWUoYXx8ImZ4IixbXSl9LHByb21pc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTEsZT1uLkRlZmVycmVkKCksZj10aGlzLGc9dGhpcy5sZW5ndGgsaD1mdW5jdGlvbigpey0tZHx8ZS5yZXNvbHZlV2l0aChmLFtmXSl9OyJzdHJpbmciIT10eXBlb2YgYSYmKGI9YSxhPXZvaWQgMCksYT1hfHwiZngiO3doaWxlKGctLSljPW4uX2RhdGEoZltnXSxhKyJxdWV1ZUhvb2tzIiksYyYmYy5lbXB0eSYmKGQrKyxjLmVtcHR5LmFkZChoKSk7cmV0dXJuIGgoKSxlLnByb21pc2UoYil9fSk7dmFyIFQ9L1srLV0/KD86XGQqXC58KVxkKyg/OltlRV1bKy1dP1xkK3wpLy5zb3VyY2UsVT1bIlRvcCIsIlJpZ2h0IiwiQm90dG9tIiwiTGVmdCJdLFY9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT1ifHxhLCJub25lIj09PW4uY3NzKGEsImRpc3BsYXkiKXx8IW4uY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpfSxXPW4uYWNjZXNzPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPTAsaT1hLmxlbmd0aCxqPW51bGw9PWM7aWYoIm9iamVjdCI9PT1uLnR5cGUoYykpe2U9ITA7Zm9yKGggaW4gYyluLmFjY2VzcyhhLGIsaCxjW2hdLCEwLGYsZyl9ZWxzZSBpZih2b2lkIDAhPT1kJiYoZT0hMCxuLmlzRnVuY3Rpb24oZCl8fChnPSEwKSxqJiYoZz8oYi5jYWxsKGEsZCksYj1udWxsKTooaj1iLGI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBqLmNhbGwobihhKSxjKX0pKSxiKSlmb3IoO2k+aDtoKyspYihhW2hdLGMsZz9kOmQuY2FsbChhW2hdLGgsYihhW2hdLGMpKSk7cmV0dXJuIGU/YTpqP2IuY2FsbChhKTppP2IoYVswXSxjKTpmfSxYPS9eKD86Y2hlY2tib3h8cmFkaW8pJC9pOyFmdW5jdGlvbigpe3ZhciBhPXouY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGI9ei5jcmVhdGVFbGVtZW50KCJkaXYiKSxjPXouY3JlYXRlRWxlbWVudCgiaW5wdXQiKTtpZihiLnNldEF0dHJpYnV0ZSgiY2xhc3NOYW1lIiwidCIpLGIuaW5uZXJIVE1MPSIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT4iLGwubGVhZGluZ1doaXRlc3BhY2U9Mz09PWIuZmlyc3RDaGlsZC5ub2RlVHlwZSxsLnRib2R5PSFiLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJ0Ym9keSIpLmxlbmd0aCxsLmh0bWxTZXJpYWxpemU9ISFiLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJsaW5rIikubGVuZ3RoLGwuaHRtbDVDbG9uZT0iPDpuYXY+PC86bmF2PiIhPT16LmNyZWF0ZUVsZW1lbnQoIm5hdiIpLmNsb25lTm9kZSghMCkub3V0ZXJIVE1MLGMudHlwZT0iY2hlY2tib3giLGMuY2hlY2tlZD0hMCxhLmFwcGVuZENoaWxkKGMpLGwuYXBwZW5kQ2hlY2tlZD1jLmNoZWNrZWQsYi5pbm5lckhUTUw9Ijx0ZXh0YXJlYT54PC90ZXh0YXJlYT4iLGwubm9DbG9uZUNoZWNrZWQ9ISFiLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZSxhLmFwcGVuZENoaWxkKGIpLGIuaW5uZXJIVE1MPSI8aW5wdXQgdHlwZT0ncmFkaW8nIGNoZWNrZWQ9J2NoZWNrZWQnIG5hbWU9J3QnLz4iLGwuY2hlY2tDbG9uZT1iLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxsLm5vQ2xvbmVFdmVudD0hMCxiLmF0dGFjaEV2ZW50JiYoYi5hdHRhY2hFdmVudCgib25jbGljayIsZnVuY3Rpb24oKXtsLm5vQ2xvbmVFdmVudD0hMX0pLGIuY2xvbmVOb2RlKCEwKS5jbGljaygpKSxudWxsPT1sLmRlbGV0ZUV4cGFuZG8pe2wuZGVsZXRlRXhwYW5kbz0hMDt0cnl7ZGVsZXRlIGIudGVzdH1jYXRjaChkKXtsLmRlbGV0ZUV4cGFuZG89ITF9fWE9Yj1jPW51bGx9KCksZnVuY3Rpb24oKXt2YXIgYixjLGQ9ei5jcmVhdGVFbGVtZW50KCJkaXYiKTtmb3IoYiBpbntzdWJtaXQ6ITAsY2hhbmdlOiEwLGZvY3VzaW46ITB9KWM9Im9uIitiLChsW2IrIkJ1YmJsZXMiXT1jIGluIGEpfHwoZC5zZXRBdHRyaWJ1dGUoYywidCIpLGxbYisiQnViYmxlcyJdPWQuYXR0cmlidXRlc1tjXS5leHBhbmRvPT09ITEpO2Q9bnVsbH0oKTt2YXIgWT0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2ksWj0vXmtleS8sJD0vXig/Om1vdXNlfGNvbnRleHRtZW51KXxjbGljay8sXz0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sYWI9L14oW14uXSopKD86XC4oLispfCkkLztmdW5jdGlvbiBiYigpe3JldHVybiEwfWZ1bmN0aW9uIGNiKCl7cmV0dXJuITF9ZnVuY3Rpb24gZGIoKXt0cnl7cmV0dXJuIHouYWN0aXZlRWxlbWVudH1jYXRjaChhKXt9fW4uZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxtLG8scCxxLHI9bi5fZGF0YShhKTtpZihyKXtjLmhhbmRsZXImJihpPWMsYz1pLmhhbmRsZXIsZT1pLnNlbGVjdG9yKSxjLmd1aWR8fChjLmd1aWQ9bi5ndWlkKyspLChnPXIuZXZlbnRzKXx8KGc9ci5ldmVudHM9e30pLChrPXIuaGFuZGxlKXx8KGs9ci5oYW5kbGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHR5cGVvZiBuPT09THx8YSYmbi5ldmVudC50cmlnZ2VyZWQ9PT1hLnR5cGU/dm9pZCAwOm4uZXZlbnQuZGlzcGF0Y2guYXBwbHkoay5lbGVtLGFyZ3VtZW50cyl9LGsuZWxlbT1hKSxiPShifHwiIikubWF0Y2goRil8fFsiIl0saD1iLmxlbmd0aDt3aGlsZShoLS0pZj1hYi5leGVjKGJbaF0pfHxbXSxvPXE9ZlsxXSxwPShmWzJdfHwiIikuc3BsaXQoIi4iKS5zb3J0KCksbyYmKGo9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShlP2ouZGVsZWdhdGVUeXBlOmouYmluZFR5cGUpfHxvLGo9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxsPW4uZXh0ZW5kKHt0eXBlOm8sb3JpZ1R5cGU6cSxkYXRhOmQsaGFuZGxlcjpjLGd1aWQ6Yy5ndWlkLHNlbGVjdG9yOmUsbmVlZHNDb250ZXh0OmUmJm4uZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChlKSxuYW1lc3BhY2U6cC5qb2luKCIuIil9LGkpLChtPWdbb10pfHwobT1nW29dPVtdLG0uZGVsZWdhdGVDb3VudD0wLGouc2V0dXAmJmouc2V0dXAuY2FsbChhLGQscCxrKSE9PSExfHwoYS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihvLGssITEpOmEuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoIm9uIitvLGspKSksai5hZGQmJihqLmFkZC5jYWxsKGEsbCksbC5oYW5kbGVyLmd1aWR8fChsLmhhbmRsZXIuZ3VpZD1jLmd1aWQpKSxlP20uc3BsaWNlKG0uZGVsZWdhdGVDb3VudCsrLDAsbCk6bS5wdXNoKGwpLG4uZXZlbnQuZ2xvYmFsW29dPSEwKTthPW51bGx9fSxyZW1vdmU6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxtLG8scCxxLHI9bi5oYXNEYXRhKGEpJiZuLl9kYXRhKGEpO2lmKHImJihrPXIuZXZlbnRzKSl7Yj0oYnx8IiIpLm1hdGNoKEYpfHxbIiJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWlmKGg9YWIuZXhlYyhiW2pdKXx8W10sbz1xPWhbMV0scD0oaFsyXXx8IiIpLnNwbGl0KCIuIikuc29ydCgpLG8pe2w9bi5ldmVudC5zcGVjaWFsW29dfHx7fSxvPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxvLG09a1tvXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKCIoXnxcXC4pIitwLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpLGk9Zj1tLmxlbmd0aDt3aGlsZShmLS0pZz1tW2ZdLCFlJiZxIT09Zy5vcmlnVHlwZXx8YyYmYy5ndWlkIT09Zy5ndWlkfHxoJiYhaC50ZXN0KGcubmFtZXNwYWNlKXx8ZCYmZCE9PWcuc2VsZWN0b3ImJigiKioiIT09ZHx8IWcuc2VsZWN0b3IpfHwobS5zcGxpY2UoZiwxKSxnLnNlbGVjdG9yJiZtLmRlbGVnYXRlQ291bnQtLSxsLnJlbW92ZSYmbC5yZW1vdmUuY2FsbChhLGcpKTtpJiYhbS5sZW5ndGgmJihsLnRlYXJkb3duJiZsLnRlYXJkb3duLmNhbGwoYSxwLHIuaGFuZGxlKSE9PSExfHxuLnJlbW92ZUV2ZW50KGEsbyxyLmhhbmRsZSksZGVsZXRlIGtbb10pfWVsc2UgZm9yKG8gaW4gayluLmV2ZW50LnJlbW92ZShhLG8rYltqXSxjLGQsITApO24uaXNFbXB0eU9iamVjdChrKSYmKGRlbGV0ZSByLmhhbmRsZSxuLl9yZW1vdmVEYXRhKGEsImV2ZW50cyIpKX19LHRyaWdnZXI6ZnVuY3Rpb24oYixjLGQsZSl7dmFyIGYsZyxoLGksayxsLG0sbz1bZHx8el0scD1qLmNhbGwoYiwidHlwZSIpP2IudHlwZTpiLHE9ai5jYWxsKGIsIm5hbWVzcGFjZSIpP2IubmFtZXNwYWNlLnNwbGl0KCIuIik6W107aWYoaD1sPWQ9ZHx8eiwzIT09ZC5ub2RlVHlwZSYmOCE9PWQubm9kZVR5cGUmJiFfLnRlc3QocCtuLmV2ZW50LnRyaWdnZXJlZCkmJihwLmluZGV4T2YoIi4iKT49MCYmKHE9cC5zcGxpdCgiLiIpLHA9cS5zaGlmdCgpLHEuc29ydCgpKSxnPXAuaW5kZXhPZigiOiIpPDAmJiJvbiIrcCxiPWJbbi5leHBhbmRvXT9iOm5ldyBuLkV2ZW50KHAsIm9iamVjdCI9PXR5cGVvZiBiJiZiKSxiLmlzVHJpZ2dlcj1lPzI6MyxiLm5hbWVzcGFjZT1xLmpvaW4oIi4iKSxiLm5hbWVzcGFjZV9yZT1iLm5hbWVzcGFjZT9uZXcgUmVnRXhwKCIoXnxcXC4pIitxLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpOm51bGwsYi5yZXN1bHQ9dm9pZCAwLGIudGFyZ2V0fHwoYi50YXJnZXQ9ZCksYz1udWxsPT1jP1tiXTpuLm1ha2VBcnJheShjLFtiXSksaz1uLmV2ZW50LnNwZWNpYWxbcF18fHt9LGV8fCFrLnRyaWdnZXJ8fGsudHJpZ2dlci5hcHBseShkLGMpIT09ITEpKXtpZighZSYmIWsubm9CdWJibGUmJiFuLmlzV2luZG93KGQpKXtmb3IoaT1rLmRlbGVnYXRlVHlwZXx8cCxfLnRlc3QoaStwKXx8KGg9aC5wYXJlbnROb2RlKTtoO2g9aC5wYXJlbnROb2RlKW8ucHVzaChoKSxsPWg7bD09PShkLm93bmVyRG9jdW1lbnR8fHopJiZvLnB1c2gobC5kZWZhdWx0Vmlld3x8bC5wYXJlbnRXaW5kb3d8fGEpfW09MDt3aGlsZSgoaD1vW20rK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWIudHlwZT1tPjE/aTprLmJpbmRUeXBlfHxwLGY9KG4uX2RhdGEoaCwiZXZlbnRzIil8fHt9KVtiLnR5cGVdJiZuLl9kYXRhKGgsImhhbmRsZSIpLGYmJmYuYXBwbHkoaCxjKSxmPWcmJmhbZ10sZiYmZi5hcHBseSYmbi5hY2NlcHREYXRhKGgpJiYoYi5yZXN1bHQ9Zi5hcHBseShoLGMpLGIucmVzdWx0PT09ITEmJmIucHJldmVudERlZmF1bHQoKSk7aWYoYi50eXBlPXAsIWUmJiFiLmlzRGVmYXVsdFByZXZlbnRlZCgpJiYoIWsuX2RlZmF1bHR8fGsuX2RlZmF1bHQuYXBwbHkoby5wb3AoKSxjKT09PSExKSYmbi5hY2NlcHREYXRhKGQpJiZnJiZkW3BdJiYhbi5pc1dpbmRvdyhkKSl7bD1kW2ddLGwmJihkW2ddPW51bGwpLG4uZXZlbnQudHJpZ2dlcmVkPXA7dHJ5e2RbcF0oKX1jYXRjaChyKXt9bi5ldmVudC50cmlnZ2VyZWQ9dm9pZCAwLGwmJihkW2ddPWwpfXJldHVybiBiLnJlc3VsdH19LGRpc3BhdGNoOmZ1bmN0aW9uKGEpe2E9bi5ldmVudC5maXgoYSk7dmFyIGIsYyxlLGYsZyxoPVtdLGk9ZC5jYWxsKGFyZ3VtZW50cyksaj0obi5fZGF0YSh0aGlzLCJldmVudHMiKXx8e30pW2EudHlwZV18fFtdLGs9bi5ldmVudC5zcGVjaWFsW2EudHlwZV18fHt9O2lmKGlbMF09YSxhLmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWsucHJlRGlzcGF0Y2h8fGsucHJlRGlzcGF0Y2guY2FsbCh0aGlzLGEpIT09ITEpe2g9bi5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsYSxqKSxiPTA7d2hpbGUoKGY9aFtiKytdKSYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7YS5jdXJyZW50VGFyZ2V0PWYuZWxlbSxnPTA7d2hpbGUoKGU9Zi5oYW5kbGVyc1tnKytdKSYmIWEuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkoIWEubmFtZXNwYWNlX3JlfHxhLm5hbWVzcGFjZV9yZS50ZXN0KGUubmFtZXNwYWNlKSkmJihhLmhhbmRsZU9iaj1lLGEuZGF0YT1lLmRhdGEsYz0oKG4uZXZlbnQuc3BlY2lhbFtlLm9yaWdUeXBlXXx8e30pLmhhbmRsZXx8ZS5oYW5kbGVyKS5hcHBseShmLmVsZW0saSksdm9pZCAwIT09YyYmKGEucmVzdWx0PWMpPT09ITEmJihhLnByZXZlbnREZWZhdWx0KCksYS5zdG9wUHJvcGFnYXRpb24oKSkpfXJldHVybiBrLnBvc3REaXNwYXRjaCYmay5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLGEpLGEucmVzdWx0fX0saGFuZGxlcnM6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnPVtdLGg9Yi5kZWxlZ2F0ZUNvdW50LGk9YS50YXJnZXQ7aWYoaCYmaS5ub2RlVHlwZSYmKCFhLmJ1dHRvbnx8ImNsaWNrIiE9PWEudHlwZSkpZm9yKDtpIT10aGlzO2k9aS5wYXJlbnROb2RlfHx0aGlzKWlmKDE9PT1pLm5vZGVUeXBlJiYoaS5kaXNhYmxlZCE9PSEwfHwiY2xpY2siIT09YS50eXBlKSl7Zm9yKGU9W10sZj0wO2g+ZjtmKyspZD1iW2ZdLGM9ZC5zZWxlY3RvcisiICIsdm9pZCAwPT09ZVtjXSYmKGVbY109ZC5uZWVkc0NvbnRleHQ/bihjLHRoaXMpLmluZGV4KGkpPj0wOm4uZmluZChjLHRoaXMsbnVsbCxbaV0pLmxlbmd0aCksZVtjXSYmZS5wdXNoKGQpO2UubGVuZ3RoJiZnLnB1c2goe2VsZW06aSxoYW5kbGVyczplfSl9cmV0dXJuIGg8Yi5sZW5ndGgmJmcucHVzaCh7ZWxlbTp0aGlzLGhhbmRsZXJzOmIuc2xpY2UoaCl9KSxnfSxmaXg6ZnVuY3Rpb24oYSl7aWYoYVtuLmV4cGFuZG9dKXJldHVybiBhO3ZhciBiLGMsZCxlPWEudHlwZSxmPWEsZz10aGlzLmZpeEhvb2tzW2VdO2d8fCh0aGlzLmZpeEhvb2tzW2VdPWc9JC50ZXN0KGUpP3RoaXMubW91c2VIb29rczpaLnRlc3QoZSk/dGhpcy5rZXlIb29rczp7fSksZD1nLnByb3BzP3RoaXMucHJvcHMuY29uY2F0KGcucHJvcHMpOnRoaXMucHJvcHMsYT1uZXcgbi5FdmVudChmKSxiPWQubGVuZ3RoO3doaWxlKGItLSljPWRbYl0sYVtjXT1mW2NdO3JldHVybiBhLnRhcmdldHx8KGEudGFyZ2V0PWYuc3JjRWxlbWVudHx8eiksMz09PWEudGFyZ2V0Lm5vZGVUeXBlJiYoYS50YXJnZXQ9YS50YXJnZXQucGFyZW50Tm9kZSksYS5tZXRhS2V5PSEhYS5tZXRhS2V5LGcuZmlsdGVyP2cuZmlsdGVyKGEsZik6YX0scHJvcHM6ImFsdEtleSBidWJibGVzIGNhbmNlbGFibGUgY3RybEtleSBjdXJyZW50VGFyZ2V0IGV2ZW50UGhhc2UgbWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaCIuc3BsaXQoIiAiKSxmaXhIb29rczp7fSxrZXlIb29rczp7cHJvcHM6ImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGUiLnNwbGl0KCIgIiksZmlsdGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIG51bGw9PWEud2hpY2gmJihhLndoaWNoPW51bGwhPWIuY2hhckNvZGU/Yi5jaGFyQ29kZTpiLmtleUNvZGUpLGF9fSxtb3VzZUhvb2tzOntwcm9wczoiYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIGZyb21FbGVtZW50IG9mZnNldFggb2Zmc2V0WSBwYWdlWCBwYWdlWSBzY3JlZW5YIHNjcmVlblkgdG9FbGVtZW50Ii5zcGxpdCgiICIpLGZpbHRlcjpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmPWIuYnV0dG9uLGc9Yi5mcm9tRWxlbWVudDtyZXR1cm4gbnVsbD09YS5wYWdlWCYmbnVsbCE9Yi5jbGllbnRYJiYoZD1hLnRhcmdldC5vd25lckRvY3VtZW50fHx6LGU9ZC5kb2N1bWVudEVsZW1lbnQsYz1kLmJvZHksYS5wYWdlWD1iLmNsaWVudFgrKGUmJmUuc2Nyb2xsTGVmdHx8YyYmYy5zY3JvbGxMZWZ0fHwwKS0oZSYmZS5jbGllbnRMZWZ0fHxjJiZjLmNsaWVudExlZnR8fDApLGEucGFnZVk9Yi5jbGllbnRZKyhlJiZlLnNjcm9sbFRvcHx8YyYmYy5zY3JvbGxUb3B8fDApLShlJiZlLmNsaWVudFRvcHx8YyYmYy5jbGllbnRUb3B8fDApKSwhYS5yZWxhdGVkVGFyZ2V0JiZnJiYoYS5yZWxhdGVkVGFyZ2V0PWc9PT1hLnRhcmdldD9iLnRvRWxlbWVudDpnKSxhLndoaWNofHx2b2lkIDA9PT1mfHwoYS53aGljaD0xJmY/MToyJmY/Mzo0JmY/MjowKSxhfX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGZvY3VzOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYodGhpcyE9PWRiKCkmJnRoaXMuZm9jdXMpdHJ5e3JldHVybiB0aGlzLmZvY3VzKCksITF9Y2F0Y2goYSl7fX0sZGVsZWdhdGVUeXBlOiJmb2N1c2luIn0sYmx1cjp7dHJpZ2dlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzPT09ZGIoKSYmdGhpcy5ibHVyPyh0aGlzLmJsdXIoKSwhMSk6dm9pZCAwfSxkZWxlZ2F0ZVR5cGU6ImZvY3Vzb3V0In0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbi5ub2RlTmFtZSh0aGlzLCJpbnB1dCIpJiYiY2hlY2tib3giPT09dGhpcy50eXBlJiZ0aGlzLmNsaWNrPyh0aGlzLmNsaWNrKCksITEpOnZvaWQgMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ubm9kZU5hbWUoYS50YXJnZXQsImEiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEucmVzdWx0JiYoYS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWEucmVzdWx0KX19fSxzaW11bGF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1uLmV4dGVuZChuZXcgbi5FdmVudCxjLHt0eXBlOmEsaXNTaW11bGF0ZWQ6ITAsb3JpZ2luYWxFdmVudDp7fX0pO2Q/bi5ldmVudC50cmlnZ2VyKGUsbnVsbCxiKTpuLmV2ZW50LmRpc3BhdGNoLmNhbGwoYixlKSxlLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZjLnByZXZlbnREZWZhdWx0KCl9fSxuLnJlbW92ZUV2ZW50PXoucmVtb3ZlRXZlbnRMaXN0ZW5lcj9mdW5jdGlvbihhLGIsYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjLCExKX06ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPSJvbiIrYjthLmRldGFjaEV2ZW50JiYodHlwZW9mIGFbZF09PT1MJiYoYVtkXT1udWxsKSxhLmRldGFjaEV2ZW50KGQsYykpfSxuLkV2ZW50PWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBuLkV2ZW50PyhhJiZhLnR5cGU/KHRoaXMub3JpZ2luYWxFdmVudD1hLHRoaXMudHlwZT1hLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YS5kZWZhdWx0UHJldmVudGVkfHx2b2lkIDA9PT1hLmRlZmF1bHRQcmV2ZW50ZWQmJihhLnJldHVyblZhbHVlPT09ITF8fGEuZ2V0UHJldmVudERlZmF1bHQmJmEuZ2V0UHJldmVudERlZmF1bHQoKSk/YmI6Y2IpOnRoaXMudHlwZT1hLGImJm4uZXh0ZW5kKHRoaXMsYiksdGhpcy50aW1lU3RhbXA9YSYmYS50aW1lU3RhbXB8fG4ubm93KCksdm9pZCh0aGlzW24uZXhwYW5kb109ITApKTpuZXcgbi5FdmVudChhLGIpfSxuLkV2ZW50LnByb3RvdHlwZT17aXNEZWZhdWx0UHJldmVudGVkOmNiLGlzUHJvcGFnYXRpb25TdG9wcGVkOmNiLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOmNiLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPWJiLGEmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTphLnJldHVyblZhbHVlPSExKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmIsYSYmKGEuc3RvcFByb3BhZ2F0aW9uJiZhLnN0b3BQcm9wYWdhdGlvbigpLGEuY2FuY2VsQnViYmxlPSEwKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZD1iYix0aGlzLnN0b3BQcm9wYWdhdGlvbigpfX0sbi5lYWNoKHttb3VzZWVudGVyOiJtb3VzZW92ZXIiLG1vdXNlbGVhdmU6Im1vdXNlb3V0In0sZnVuY3Rpb24oYSxiKXtuLmV2ZW50LnNwZWNpYWxbYV09e2RlbGVnYXRlVHlwZTpiLGJpbmRUeXBlOmIsaGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBjLGQ9dGhpcyxlPWEucmVsYXRlZFRhcmdldCxmPWEuaGFuZGxlT2JqO3JldHVybighZXx8ZSE9PWQmJiFuLmNvbnRhaW5zKGQsZSkpJiYoYS50eXBlPWYub3JpZ1R5cGUsYz1mLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGEudHlwZT1iKSxjfX19KSxsLnN1Ym1pdEJ1YmJsZXN8fChuLmV2ZW50LnNwZWNpYWwuc3VibWl0PXtzZXR1cDpmdW5jdGlvbigpe3JldHVybiBuLm5vZGVOYW1lKHRoaXMsImZvcm0iKT8hMTp2b2lkIG4uZXZlbnQuYWRkKHRoaXMsImNsaWNrLl9zdWJtaXQga2V5cHJlc3MuX3N1Ym1pdCIsZnVuY3Rpb24oYSl7dmFyIGI9YS50YXJnZXQsYz1uLm5vZGVOYW1lKGIsImlucHV0Iil8fG4ubm9kZU5hbWUoYiwiYnV0dG9uIik/Yi5mb3JtOnZvaWQgMDtjJiYhbi5fZGF0YShjLCJzdWJtaXRCdWJibGVzIikmJihuLmV2ZW50LmFkZChjLCJzdWJtaXQuX3N1Ym1pdCIsZnVuY3Rpb24oYSl7YS5fc3VibWl0X2J1YmJsZT0hMH0pLG4uX2RhdGEoYywic3VibWl0QnViYmxlcyIsITApKX0pfSxwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oYSl7YS5fc3VibWl0X2J1YmJsZSYmKGRlbGV0ZSBhLl9zdWJtaXRfYnViYmxlLHRoaXMucGFyZW50Tm9kZSYmIWEuaXNUcmlnZ2VyJiZuLmV2ZW50LnNpbXVsYXRlKCJzdWJtaXQiLHRoaXMucGFyZW50Tm9kZSxhLCEwKSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7cmV0dXJuIG4ubm9kZU5hbWUodGhpcywiZm9ybSIpPyExOnZvaWQgbi5ldmVudC5yZW1vdmUodGhpcywiLl9zdWJtaXQiKX19KSxsLmNoYW5nZUJ1YmJsZXN8fChuLmV2ZW50LnNwZWNpYWwuY2hhbmdlPXtzZXR1cDpmdW5jdGlvbigpe3JldHVybiBZLnRlc3QodGhpcy5ub2RlTmFtZSk/KCgiY2hlY2tib3giPT09dGhpcy50eXBlfHwicmFkaW8iPT09dGhpcy50eXBlKSYmKG4uZXZlbnQuYWRkKHRoaXMsInByb3BlcnR5Y2hhbmdlLl9jaGFuZ2UiLGZ1bmN0aW9uKGEpeyJjaGVja2VkIj09PWEub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUmJih0aGlzLl9qdXN0X2NoYW5nZWQ9ITApfSksbi5ldmVudC5hZGQodGhpcywiY2xpY2suX2NoYW5nZSIsZnVuY3Rpb24oYSl7dGhpcy5fanVzdF9jaGFuZ2VkJiYhYS5pc1RyaWdnZXImJih0aGlzLl9qdXN0X2NoYW5nZWQ9ITEpLG4uZXZlbnQuc2ltdWxhdGUoImNoYW5nZSIsdGhpcyxhLCEwKX0pKSwhMSk6dm9pZCBuLmV2ZW50LmFkZCh0aGlzLCJiZWZvcmVhY3RpdmF0ZS5fY2hhbmdlIixmdW5jdGlvbihhKXt2YXIgYj1hLnRhcmdldDtZLnRlc3QoYi5ub2RlTmFtZSkmJiFuLl9kYXRhKGIsImNoYW5nZUJ1YmJsZXMiKSYmKG4uZXZlbnQuYWRkKGIsImNoYW5nZS5fY2hhbmdlIixmdW5jdGlvbihhKXshdGhpcy5wYXJlbnROb2RlfHxhLmlzU2ltdWxhdGVkfHxhLmlzVHJpZ2dlcnx8bi5ldmVudC5zaW11bGF0ZSgiY2hhbmdlIix0aGlzLnBhcmVudE5vZGUsYSwhMCl9KSxuLl9kYXRhKGIsImNoYW5nZUJ1YmJsZXMiLCEwKSl9KX0saGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBiPWEudGFyZ2V0O3JldHVybiB0aGlzIT09Ynx8YS5pc1NpbXVsYXRlZHx8YS5pc1RyaWdnZXJ8fCJyYWRpbyIhPT1iLnR5cGUmJiJjaGVja2JveCIhPT1iLnR5cGU/YS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dm9pZCAwfSx0ZWFyZG93bjpmdW5jdGlvbigpe3JldHVybiBuLmV2ZW50LnJlbW92ZSh0aGlzLCIuX2NoYW5nZSIpLCFZLnRlc3QodGhpcy5ub2RlTmFtZSl9fSksbC5mb2N1c2luQnViYmxlc3x8bi5lYWNoKHtmb2N1czoiZm9jdXNpbiIsYmx1cjoiZm9jdXNvdXQifSxmdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEpe24uZXZlbnQuc2ltdWxhdGUoYixhLnRhcmdldCxuLmV2ZW50LmZpeChhKSwhMCl9O24uZXZlbnQuc3BlY2lhbFtiXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1uLl9kYXRhKGQsYik7ZXx8ZC5hZGRFdmVudExpc3RlbmVyKGEsYywhMCksbi5fZGF0YShkLGIsKGV8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPW4uX2RhdGEoZCxiKS0xO2U/bi5fZGF0YShkLGIsZSk6KGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGMsITApLG4uX3JlbW92ZURhdGEoZCxiKSl9fX0pLG4uZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGc7aWYoIm9iamVjdCI9PXR5cGVvZiBhKXsic3RyaW5nIiE9dHlwZW9mIGImJihjPWN8fGIsYj12b2lkIDApO2ZvcihmIGluIGEpdGhpcy5vbihmLGIsYyxhW2ZdLGUpO3JldHVybiB0aGlzfWlmKG51bGw9PWMmJm51bGw9PWQ/KGQ9YixjPWI9dm9pZCAwKTpudWxsPT1kJiYoInN0cmluZyI9PXR5cGVvZiBiPyhkPWMsYz12b2lkIDApOihkPWMsYz1iLGI9dm9pZCAwKSksZD09PSExKWQ9Y2I7ZWxzZSBpZighZClyZXR1cm4gdGhpcztyZXR1cm4gMT09PWUmJihnPWQsZD1mdW5jdGlvbihhKXtyZXR1cm4gbigpLm9mZihhKSxnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZC5ndWlkPWcuZ3VpZHx8KGcuZ3VpZD1uLmd1aWQrKykpLHRoaXMuZWFjaChmdW5jdGlvbigpe24uZXZlbnQuYWRkKHRoaXMsYSxkLGMsYil9KX0sb25lOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLm9uKGEsYixjLGQsMSl9LG9mZjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZTtpZihhJiZhLnByZXZlbnREZWZhdWx0JiZhLmhhbmRsZU9iailyZXR1cm4gZD1hLmhhbmRsZU9iaixuKGEuZGVsZWdhdGVUYXJnZXQpLm9mZihkLm5hbWVzcGFjZT9kLm9yaWdUeXBlKyIuIitkLm5hbWVzcGFjZTpkLm9yaWdUeXBlLGQuc2VsZWN0b3IsZC5oYW5kbGVyKSx0aGlzO2lmKCJvYmplY3QiPT10eXBlb2YgYSl7Zm9yKGUgaW4gYSl0aGlzLm9mZihlLGIsYVtlXSk7cmV0dXJuIHRoaXN9cmV0dXJuKGI9PT0hMXx8ImZ1bmN0aW9uIj09dHlwZW9mIGIpJiYoYz1iLGI9dm9pZCAwKSxjPT09ITEmJihjPWNiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtuLmV2ZW50LnJlbW92ZSh0aGlzLGEsYyxiKX0pfSx0cmlnZ2VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe24uZXZlbnQudHJpZ2dlcihhLGIsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzWzBdO3JldHVybiBjP24uZXZlbnQudHJpZ2dlcihhLGIsYywhMCk6dm9pZCAwfX0pO2Z1bmN0aW9uIGViKGEpe3ZhciBiPWZiLnNwbGl0KCJ8IiksYz1hLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZihjLmNyZWF0ZUVsZW1lbnQpd2hpbGUoYi5sZW5ndGgpYy5jcmVhdGVFbGVtZW50KGIucG9wKCkpO3JldHVybiBjfXZhciBmYj0iYWJicnxhcnRpY2xlfGFzaWRlfGF1ZGlvfGJkaXxjYW52YXN8ZGF0YXxkYXRhbGlzdHxkZXRhaWxzfGZpZ2NhcHRpb258ZmlndXJlfGZvb3RlcnxoZWFkZXJ8aGdyb3VwfG1hcmt8bWV0ZXJ8bmF2fG91dHB1dHxwcm9ncmVzc3xzZWN0aW9ufHN1bW1hcnl8dGltZXx2aWRlbyIsZ2I9LyBqUXVlcnlcZCs9Iig/Om51bGx8XGQrKSIvZyxoYj1uZXcgUmVnRXhwKCI8KD86IitmYisiKVtcXHMvPl0iLCJpIiksaWI9L15ccysvLGpiPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcdzpdKylbXj5dKilcLz4vZ2ksa2I9LzwoW1x3Ol0rKS8sbGI9Lzx0Ym9keS9pLG1iPS88fCYjP1x3KzsvLG5iPS88KD86c2NyaXB0fHN0eWxlfGxpbmspL2ksb2I9L2NoZWNrZWRccyooPzpbXj1dfD1ccyouY2hlY2tlZC4pL2kscGI9L14kfFwvKD86amF2YXxlY21hKXNjcmlwdC9pLHFiPS9edHJ1ZVwvKC4qKS8scmI9L15ccyo8ISg/OlxbQ0RBVEFcW3wtLSl8KD86XF1cXXwtLSk+XHMqJC9nLHNiPXtvcHRpb246WzEsIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz4iLCI8L3NlbGVjdD4iXSxsZWdlbmQ6WzEsIjxmaWVsZHNldD4iLCI8L2ZpZWxkc2V0PiJdLGFyZWE6WzEsIjxtYXA+IiwiPC9tYXA+Il0scGFyYW06WzEsIjxvYmplY3Q+IiwiPC9vYmplY3Q+Il0sdGhlYWQ6WzEsIjx0YWJsZT4iLCI8L3RhYmxlPiJdLHRyOlsyLCI8dGFibGU+PHRib2R5PiIsIjwvdGJvZHk+PC90YWJsZT4iXSxjb2w6WzIsIjx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+IiwiPC9jb2xncm91cD48L3RhYmxlPiJdLHRkOlszLCI8dGFibGU+PHRib2R5Pjx0cj4iLCI8L3RyPjwvdGJvZHk+PC90YWJsZT4iXSxfZGVmYXVsdDpsLmh0bWxTZXJpYWxpemU/WzAsIiIsIiJdOlsxLCJYPGRpdj4iLCI8L2Rpdj4iXX0sdGI9ZWIoeiksdWI9dGIuYXBwZW5kQ2hpbGQoei5jcmVhdGVFbGVtZW50KCJkaXYiKSk7c2Iub3B0Z3JvdXA9c2Iub3B0aW9uLHNiLnRib2R5PXNiLnRmb290PXNiLmNvbGdyb3VwPXNiLmNhcHRpb249c2IudGhlYWQsc2IudGg9c2IudGQ7ZnVuY3Rpb24gdmIoYSxiKXt2YXIgYyxkLGU9MCxmPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lIT09TD9hLmdldEVsZW1lbnRzQnlUYWdOYW1lKGJ8fCIqIik6dHlwZW9mIGEucXVlcnlTZWxlY3RvckFsbCE9PUw/YS5xdWVyeVNlbGVjdG9yQWxsKGJ8fCIqIik6dm9pZCAwO2lmKCFmKWZvcihmPVtdLGM9YS5jaGlsZE5vZGVzfHxhO251bGwhPShkPWNbZV0pO2UrKykhYnx8bi5ub2RlTmFtZShkLGIpP2YucHVzaChkKTpuLm1lcmdlKGYsdmIoZCxiKSk7cmV0dXJuIHZvaWQgMD09PWJ8fGImJm4ubm9kZU5hbWUoYSxiKT9uLm1lcmdlKFthXSxmKTpmfWZ1bmN0aW9uIHdiKGEpe1gudGVzdChhLnR5cGUpJiYoYS5kZWZhdWx0Q2hlY2tlZD1hLmNoZWNrZWQpfWZ1bmN0aW9uIHhiKGEsYil7cmV0dXJuIG4ubm9kZU5hbWUoYSwidGFibGUiKSYmbi5ub2RlTmFtZSgxMSE9PWIubm9kZVR5cGU/YjpiLmZpcnN0Q2hpbGQsInRyIik/YS5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGJvZHkiKVswXXx8YS5hcHBlbmRDaGlsZChhLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidGJvZHkiKSk6YX1mdW5jdGlvbiB5YihhKXtyZXR1cm4gYS50eXBlPShudWxsIT09bi5maW5kLmF0dHIoYSwidHlwZSIpKSsiLyIrYS50eXBlLGF9ZnVuY3Rpb24gemIoYSl7dmFyIGI9cWIuZXhlYyhhLnR5cGUpO3JldHVybiBiP2EudHlwZT1iWzFdOmEucmVtb3ZlQXR0cmlidXRlKCJ0eXBlIiksYX1mdW5jdGlvbiBBYihhLGIpe2Zvcih2YXIgYyxkPTA7bnVsbCE9KGM9YVtkXSk7ZCsrKW4uX2RhdGEoYywiZ2xvYmFsRXZhbCIsIWJ8fG4uX2RhdGEoYltkXSwiZ2xvYmFsRXZhbCIpKX1mdW5jdGlvbiBCYihhLGIpe2lmKDE9PT1iLm5vZGVUeXBlJiZuLmhhc0RhdGEoYSkpe3ZhciBjLGQsZSxmPW4uX2RhdGEoYSksZz1uLl9kYXRhKGIsZiksaD1mLmV2ZW50cztpZihoKXtkZWxldGUgZy5oYW5kbGUsZy5ldmVudHM9e307Zm9yKGMgaW4gaClmb3IoZD0wLGU9aFtjXS5sZW5ndGg7ZT5kO2QrKyluLmV2ZW50LmFkZChiLGMsaFtjXVtkXSl9Zy5kYXRhJiYoZy5kYXRhPW4uZXh0ZW5kKHt9LGcuZGF0YSkpfX1mdW5jdGlvbiBDYihhLGIpe3ZhciBjLGQsZTtpZigxPT09Yi5ub2RlVHlwZSl7aWYoYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIWwubm9DbG9uZUV2ZW50JiZiW24uZXhwYW5kb10pe2U9bi5fZGF0YShiKTtmb3IoZCBpbiBlLmV2ZW50cyluLnJlbW92ZUV2ZW50KGIsZCxlLmhhbmRsZSk7Yi5yZW1vdmVBdHRyaWJ1dGUobi5leHBhbmRvKX0ic2NyaXB0Ij09PWMmJmIudGV4dCE9PWEudGV4dD8oeWIoYikudGV4dD1hLnRleHQsemIoYikpOiJvYmplY3QiPT09Yz8oYi5wYXJlbnROb2RlJiYoYi5vdXRlckhUTUw9YS5vdXRlckhUTUwpLGwuaHRtbDVDbG9uZSYmYS5pbm5lckhUTUwmJiFuLnRyaW0oYi5pbm5lckhUTUwpJiYoYi5pbm5lckhUTUw9YS5pbm5lckhUTUwpKToiaW5wdXQiPT09YyYmWC50ZXN0KGEudHlwZSk/KGIuZGVmYXVsdENoZWNrZWQ9Yi5jaGVja2VkPWEuY2hlY2tlZCxiLnZhbHVlIT09YS52YWx1ZSYmKGIudmFsdWU9YS52YWx1ZSkpOiJvcHRpb24iPT09Yz9iLmRlZmF1bHRTZWxlY3RlZD1iLnNlbGVjdGVkPWEuZGVmYXVsdFNlbGVjdGVkOigiaW5wdXQiPT09Y3x8InRleHRhcmVhIj09PWMpJiYoYi5kZWZhdWx0VmFsdWU9YS5kZWZhdWx0VmFsdWUpfX1uLmV4dGVuZCh7Y2xvbmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaT1uLmNvbnRhaW5zKGEub3duZXJEb2N1bWVudCxhKTtpZihsLmh0bWw1Q2xvbmV8fG4uaXNYTUxEb2MoYSl8fCFoYi50ZXN0KCI8IithLm5vZGVOYW1lKyI+Iik/Zj1hLmNsb25lTm9kZSghMCk6KHViLmlubmVySFRNTD1hLm91dGVySFRNTCx1Yi5yZW1vdmVDaGlsZChmPXViLmZpcnN0Q2hpbGQpKSwhKGwubm9DbG9uZUV2ZW50JiZsLm5vQ2xvbmVDaGVja2VkfHwxIT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlfHxuLmlzWE1MRG9jKGEpKSlmb3IoZD12YihmKSxoPXZiKGEpLGc9MDtudWxsIT0oZT1oW2ddKTsrK2cpZFtnXSYmQ2IoZSxkW2ddKTtpZihiKWlmKGMpZm9yKGg9aHx8dmIoYSksZD1kfHx2YihmKSxnPTA7bnVsbCE9KGU9aFtnXSk7ZysrKUJiKGUsZFtnXSk7ZWxzZSBCYihhLGYpO3JldHVybiBkPXZiKGYsInNjcmlwdCIpLGQubGVuZ3RoPjAmJkFiKGQsIWkmJnZiKGEsInNjcmlwdCIpKSxkPWg9ZT1udWxsLGZ9LGJ1aWxkRnJhZ21lbnQ6ZnVuY3Rpb24oYSxiLGMsZCl7Zm9yKHZhciBlLGYsZyxoLGksaixrLG09YS5sZW5ndGgsbz1lYihiKSxwPVtdLHE9MDttPnE7cSsrKWlmKGY9YVtxXSxmfHwwPT09ZilpZigib2JqZWN0Ij09PW4udHlwZShmKSluLm1lcmdlKHAsZi5ub2RlVHlwZT9bZl06Zik7ZWxzZSBpZihtYi50ZXN0KGYpKXtoPWh8fG8uYXBwZW5kQ2hpbGQoYi5jcmVhdGVFbGVtZW50KCJkaXYiKSksaT0oa2IuZXhlYyhmKXx8WyIiLCIiXSlbMV0udG9Mb3dlckNhc2UoKSxrPXNiW2ldfHxzYi5fZGVmYXVsdCxoLmlubmVySFRNTD1rWzFdK2YucmVwbGFjZShqYiwiPCQxPjwvJDI+Iikra1syXSxlPWtbMF07d2hpbGUoZS0tKWg9aC5sYXN0Q2hpbGQ7aWYoIWwubGVhZGluZ1doaXRlc3BhY2UmJmliLnRlc3QoZikmJnAucHVzaChiLmNyZWF0ZVRleHROb2RlKGliLmV4ZWMoZilbMF0pKSwhbC50Ym9keSl7Zj0idGFibGUiIT09aXx8bGIudGVzdChmKT8iPHRhYmxlPiIhPT1rWzFdfHxsYi50ZXN0KGYpPzA6aDpoLmZpcnN0Q2hpbGQsZT1mJiZmLmNoaWxkTm9kZXMubGVuZ3RoO3doaWxlKGUtLSluLm5vZGVOYW1lKGo9Zi5jaGlsZE5vZGVzW2VdLCJ0Ym9keSIpJiYhai5jaGlsZE5vZGVzLmxlbmd0aCYmZi5yZW1vdmVDaGlsZChqKX1uLm1lcmdlKHAsaC5jaGlsZE5vZGVzKSxoLnRleHRDb250ZW50PSIiO3doaWxlKGguZmlyc3RDaGlsZCloLnJlbW92ZUNoaWxkKGguZmlyc3RDaGlsZCk7aD1vLmxhc3RDaGlsZH1lbHNlIHAucHVzaChiLmNyZWF0ZVRleHROb2RlKGYpKTtoJiZvLnJlbW92ZUNoaWxkKGgpLGwuYXBwZW5kQ2hlY2tlZHx8bi5ncmVwKHZiKHAsImlucHV0Iiksd2IpLHE9MDt3aGlsZShmPXBbcSsrXSlpZigoIWR8fC0xPT09bi5pbkFycmF5KGYsZCkpJiYoZz1uLmNvbnRhaW5zKGYub3duZXJEb2N1bWVudCxmKSxoPXZiKG8uYXBwZW5kQ2hpbGQoZiksInNjcmlwdCIpLGcmJkFiKGgpLGMpKXtlPTA7d2hpbGUoZj1oW2UrK10pcGIudGVzdChmLnR5cGV8fCIiKSYmYy5wdXNoKGYpfXJldHVybiBoPW51bGwsb30sY2xlYW5EYXRhOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBkLGUsZixnLGg9MCxpPW4uZXhwYW5kbyxqPW4uY2FjaGUsaz1sLmRlbGV0ZUV4cGFuZG8sbT1uLmV2ZW50LnNwZWNpYWw7bnVsbCE9KGQ9YVtoXSk7aCsrKWlmKChifHxuLmFjY2VwdERhdGEoZCkpJiYoZj1kW2ldLGc9ZiYmaltmXSkpe2lmKGcuZXZlbnRzKWZvcihlIGluIGcuZXZlbnRzKW1bZV0/bi5ldmVudC5yZW1vdmUoZCxlKTpuLnJlbW92ZUV2ZW50KGQsZSxnLmhhbmRsZSk7altmXSYmKGRlbGV0ZSBqW2ZdLGs/ZGVsZXRlIGRbaV06dHlwZW9mIGQucmVtb3ZlQXR0cmlidXRlIT09TD9kLnJlbW92ZUF0dHJpYnV0ZShpKTpkW2ldPW51bGwsYy5wdXNoKGYpKX19fSksbi5mbi5leHRlbmQoe3RleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFcodGhpcyxmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YT9uLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmFwcGVuZCgodGhpc1swXSYmdGhpc1swXS5vd25lckRvY3VtZW50fHx6KS5jcmVhdGVUZXh0Tm9kZShhKSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0sYXBwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZG9tTWFuaXAoYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj14Yih0aGlzLGEpO2IuYXBwZW5kQ2hpbGQoYSl9fSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPXhiKHRoaXMsYSk7Yi5pbnNlcnRCZWZvcmUoYSxiLmZpcnN0Q2hpbGQpfX0pfSxiZWZvcmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcyl9KX0sYWZ0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcy5uZXh0U2libGluZyl9KX0scmVtb3ZlOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjLGQ9YT9uLmZpbHRlcihhLHRoaXMpOnRoaXMsZT0wO251bGwhPShjPWRbZV0pO2UrKylifHwxIT09Yy5ub2RlVHlwZXx8bi5jbGVhbkRhdGEodmIoYykpLGMucGFyZW50Tm9kZSYmKGImJm4uY29udGFpbnMoYy5vd25lckRvY3VtZW50LGMpJiZBYih2YihjLCJzY3JpcHQiKSksYy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpKTtyZXR1cm4gdGhpc30sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wO251bGwhPShhPXRoaXNbYl0pO2IrKyl7MT09PWEubm9kZVR5cGUmJm4uY2xlYW5EYXRhKHZiKGEsITEpKTt3aGlsZShhLmZpcnN0Q2hpbGQpYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Eub3B0aW9ucyYmbi5ub2RlTmFtZShhLCJzZWxlY3QiKSYmKGEub3B0aW9ucy5sZW5ndGg9MCl9cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9bnVsbD09YT8hMTphLGI9bnVsbD09Yj9hOmIsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gbi5jbG9uZSh0aGlzLGEsYil9KX0saHRtbDpmdW5jdGlvbihhKXtyZXR1cm4gVyh0aGlzLGZ1bmN0aW9uKGEpe3ZhciBiPXRoaXNbMF18fHt9LGM9MCxkPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWEpcmV0dXJuIDE9PT1iLm5vZGVUeXBlP2IuaW5uZXJIVE1MLnJlcGxhY2UoZ2IsIiIpOnZvaWQgMDtpZighKCJzdHJpbmciIT10eXBlb2YgYXx8bmIudGVzdChhKXx8IWwuaHRtbFNlcmlhbGl6ZSYmaGIudGVzdChhKXx8IWwubGVhZGluZ1doaXRlc3BhY2UmJmliLnRlc3QoYSl8fHNiWyhrYi5leGVjKGEpfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpXSkpe2E9YS5yZXBsYWNlKGpiLCI8JDE+PC8kMj4iKTt0cnl7Zm9yKDtkPmM7YysrKWI9dGhpc1tjXXx8e30sMT09PWIubm9kZVR5cGUmJihuLmNsZWFuRGF0YSh2YihiLCExKSksYi5pbm5lckhUTUw9YSk7Yj0wfWNhdGNoKGUpe319YiYmdGhpcy5lbXB0eSgpLmFwcGVuZChhKX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50c1swXTtyZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsZnVuY3Rpb24oYil7YT10aGlzLnBhcmVudE5vZGUsbi5jbGVhbkRhdGEodmIodGhpcykpLGEmJmEucmVwbGFjZUNoaWxkKGIsdGhpcyl9KSxhJiYoYS5sZW5ndGh8fGEubm9kZVR5cGUpP3RoaXM6dGhpcy5yZW1vdmUoKX0sZGV0YWNoOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnJlbW92ZShhLCEwKX0sZG9tTWFuaXA6ZnVuY3Rpb24oYSxiKXthPWUuYXBwbHkoW10sYSk7dmFyIGMsZCxmLGcsaCxpLGo9MCxrPXRoaXMubGVuZ3RoLG09dGhpcyxvPWstMSxwPWFbMF0scT1uLmlzRnVuY3Rpb24ocCk7aWYocXx8az4xJiYic3RyaW5nIj09dHlwZW9mIHAmJiFsLmNoZWNrQ2xvbmUmJm9iLnRlc3QocCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZD1tLmVxKGMpO3EmJihhWzBdPXAuY2FsbCh0aGlzLGMsZC5odG1sKCkpKSxkLmRvbU1hbmlwKGEsYil9KTtpZihrJiYoaT1uLmJ1aWxkRnJhZ21lbnQoYSx0aGlzWzBdLm93bmVyRG9jdW1lbnQsITEsdGhpcyksYz1pLmZpcnN0Q2hpbGQsMT09PWkuY2hpbGROb2Rlcy5sZW5ndGgmJihpPWMpLGMpKXtmb3IoZz1uLm1hcCh2YihpLCJzY3JpcHQiKSx5YiksZj1nLmxlbmd0aDtrPmo7aisrKWQ9aSxqIT09byYmKGQ9bi5jbG9uZShkLCEwLCEwKSxmJiZuLm1lcmdlKGcsdmIoZCwic2NyaXB0IikpKSxiLmNhbGwodGhpc1tqXSxkLGopO2lmKGYpZm9yKGg9Z1tnLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LG4ubWFwKGcsemIpLGo9MDtmPmo7aisrKWQ9Z1tqXSxwYi50ZXN0KGQudHlwZXx8IiIpJiYhbi5fZGF0YShkLCJnbG9iYWxFdmFsIikmJm4uY29udGFpbnMoaCxkKSYmKGQuc3JjP24uX2V2YWxVcmwmJm4uX2V2YWxVcmwoZC5zcmMpOm4uZ2xvYmFsRXZhbCgoZC50ZXh0fHxkLnRleHRDb250ZW50fHxkLmlubmVySFRNTHx8IiIpLnJlcGxhY2UocmIsIiIpKSk7aT1jPW51bGx9cmV0dXJuIHRoaXN9fSksbi5lYWNoKHthcHBlbmRUbzoiYXBwZW5kIixwcmVwZW5kVG86InByZXBlbmQiLGluc2VydEJlZm9yZToiYmVmb3JlIixpbnNlcnRBZnRlcjoiYWZ0ZXIiLHJlcGxhY2VBbGw6InJlcGxhY2VXaXRoIn0sZnVuY3Rpb24oYSxiKXtuLmZuW2FdPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxkPTAsZT1bXSxnPW4oYSksaD1nLmxlbmd0aC0xO2g+PWQ7ZCsrKWM9ZD09PWg/dGhpczp0aGlzLmNsb25lKCEwKSxuKGdbZF0pW2JdKGMpLGYuYXBwbHkoZSxjLmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZSl9fSk7dmFyIERiLEViPXt9O2Z1bmN0aW9uIEZiKGIsYyl7dmFyIGQ9bihjLmNyZWF0ZUVsZW1lbnQoYikpLmFwcGVuZFRvKGMuYm9keSksZT1hLmdldERlZmF1bHRDb21wdXRlZFN0eWxlP2EuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoZFswXSkuZGlzcGxheTpuLmNzcyhkWzBdLCJkaXNwbGF5Iik7cmV0dXJuIGQuZGV0YWNoKCksZX1mdW5jdGlvbiBHYihhKXt2YXIgYj16LGM9RWJbYV07cmV0dXJuIGN8fChjPUZiKGEsYiksIm5vbmUiIT09YyYmY3x8KERiPShEYnx8bigiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPiIpKS5hcHBlbmRUbyhiLmRvY3VtZW50RWxlbWVudCksYj0oRGJbMF0uY29udGVudFdpbmRvd3x8RGJbMF0uY29udGVudERvY3VtZW50KS5kb2N1bWVudCxiLndyaXRlKCksYi5jbG9zZSgpLGM9RmIoYSxiKSxEYi5kZXRhY2goKSksRWJbYV09YyksY30hZnVuY3Rpb24oKXt2YXIgYSxiLGM9ei5jcmVhdGVFbGVtZW50KCJkaXYiKSxkPSItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jaztwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjAiO2MuaW5uZXJIVE1MPSIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz4iLGE9Yy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpWzBdLGEuc3R5bGUuY3NzVGV4dD0iZmxvYXQ6bGVmdDtvcGFjaXR5Oi41IixsLm9wYWNpdHk9L14wLjUvLnRlc3QoYS5zdHlsZS5vcGFjaXR5KSxsLmNzc0Zsb2F0PSEhYS5zdHlsZS5jc3NGbG9hdCxjLnN0eWxlLmJhY2tncm91bmRDbGlwPSJjb250ZW50LWJveCIsYy5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPSIiLGwuY2xlYXJDbG9uZVN0eWxlPSJjb250ZW50LWJveCI9PT1jLnN0eWxlLmJhY2tncm91bmRDbGlwLGE9Yz1udWxsLGwuc2hyaW5rV3JhcEJsb2Nrcz1mdW5jdGlvbigpe3ZhciBhLGMsZSxmO2lmKG51bGw9PWIpe2lmKGE9ei5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdLCFhKXJldHVybjtmPSJib3JkZXI6MDt3aWR0aDowO2hlaWdodDowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6LTk5OTlweCIsYz16LmNyZWF0ZUVsZW1lbnQoImRpdiIpLGU9ei5jcmVhdGVFbGVtZW50KCJkaXYiKSxhLmFwcGVuZENoaWxkKGMpLmFwcGVuZENoaWxkKGUpLGI9ITEsdHlwZW9mIGUuc3R5bGUuem9vbSE9PUwmJihlLnN0eWxlLmNzc1RleHQ9ZCsiO3dpZHRoOjFweDtwYWRkaW5nOjFweDt6b29tOjEiLGUuaW5uZXJIVE1MPSI8ZGl2PjwvZGl2PiIsZS5maXJzdENoaWxkLnN0eWxlLndpZHRoPSI1cHgiLGI9MyE9PWUub2Zmc2V0V2lkdGgpLGEucmVtb3ZlQ2hpbGQoYyksYT1jPWU9bnVsbH1yZXR1cm4gYn19KCk7dmFyIEhiPS9ebWFyZ2luLyxJYj1uZXcgUmVnRXhwKCJeKCIrVCsiKSg/IXB4KVthLXolXSskIiwiaSIpLEpiLEtiLExiPS9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLzthLmdldENvbXB1dGVkU3R5bGU/KEpiPWZ1bmN0aW9uKGEpe3JldHVybiBhLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShhLG51bGwpfSxLYj1mdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fEpiKGEpLGc9Yz9jLmdldFByb3BlcnR5VmFsdWUoYil8fGNbYl06dm9pZCAwLGMmJigiIiE9PWd8fG4uY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpfHwoZz1uLnN0eWxlKGEsYikpLEliLnRlc3QoZykmJkhiLnRlc3QoYikmJihkPWgud2lkdGgsZT1oLm1pbldpZHRoLGY9aC5tYXhXaWR0aCxoLm1pbldpZHRoPWgubWF4V2lkdGg9aC53aWR0aD1nLGc9Yy53aWR0aCxoLndpZHRoPWQsaC5taW5XaWR0aD1lLGgubWF4V2lkdGg9ZikpLHZvaWQgMD09PWc/ZzpnKyIifSk6ei5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlJiYoSmI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY3VycmVudFN0eWxlfSxLYj1mdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fEpiKGEpLGc9Yz9jW2JdOnZvaWQgMCxudWxsPT1nJiZoJiZoW2JdJiYoZz1oW2JdKSxJYi50ZXN0KGcpJiYhTGIudGVzdChiKSYmKGQ9aC5sZWZ0LGU9YS5ydW50aW1lU3R5bGUsZj1lJiZlLmxlZnQsZiYmKGUubGVmdD1hLmN1cnJlbnRTdHlsZS5sZWZ0KSxoLmxlZnQ9ImZvbnRTaXplIj09PWI/IjFlbSI6ZyxnPWgucGl4ZWxMZWZ0KyJweCIsaC5sZWZ0PWQsZiYmKGUubGVmdD1mKSksdm9pZCAwPT09Zz9nOmcrIiJ8fCJhdXRvIn0pO2Z1bmN0aW9uIE1iKGEsYil7cmV0dXJue2dldDpmdW5jdGlvbigpe3ZhciBjPWEoKTtpZihudWxsIT1jKXJldHVybiBjP3ZvaWQgZGVsZXRlIHRoaXMuZ2V0Oih0aGlzLmdldD1iKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fX0hZnVuY3Rpb24oKXt2YXIgYixjLGQsZSxmLGcsaD16LmNyZWF0ZUVsZW1lbnQoImRpdiIpLGk9ImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDotOTk5OXB4IixqPSItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jaztwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjAiO2guaW5uZXJIVE1MPSIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz4iLGI9aC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpWzBdLGIuc3R5bGUuY3NzVGV4dD0iZmxvYXQ6bGVmdDtvcGFjaXR5Oi41IixsLm9wYWNpdHk9L14wLjUvLnRlc3QoYi5zdHlsZS5vcGFjaXR5KSxsLmNzc0Zsb2F0PSEhYi5zdHlsZS5jc3NGbG9hdCxoLnN0eWxlLmJhY2tncm91bmRDbGlwPSJjb250ZW50LWJveCIsaC5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPSIiLGwuY2xlYXJDbG9uZVN0eWxlPSJjb250ZW50LWJveCI9PT1oLnN0eWxlLmJhY2tncm91bmRDbGlwLGI9aD1udWxsLG4uZXh0ZW5kKGwse3JlbGlhYmxlSGlkZGVuT2Zmc2V0czpmdW5jdGlvbigpe2lmKG51bGwhPWMpcmV0dXJuIGM7dmFyIGEsYixkLGU9ei5jcmVhdGVFbGVtZW50KCJkaXYiKSxmPXouZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXTtpZihmKXJldHVybiBlLnNldEF0dHJpYnV0ZSgiY2xhc3NOYW1lIiwidCIpLGUuaW5uZXJIVE1MPSIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz4iLGE9ei5jcmVhdGVFbGVtZW50KCJkaXYiKSxhLnN0eWxlLmNzc1RleHQ9aSxmLmFwcGVuZENoaWxkKGEpLmFwcGVuZENoaWxkKGUpLGUuaW5uZXJIVE1MPSI8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+IixiPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInRkIiksYlswXS5zdHlsZS5jc3NUZXh0PSJwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjA7ZGlzcGxheTpub25lIixkPTA9PT1iWzBdLm9mZnNldEhlaWdodCxiWzBdLnN0eWxlLmRpc3BsYXk9IiIsYlsxXS5zdHlsZS5kaXNwbGF5PSJub25lIixjPWQmJjA9PT1iWzBdLm9mZnNldEhlaWdodCxmLnJlbW92ZUNoaWxkKGEpLGU9Zj1udWxsLGN9LGJveFNpemluZzpmdW5jdGlvbigpe3JldHVybiBudWxsPT1kJiZrKCksZH0sYm94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09ZSYmaygpLGV9LHBpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09ZiYmaygpLGZ9LHJlbGlhYmxlTWFyZ2luUmlnaHQ6ZnVuY3Rpb24oKXt2YXIgYixjLGQsZTtpZihudWxsPT1nJiZhLmdldENvbXB1dGVkU3R5bGUpe2lmKGI9ei5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdLCFiKXJldHVybjtjPXouY3JlYXRlRWxlbWVudCgiZGl2IiksZD16LmNyZWF0ZUVsZW1lbnQoImRpdiIpLGMuc3R5bGUuY3NzVGV4dD1pLGIuYXBwZW5kQ2hpbGQoYykuYXBwZW5kQ2hpbGQoZCksZT1kLmFwcGVuZENoaWxkKHouY3JlYXRlRWxlbWVudCgiZGl2IikpLGUuc3R5bGUuY3NzVGV4dD1kLnN0eWxlLmNzc1RleHQ9aixlLnN0eWxlLm1hcmdpblJpZ2h0PWUuc3R5bGUud2lkdGg9IjAiLGQuc3R5bGUud2lkdGg9IjFweCIsZz0hcGFyc2VGbG9hdCgoYS5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCl8fHt9KS5tYXJnaW5SaWdodCksYi5yZW1vdmVDaGlsZChjKX1yZXR1cm4gZ319KTtmdW5jdGlvbiBrKCl7dmFyIGIsYyxoPXouZ2V0RWxlbWVudHNCeVRhZ05hbWUoImJvZHkiKVswXTtoJiYoYj16LmNyZWF0ZUVsZW1lbnQoImRpdiIpLGM9ei5jcmVhdGVFbGVtZW50KCJkaXYiKSxiLnN0eWxlLmNzc1RleHQ9aSxoLmFwcGVuZENoaWxkKGIpLmFwcGVuZENoaWxkKGMpLGMuc3R5bGUuY3NzVGV4dD0iLXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoxcHg7Ym9yZGVyOjFweDt3aWR0aDo0cHg7bWFyZ2luLXRvcDoxJTt0b3A6MSUiLG4uc3dhcChoLG51bGwhPWguc3R5bGUuem9vbT97em9vbToxfTp7fSxmdW5jdGlvbigpe2Q9ND09PWMub2Zmc2V0V2lkdGh9KSxlPSEwLGY9ITEsZz0hMCxhLmdldENvbXB1dGVkU3R5bGUmJihmPSIxJSIhPT0oYS5nZXRDb21wdXRlZFN0eWxlKGMsbnVsbCl8fHt9KS50b3AsZT0iNHB4Ij09PShhLmdldENvbXB1dGVkU3R5bGUoYyxudWxsKXx8e3dpZHRoOiI0cHgifSkud2lkdGgpLGgucmVtb3ZlQ2hpbGQoYiksYz1oPW51bGwpfX0oKSxuLnN3YXA9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGUsZixnPXt9O2ZvcihmIGluIGIpZ1tmXT1hLnN0eWxlW2ZdLGEuc3R5bGVbZl09YltmXTtlPWMuYXBwbHkoYSxkfHxbXSk7Zm9yKGYgaW4gYilhLnN0eWxlW2ZdPWdbZl07cmV0dXJuIGV9O3ZhciBOYj0vYWxwaGFcKFteKV0qXCkvaSxPYj0vb3BhY2l0eVxzKj1ccyooW14pXSopLyxQYj0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sUWI9bmV3IFJlZ0V4cCgiXigiK1QrIikoLiopJCIsImkiKSxSYj1uZXcgUmVnRXhwKCJeKFsrLV0pPSgiK1QrIikiLCJpIiksU2I9e3Bvc2l0aW9uOiJhYnNvbHV0ZSIsdmlzaWJpbGl0eToiaGlkZGVuIixkaXNwbGF5OiJibG9jayJ9LFRiPXtsZXR0ZXJTcGFjaW5nOjAsZm9udFdlaWdodDo0MDB9LFViPVsiV2Via2l0IiwiTyIsIk1veiIsIm1zIl07ZnVuY3Rpb24gVmIoYSxiKXtpZihiIGluIGEpcmV0dXJuIGI7dmFyIGM9Yi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStiLnNsaWNlKDEpLGQ9YixlPVViLmxlbmd0aDt3aGlsZShlLS0paWYoYj1VYltlXStjLGIgaW4gYSlyZXR1cm4gYjtyZXR1cm4gZH1mdW5jdGlvbiBXYihhLGIpe2Zvcih2YXIgYyxkLGUsZj1bXSxnPTAsaD1hLmxlbmd0aDtoPmc7ZysrKWQ9YVtnXSxkLnN0eWxlJiYoZltnXT1uLl9kYXRhKGQsIm9sZGRpc3BsYXkiKSxjPWQuc3R5bGUuZGlzcGxheSxiPyhmW2ddfHwibm9uZSIhPT1jfHwoZC5zdHlsZS5kaXNwbGF5PSIiKSwiIj09PWQuc3R5bGUuZGlzcGxheSYmVihkKSYmKGZbZ109bi5fZGF0YShkLCJvbGRkaXNwbGF5IixHYihkLm5vZGVOYW1lKSkpKTpmW2ddfHwoZT1WKGQpLChjJiYibm9uZSIhPT1jfHwhZSkmJm4uX2RhdGEoZCwib2xkZGlzcGxheSIsZT9jOm4uY3NzKGQsImRpc3BsYXkiKSkpKTtmb3IoZz0wO2g+ZztnKyspZD1hW2ddLGQuc3R5bGUmJihiJiYibm9uZSIhPT1kLnN0eWxlLmRpc3BsYXkmJiIiIT09ZC5zdHlsZS5kaXNwbGF5fHwoZC5zdHlsZS5kaXNwbGF5PWI/ZltnXXx8IiI6Im5vbmUiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gWGIoYSxiLGMpe3ZhciBkPVFiLmV4ZWMoYik7cmV0dXJuIGQ/TWF0aC5tYXgoMCxkWzFdLShjfHwwKSkrKGRbMl18fCJweCIpOmJ9ZnVuY3Rpb24gWWIoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yz09PShkPyJib3JkZXIiOiJjb250ZW50Iik/NDoid2lkdGgiPT09Yj8xOjAsZz0wOzQ+ZjtmKz0yKSJtYXJnaW4iPT09YyYmKGcrPW4uY3NzKGEsYytVW2ZdLCEwLGUpKSxkPygiY29udGVudCI9PT1jJiYoZy09bi5jc3MoYSwicGFkZGluZyIrVVtmXSwhMCxlKSksIm1hcmdpbiIhPT1jJiYoZy09bi5jc3MoYSwiYm9yZGVyIitVW2ZdKyJXaWR0aCIsITAsZSkpKTooZys9bi5jc3MoYSwicGFkZGluZyIrVVtmXSwhMCxlKSwicGFkZGluZyIhPT1jJiYoZys9bi5jc3MoYSwiYm9yZGVyIitVW2ZdKyJXaWR0aCIsITAsZSkpKTtyZXR1cm4gZ31mdW5jdGlvbiBaYihhLGIsYyl7dmFyIGQ9ITAsZT0id2lkdGgiPT09Yj9hLm9mZnNldFdpZHRoOmEub2Zmc2V0SGVpZ2h0LGY9SmIoYSksZz1sLmJveFNpemluZygpJiYiYm9yZGVyLWJveCI9PT1uLmNzcyhhLCJib3hTaXppbmciLCExLGYpO2lmKDA+PWV8fG51bGw9PWUpe2lmKGU9S2IoYSxiLGYpLCgwPmV8fG51bGw9PWUpJiYoZT1hLnN0eWxlW2JdKSxJYi50ZXN0KGUpKXJldHVybiBlO2Q9ZyYmKGwuYm94U2l6aW5nUmVsaWFibGUoKXx8ZT09PWEuc3R5bGVbYl0pLGU9cGFyc2VGbG9hdChlKXx8MH1yZXR1cm4gZStZYihhLGIsY3x8KGc/ImJvcmRlciI6ImNvbnRlbnQiKSxkLGYpKyJweCJ9bi5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oYSxiKXtpZihiKXt2YXIgYz1LYihhLCJvcGFjaXR5Iik7cmV0dXJuIiI9PT1jPyIxIjpjfX19fSxjc3NOdW1iZXI6e2NvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7ImZsb2F0IjpsLmNzc0Zsb2F0PyJjc3NGbG9hdCI6InN0eWxlRmxvYXQifSxzdHlsZTpmdW5jdGlvbihhLGIsYyxkKXtpZihhJiYzIT09YS5ub2RlVHlwZSYmOCE9PWEubm9kZVR5cGUmJmEuc3R5bGUpe3ZhciBlLGYsZyxoPW4uY2FtZWxDYXNlKGIpLGk9YS5zdHlsZTtpZihiPW4uY3NzUHJvcHNbaF18fChuLmNzc1Byb3BzW2hdPVZiKGksaCkpLGc9bi5jc3NIb29rc1tiXXx8bi5jc3NIb29rc1toXSx2b2lkIDA9PT1jKXJldHVybiBnJiYiZ2V0ImluIGcmJnZvaWQgMCE9PShlPWcuZ2V0KGEsITEsZCkpP2U6aVtiXTtpZihmPXR5cGVvZiBjLCJzdHJpbmciPT09ZiYmKGU9UmIuZXhlYyhjKSkmJihjPShlWzFdKzEpKmVbMl0rcGFyc2VGbG9hdChuLmNzcyhhLGIpKSxmPSJudW1iZXIiKSxudWxsIT1jJiZjPT09YyYmKCJudW1iZXIiIT09Znx8bi5jc3NOdW1iZXJbaF18fChjKz0icHgiKSxsLmNsZWFyQ2xvbmVTdHlsZXx8IiIhPT1jfHwwIT09Yi5pbmRleE9mKCJiYWNrZ3JvdW5kIil8fChpW2JdPSJpbmhlcml0IiksIShnJiYic2V0ImluIGcmJnZvaWQgMD09PShjPWcuc2V0KGEsYyxkKSkpKSl0cnl7aVtiXT0iIixpW2JdPWN9Y2F0Y2goail7fX19LGNzczpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGcsaD1uLmNhbWVsQ2FzZShiKTtyZXR1cm4gYj1uLmNzc1Byb3BzW2hdfHwobi5jc3NQcm9wc1toXT1WYihhLnN0eWxlLGgpKSxnPW4uY3NzSG9va3NbYl18fG4uY3NzSG9va3NbaF0sZyYmImdldCJpbiBnJiYoZj1nLmdldChhLCEwLGMpKSx2b2lkIDA9PT1mJiYoZj1LYihhLGIsZCkpLCJub3JtYWwiPT09ZiYmYiBpbiBUYiYmKGY9VGJbYl0pLCIiPT09Y3x8Yz8oZT1wYXJzZUZsb2F0KGYpLGM9PT0hMHx8bi5pc051bWVyaWMoZSk/ZXx8MDpmKTpmfX0pLG4uZWFjaChbImhlaWdodCIsIndpZHRoIl0sZnVuY3Rpb24oYSxiKXtuLmNzc0hvb2tzW2JdPXtnZXQ6ZnVuY3Rpb24oYSxjLGQpe3JldHVybiBjPzA9PT1hLm9mZnNldFdpZHRoJiZQYi50ZXN0KG4uY3NzKGEsImRpc3BsYXkiKSk/bi5zd2FwKGEsU2IsZnVuY3Rpb24oKXtyZXR1cm4gWmIoYSxiLGQpfSk6WmIoYSxiLGQpOnZvaWQgMH0sc2V0OmZ1bmN0aW9uKGEsYyxkKXt2YXIgZT1kJiZKYihhKTtyZXR1cm4gWGIoYSxjLGQ/WWIoYSxiLGQsbC5ib3hTaXppbmcoKSYmImJvcmRlci1ib3giPT09bi5jc3MoYSwiYm94U2l6aW5nIiwhMSxlKSxlKTowKX19fSksbC5vcGFjaXR5fHwobi5jc3NIb29rcy5vcGFjaXR5PXtnZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gT2IudGVzdCgoYiYmYS5jdXJyZW50U3R5bGU/YS5jdXJyZW50U3R5bGUuZmlsdGVyOmEuc3R5bGUuZmlsdGVyKXx8IiIpPy4wMSpwYXJzZUZsb2F0KFJlZ0V4cC4kMSkrIiI6Yj8iMSI6IiJ9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3R5bGUsZD1hLmN1cnJlbnRTdHlsZSxlPW4uaXNOdW1lcmljKGIpPyJhbHBoYShvcGFjaXR5PSIrMTAwKmIrIikiOiIiLGY9ZCYmZC5maWx0ZXJ8fGMuZmlsdGVyfHwiIjtjLnpvb209MSwoYj49MXx8IiI9PT1iKSYmIiI9PT1uLnRyaW0oZi5yZXBsYWNlKE5iLCIiKSkmJmMucmVtb3ZlQXR0cmlidXRlJiYoYy5yZW1vdmVBdHRyaWJ1dGUoImZpbHRlciIpLCIiPT09Ynx8ZCYmIWQuZmlsdGVyKXx8KGMuZmlsdGVyPU5iLnRlc3QoZik/Zi5yZXBsYWNlKE5iLGUpOmYrIiAiK2UpfX0pLG4uY3NzSG9va3MubWFyZ2luUmlnaHQ9TWIobC5yZWxpYWJsZU1hcmdpblJpZ2h0LGZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/bi5zd2FwKGEse2Rpc3BsYXk6ImlubGluZS1ibG9jayJ9LEtiLFthLCJtYXJnaW5SaWdodCJdKTp2b2lkIDB9KSxuLmVhY2goe21hcmdpbjoiIixwYWRkaW5nOiIiLGJvcmRlcjoiV2lkdGgifSxmdW5jdGlvbihhLGIpe24uY3NzSG9va3NbYStiXT17ZXhwYW5kOmZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9e30sZj0ic3RyaW5nIj09dHlwZW9mIGM/Yy5zcGxpdCgiICIpOltjXTs0PmQ7ZCsrKWVbYStVW2RdK2JdPWZbZF18fGZbZC0yXXx8ZlswXTtyZXR1cm4gZX19LEhiLnRlc3QoYSl8fChuLmNzc0hvb2tzW2ErYl0uc2V0PVhiKX0pLG4uZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVyh0aGlzLGZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9e30sZz0wO2lmKG4uaXNBcnJheShiKSl7Zm9yKGQ9SmIoYSksZT1iLmxlbmd0aDtlPmc7ZysrKWZbYltnXV09bi5jc3MoYSxiW2ddLCExLGQpO3JldHVybiBmfXJldHVybiB2b2lkIDAhPT1jP24uc3R5bGUoYSxiLGMpOm4uY3NzKGEsYikNCn0sYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHNob3c6ZnVuY3Rpb24oKXtyZXR1cm4gV2IodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gV2IodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihhKXtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBhP2E/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Vih0aGlzKT9uKHRoaXMpLnNob3coKTpuKHRoaXMpLmhpZGUoKX0pfX0pO2Z1bmN0aW9uICRiKGEsYixjLGQsZSl7cmV0dXJuIG5ldyAkYi5wcm90b3R5cGUuaW5pdChhLGIsYyxkLGUpfW4uVHdlZW49JGIsJGIucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjokYixpbml0OmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmVsZW09YSx0aGlzLnByb3A9Yyx0aGlzLmVhc2luZz1lfHwic3dpbmciLHRoaXMub3B0aW9ucz1iLHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1kLHRoaXMudW5pdD1mfHwobi5jc3NOdW1iZXJbY10/IiI6InB4Iil9LGN1cjpmdW5jdGlvbigpe3ZhciBhPSRiLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBhJiZhLmdldD9hLmdldCh0aGlzKTokYi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24oYSl7dmFyIGIsYz0kYi5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gdGhpcy5wb3M9Yj10aGlzLm9wdGlvbnMuZHVyYXRpb24/bi5lYXNpbmdbdGhpcy5lYXNpbmddKGEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKmEsMCwxLHRoaXMub3B0aW9ucy5kdXJhdGlvbik6YSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqYit0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxjJiZjLnNldD9jLnNldCh0aGlzKTokYi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSwkYi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9JGIucHJvdG90eXBlLCRiLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gbnVsbD09YS5lbGVtW2EucHJvcF18fGEuZWxlbS5zdHlsZSYmbnVsbCE9YS5lbGVtLnN0eWxlW2EucHJvcF0/KGI9bi5jc3MoYS5lbGVtLGEucHJvcCwiIiksYiYmImF1dG8iIT09Yj9iOjApOmEuZWxlbVthLnByb3BdfSxzZXQ6ZnVuY3Rpb24oYSl7bi5meC5zdGVwW2EucHJvcF0/bi5meC5zdGVwW2EucHJvcF0oYSk6YS5lbGVtLnN0eWxlJiYobnVsbCE9YS5lbGVtLnN0eWxlW24uY3NzUHJvcHNbYS5wcm9wXV18fG4uY3NzSG9va3NbYS5wcm9wXSk/bi5zdHlsZShhLmVsZW0sYS5wcm9wLGEubm93K2EudW5pdCk6YS5lbGVtW2EucHJvcF09YS5ub3d9fX0sJGIucHJvcEhvb2tzLnNjcm9sbFRvcD0kYi5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGEpe2EuZWxlbS5ub2RlVHlwZSYmYS5lbGVtLnBhcmVudE5vZGUmJihhLmVsZW1bYS5wcm9wXT1hLm5vdyl9fSxuLmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGEpe3JldHVybiBhfSxzd2luZzpmdW5jdGlvbihhKXtyZXR1cm4uNS1NYXRoLmNvcyhhKk1hdGguUEkpLzJ9fSxuLmZ4PSRiLnByb3RvdHlwZS5pbml0LG4uZnguc3RlcD17fTt2YXIgX2IsYWMsYmM9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLGNjPW5ldyBSZWdFeHAoIl4oPzooWystXSk9fCkoIitUKyIpKFthLXolXSopJCIsImkiKSxkYz0vcXVldWVIb29rcyQvLGVjPVtqY10sZmM9eyIqIjpbZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNyZWF0ZVR3ZWVuKGEsYiksZD1jLmN1cigpLGU9Y2MuZXhlYyhiKSxmPWUmJmVbM118fChuLmNzc051bWJlclthXT8iIjoicHgiKSxnPShuLmNzc051bWJlclthXXx8InB4IiE9PWYmJitkKSYmY2MuZXhlYyhuLmNzcyhjLmVsZW0sYSkpLGg9MSxpPTIwO2lmKGcmJmdbM10hPT1mKXtmPWZ8fGdbM10sZT1lfHxbXSxnPStkfHwxO2RvIGg9aHx8Ii41IixnLz1oLG4uc3R5bGUoYy5lbGVtLGEsZytmKTt3aGlsZShoIT09KGg9Yy5jdXIoKS9kKSYmMSE9PWgmJi0taSl9cmV0dXJuIGUmJihnPWMuc3RhcnQ9K2d8fCtkfHwwLGMudW5pdD1mLGMuZW5kPWVbMV0/ZysoZVsxXSsxKSplWzJdOitlWzJdKSxjfV19O2Z1bmN0aW9uIGdjKCl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtfYj12b2lkIDB9KSxfYj1uLm5vdygpfWZ1bmN0aW9uIGhjKGEsYil7dmFyIGMsZD17aGVpZ2h0OmF9LGU9MDtmb3IoYj1iPzE6MDs0PmU7ZSs9Mi1iKWM9VVtlXSxkWyJtYXJnaW4iK2NdPWRbInBhZGRpbmciK2NdPWE7cmV0dXJuIGImJihkLm9wYWNpdHk9ZC53aWR0aD1hKSxkfWZ1bmN0aW9uIGljKGEsYixjKXtmb3IodmFyIGQsZT0oZmNbYl18fFtdKS5jb25jYXQoZmNbIioiXSksZj0wLGc9ZS5sZW5ndGg7Zz5mO2YrKylpZihkPWVbZl0uY2FsbChjLGIsYSkpcmV0dXJuIGR9ZnVuY3Rpb24gamMoYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGssbT10aGlzLG89e30scD1hLnN0eWxlLHE9YS5ub2RlVHlwZSYmVihhKSxyPW4uX2RhdGEoYSwiZnhzaG93Iik7Yy5xdWV1ZXx8KGg9bi5fcXVldWVIb29rcyhhLCJmeCIpLG51bGw9PWgudW5xdWV1ZWQmJihoLnVucXVldWVkPTAsaT1oLmVtcHR5LmZpcmUsaC5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7aC51bnF1ZXVlZHx8aSgpfSksaC51bnF1ZXVlZCsrLG0uYWx3YXlzKGZ1bmN0aW9uKCl7bS5hbHdheXMoZnVuY3Rpb24oKXtoLnVucXVldWVkLS0sbi5xdWV1ZShhLCJmeCIpLmxlbmd0aHx8aC5lbXB0eS5maXJlKCl9KX0pKSwxPT09YS5ub2RlVHlwZSYmKCJoZWlnaHQiaW4gYnx8IndpZHRoImluIGIpJiYoYy5vdmVyZmxvdz1bcC5vdmVyZmxvdyxwLm92ZXJmbG93WCxwLm92ZXJmbG93WV0saj1uLmNzcyhhLCJkaXNwbGF5Iiksaz1HYihhLm5vZGVOYW1lKSwibm9uZSI9PT1qJiYoaj1rKSwiaW5saW5lIj09PWomJiJub25lIj09PW4uY3NzKGEsImZsb2F0IikmJihsLmlubGluZUJsb2NrTmVlZHNMYXlvdXQmJiJpbmxpbmUiIT09az9wLnpvb209MTpwLmRpc3BsYXk9ImlubGluZS1ibG9jayIpKSxjLm92ZXJmbG93JiYocC5vdmVyZmxvdz0iaGlkZGVuIixsLnNocmlua1dyYXBCbG9ja3MoKXx8bS5hbHdheXMoZnVuY3Rpb24oKXtwLm92ZXJmbG93PWMub3ZlcmZsb3dbMF0scC5vdmVyZmxvd1g9Yy5vdmVyZmxvd1sxXSxwLm92ZXJmbG93WT1jLm92ZXJmbG93WzJdfSkpO2ZvcihkIGluIGIpaWYoZT1iW2RdLGJjLmV4ZWMoZSkpe2lmKGRlbGV0ZSBiW2RdLGY9Znx8InRvZ2dsZSI9PT1lLGU9PT0ocT8iaGlkZSI6InNob3ciKSl7aWYoInNob3ciIT09ZXx8IXJ8fHZvaWQgMD09PXJbZF0pY29udGludWU7cT0hMH1vW2RdPXImJnJbZF18fG4uc3R5bGUoYSxkKX1pZighbi5pc0VtcHR5T2JqZWN0KG8pKXtyPyJoaWRkZW4iaW4gciYmKHE9ci5oaWRkZW4pOnI9bi5fZGF0YShhLCJmeHNob3ciLHt9KSxmJiYoci5oaWRkZW49IXEpLHE/bihhKS5zaG93KCk6bS5kb25lKGZ1bmN0aW9uKCl7bihhKS5oaWRlKCl9KSxtLmRvbmUoZnVuY3Rpb24oKXt2YXIgYjtuLl9yZW1vdmVEYXRhKGEsImZ4c2hvdyIpO2ZvcihiIGluIG8pbi5zdHlsZShhLGIsb1tiXSl9KTtmb3IoZCBpbiBvKWc9aWMocT9yW2RdOjAsZCxtKSxkIGluIHJ8fChyW2RdPWcuc3RhcnQscSYmKGcuZW5kPWcuc3RhcnQsZy5zdGFydD0id2lkdGgiPT09ZHx8ImhlaWdodCI9PT1kPzE6MCkpfX1mdW5jdGlvbiBrYyhhLGIpe3ZhciBjLGQsZSxmLGc7Zm9yKGMgaW4gYSlpZihkPW4uY2FtZWxDYXNlKGMpLGU9YltkXSxmPWFbY10sbi5pc0FycmF5KGYpJiYoZT1mWzFdLGY9YVtjXT1mWzBdKSxjIT09ZCYmKGFbZF09ZixkZWxldGUgYVtjXSksZz1uLmNzc0hvb2tzW2RdLGcmJiJleHBhbmQiaW4gZyl7Zj1nLmV4cGFuZChmKSxkZWxldGUgYVtkXTtmb3IoYyBpbiBmKWMgaW4gYXx8KGFbY109ZltjXSxiW2NdPWUpfWVsc2UgYltkXT1lfWZ1bmN0aW9uIGxjKGEsYixjKXt2YXIgZCxlLGY9MCxnPWVjLmxlbmd0aCxoPW4uRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgaS5lbGVtfSksaT1mdW5jdGlvbigpe2lmKGUpcmV0dXJuITE7Zm9yKHZhciBiPV9ifHxnYygpLGM9TWF0aC5tYXgoMCxqLnN0YXJ0VGltZStqLmR1cmF0aW9uLWIpLGQ9Yy9qLmR1cmF0aW9ufHwwLGY9MS1kLGc9MCxpPWoudHdlZW5zLmxlbmd0aDtpPmc7ZysrKWoudHdlZW5zW2ddLnJ1bihmKTtyZXR1cm4gaC5ub3RpZnlXaXRoKGEsW2osZixjXSksMT5mJiZpP2M6KGgucmVzb2x2ZVdpdGgoYSxbal0pLCExKX0saj1oLnByb21pc2Uoe2VsZW06YSxwcm9wczpuLmV4dGVuZCh7fSxiKSxvcHRzOm4uZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9fSxjKSxvcmlnaW5hbFByb3BlcnRpZXM6YixvcmlnaW5hbE9wdGlvbnM6YyxzdGFydFRpbWU6X2J8fGdjKCksZHVyYXRpb246Yy5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oYixjKXt2YXIgZD1uLlR3ZWVuKGEsai5vcHRzLGIsYyxqLm9wdHMuc3BlY2lhbEVhc2luZ1tiXXx8ai5vcHRzLmVhc2luZyk7cmV0dXJuIGoudHdlZW5zLnB1c2goZCksZH0sc3RvcDpmdW5jdGlvbihiKXt2YXIgYz0wLGQ9Yj9qLnR3ZWVucy5sZW5ndGg6MDtpZihlKXJldHVybiB0aGlzO2ZvcihlPSEwO2Q+YztjKyspai50d2VlbnNbY10ucnVuKDEpO3JldHVybiBiP2gucmVzb2x2ZVdpdGgoYSxbaixiXSk6aC5yZWplY3RXaXRoKGEsW2osYl0pLHRoaXN9fSksaz1qLnByb3BzO2ZvcihrYyhrLGoub3B0cy5zcGVjaWFsRWFzaW5nKTtnPmY7ZisrKWlmKGQ9ZWNbZl0uY2FsbChqLGEsayxqLm9wdHMpKXJldHVybiBkO3JldHVybiBuLm1hcChrLGljLGopLG4uaXNGdW5jdGlvbihqLm9wdHMuc3RhcnQpJiZqLm9wdHMuc3RhcnQuY2FsbChhLGopLG4uZngudGltZXIobi5leHRlbmQoaSx7ZWxlbTphLGFuaW06aixxdWV1ZTpqLm9wdHMucXVldWV9KSksai5wcm9ncmVzcyhqLm9wdHMucHJvZ3Jlc3MpLmRvbmUoai5vcHRzLmRvbmUsai5vcHRzLmNvbXBsZXRlKS5mYWlsKGoub3B0cy5mYWlsKS5hbHdheXMoai5vcHRzLmFsd2F5cyl9bi5BbmltYXRpb249bi5leHRlbmQobGMse3R3ZWVuZXI6ZnVuY3Rpb24oYSxiKXtuLmlzRnVuY3Rpb24oYSk/KGI9YSxhPVsiKiJdKTphPWEuc3BsaXQoIiAiKTtmb3IodmFyIGMsZD0wLGU9YS5sZW5ndGg7ZT5kO2QrKyljPWFbZF0sZmNbY109ZmNbY118fFtdLGZjW2NdLnVuc2hpZnQoYil9LHByZWZpbHRlcjpmdW5jdGlvbihhLGIpe2I/ZWMudW5zaGlmdChhKTplYy5wdXNoKGEpfX0pLG4uc3BlZWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWEmJiJvYmplY3QiPT10eXBlb2YgYT9uLmV4dGVuZCh7fSxhKTp7Y29tcGxldGU6Y3x8IWMmJmJ8fG4uaXNGdW5jdGlvbihhKSYmYSxkdXJhdGlvbjphLGVhc2luZzpjJiZifHxiJiYhbi5pc0Z1bmN0aW9uKGIpJiZifTtyZXR1cm4gZC5kdXJhdGlvbj1uLmZ4Lm9mZj8wOiJudW1iZXIiPT10eXBlb2YgZC5kdXJhdGlvbj9kLmR1cmF0aW9uOmQuZHVyYXRpb24gaW4gbi5meC5zcGVlZHM/bi5meC5zcGVlZHNbZC5kdXJhdGlvbl06bi5meC5zcGVlZHMuX2RlZmF1bHQsKG51bGw9PWQucXVldWV8fGQucXVldWU9PT0hMCkmJihkLnF1ZXVlPSJmeCIpLGQub2xkPWQuY29tcGxldGUsZC5jb21wbGV0ZT1mdW5jdGlvbigpe24uaXNGdW5jdGlvbihkLm9sZCkmJmQub2xkLmNhbGwodGhpcyksZC5xdWV1ZSYmbi5kZXF1ZXVlKHRoaXMsZC5xdWV1ZSl9LGR9LG4uZm4uZXh0ZW5kKHtmYWRlVG86ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHRoaXMuZmlsdGVyKFYpLmNzcygib3BhY2l0eSIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6Yn0sYSxjLGQpfSxhbmltYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW4uaXNFbXB0eU9iamVjdChhKSxmPW4uc3BlZWQoYixjLGQpLGc9ZnVuY3Rpb24oKXt2YXIgYj1sYyh0aGlzLG4uZXh0ZW5kKHt9LGEpLGYpOyhlfHxuLl9kYXRhKHRoaXMsImZpbmlzaCIpKSYmYi5zdG9wKCEwKX07cmV0dXJuIGcuZmluaXNoPWcsZXx8Zi5xdWV1ZT09PSExP3RoaXMuZWFjaChnKTp0aGlzLnF1ZXVlKGYucXVldWUsZyl9LHN0b3A6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWZ1bmN0aW9uKGEpe3ZhciBiPWEuc3RvcDtkZWxldGUgYS5zdG9wLGIoYyl9O3JldHVybiJzdHJpbmciIT10eXBlb2YgYSYmKGM9YixiPWEsYT12b2lkIDApLGImJmEhPT0hMSYmdGhpcy5xdWV1ZShhfHwiZngiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj0hMCxlPW51bGwhPWEmJmErInF1ZXVlSG9va3MiLGY9bi50aW1lcnMsZz1uLl9kYXRhKHRoaXMpO2lmKGUpZ1tlXSYmZ1tlXS5zdG9wJiZkKGdbZV0pO2Vsc2UgZm9yKGUgaW4gZylnW2VdJiZnW2VdLnN0b3AmJmRjLnRlc3QoZSkmJmQoZ1tlXSk7Zm9yKGU9Zi5sZW5ndGg7ZS0tOylmW2VdLmVsZW0hPT10aGlzfHxudWxsIT1hJiZmW2VdLnF1ZXVlIT09YXx8KGZbZV0uYW5pbS5zdG9wKGMpLGI9ITEsZi5zcGxpY2UoZSwxKSk7KGJ8fCFjKSYmbi5kZXF1ZXVlKHRoaXMsYSl9KX0sZmluaXNoOmZ1bmN0aW9uKGEpe3JldHVybiBhIT09ITEmJihhPWF8fCJmeCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiLGM9bi5fZGF0YSh0aGlzKSxkPWNbYSsicXVldWUiXSxlPWNbYSsicXVldWVIb29rcyJdLGY9bi50aW1lcnMsZz1kP2QubGVuZ3RoOjA7Zm9yKGMuZmluaXNoPSEwLG4ucXVldWUodGhpcyxhLFtdKSxlJiZlLnN0b3AmJmUuc3RvcC5jYWxsKHRoaXMsITApLGI9Zi5sZW5ndGg7Yi0tOylmW2JdLmVsZW09PT10aGlzJiZmW2JdLnF1ZXVlPT09YSYmKGZbYl0uYW5pbS5zdG9wKCEwKSxmLnNwbGljZShiLDEpKTtmb3IoYj0wO2c+YjtiKyspZFtiXSYmZFtiXS5maW5pc2gmJmRbYl0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIGMuZmluaXNofSl9fSksbi5lYWNoKFsidG9nZ2xlIiwic2hvdyIsImhpZGUiXSxmdW5jdGlvbihhLGIpe3ZhciBjPW4uZm5bYl07bi5mbltiXT1mdW5jdGlvbihhLGQsZSl7cmV0dXJuIG51bGw9PWF8fCJib29sZWFuIj09dHlwZW9mIGE/Yy5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGhjKGIsITApLGEsZCxlKX19KSxuLmVhY2goe3NsaWRlRG93bjpoYygic2hvdyIpLHNsaWRlVXA6aGMoImhpZGUiKSxzbGlkZVRvZ2dsZTpoYygidG9nZ2xlIiksZmFkZUluOntvcGFjaXR5OiJzaG93In0sZmFkZU91dDp7b3BhY2l0eToiaGlkZSJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6InRvZ2dsZSJ9fSxmdW5jdGlvbihhLGIpe24uZm5bYV09ZnVuY3Rpb24oYSxjLGQpe3JldHVybiB0aGlzLmFuaW1hdGUoYixhLGMsZCl9fSksbi50aW1lcnM9W10sbi5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGEsYj1uLnRpbWVycyxjPTA7Zm9yKF9iPW4ubm93KCk7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEoKXx8YltjXSE9PWF8fGIuc3BsaWNlKGMtLSwxKTtiLmxlbmd0aHx8bi5meC5zdG9wKCksX2I9dm9pZCAwfSxuLmZ4LnRpbWVyPWZ1bmN0aW9uKGEpe24udGltZXJzLnB1c2goYSksYSgpP24uZnguc3RhcnQoKTpuLnRpbWVycy5wb3AoKX0sbi5meC5pbnRlcnZhbD0xMyxuLmZ4LnN0YXJ0PWZ1bmN0aW9uKCl7YWN8fChhYz1zZXRJbnRlcnZhbChuLmZ4LnRpY2ssbi5meC5pbnRlcnZhbCkpfSxuLmZ4LnN0b3A9ZnVuY3Rpb24oKXtjbGVhckludGVydmFsKGFjKSxhYz1udWxsfSxuLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxuLmZuLmRlbGF5PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9bi5meD9uLmZ4LnNwZWVkc1thXXx8YTphLGI9Ynx8ImZ4Iix0aGlzLnF1ZXVlKGIsZnVuY3Rpb24oYixjKXt2YXIgZD1zZXRUaW1lb3V0KGIsYSk7Yy5zdG9wPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KGQpfX0pfSxmdW5jdGlvbigpe3ZhciBhLGIsYyxkLGU9ei5jcmVhdGVFbGVtZW50KCJkaXYiKTtlLnNldEF0dHJpYnV0ZSgiY2xhc3NOYW1lIiwidCIpLGUuaW5uZXJIVE1MPSIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz4iLGE9ZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpWzBdLGM9ei5jcmVhdGVFbGVtZW50KCJzZWxlY3QiKSxkPWMuYXBwZW5kQ2hpbGQoei5jcmVhdGVFbGVtZW50KCJvcHRpb24iKSksYj1lLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJpbnB1dCIpWzBdLGEuc3R5bGUuY3NzVGV4dD0idG9wOjFweCIsbC5nZXRTZXRBdHRyaWJ1dGU9InQiIT09ZS5jbGFzc05hbWUsbC5zdHlsZT0vdG9wLy50ZXN0KGEuZ2V0QXR0cmlidXRlKCJzdHlsZSIpKSxsLmhyZWZOb3JtYWxpemVkPSIvYSI9PT1hLmdldEF0dHJpYnV0ZSgiaHJlZiIpLGwuY2hlY2tPbj0hIWIudmFsdWUsbC5vcHRTZWxlY3RlZD1kLnNlbGVjdGVkLGwuZW5jdHlwZT0hIXouY3JlYXRlRWxlbWVudCgiZm9ybSIpLmVuY3R5cGUsYy5kaXNhYmxlZD0hMCxsLm9wdERpc2FibGVkPSFkLmRpc2FibGVkLGI9ei5jcmVhdGVFbGVtZW50KCJpbnB1dCIpLGIuc2V0QXR0cmlidXRlKCJ2YWx1ZSIsIiIpLGwuaW5wdXQ9IiI9PT1iLmdldEF0dHJpYnV0ZSgidmFsdWUiKSxiLnZhbHVlPSJ0IixiLnNldEF0dHJpYnV0ZSgidHlwZSIsInJhZGlvIiksbC5yYWRpb1ZhbHVlPSJ0Ij09PWIudmFsdWUsYT1iPWM9ZD1lPW51bGx9KCk7dmFyIG1jPS9cci9nO24uZm4uZXh0ZW5kKHt2YWw6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU9dGhpc1swXTt7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gZD1uLmlzRnVuY3Rpb24oYSksdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3ZhciBlOzE9PT10aGlzLm5vZGVUeXBlJiYoZT1kP2EuY2FsbCh0aGlzLGMsbih0aGlzKS52YWwoKSk6YSxudWxsPT1lP2U9IiI6Im51bWJlciI9PXR5cGVvZiBlP2UrPSIiOm4uaXNBcnJheShlKSYmKGU9bi5tYXAoZSxmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8iIjphKyIifSkpLGI9bi52YWxIb29rc1t0aGlzLnR5cGVdfHxuLnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmInNldCJpbiBiJiZ2b2lkIDAhPT1iLnNldCh0aGlzLGUsInZhbHVlIil8fCh0aGlzLnZhbHVlPWUpKX0pO2lmKGUpcmV0dXJuIGI9bi52YWxIb29rc1tlLnR5cGVdfHxuLnZhbEhvb2tzW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmImdldCJpbiBiJiZ2b2lkIDAhPT0oYz1iLmdldChlLCJ2YWx1ZSIpKT9jOihjPWUudmFsdWUsInN0cmluZyI9PXR5cGVvZiBjP2MucmVwbGFjZShtYywiIik6bnVsbD09Yz8iIjpjKX19fSksbi5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihhKXt2YXIgYj1uLmZpbmQuYXR0cihhLCJ2YWx1ZSIpO3JldHVybiBudWxsIT1iP2I6bi50ZXh0KGEpfX0sc2VsZWN0OntnZXQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiLGMsZD1hLm9wdGlvbnMsZT1hLnNlbGVjdGVkSW5kZXgsZj0ic2VsZWN0LW9uZSI9PT1hLnR5cGV8fDA+ZSxnPWY/bnVsbDpbXSxoPWY/ZSsxOmQubGVuZ3RoLGk9MD5lP2g6Zj9lOjA7aD5pO2krKylpZihjPWRbaV0sISghYy5zZWxlY3RlZCYmaSE9PWV8fChsLm9wdERpc2FibGVkP2MuZGlzYWJsZWQ6bnVsbCE9PWMuZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpKXx8Yy5wYXJlbnROb2RlLmRpc2FibGVkJiZuLm5vZGVOYW1lKGMucGFyZW50Tm9kZSwib3B0Z3JvdXAiKSkpe2lmKGI9bihjKS52YWwoKSxmKXJldHVybiBiO2cucHVzaChiKX1yZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlPWEub3B0aW9ucyxmPW4ubWFrZUFycmF5KGIpLGc9ZS5sZW5ndGg7d2hpbGUoZy0tKWlmKGQ9ZVtnXSxuLmluQXJyYXkobi52YWxIb29rcy5vcHRpb24uZ2V0KGQpLGYpPj0wKXRyeXtkLnNlbGVjdGVkPWM9ITB9Y2F0Y2goaCl7ZC5zY3JvbGxIZWlnaHR9ZWxzZSBkLnNlbGVjdGVkPSExO3JldHVybiBjfHwoYS5zZWxlY3RlZEluZGV4PS0xKSxlfX19fSksbi5lYWNoKFsicmFkaW8iLCJjaGVja2JveCJdLGZ1bmN0aW9uKCl7bi52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG4uaXNBcnJheShiKT9hLmNoZWNrZWQ9bi5pbkFycmF5KG4oYSkudmFsKCksYik+PTA6dm9pZCAwfX0sbC5jaGVja09ufHwobi52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PT1hLmdldEF0dHJpYnV0ZSgidmFsdWUiKT8ib24iOmEudmFsdWV9KX0pO3ZhciBuYyxvYyxwYz1uLmV4cHIuYXR0ckhhbmRsZSxxYz0vXig/OmNoZWNrZWR8c2VsZWN0ZWQpJC9pLHJjPWwuZ2V0U2V0QXR0cmlidXRlLHNjPWwuaW5wdXQ7bi5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVyh0aGlzLG4uYXR0cixhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7bi5yZW1vdmVBdHRyKHRoaXMsYSl9KX19KSxuLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPWEubm9kZVR5cGU7aWYoYSYmMyE9PWYmJjghPT1mJiYyIT09ZilyZXR1cm4gdHlwZW9mIGEuZ2V0QXR0cmlidXRlPT09TD9uLnByb3AoYSxiLGMpOigxPT09ZiYmbi5pc1hNTERvYyhhKXx8KGI9Yi50b0xvd2VyQ2FzZSgpLGQ9bi5hdHRySG9va3NbYl18fChuLmV4cHIubWF0Y2guYm9vbC50ZXN0KGIpP29jOm5jKSksdm9pZCAwPT09Yz9kJiYiZ2V0ImluIGQmJm51bGwhPT0oZT1kLmdldChhLGIpKT9lOihlPW4uZmluZC5hdHRyKGEsYiksbnVsbD09ZT92b2lkIDA6ZSk6bnVsbCE9PWM/ZCYmInNldCJpbiBkJiZ2b2lkIDAhPT0oZT1kLnNldChhLGMsYikpP2U6KGEuc2V0QXR0cmlidXRlKGIsYysiIiksYyk6dm9pZCBuLnJlbW92ZUF0dHIoYSxiKSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU9MCxmPWImJmIubWF0Y2goRik7aWYoZiYmMT09PWEubm9kZVR5cGUpd2hpbGUoYz1mW2UrK10pZD1uLnByb3BGaXhbY118fGMsbi5leHByLm1hdGNoLmJvb2wudGVzdChjKT9zYyYmcmN8fCFxYy50ZXN0KGMpP2FbZF09ITE6YVtuLmNhbWVsQ2FzZSgiZGVmYXVsdC0iK2MpXT1hW2RdPSExOm4uYXR0cihhLGMsIiIpLGEucmVtb3ZlQXR0cmlidXRlKHJjP2M6ZCl9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGEsYil7aWYoIWwucmFkaW9WYWx1ZSYmInJhZGlvIj09PWImJm4ubm9kZU5hbWUoYSwiaW5wdXQiKSl7dmFyIGM9YS52YWx1ZTtyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoInR5cGUiLGIpLGMmJihhLnZhbHVlPWMpLGJ9fX19fSksb2M9e3NldDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGI9PT0hMT9uLnJlbW92ZUF0dHIoYSxjKTpzYyYmcmN8fCFxYy50ZXN0KGMpP2Euc2V0QXR0cmlidXRlKCFyYyYmbi5wcm9wRml4W2NdfHxjLGMpOmFbbi5jYW1lbENhc2UoImRlZmF1bHQtIitjKV09YVtjXT0hMCxjfX0sbi5lYWNoKG4uZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXHcrL2cpLGZ1bmN0aW9uKGEsYil7dmFyIGM9cGNbYl18fG4uZmluZC5hdHRyO3BjW2JdPXNjJiZyY3x8IXFjLnRlc3QoYik/ZnVuY3Rpb24oYSxiLGQpe3ZhciBlLGY7cmV0dXJuIGR8fChmPXBjW2JdLHBjW2JdPWUsZT1udWxsIT1jKGEsYixkKT9iLnRvTG93ZXJDYXNlKCk6bnVsbCxwY1tiXT1mKSxlfTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGM/dm9pZCAwOmFbbi5jYW1lbENhc2UoImRlZmF1bHQtIitiKV0/Yi50b0xvd2VyQ2FzZSgpOm51bGx9fSksc2MmJnJjfHwobi5hdHRySG9va3MudmFsdWU9e3NldDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG4ubm9kZU5hbWUoYSwiaW5wdXQiKT92b2lkKGEuZGVmYXVsdFZhbHVlPWIpOm5jJiZuYy5zZXQoYSxiLGMpfX0pLHJjfHwobmM9e3NldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9YS5nZXRBdHRyaWJ1dGVOb2RlKGMpO3JldHVybiBkfHxhLnNldEF0dHJpYnV0ZU5vZGUoZD1hLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKGMpKSxkLnZhbHVlPWIrPSIiLCJ2YWx1ZSI9PT1jfHxiPT09YS5nZXRBdHRyaWJ1dGUoYyk/Yjp2b2lkIDB9fSxwYy5pZD1wYy5uYW1lPXBjLmNvb3Jkcz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ7cmV0dXJuIGM/dm9pZCAwOihkPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJiIiIT09ZC52YWx1ZT9kLnZhbHVlOm51bGx9LG4udmFsSG9va3MuYnV0dG9uPXtnZXQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmdldEF0dHJpYnV0ZU5vZGUoYik7cmV0dXJuIGMmJmMuc3BlY2lmaWVkP2MudmFsdWU6dm9pZCAwfSxzZXQ6bmMuc2V0fSxuLmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGU9e3NldDpmdW5jdGlvbihhLGIsYyl7bmMuc2V0KGEsIiI9PT1iPyExOmIsYyl9fSxuLmVhY2goWyJ3aWR0aCIsImhlaWdodCJdLGZ1bmN0aW9uKGEsYil7bi5hdHRySG9va3NbYl09e3NldDpmdW5jdGlvbihhLGMpe3JldHVybiIiPT09Yz8oYS5zZXRBdHRyaWJ1dGUoYiwiYXV0byIpLGMpOnZvaWQgMH19fSkpLGwuc3R5bGV8fChuLmF0dHJIb29rcy5zdHlsZT17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnN0eWxlLmNzc1RleHR8fHZvaWQgMH0sc2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGEuc3R5bGUuY3NzVGV4dD1iKyIifX0pO3ZhciB0Yz0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvaSx1Yz0vXig/OmF8YXJlYSkkL2k7bi5mbi5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVyh0aGlzLG4ucHJvcCxhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlUHJvcDpmdW5jdGlvbihhKXtyZXR1cm4gYT1uLnByb3BGaXhbYV18fGEsdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dHJ5e3RoaXNbYV09dm9pZCAwLGRlbGV0ZSB0aGlzW2FdfWNhdGNoKGIpe319KX19KSxuLmV4dGVuZCh7cHJvcEZpeDp7ImZvciI6Imh0bWxGb3IiLCJjbGFzcyI6ImNsYXNzTmFtZSJ9LHByb3A6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnPWEubm9kZVR5cGU7aWYoYSYmMyE9PWcmJjghPT1nJiYyIT09ZylyZXR1cm4gZj0xIT09Z3x8IW4uaXNYTUxEb2MoYSksZiYmKGI9bi5wcm9wRml4W2JdfHxiLGU9bi5wcm9wSG9va3NbYl0pLHZvaWQgMCE9PWM/ZSYmInNldCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6YVtiXT1jOmUmJiJnZXQiaW4gZSYmbnVsbCE9PShkPWUuZ2V0KGEsYikpP2Q6YVtiXX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPW4uZmluZC5hdHRyKGEsInRhYmluZGV4Iik7cmV0dXJuIGI/cGFyc2VJbnQoYiwxMCk6dGMudGVzdChhLm5vZGVOYW1lKXx8dWMudGVzdChhLm5vZGVOYW1lKSYmYS5ocmVmPzA6LTF9fX19KSxsLmhyZWZOb3JtYWxpemVkfHxuLmVhY2goWyJocmVmIiwic3JjIl0sZnVuY3Rpb24oYSxiKXtuLnByb3BIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZShiLDQpfX19KSxsLm9wdFNlbGVjdGVkfHwobi5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJihiLnNlbGVjdGVkSW5kZXgsYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCksbnVsbH19KSxuLmVhY2goWyJ0YWJJbmRleCIsInJlYWRPbmx5IiwibWF4TGVuZ3RoIiwiY2VsbFNwYWNpbmciLCJjZWxsUGFkZGluZyIsInJvd1NwYW4iLCJjb2xTcGFuIiwidXNlTWFwIiwiZnJhbWVCb3JkZXIiLCJjb250ZW50RWRpdGFibGUiXSxmdW5jdGlvbigpe24ucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldPXRoaXN9KSxsLmVuY3R5cGV8fChuLnByb3BGaXguZW5jdHlwZT0iZW5jb2RpbmciKTt2YXIgdmM9L1tcdFxyXG5cZl0vZztuLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGg9MCxpPXRoaXMubGVuZ3RoLGo9InN0cmluZyI9PXR5cGVvZiBhJiZhO2lmKG4uaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe24odGhpcykuYWRkQ2xhc3MoYS5jYWxsKHRoaXMsYix0aGlzLmNsYXNzTmFtZSkpfSk7aWYoailmb3IoYj0oYXx8IiIpLm1hdGNoKEYpfHxbXTtpPmg7aCsrKWlmKGM9dGhpc1toXSxkPTE9PT1jLm5vZGVUeXBlJiYoYy5jbGFzc05hbWU/KCIgIitjLmNsYXNzTmFtZSsiICIpLnJlcGxhY2UodmMsIiAiKToiICIpKXtmPTA7d2hpbGUoZT1iW2YrK10pZC5pbmRleE9mKCIgIitlKyIgIik8MCYmKGQrPWUrIiAiKTtnPW4udHJpbShkKSxjLmNsYXNzTmFtZSE9PWcmJihjLmNsYXNzTmFtZT1nKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGg9MCxpPXRoaXMubGVuZ3RoLGo9MD09PWFyZ3VtZW50cy5sZW5ndGh8fCJzdHJpbmciPT10eXBlb2YgYSYmYTtpZihuLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtuKHRoaXMpLnJlbW92ZUNsYXNzKGEuY2FsbCh0aGlzLGIsdGhpcy5jbGFzc05hbWUpKX0pO2lmKGopZm9yKGI9KGF8fCIiKS5tYXRjaChGKXx8W107aT5oO2grKylpZihjPXRoaXNbaF0sZD0xPT09Yy5ub2RlVHlwZSYmKGMuY2xhc3NOYW1lPygiICIrYy5jbGFzc05hbWUrIiAiKS5yZXBsYWNlKHZjLCIgIik6IiIpKXtmPTA7d2hpbGUoZT1iW2YrK10pd2hpbGUoZC5pbmRleE9mKCIgIitlKyIgIik+PTApZD1kLnJlcGxhY2UoIiAiK2UrIiAiLCIgIik7Zz1hP24udHJpbShkKToiIixjLmNsYXNzTmFtZSE9PWcmJihjLmNsYXNzTmFtZT1nKX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz10eXBlb2YgYTtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBiJiYic3RyaW5nIj09PWM/Yj90aGlzLmFkZENsYXNzKGEpOnRoaXMucmVtb3ZlQ2xhc3MoYSk6dGhpcy5lYWNoKG4uaXNGdW5jdGlvbihhKT9mdW5jdGlvbihjKXtuKHRoaXMpLnRvZ2dsZUNsYXNzKGEuY2FsbCh0aGlzLGMsdGhpcy5jbGFzc05hbWUsYiksYil9OmZ1bmN0aW9uKCl7aWYoInN0cmluZyI9PT1jKXt2YXIgYixkPTAsZT1uKHRoaXMpLGY9YS5tYXRjaChGKXx8W107d2hpbGUoYj1mW2QrK10pZS5oYXNDbGFzcyhiKT9lLnJlbW92ZUNsYXNzKGIpOmUuYWRkQ2xhc3MoYil9ZWxzZShjPT09THx8ImJvb2xlYW4iPT09YykmJih0aGlzLmNsYXNzTmFtZSYmbi5fZGF0YSh0aGlzLCJfX2NsYXNzTmFtZV9fIix0aGlzLmNsYXNzTmFtZSksdGhpcy5jbGFzc05hbWU9dGhpcy5jbGFzc05hbWV8fGE9PT0hMT8iIjpuLl9kYXRhKHRoaXMsIl9fY2xhc3NOYW1lX18iKXx8IiIpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0iICIrYSsiICIsYz0wLGQ9dGhpcy5sZW5ndGg7ZD5jO2MrKylpZigxPT09dGhpc1tjXS5ub2RlVHlwZSYmKCIgIit0aGlzW2NdLmNsYXNzTmFtZSsiICIpLnJlcGxhY2UodmMsIiAiKS5pbmRleE9mKGIpPj0wKXJldHVybiEwO3JldHVybiExfX0pLG4uZWFjaCgiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudSIuc3BsaXQoIiAiKSxmdW5jdGlvbihhLGIpe24uZm5bYl09ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wP3RoaXMub24oYixudWxsLGEsYyk6dGhpcy50cmlnZ2VyKGIpfX0pLG4uZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoYSkubW91c2VsZWF2ZShifHxhKX0sYmluZDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRoaXMub24oYSxudWxsLGIsYyl9LHVuYmluZDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm9mZihhLG51bGwsYil9LGRlbGVnYXRlOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLm9uKGIsYSxjLGQpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoYSwiKioiKTp0aGlzLm9mZihiLGF8fCIqKiIsYyl9fSk7dmFyIHdjPW4ubm93KCkseGM9L1w/Lyx5Yz0vKCwpfChcW3x7KXwofXxdKXwiKD86W14iXFxcclxuXXxcXFsiXFxcL2JmbnJ0XXxcXHVbXGRhLWZBLUZdezR9KSoiXHMqOj98dHJ1ZXxmYWxzZXxudWxsfC0/KD8hMFxkKVxkKyg/OlwuXGQrfCkoPzpbZUVdWystXT9cZCt8KS9nO24ucGFyc2VKU09OPWZ1bmN0aW9uKGIpe2lmKGEuSlNPTiYmYS5KU09OLnBhcnNlKXJldHVybiBhLkpTT04ucGFyc2UoYisiIik7dmFyIGMsZD1udWxsLGU9bi50cmltKGIrIiIpO3JldHVybiBlJiYhbi50cmltKGUucmVwbGFjZSh5YyxmdW5jdGlvbihhLGIsZSxmKXtyZXR1cm4gYyYmYiYmKGQ9MCksMD09PWQ/YTooYz1lfHxiLGQrPSFmLSFlLCIiKX0pKT9GdW5jdGlvbigicmV0dXJuICIrZSkoKTpuLmVycm9yKCJJbnZhbGlkIEpTT046ICIrYil9LG4ucGFyc2VYTUw9ZnVuY3Rpb24oYil7dmFyIGMsZDtpZighYnx8InN0cmluZyIhPXR5cGVvZiBiKXJldHVybiBudWxsO3RyeXthLkRPTVBhcnNlcj8oZD1uZXcgRE9NUGFyc2VyLGM9ZC5wYXJzZUZyb21TdHJpbmcoYiwidGV4dC94bWwiKSk6KGM9bmV3IEFjdGl2ZVhPYmplY3QoIk1pY3Jvc29mdC5YTUxET00iKSxjLmFzeW5jPSJmYWxzZSIsYy5sb2FkWE1MKGIpKX1jYXRjaChlKXtjPXZvaWQgMH1yZXR1cm4gYyYmYy5kb2N1bWVudEVsZW1lbnQmJiFjLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwYXJzZXJlcnJvciIpLmxlbmd0aHx8bi5lcnJvcigiSW52YWxpZCBYTUw6ICIrYiksY307dmFyIHpjLEFjLEJjPS8jLiokLyxDYz0vKFs/Jl0pXz1bXiZdKi8sRGM9L14oLio/KTpbIFx0XSooW15cclxuXSopXHI/JC9nbSxFYz0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxGYz0vXig/OkdFVHxIRUFEKSQvLEdjPS9eXC9cLy8sSGM9L14oW1x3ListXSs6KSg/OlwvXC8oPzpbXlwvPyNdKkB8KShbXlwvPyM6XSopKD86OihcZCspfCl8KS8sSWM9e30sSmM9e30sS2M9IiovIi5jb25jYXQoIioiKTt0cnl7QWM9bG9jYXRpb24uaHJlZn1jYXRjaChMYyl7QWM9ei5jcmVhdGVFbGVtZW50KCJhIiksQWMuaHJlZj0iIixBYz1BYy5ocmVmfXpjPUhjLmV4ZWMoQWMudG9Mb3dlckNhc2UoKSl8fFtdO2Z1bmN0aW9uIE1jKGEpe3JldHVybiBmdW5jdGlvbihiLGMpeyJzdHJpbmciIT10eXBlb2YgYiYmKGM9YixiPSIqIik7dmFyIGQsZT0wLGY9Yi50b0xvd2VyQ2FzZSgpLm1hdGNoKEYpfHxbXTtpZihuLmlzRnVuY3Rpb24oYykpd2hpbGUoZD1mW2UrK10pIisiPT09ZC5jaGFyQXQoMCk/KGQ9ZC5zbGljZSgxKXx8IioiLChhW2RdPWFbZF18fFtdKS51bnNoaWZ0KGMpKTooYVtkXT1hW2RdfHxbXSkucHVzaChjKX19ZnVuY3Rpb24gTmMoYSxiLGMsZCl7dmFyIGU9e30sZj1hPT09SmM7ZnVuY3Rpb24gZyhoKXt2YXIgaTtyZXR1cm4gZVtoXT0hMCxuLmVhY2goYVtoXXx8W10sZnVuY3Rpb24oYSxoKXt2YXIgaj1oKGIsYyxkKTtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGp8fGZ8fGVbal0/Zj8hKGk9aik6dm9pZCAwOihiLmRhdGFUeXBlcy51bnNoaWZ0KGopLGcoaiksITEpfSksaX1yZXR1cm4gZyhiLmRhdGFUeXBlc1swXSl8fCFlWyIqIl0mJmcoIioiKX1mdW5jdGlvbiBPYyhhLGIpe3ZhciBjLGQsZT1uLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKGQgaW4gYil2b2lkIDAhPT1iW2RdJiYoKGVbZF0/YTpjfHwoYz17fSkpW2RdPWJbZF0pO3JldHVybiBjJiZuLmV4dGVuZCghMCxhLGMpLGF9ZnVuY3Rpb24gUGMoYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5jb250ZW50cyxpPWEuZGF0YVR5cGVzO3doaWxlKCIqIj09PWlbMF0paS5zaGlmdCgpLHZvaWQgMD09PWUmJihlPWEubWltZVR5cGV8fGIuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtVHlwZSIpKTtpZihlKWZvcihnIGluIGgpaWYoaFtnXSYmaFtnXS50ZXN0KGUpKXtpLnVuc2hpZnQoZyk7YnJlYWt9aWYoaVswXWluIGMpZj1pWzBdO2Vsc2V7Zm9yKGcgaW4gYyl7aWYoIWlbMF18fGEuY29udmVydGVyc1tnKyIgIitpWzBdXSl7Zj1nO2JyZWFrfWR8fChkPWcpfWY9Znx8ZH1yZXR1cm4gZj8oZiE9PWlbMF0mJmkudW5zaGlmdChmKSxjW2ZdKTp2b2lkIDB9ZnVuY3Rpb24gUWMoYSxiLGMsZCl7dmFyIGUsZixnLGgsaSxqPXt9LGs9YS5kYXRhVHlwZXMuc2xpY2UoKTtpZihrWzFdKWZvcihnIGluIGEuY29udmVydGVycylqW2cudG9Mb3dlckNhc2UoKV09YS5jb252ZXJ0ZXJzW2ddO2Y9ay5zaGlmdCgpO3doaWxlKGYpaWYoYS5yZXNwb25zZUZpZWxkc1tmXSYmKGNbYS5yZXNwb25zZUZpZWxkc1tmXV09YiksIWkmJmQmJmEuZGF0YUZpbHRlciYmKGI9YS5kYXRhRmlsdGVyKGIsYS5kYXRhVHlwZSkpLGk9ZixmPWsuc2hpZnQoKSlpZigiKiI9PT1mKWY9aTtlbHNlIGlmKCIqIiE9PWkmJmkhPT1mKXtpZihnPWpbaSsiICIrZl18fGpbIiogIitmXSwhZylmb3IoZSBpbiBqKWlmKGg9ZS5zcGxpdCgiICIpLGhbMV09PT1mJiYoZz1qW2krIiAiK2hbMF1dfHxqWyIqICIraFswXV0pKXtnPT09ITA/Zz1qW2VdOmpbZV0hPT0hMCYmKGY9aFswXSxrLnVuc2hpZnQoaFsxXSkpO2JyZWFrfWlmKGchPT0hMClpZihnJiZhWyJ0aHJvd3MiXSliPWcoYik7ZWxzZSB0cnl7Yj1nKGIpfWNhdGNoKGwpe3JldHVybntzdGF0ZToicGFyc2VyZXJyb3IiLGVycm9yOmc/bDoiTm8gY29udmVyc2lvbiBmcm9tICIraSsiIHRvICIrZn19fXJldHVybntzdGF0ZToic3VjY2VzcyIsZGF0YTpifX1uLmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6QWMsdHlwZToiR0VUIixpc0xvY2FsOkVjLnRlc3QoemNbMV0pLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZToiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IixhY2NlcHRzOnsiKiI6S2MsdGV4dDoidGV4dC9wbGFpbiIsaHRtbDoidGV4dC9odG1sIix4bWw6ImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwiLGpzb246ImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCJ9LGNvbnRlbnRzOnt4bWw6L3htbC8saHRtbDovaHRtbC8sanNvbjovanNvbi99LHJlc3BvbnNlRmllbGRzOnt4bWw6InJlc3BvbnNlWE1MIix0ZXh0OiJyZXNwb25zZVRleHQiLGpzb246InJlc3BvbnNlSlNPTiJ9LGNvbnZlcnRlcnM6eyIqIHRleHQiOlN0cmluZywidGV4dCBodG1sIjohMCwidGV4dCBqc29uIjpuLnBhcnNlSlNPTiwidGV4dCB4bWwiOm4ucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihhLGIpe3JldHVybiBiP09jKE9jKGEsbi5hamF4U2V0dGluZ3MpLGIpOk9jKG4uYWpheFNldHRpbmdzLGEpfSxhamF4UHJlZmlsdGVyOk1jKEljKSxhamF4VHJhbnNwb3J0Ok1jKEpjKSxhamF4OmZ1bmN0aW9uKGEsYil7Im9iamVjdCI9PXR5cGVvZiBhJiYoYj1hLGE9dm9pZCAwKSxiPWJ8fHt9O3ZhciBjLGQsZSxmLGcsaCxpLGosaz1uLmFqYXhTZXR1cCh7fSxiKSxsPWsuY29udGV4dHx8ayxtPWsuY29udGV4dCYmKGwubm9kZVR5cGV8fGwuanF1ZXJ5KT9uKGwpOm4uZXZlbnQsbz1uLkRlZmVycmVkKCkscD1uLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSxxPWsuc3RhdHVzQ29kZXx8e30scj17fSxzPXt9LHQ9MCx1PSJjYW5jZWxlZCIsdj17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKDI9PT10KXtpZighail7aj17fTt3aGlsZShiPURjLmV4ZWMoZikpaltiWzFdLnRvTG93ZXJDYXNlKCldPWJbMl19Yj1qW2EudG9Mb3dlckNhc2UoKV19cmV0dXJuIG51bGw9PWI/bnVsbDpifSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gMj09PXQ/ZjpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50b0xvd2VyQ2FzZSgpO3JldHVybiB0fHwoYT1zW2NdPXNbY118fGEsclthXT1iKSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGEpe3JldHVybiB0fHwoay5taW1lVHlwZT1hKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKGEpaWYoMj50KWZvcihiIGluIGEpcVtiXT1bcVtiXSxhW2JdXTtlbHNlIHYuYWx3YXlzKGFbdi5zdGF0dXNdKTtyZXR1cm4gdGhpc30sYWJvcnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YXx8dTtyZXR1cm4gaSYmaS5hYm9ydChiKSx4KDAsYiksdGhpc319O2lmKG8ucHJvbWlzZSh2KS5jb21wbGV0ZT1wLmFkZCx2LnN1Y2Nlc3M9di5kb25lLHYuZXJyb3I9di5mYWlsLGsudXJsPSgoYXx8ay51cmx8fEFjKSsiIikucmVwbGFjZShCYywiIikucmVwbGFjZShHYyx6Y1sxXSsiLy8iKSxrLnR5cGU9Yi5tZXRob2R8fGIudHlwZXx8ay5tZXRob2R8fGsudHlwZSxrLmRhdGFUeXBlcz1uLnRyaW0oay5kYXRhVHlwZXx8IioiKS50b0xvd2VyQ2FzZSgpLm1hdGNoKEYpfHxbIiJdLG51bGw9PWsuY3Jvc3NEb21haW4mJihjPUhjLmV4ZWMoay51cmwudG9Mb3dlckNhc2UoKSksay5jcm9zc0RvbWFpbj0hKCFjfHxjWzFdPT09emNbMV0mJmNbMl09PT16Y1syXSYmKGNbM118fCgiaHR0cDoiPT09Y1sxXT8iODAiOiI0NDMiKSk9PT0oemNbM118fCgiaHR0cDoiPT09emNbMV0/IjgwIjoiNDQzIikpKSksay5kYXRhJiZrLnByb2Nlc3NEYXRhJiYic3RyaW5nIiE9dHlwZW9mIGsuZGF0YSYmKGsuZGF0YT1uLnBhcmFtKGsuZGF0YSxrLnRyYWRpdGlvbmFsKSksTmMoSWMsayxiLHYpLDI9PT10KXJldHVybiB2O2g9ay5nbG9iYWwsaCYmMD09PW4uYWN0aXZlKysmJm4uZXZlbnQudHJpZ2dlcigiYWpheFN0YXJ0Iiksay50eXBlPWsudHlwZS50b1VwcGVyQ2FzZSgpLGsuaGFzQ29udGVudD0hRmMudGVzdChrLnR5cGUpLGU9ay51cmwsay5oYXNDb250ZW50fHwoay5kYXRhJiYoZT1rLnVybCs9KHhjLnRlc3QoZSk/IiYiOiI/Iikray5kYXRhLGRlbGV0ZSBrLmRhdGEpLGsuY2FjaGU9PT0hMSYmKGsudXJsPUNjLnRlc3QoZSk/ZS5yZXBsYWNlKENjLCIkMV89Iit3YysrKTplKyh4Yy50ZXN0KGUpPyImIjoiPyIpKyJfPSIrd2MrKykpLGsuaWZNb2RpZmllZCYmKG4ubGFzdE1vZGlmaWVkW2VdJiZ2LnNldFJlcXVlc3RIZWFkZXIoIklmLU1vZGlmaWVkLVNpbmNlIixuLmxhc3RNb2RpZmllZFtlXSksbi5ldGFnW2VdJiZ2LnNldFJlcXVlc3RIZWFkZXIoIklmLU5vbmUtTWF0Y2giLG4uZXRhZ1tlXSkpLChrLmRhdGEmJmsuaGFzQ29udGVudCYmay5jb250ZW50VHlwZSE9PSExfHxiLmNvbnRlbnRUeXBlKSYmdi5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLGsuY29udGVudFR5cGUpLHYuc2V0UmVxdWVzdEhlYWRlcigiQWNjZXB0IixrLmRhdGFUeXBlc1swXSYmay5hY2NlcHRzW2suZGF0YVR5cGVzWzBdXT9rLmFjY2VwdHNbay5kYXRhVHlwZXNbMF1dKygiKiIhPT1rLmRhdGFUeXBlc1swXT8iLCAiK0tjKyI7IHE9MC4wMSI6IiIpOmsuYWNjZXB0c1siKiJdKTtmb3IoZCBpbiBrLmhlYWRlcnMpdi5zZXRSZXF1ZXN0SGVhZGVyKGQsay5oZWFkZXJzW2RdKTtpZihrLmJlZm9yZVNlbmQmJihrLmJlZm9yZVNlbmQuY2FsbChsLHYsayk9PT0hMXx8Mj09PXQpKXJldHVybiB2LmFib3J0KCk7dT0iYWJvcnQiO2ZvcihkIGlue3N1Y2Nlc3M6MSxlcnJvcjoxLGNvbXBsZXRlOjF9KXZbZF0oa1tkXSk7aWYoaT1OYyhKYyxrLGIsdikpe3YucmVhZHlTdGF0ZT0xLGgmJm0udHJpZ2dlcigiYWpheFNlbmQiLFt2LGtdKSxrLmFzeW5jJiZrLnRpbWVvdXQ+MCYmKGc9c2V0VGltZW91dChmdW5jdGlvbigpe3YuYWJvcnQoInRpbWVvdXQiKX0say50aW1lb3V0KSk7dHJ5e3Q9MSxpLnNlbmQocix4KX1jYXRjaCh3KXtpZighKDI+dCkpdGhyb3cgdzt4KC0xLHcpfX1lbHNlIHgoLTEsIk5vIFRyYW5zcG9ydCIpO2Z1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGoscixzLHUsdyx4PWI7MiE9PXQmJih0PTIsZyYmY2xlYXJUaW1lb3V0KGcpLGk9dm9pZCAwLGY9ZHx8IiIsdi5yZWFkeVN0YXRlPWE+MD80OjAsaj1hPj0yMDAmJjMwMD5hfHwzMDQ9PT1hLGMmJih1PVBjKGssdixjKSksdT1RYyhrLHUsdixqKSxqPyhrLmlmTW9kaWZpZWQmJih3PXYuZ2V0UmVzcG9uc2VIZWFkZXIoIkxhc3QtTW9kaWZpZWQiKSx3JiYobi5sYXN0TW9kaWZpZWRbZV09dyksdz12LmdldFJlc3BvbnNlSGVhZGVyKCJldGFnIiksdyYmKG4uZXRhZ1tlXT13KSksMjA0PT09YXx8IkhFQUQiPT09ay50eXBlP3g9Im5vY29udGVudCI6MzA0PT09YT94PSJub3Rtb2RpZmllZCI6KHg9dS5zdGF0ZSxyPXUuZGF0YSxzPXUuZXJyb3Isaj0hcykpOihzPXgsKGF8fCF4KSYmKHg9ImVycm9yIiwwPmEmJihhPTApKSksdi5zdGF0dXM9YSx2LnN0YXR1c1RleHQ9KGJ8fHgpKyIiLGo/by5yZXNvbHZlV2l0aChsLFtyLHgsdl0pOm8ucmVqZWN0V2l0aChsLFt2LHgsc10pLHYuc3RhdHVzQ29kZShxKSxxPXZvaWQgMCxoJiZtLnRyaWdnZXIoaj8iYWpheFN1Y2Nlc3MiOiJhamF4RXJyb3IiLFt2LGssaj9yOnNdKSxwLmZpcmVXaXRoKGwsW3YseF0pLGgmJihtLnRyaWdnZXIoImFqYXhDb21wbGV0ZSIsW3Ysa10pLC0tbi5hY3RpdmV8fG4uZXZlbnQudHJpZ2dlcigiYWpheFN0b3AiKSkpfXJldHVybiB2fSxnZXRKU09OOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gbi5nZXQoYSxiLGMsImpzb24iKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG4uZ2V0KGEsdm9pZCAwLGIsInNjcmlwdCIpfX0pLG4uZWFjaChbImdldCIsInBvc3QiXSxmdW5jdGlvbihhLGIpe25bYl09ZnVuY3Rpb24oYSxjLGQsZSl7cmV0dXJuIG4uaXNGdW5jdGlvbihjKSYmKGU9ZXx8ZCxkPWMsYz12b2lkIDApLG4uYWpheCh7dXJsOmEsdHlwZTpiLGRhdGFUeXBlOmUsZGF0YTpjLHN1Y2Nlc3M6ZH0pfX0pLG4uZWFjaChbImFqYXhTdGFydCIsImFqYXhTdG9wIiwiYWpheENvbXBsZXRlIiwiYWpheEVycm9yIiwiYWpheFN1Y2Nlc3MiLCJhamF4U2VuZCJdLGZ1bmN0aW9uKGEsYil7bi5mbltiXT1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vbihiLGEpfX0pLG4uX2V2YWxVcmw9ZnVuY3Rpb24oYSl7cmV0dXJuIG4uYWpheCh7dXJsOmEsdHlwZToiR0VUIixkYXRhVHlwZToic2NyaXB0Iixhc3luYzohMSxnbG9iYWw6ITEsInRocm93cyI6ITB9KX0sbi5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oYSl7aWYobi5pc0Z1bmN0aW9uKGEpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oYil7bih0aGlzKS53cmFwQWxsKGEuY2FsbCh0aGlzLGIpKX0pO2lmKHRoaXNbMF0pe3ZhciBiPW4oYSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKTt0aGlzWzBdLnBhcmVudE5vZGUmJmIuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLGIubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpczt3aGlsZShhLmZpcnN0Q2hpbGQmJjE9PT1hLmZpcnN0Q2hpbGQubm9kZVR5cGUpYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9KS5hcHBlbmQodGhpcyl9cmV0dXJuIHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKG4uaXNGdW5jdGlvbihhKT9mdW5jdGlvbihiKXtuKHRoaXMpLndyYXBJbm5lcihhLmNhbGwodGhpcyxiKSl9OmZ1bmN0aW9uKCl7dmFyIGI9bih0aGlzKSxjPWIuY29udGVudHMoKTtjLmxlbmd0aD9jLndyYXBBbGwoYSk6Yi5hcHBlbmQoYSl9KX0sd3JhcDpmdW5jdGlvbihhKXt2YXIgYj1uLmlzRnVuY3Rpb24oYSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXtuKHRoaXMpLndyYXBBbGwoYj9hLmNhbGwodGhpcyxjKTphKX0pfSx1bndyYXA6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCl7bi5ub2RlTmFtZSh0aGlzLCJib2R5Iil8fG4odGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKX0pLmVuZCgpfX0pLG4uZXhwci5maWx0ZXJzLmhpZGRlbj1mdW5jdGlvbihhKXtyZXR1cm4gYS5vZmZzZXRXaWR0aDw9MCYmYS5vZmZzZXRIZWlnaHQ8PTB8fCFsLnJlbGlhYmxlSGlkZGVuT2Zmc2V0cygpJiYibm9uZSI9PT0oYS5zdHlsZSYmYS5zdHlsZS5kaXNwbGF5fHxuLmNzcyhhLCJkaXNwbGF5IikpfSxuLmV4cHIuZmlsdGVycy52aXNpYmxlPWZ1bmN0aW9uKGEpe3JldHVybiFuLmV4cHIuZmlsdGVycy5oaWRkZW4oYSl9O3ZhciBSYz0vJTIwL2csU2M9L1xbXF0kLyxUYz0vXHI/XG4vZyxVYz0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksVmM9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIFdjKGEsYixjLGQpe3ZhciBlO2lmKG4uaXNBcnJheShiKSluLmVhY2goYixmdW5jdGlvbihiLGUpe2N8fFNjLnRlc3QoYSk/ZChhLGUpOldjKGErIlsiKygib2JqZWN0Ij09dHlwZW9mIGU/YjoiIikrIl0iLGUsYyxkKX0pO2Vsc2UgaWYoY3x8Im9iamVjdCIhPT1uLnR5cGUoYikpZChhLGIpO2Vsc2UgZm9yKGUgaW4gYilXYyhhKyJbIitlKyJdIixiW2VdLGMsZCl9bi5wYXJhbT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1mdW5jdGlvbihhLGIpe2I9bi5pc0Z1bmN0aW9uKGIpP2IoKTpudWxsPT1iPyIiOmIsZFtkLmxlbmd0aF09ZW5jb2RlVVJJQ29tcG9uZW50KGEpKyI9IitlbmNvZGVVUklDb21wb25lbnQoYil9O2lmKHZvaWQgMD09PWImJihiPW4uYWpheFNldHRpbmdzJiZuLmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbCksbi5pc0FycmF5KGEpfHxhLmpxdWVyeSYmIW4uaXNQbGFpbk9iamVjdChhKSluLmVhY2goYSxmdW5jdGlvbigpe2UodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IoYyBpbiBhKVdjKGMsYVtjXSxiLGUpO3JldHVybiBkLmpvaW4oIiYiKS5yZXBsYWNlKFJjLCIrIil9LG4uZm4uZXh0ZW5kKHtzZXJpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gbi5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpfSxzZXJpYWxpemVBcnJheTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBhPW4ucHJvcCh0aGlzLCJlbGVtZW50cyIpO3JldHVybiBhP24ubWFrZUFycmF5KGEpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgYT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIW4odGhpcykuaXMoIjpkaXNhYmxlZCIpJiZWYy50ZXN0KHRoaXMubm9kZU5hbWUpJiYhVWMudGVzdChhKSYmKHRoaXMuY2hlY2tlZHx8IVgudGVzdChhKSl9KS5tYXAoZnVuY3Rpb24oYSxiKXt2YXIgYz1uKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1jP251bGw6bi5pc0FycmF5KGMpP24ubWFwKGMsZnVuY3Rpb24oYSl7cmV0dXJue25hbWU6Yi5uYW1lLHZhbHVlOmEucmVwbGFjZShUYywiXHJcbiIpfX0pOntuYW1lOmIubmFtZSx2YWx1ZTpjLnJlcGxhY2UoVGMsIlxyXG4iKX19KS5nZXQoKX19KSxuLmFqYXhTZXR0aW5ncy54aHI9dm9pZCAwIT09YS5BY3RpdmVYT2JqZWN0P2Z1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaXNMb2NhbCYmL14oZ2V0fHBvc3R8aGVhZHxwdXR8ZGVsZXRlfG9wdGlvbnMpJC9pLnRlc3QodGhpcy50eXBlKSYmJGMoKXx8X2MoKX06JGM7dmFyIFhjPTAsWWM9e30sWmM9bi5hamF4U2V0dGluZ3MueGhyKCk7YS5BY3RpdmVYT2JqZWN0JiZuKGEpLm9uKCJ1bmxvYWQiLGZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIFljKVljW2FdKHZvaWQgMCwhMCl9KSxsLmNvcnM9ISFaYyYmIndpdGhDcmVkZW50aWFscyJpbiBaYyxaYz1sLmFqYXg9ISFaYyxaYyYmbi5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGEpe2lmKCFhLmNyb3NzRG9tYWlufHxsLmNvcnMpe3ZhciBiO3JldHVybntzZW5kOmZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hLnhocigpLGc9KytYYztpZihmLm9wZW4oYS50eXBlLGEudXJsLGEuYXN5bmMsYS51c2VybmFtZSxhLnBhc3N3b3JkKSxhLnhockZpZWxkcylmb3IoZSBpbiBhLnhockZpZWxkcylmW2VdPWEueGhyRmllbGRzW2VdO2EubWltZVR5cGUmJmYub3ZlcnJpZGVNaW1lVHlwZSYmZi5vdmVycmlkZU1pbWVUeXBlKGEubWltZVR5cGUpLGEuY3Jvc3NEb21haW58fGNbIlgtUmVxdWVzdGVkLVdpdGgiXXx8KGNbIlgtUmVxdWVzdGVkLVdpdGgiXT0iWE1MSHR0cFJlcXVlc3QiKTtmb3IoZSBpbiBjKXZvaWQgMCE9PWNbZV0mJmYuc2V0UmVxdWVzdEhlYWRlcihlLGNbZV0rIiIpO2Yuc2VuZChhLmhhc0NvbnRlbnQmJmEuZGF0YXx8bnVsbCksYj1mdW5jdGlvbihjLGUpe3ZhciBoLGksajtpZihiJiYoZXx8ND09PWYucmVhZHlTdGF0ZSkpaWYoZGVsZXRlIFljW2ddLGI9dm9pZCAwLGYub25yZWFkeXN0YXRlY2hhbmdlPW4ubm9vcCxlKTQhPT1mLnJlYWR5U3RhdGUmJmYuYWJvcnQoKTtlbHNle2o9e30saD1mLnN0YXR1cywic3RyaW5nIj09dHlwZW9mIGYucmVzcG9uc2VUZXh0JiYoai50ZXh0PWYucmVzcG9uc2VUZXh0KTt0cnl7aT1mLnN0YXR1c1RleHR9Y2F0Y2goayl7aT0iIn1ofHwhYS5pc0xvY2FsfHxhLmNyb3NzRG9tYWluPzEyMjM9PT1oJiYoaD0yMDQpOmg9ai50ZXh0PzIwMDo0MDR9aiYmZChoLGksaixmLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKX0sYS5hc3luYz80PT09Zi5yZWFkeVN0YXRlP3NldFRpbWVvdXQoYik6Zi5vbnJlYWR5c3RhdGVjaGFuZ2U9WWNbZ109YjpiKCl9LGFib3J0OmZ1bmN0aW9uKCl7YiYmYih2b2lkIDAsITApfX19fSk7ZnVuY3Rpb24gJGMoKXt0cnl7cmV0dXJuIG5ldyBhLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGIpe319ZnVuY3Rpb24gX2MoKXt0cnl7cmV0dXJuIG5ldyBhLkFjdGl2ZVhPYmplY3QoIk1pY3Jvc29mdC5YTUxIVFRQIil9Y2F0Y2goYil7fX1uLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OiJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdCJ9LGNvbnRlbnRzOntzY3JpcHQ6Lyg/OmphdmF8ZWNtYSlzY3JpcHQvfSxjb252ZXJ0ZXJzOnsidGV4dCBzY3JpcHQiOmZ1bmN0aW9uKGEpe3JldHVybiBuLmdsb2JhbEV2YWwoYSksYX19fSksbi5hamF4UHJlZmlsdGVyKCJzY3JpcHQiLGZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEuY2FjaGUmJihhLmNhY2hlPSExKSxhLmNyb3NzRG9tYWluJiYoYS50eXBlPSJHRVQiLGEuZ2xvYmFsPSExKX0pLG4uYWpheFRyYW5zcG9ydCgic2NyaXB0IixmdW5jdGlvbihhKXtpZihhLmNyb3NzRG9tYWluKXt2YXIgYixjPXouaGVhZHx8bigiaGVhZCIpWzBdfHx6LmRvY3VtZW50RWxlbWVudDtyZXR1cm57c2VuZDpmdW5jdGlvbihkLGUpe2I9ei5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSxiLmFzeW5jPSEwLGEuc2NyaXB0Q2hhcnNldCYmKGIuY2hhcnNldD1hLnNjcmlwdENoYXJzZXQpLGIuc3JjPWEudXJsLGIub25sb2FkPWIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKGEsYyl7KGN8fCFiLnJlYWR5U3RhdGV8fC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoYi5yZWFkeVN0YXRlKSkmJihiLm9ubG9hZD1iLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLGIucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLGI9bnVsbCxjfHxlKDIwMCwic3VjY2VzcyIpKX0sYy5pbnNlcnRCZWZvcmUoYixjLmZpcnN0Q2hpbGQpfSxhYm9ydDpmdW5jdGlvbigpe2ImJmIub25sb2FkKHZvaWQgMCwhMCl9fX19KTt2YXIgYWQ9W10sYmQ9Lyg9KVw/KD89JnwkKXxcP1w/LztuLmFqYXhTZXR1cCh7anNvbnA6ImNhbGxiYWNrIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGE9YWQucG9wKCl8fG4uZXhwYW5kbysiXyIrd2MrKztyZXR1cm4gdGhpc1thXT0hMCxhfX0pLG4uYWpheFByZWZpbHRlcigianNvbiBqc29ucCIsZnVuY3Rpb24oYixjLGQpe3ZhciBlLGYsZyxoPWIuanNvbnAhPT0hMSYmKGJkLnRlc3QoYi51cmwpPyJ1cmwiOiJzdHJpbmciPT10eXBlb2YgYi5kYXRhJiYhKGIuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmYmQudGVzdChiLmRhdGEpJiYiZGF0YSIpO3JldHVybiBofHwianNvbnAiPT09Yi5kYXRhVHlwZXNbMF0/KGU9Yi5qc29ucENhbGxiYWNrPW4uaXNGdW5jdGlvbihiLmpzb25wQ2FsbGJhY2spP2IuanNvbnBDYWxsYmFjaygpOmIuanNvbnBDYWxsYmFjayxoP2JbaF09YltoXS5yZXBsYWNlKGJkLCIkMSIrZSk6Yi5qc29ucCE9PSExJiYoYi51cmwrPSh4Yy50ZXN0KGIudXJsKT8iJiI6Ij8iKStiLmpzb25wKyI9IitlKSxiLmNvbnZlcnRlcnNbInNjcmlwdCBqc29uIl09ZnVuY3Rpb24oKXtyZXR1cm4gZ3x8bi5lcnJvcihlKyIgd2FzIG5vdCBjYWxsZWQiKSxnWzBdfSxiLmRhdGFUeXBlc1swXT0ianNvbiIsZj1hW2VdLGFbZV09ZnVuY3Rpb24oKXtnPWFyZ3VtZW50c30sZC5hbHdheXMoZnVuY3Rpb24oKXthW2VdPWYsYltlXSYmKGIuanNvbnBDYWxsYmFjaz1jLmpzb25wQ2FsbGJhY2ssYWQucHVzaChlKSksZyYmbi5pc0Z1bmN0aW9uKGYpJiZmKGdbMF0pLGc9Zj12b2lkIDB9KSwic2NyaXB0Iik6dm9pZCAwfSksbi5wYXJzZUhUTUw9ZnVuY3Rpb24oYSxiLGMpe2lmKCFhfHwic3RyaW5nIiE9dHlwZW9mIGEpcmV0dXJuIG51bGw7ImJvb2xlYW4iPT10eXBlb2YgYiYmKGM9YixiPSExKSxiPWJ8fHo7dmFyIGQ9di5leGVjKGEpLGU9IWMmJltdO3JldHVybiBkP1tiLmNyZWF0ZUVsZW1lbnQoZFsxXSldOihkPW4uYnVpbGRGcmFnbWVudChbYV0sYixlKSxlJiZlLmxlbmd0aCYmbihlKS5yZW1vdmUoKSxuLm1lcmdlKFtdLGQuY2hpbGROb2RlcykpfTt2YXIgY2Q9bi5mbi5sb2FkO24uZm4ubG9hZD1mdW5jdGlvbihhLGIsYyl7aWYoInN0cmluZyIhPXR5cGVvZiBhJiZjZClyZXR1cm4gY2QuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBkLGUsZixnPXRoaXMsaD1hLmluZGV4T2YoIiAiKTtyZXR1cm4gaD49MCYmKGQ9YS5zbGljZShoLGEubGVuZ3RoKSxhPWEuc2xpY2UoMCxoKSksbi5pc0Z1bmN0aW9uKGIpPyhjPWIsYj12b2lkIDApOmImJiJvYmplY3QiPT10eXBlb2YgYiYmKGY9IlBPU1QiKSxnLmxlbmd0aD4wJiZuLmFqYXgoe3VybDphLHR5cGU6ZixkYXRhVHlwZToiaHRtbCIsZGF0YTpifSkuZG9uZShmdW5jdGlvbihhKXtlPWFyZ3VtZW50cyxnLmh0bWwoZD9uKCI8ZGl2PiIpLmFwcGVuZChuLnBhcnNlSFRNTChhKSkuZmluZChkKTphKX0pLmNvbXBsZXRlKGMmJmZ1bmN0aW9uKGEsYil7Zy5lYWNoKGMsZXx8W2EucmVzcG9uc2VUZXh0LGIsYV0pfSksdGhpc30sbi5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG4uZ3JlcChuLnRpbWVycyxmdW5jdGlvbihiKXtyZXR1cm4gYT09PWIuZWxlbX0pLmxlbmd0aH07dmFyIGRkPWEuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O2Z1bmN0aW9uIGVkKGEpe3JldHVybiBuLmlzV2luZG93KGEpP2E6OT09PWEubm9kZVR5cGU/YS5kZWZhdWx0Vmlld3x8YS5wYXJlbnRXaW5kb3c6ITF9bi5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosaz1uLmNzcyhhLCJwb3NpdGlvbiIpLGw9bihhKSxtPXt9OyJzdGF0aWMiPT09ayYmKGEuc3R5bGUucG9zaXRpb249InJlbGF0aXZlIiksaD1sLm9mZnNldCgpLGY9bi5jc3MoYSwidG9wIiksaT1uLmNzcyhhLCJsZWZ0Iiksaj0oImFic29sdXRlIj09PWt8fCJmaXhlZCI9PT1rKSYmbi5pbkFycmF5KCJhdXRvIixbZixpXSk+LTEsaj8oZD1sLnBvc2l0aW9uKCksZz1kLnRvcCxlPWQubGVmdCk6KGc9cGFyc2VGbG9hdChmKXx8MCxlPXBhcnNlRmxvYXQoaSl8fDApLG4uaXNGdW5jdGlvbihiKSYmKGI9Yi5jYWxsKGEsYyxoKSksbnVsbCE9Yi50b3AmJihtLnRvcD1iLnRvcC1oLnRvcCtnKSxudWxsIT1iLmxlZnQmJihtLmxlZnQ9Yi5sZWZ0LWgubGVmdCtlKSwidXNpbmciaW4gYj9iLnVzaW5nLmNhbGwoYSxtKTpsLmNzcyhtKX19LG4uZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oYSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihiKXtuLm9mZnNldC5zZXRPZmZzZXQodGhpcyxhLGIpfSk7dmFyIGIsYyxkPXt0b3A6MCxsZWZ0OjB9LGU9dGhpc1swXSxmPWUmJmUub3duZXJEb2N1bWVudDtpZihmKXJldHVybiBiPWYuZG9jdW1lbnRFbGVtZW50LG4uY29udGFpbnMoYixlKT8odHlwZW9mIGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0IT09TCYmKGQ9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksYz1lZChmKSx7dG9wOmQudG9wKyhjLnBhZ2VZT2Zmc2V0fHxiLnNjcm9sbFRvcCktKGIuY2xpZW50VG9wfHwwKSxsZWZ0OmQubGVmdCsoYy5wYWdlWE9mZnNldHx8Yi5zY3JvbGxMZWZ0KS0oYi5jbGllbnRMZWZ0fHwwKX0pOmR9LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGEsYixjPXt0b3A6MCxsZWZ0OjB9LGQ9dGhpc1swXTtyZXR1cm4iZml4ZWQiPT09bi5jc3MoZCwicG9zaXRpb24iKT9iPWQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6KGE9dGhpcy5vZmZzZXRQYXJlbnQoKSxiPXRoaXMub2Zmc2V0KCksbi5ub2RlTmFtZShhWzBdLCJodG1sIil8fChjPWEub2Zmc2V0KCkpLGMudG9wKz1uLmNzcyhhWzBdLCJib3JkZXJUb3BXaWR0aCIsITApLGMubGVmdCs9bi5jc3MoYVswXSwiYm9yZGVyTGVmdFdpZHRoIiwhMCkpLHt0b3A6Yi50b3AtYy50b3Atbi5jc3MoZCwibWFyZ2luVG9wIiwhMCksbGVmdDpiLmxlZnQtYy5sZWZ0LW4uY3NzKGQsIm1hcmdpbkxlZnQiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudHx8ZGQ7d2hpbGUoYSYmIW4ubm9kZU5hbWUoYSwiaHRtbCIpJiYic3RhdGljIj09PW4uY3NzKGEsInBvc2l0aW9uIikpYT1hLm9mZnNldFBhcmVudDtyZXR1cm4gYXx8ZGR9KX19KSxuLmVhY2goe3Njcm9sbExlZnQ6InBhZ2VYT2Zmc2V0IixzY3JvbGxUb3A6InBhZ2VZT2Zmc2V0In0sZnVuY3Rpb24oYSxiKXt2YXIgYz0vWS8udGVzdChiKTtuLmZuW2FdPWZ1bmN0aW9uKGQpe3JldHVybiBXKHRoaXMsZnVuY3Rpb24oYSxkLGUpe3ZhciBmPWVkKGEpO3JldHVybiB2b2lkIDA9PT1lP2Y/YiBpbiBmP2ZbYl06Zi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbZF06YVtkXTp2b2lkKGY/Zi5zY3JvbGxUbyhjP24oZikuc2Nyb2xsTGVmdCgpOmUsYz9lOm4oZikuc2Nyb2xsVG9wKCkpOmFbZF09ZSl9LGEsZCxhcmd1bWVudHMubGVuZ3RoLG51bGwpfX0pLG4uZWFjaChbInRvcCIsImxlZnQiXSxmdW5jdGlvbihhLGIpe24uY3NzSG9va3NbYl09TWIobC5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGM/KGM9S2IoYSxiKSxJYi50ZXN0KGMpP24oYSkucG9zaXRpb24oKVtiXSsicHgiOmMpOnZvaWQgMH0pfSksbi5lYWNoKHtIZWlnaHQ6ImhlaWdodCIsV2lkdGg6IndpZHRoIn0sZnVuY3Rpb24oYSxiKXtuLmVhY2goe3BhZGRpbmc6ImlubmVyIithLGNvbnRlbnQ6YiwiIjoib3V0ZXIiK2F9LGZ1bmN0aW9uKGMsZCl7bi5mbltkXT1mdW5jdGlvbihkLGUpe3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgmJihjfHwiYm9vbGVhbiIhPXR5cGVvZiBkKSxnPWN8fChkPT09ITB8fGU9PT0hMD8ibWFyZ2luIjoiYm9yZGVyIik7cmV0dXJuIFcodGhpcyxmdW5jdGlvbihiLGMsZCl7dmFyIGU7cmV0dXJuIG4uaXNXaW5kb3coYik/Yi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbImNsaWVudCIrYV06OT09PWIubm9kZVR5cGU/KGU9Yi5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoYi5ib2R5WyJzY3JvbGwiK2FdLGVbInNjcm9sbCIrYV0sYi5ib2R5WyJvZmZzZXQiK2FdLGVbIm9mZnNldCIrYV0sZVsiY2xpZW50IithXSkpOnZvaWQgMD09PWQ/bi5jc3MoYixjLGcpOm4uc3R5bGUoYixjLGQsZyl9LGIsZj9kOnZvaWQgMCxmLG51bGwpfX0pfSksbi5mbi5zaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGVuZ3RofSxuLmZuLmFuZFNlbGY9bi5mbi5hZGRCYWNrLCJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZSgianF1ZXJ5IixbXSxmdW5jdGlvbigpe3JldHVybiBufSk7dmFyIGZkPWEualF1ZXJ5LGdkPWEuJDtyZXR1cm4gbi5ub0NvbmZsaWN0PWZ1bmN0aW9uKGIpe3JldHVybiBhLiQ9PT1uJiYoYS4kPWdkKSxiJiZhLmpRdWVyeT09PW4mJihhLmpRdWVyeT1mZCksbn0sdHlwZW9mIGI9PT1MJiYoYS5qUXVlcnk9YS4kPW4pLG59KTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.js,importbuddy/js/jquery.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
KGZ1bmN0aW9uKCQpew0KIA0KICAgICQuZm4uZXh0ZW5kKHsgDQogICAgICAgICANCiAgICAgICAgbGVhbk1vZGFsOiBmdW5jdGlvbihvcHRpb25zKSB7DQogCQkJDQogCQkJdmFyIHdpbiA9IHdpbmRvdy5kaWFsb2dBcmd1bWVudHMgfHwgb3BlbmVyIHx8IHBhcmVudCB8fCB0b3A7DQogCQkJDQogICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSB7DQogICAgICAgICAgICAgICAgdG9wOiAxMDAsDQogICAgICAgICAgICAgICAgb3ZlcmxheTogMC41LA0KICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uOiBudWxsDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICB2YXIgb3ZlcmxheSA9ICQoIjxkaXYgaWQ9J2xlYW5fb3ZlcmxheSc+PC9kaXY+Iik7DQogICAgICAgICAgICANCiAgICAgICAgICAgICQoImJvZHkiKS5hcHBlbmQob3ZlcmxheSk7DQogICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgb3B0aW9ucyA9ICAkLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7DQogDQogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdmFyIG8gPSBvcHRpb25zOw0KICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAJdmFyIG1vZGFsX2lkID0gJCh0aGlzKS5hdHRyKCJocmVmIik7DQoNCgkJCQkkKCIjbGVhbl9vdmVybGF5IikuY2xpY2soZnVuY3Rpb24oKSB7IA0KICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwobW9kYWxfaWQpOyAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgJChvLmNsb3NlQnV0dG9uKS5jbGljayhmdW5jdGlvbigpIHsgDQogICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbChtb2RhbF9pZCk7ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAJDQogICAgICAgICAgICAgIAl2YXIgbW9kYWxfaGVpZ2h0ID0gJChtb2RhbF9pZCkub3V0ZXJIZWlnaHQoZmFsc2UpOw0KICAgICAgICAJICAJdmFyIG1vZGFsX3dpZHRoID0gJChtb2RhbF9pZCkub3V0ZXJXaWR0aChmYWxzZSk7DQoNCiAgICAgICAgCQkkKCcjbGVhbl9vdmVybGF5JykuY3NzKHsgJ2Rpc3BsYXknIDogJ2Jsb2NrJywgb3BhY2l0eSA6IDAgfSk7DQoNCiAgICAgICAgCQkkKCcjbGVhbl9vdmVybGF5JykuZmFkZVRvKDIwMCxvLm92ZXJsYXkpOw0KDQogICAgICAgIAkJJChtb2RhbF9pZCkuY3NzKHsgDQogICAgICAgIAkJDQogICAgICAgIAkJCSdkaXNwbGF5JyA6ICdibG9jaycsDQogICAgICAgIAkJCSdwb3NpdGlvbicgOiAnZml4ZWQnLA0KICAgICAgICAJCQknb3BhY2l0eScgOiAwLA0KICAgICAgICAJCQknei1pbmRleCc6IDExMDAwLA0KICAgICAgICAJCQknbGVmdCcgOiA1MCArICclJywNCiAgICAgICAgCQkJJ21hcmdpbi1sZWZ0JyA6IC0obW9kYWxfd2lkdGgvMikgKyAicHgiLA0KICAgICAgICAJCQkndG9wJyA6IG8udG9wICsgInB4Ig0KICAgICAgICAJCQ0KICAgICAgICAJCX0pOw0KDQogICAgICAgIAkJJChtb2RhbF9pZCkuZmFkZVRvKDIwMCwxKTsNCg0KICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgCX0pOw0KICAgICAgICAgICAgIA0KICAgICAgICAgICAgfSk7DQoNCgkJCWZ1bmN0aW9uIGNsb3NlX21vZGFsKG1vZGFsX2lkKXsNCg0KICAgICAgICAJCSQoIiNsZWFuX292ZXJsYXkiKS5mYWRlT3V0KDIwMCk7DQoNCiAgICAgICAgCQkkKG1vZGFsX2lkKS5jc3MoeyAnZGlzcGxheScgOiAnbm9uZScgfSk7DQoJCQkNCgkJCX0NCiAgICANCiAgICAgICAgfQ0KICAgIH0pOw0KICAgICANCn0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/jquery.simple-expand.min.js,importbuddy/js/jquery.simple-expand.min.js
LyogQ29weXJpZ2h0IChDKSAyMDEyIFN5bHZhaW4gSGFtZWwNClByb2plY3Q6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWRob3RzbHkvc2ltcGxlLWV4cGFuZA0KTUlUIExpY2VuY2U6IGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vcmVkaG90c2x5L3NpbXBsZS1leHBhbmQvbWFzdGVyL2xpY2VuY2UtbWl0LnR4dCAqLw0KKGZ1bmN0aW9uKCQpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpcztlLmRlZmF1bHRzPXtoaWRlTW9kZToiZmFkZVRvZ2dsZSIsZGVmYXVsdFNlYXJjaE1vZGU6InBhcmVudCIsZGVmYXVsdFRhcmdldDoiLmNvbnRlbnQiLHRocm93T25NaXNzaW5nVGFyZ2V0OiEwLGtlZXBTdGF0ZUluQ29va2llOiExLGNvb2tpZU5hbWU6InNpbXBsZS1leHBhbmQifSxlLnNldHRpbmdzPXt9LCQuZXh0ZW5kKGUuc2V0dGluZ3MsZS5kZWZhdWx0cyksZS5maW5kTGV2ZWxPbmVEZWVwPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZS5maW5kKHQpLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiEkKHRoaXMpLnBhcmVudHNVbnRpbChlLG4pLmxlbmd0aH0pfSxlLnNldEluaXRpYWxTdGF0ZT1mdW5jdGlvbih0LG4pe3ZhciByPWUucmVhZFN0YXRlKHQpO3I/KHQucmVtb3ZlQ2xhc3MoImNvbGxhcHNlZCIpLmFkZENsYXNzKCJleHBhbmRlZCIpLGUuc2hvdyhuKSk6KHQucmVtb3ZlQ2xhc3MoImV4cGFuZGVkIikuYWRkQ2xhc3MoImNvbGxhcHNlZCIpLGUuaGlkZShuKSl9LGUuaGlkZT1mdW5jdGlvbih0KXtlLnNldHRpbmdzLmhpZGVNb2RlPT09ImZhZGVUb2dnbGUiP3QuaGlkZSgpOmUuc2V0dGluZ3MuaGlkZU1vZGU9PT0iYmFzaWMiJiZ0LmhpZGUoKX0sZS5zaG93PWZ1bmN0aW9uKHQpe2Uuc2V0dGluZ3MuaGlkZU1vZGU9PT0iZmFkZVRvZ2dsZSI/dC5zaG93KCk6ZS5zZXR0aW5ncy5oaWRlTW9kZT09PSJiYXNpYyImJnQuc2hvdygpfSxlLmNoZWNrS2VlcFN0YXRlSW5Db29raWVQcmVjb25kaXRpb25zPWZ1bmN0aW9uKCl7aWYoZS5zZXR0aW5ncy5rZWVwU3RhdGVJbkNvb2tpZSYmJC5jb29raWU9PT11bmRlZmluZWQpdGhyb3cgbmV3IEVycm9yKCJzaW1wbGUtZXhwYW5kOiBrZWVwU3RhdGVJbkNvb2tpZSBvcHRpb24gcmVxdWlyZXMgJC5jb29raWUgdG8gYmUgZGVmaW5lZC4iKX0sZS5yZWFkQ29va2llPWZ1bmN0aW9uKCl7dmFyIHQ9JC5jb29raWUoZS5zZXR0aW5ncy5jb29raWVOYW1lKTtyZXR1cm4gdD09PW51bGx8fHQ9PT0iIj97fTpKU09OLnBhcnNlKHQpfSxlLnJlYWRTdGF0ZT1mdW5jdGlvbih0KXtpZighZS5zZXR0aW5ncy5rZWVwU3RhdGVJbkNvb2tpZSlyZXR1cm4hMTt2YXIgbj10LmF0dHIoIklkIik7aWYobj09PXVuZGVmaW5lZClyZXR1cm47dmFyIHI9ZS5yZWFkQ29va2llKCksaT1yW25dPT09ITB8fCExO3JldHVybiBpfSxlLnNhdmVTdGF0ZT1mdW5jdGlvbih0LG4pe2lmKCFlLnNldHRpbmdzLmtlZXBTdGF0ZUluQ29va2llKXJldHVybjt2YXIgcj10LmF0dHIoIklkIik7aWYocj09PXVuZGVmaW5lZClyZXR1cm47dmFyIGk9ZS5yZWFkQ29va2llKCk7aVtyXT1uLCQuY29va2llKGUuc2V0dGluZ3MuY29va2llTmFtZSxKU09OLnN0cmluZ2lmeShpKSx7cmF3OiEwLHBhdGg6d2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSl9LGUudG9nZ2xlPWZ1bmN0aW9uKHQsbil7dmFyIHI9ZS50b2dnbGVDc3ModCk7cmV0dXJuIGUuc2V0dGluZ3MuaGlkZU1vZGU9PT0iZmFkZVRvZ2dsZSI/bi5mYWRlVG9nZ2xlKDE1MCk6ZS5zZXR0aW5ncy5oaWRlTW9kZT09PSJiYXNpYyI/bi50b2dnbGUoKTokLmlzRnVuY3Rpb24oZS5zZXR0aW5ncy5oaWRlTW9kZSkmJmUuc2V0dGluZ3MuaGlkZU1vZGUodCxuLHIpLGUuc2F2ZVN0YXRlKHQsciksITF9LGUudG9nZ2xlQ3NzPWZ1bmN0aW9uKGUpe3JldHVybiBlLmhhc0NsYXNzKCJleHBhbmRlZCIpPyhlLnRvZ2dsZUNsYXNzKCJjb2xsYXBzZWQgZXhwYW5kZWQiKSwhMSk6KGUudG9nZ2xlQ2xhc3MoImV4cGFuZGVkIGNvbGxhcHNlZCIpLCEwKX0sZS5maW5kVGFyZ2V0cz1mdW5jdGlvbih0LG4scil7dmFyIGk9W107aWYobj09PSJhYnNvbHV0ZSIpaT0kKHIpO2Vsc2UgaWYobj09PSJyZWxhdGl2ZSIpaT1lLmZpbmRMZXZlbE9uZURlZXAodCxyLHIpO2Vsc2UgaWYobj09PSJwYXJlbnQiKXt2YXIgcz10LnBhcmVudCgpO2RvIGk9ZS5maW5kTGV2ZWxPbmVEZWVwKHMscixyKSxpLmxlbmd0aD09PTAmJihzPXMucGFyZW50KCkpO3doaWxlKGkubGVuZ3RoPT09MCYmcy5sZW5ndGghPT0wKX1yZXR1cm4gaX0sZS5hY3RpdmF0ZT1mdW5jdGlvbih0LG4peyQuZXh0ZW5kKGUuc2V0dGluZ3MsbiksZS5jaGVja0tlZXBTdGF0ZUluQ29va2llUHJlY29uZGl0aW9ucygpLHQuZWFjaChmdW5jdGlvbigpe3ZhciB0PSQodGhpcyksbj10LmF0dHIoImRhdGEtZXhwYW5kZXItdGFyZ2V0Iil8fGUuc2V0dGluZ3MuZGVmYXVsdFRhcmdldCxyPXQuYXR0cigiZGF0YS1leHBhbmRlci10YXJnZXQtc2VhcmNoIil8fGUuc2V0dGluZ3MuZGVmYXVsdFNlYXJjaE1vZGUsaT1lLmZpbmRUYXJnZXRzKHQscixuKTtpZihpLmxlbmd0aD09PTApe2lmKGUuc2V0dGluZ3MudGhyb3dPbk1pc3NpbmdUYXJnZXQpdGhyb3cic2ltcGxlLWV4cGFuZDogVGFyZ2V0cyBub3QgZm91bmQiO3JldHVybiB0aGlzfWUuc2V0SW5pdGlhbFN0YXRlKHQsaSksdC5jbGljayhmdW5jdGlvbigpe3JldHVybiBlLnRvZ2dsZSh0LGkpfSl9KX19d2luZG93LlNpbXBsZUV4cGFuZD1lLCQuZm4uc2ltcGxlZXhwYW5kPWZ1bmN0aW9uKHQpe3ZhciBuPW5ldyBlO3JldHVybiBuLmFjdGl2YXRlKHRoaXMsdCksdGhpc319KShqUXVlcnkpOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/jquery.simple-expand.min.js,importbuddy/js/jquery.simple-expand.min.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/main.js,importbuddy/js/main.js
alF1ZXJ5LmZuLnZpc2libGUgPSBmdW5jdGlvbigpIHsNCglyZXR1cm4gdGhpcy5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpOw0KfTsNCg0KalF1ZXJ5LmZuLmludmlzaWJsZSA9IGZ1bmN0aW9uKCkgew0KCXJldHVybiB0aGlzLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTsNCn07DQoNCmpRdWVyeS5mbi52aXNpYmlsaXR5VG9nZ2xlID0gZnVuY3Rpb24oKSB7DQoJcmV0dXJuIHRoaXMuY3NzKCd2aXNpYmlsaXR5JywgZnVuY3Rpb24oaSwgdmlzaWJpbGl0eSkgew0KCQlyZXR1cm4gKHZpc2liaWxpdHkgPT0gJ3Zpc2libGUnKSA/ICdoaWRkZW4nIDogJ3Zpc2libGUnOw0KCX0pOw0KfTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/main.js,importbuddy/js/main.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/nprogress.js,importbuddy/js/nprogress.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/nprogress.js,importbuddy/js/nprogress.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/restoreEvents.js,importbuddy/js/restoreEvents.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/restoreEvents.js,importbuddy/js/restoreEvents.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js

###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/tooltip.js,importbuddy/js/tooltip.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
LyohDQogKiBqUXVlcnkgVUkgMS44LjEyDQogKg0KICogQ29weXJpZ2h0IDIwMTEsIEFVVEhPUlMudHh0IChodHRwOi8vanF1ZXJ5dWkuY29tL2Fib3V0KQ0KICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuDQogKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlDQogKg0KICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9VSQ0KICovDQooZnVuY3Rpb24oYyxqKXtmdW5jdGlvbiBrKGEpe3JldHVybiFjKGEpLnBhcmVudHMoKS5hbmRTZWxmKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIGMuY3VyQ1NTKHRoaXMsInZpc2liaWxpdHkiKT09PSJoaWRkZW4ifHxjLmV4cHIuZmlsdGVycy5oaWRkZW4odGhpcyl9KS5sZW5ndGh9Yy51aT1jLnVpfHx7fTtpZighYy51aS52ZXJzaW9uKXtjLmV4dGVuZChjLnVpLHt2ZXJzaW9uOiIxLjguMTIiLGtleUNvZGU6e0FMVDoxOCxCQUNLU1BBQ0U6OCxDQVBTX0xPQ0s6MjAsQ09NTUE6MTg4LENPTU1BTkQ6OTEsQ09NTUFORF9MRUZUOjkxLENPTU1BTkRfUklHSFQ6OTMsQ09OVFJPTDoxNyxERUxFVEU6NDYsRE9XTjo0MCxFTkQ6MzUsRU5URVI6MTMsRVNDQVBFOjI3LEhPTUU6MzYsSU5TRVJUOjQ1LExFRlQ6MzcsTUVOVTo5MyxOVU1QQURfQUREOjEwNyxOVU1QQURfREVDSU1BTDoxMTAsTlVNUEFEX0RJVklERToxMTEsTlVNUEFEX0VOVEVSOjEwOCxOVU1QQURfTVVMVElQTFk6MTA2LA0KTlVNUEFEX1NVQlRSQUNUOjEwOSxQQUdFX0RPV046MzQsUEFHRV9VUDozMyxQRVJJT0Q6MTkwLFJJR0hUOjM5LFNISUZUOjE2LFNQQUNFOjMyLFRBQjo5LFVQOjM4LFdJTkRPV1M6OTF9fSk7Yy5mbi5leHRlbmQoe19mb2N1czpjLmZuLmZvY3VzLGZvY3VzOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHR5cGVvZiBhPT09Im51bWJlciI/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9dGhpcztzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YyhkKS5mb2N1cygpO2ImJmIuY2FsbChkKX0sYSl9KTp0aGlzLl9mb2N1cy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHNjcm9sbFBhcmVudDpmdW5jdGlvbigpe3ZhciBhO2E9Yy5icm93c2VyLm1zaWUmJi8oc3RhdGljfHJlbGF0aXZlKS8udGVzdCh0aGlzLmNzcygicG9zaXRpb24iKSl8fC9hYnNvbHV0ZS8udGVzdCh0aGlzLmNzcygicG9zaXRpb24iKSk/dGhpcy5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuLyhyZWxhdGl2ZXxhYnNvbHV0ZXxmaXhlZCkvLnRlc3QoYy5jdXJDU1ModGhpcywNCiJwb3NpdGlvbiIsMSkpJiYvKGF1dG98c2Nyb2xsKS8udGVzdChjLmN1ckNTUyh0aGlzLCJvdmVyZmxvdyIsMSkrYy5jdXJDU1ModGhpcywib3ZlcmZsb3cteSIsMSkrYy5jdXJDU1ModGhpcywib3ZlcmZsb3cteCIsMSkpfSkuZXEoMCk6dGhpcy5wYXJlbnRzKCkuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuLyhhdXRvfHNjcm9sbCkvLnRlc3QoYy5jdXJDU1ModGhpcywib3ZlcmZsb3ciLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXkiLDEpK2MuY3VyQ1NTKHRoaXMsIm92ZXJmbG93LXgiLDEpKX0pLmVxKDApO3JldHVybi9maXhlZC8udGVzdCh0aGlzLmNzcygicG9zaXRpb24iKSl8fCFhLmxlbmd0aD9jKGRvY3VtZW50KTphfSx6SW5kZXg6ZnVuY3Rpb24oYSl7aWYoYSE9PWopcmV0dXJuIHRoaXMuY3NzKCJ6SW5kZXgiLGEpO2lmKHRoaXMubGVuZ3RoKXthPWModGhpc1swXSk7Zm9yKHZhciBiO2EubGVuZ3RoJiZhWzBdIT09ZG9jdW1lbnQ7KXtiPWEuY3NzKCJwb3NpdGlvbiIpOw0KaWYoYj09PSJhYnNvbHV0ZSJ8fGI9PT0icmVsYXRpdmUifHxiPT09ImZpeGVkIil7Yj1wYXJzZUludChhLmNzcygiekluZGV4IiksMTApO2lmKCFpc05hTihiKSYmYiE9PTApcmV0dXJuIGJ9YT1hLnBhcmVudCgpfX1yZXR1cm4gMH0sZGlzYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJpbmQoKGMuc3VwcG9ydC5zZWxlY3RzdGFydD8ic2VsZWN0c3RhcnQiOiJtb3VzZWRvd24iKSsiLnVpLWRpc2FibGVTZWxlY3Rpb24iLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKX0pfSxlbmFibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51bmJpbmQoIi51aS1kaXNhYmxlU2VsZWN0aW9uIil9fSk7Yy5lYWNoKFsiV2lkdGgiLCJIZWlnaHQiXSxmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGQoZixnLGwsbSl7Yy5lYWNoKGUsZnVuY3Rpb24oKXtnLT1wYXJzZUZsb2F0KGMuY3VyQ1NTKGYsInBhZGRpbmciK3RoaXMsdHJ1ZSkpfHwwO2lmKGwpZy09cGFyc2VGbG9hdChjLmN1ckNTUyhmLA0KImJvcmRlciIrdGhpcysiV2lkdGgiLHRydWUpKXx8MDtpZihtKWctPXBhcnNlRmxvYXQoYy5jdXJDU1MoZiwibWFyZ2luIit0aGlzLHRydWUpKXx8MH0pO3JldHVybiBnfXZhciBlPWI9PT0iV2lkdGgiP1siTGVmdCIsIlJpZ2h0Il06WyJUb3AiLCJCb3R0b20iXSxoPWIudG9Mb3dlckNhc2UoKSxpPXtpbm5lcldpZHRoOmMuZm4uaW5uZXJXaWR0aCxpbm5lckhlaWdodDpjLmZuLmlubmVySGVpZ2h0LG91dGVyV2lkdGg6Yy5mbi5vdXRlcldpZHRoLG91dGVySGVpZ2h0OmMuZm4ub3V0ZXJIZWlnaHR9O2MuZm5bImlubmVyIitiXT1mdW5jdGlvbihmKXtpZihmPT09ailyZXR1cm4gaVsiaW5uZXIiK2JdLmNhbGwodGhpcyk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2ModGhpcykuY3NzKGgsZCh0aGlzLGYpKyJweCIpfSl9O2MuZm5bIm91dGVyIitiXT1mdW5jdGlvbihmLGcpe2lmKHR5cGVvZiBmIT09Im51bWJlciIpcmV0dXJuIGlbIm91dGVyIitiXS5jYWxsKHRoaXMsZik7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2ModGhpcykuY3NzKGgsDQpkKHRoaXMsZix0cnVlLGcpKyJweCIpfSl9fSk7Yy5leHRlbmQoYy5leHByWyI6Il0se2RhdGE6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiEhYy5kYXRhKGEsZFszXSl9LGZvY3VzYWJsZTpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksZD1jLmF0dHIoYSwidGFiaW5kZXgiKTtpZigiYXJlYSI9PT1iKXtiPWEucGFyZW50Tm9kZTtkPWIubmFtZTtpZighYS5ocmVmfHwhZHx8Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIT09Im1hcCIpcmV0dXJuIGZhbHNlO2E9YygiaW1nW3VzZW1hcD0jIitkKyJdIilbMF07cmV0dXJuISFhJiZrKGEpfXJldHVybigvaW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QvLnRlc3QoYik/IWEuZGlzYWJsZWQ6ImEiPT1iP2EuaHJlZnx8IWlzTmFOKGQpOiFpc05hTihkKSkmJmsoYSl9LHRhYmJhYmxlOmZ1bmN0aW9uKGEpe3ZhciBiPWMuYXR0cihhLCJ0YWJpbmRleCIpO3JldHVybihpc05hTihiKXx8Yj49MCkmJmMoYSkuaXMoIjpmb2N1c2FibGUiKX19KTsNCmMoZnVuY3Rpb24oKXt2YXIgYT1kb2N1bWVudC5ib2R5LGI9YS5hcHBlbmRDaGlsZChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTtjLmV4dGVuZChiLnN0eWxlLHttaW5IZWlnaHQ6IjEwMHB4IixoZWlnaHQ6ImF1dG8iLHBhZGRpbmc6MCxib3JkZXJXaWR0aDowfSk7Yy5zdXBwb3J0Lm1pbkhlaWdodD1iLm9mZnNldEhlaWdodD09PTEwMDtjLnN1cHBvcnQuc2VsZWN0c3RhcnQ9Im9uc2VsZWN0c3RhcnQiaW4gYjthLnJlbW92ZUNoaWxkKGIpLnN0eWxlLmRpc3BsYXk9Im5vbmUifSk7Yy5leHRlbmQoYy51aSx7cGx1Z2luOnthZGQ6ZnVuY3Rpb24oYSxiLGQpe2E9Yy51aVthXS5wcm90b3R5cGU7Zm9yKHZhciBlIGluIGQpe2EucGx1Z2luc1tlXT1hLnBsdWdpbnNbZV18fFtdO2EucGx1Z2luc1tlXS5wdXNoKFtiLGRbZV1dKX19LGNhbGw6ZnVuY3Rpb24oYSxiLGQpe2lmKChiPWEucGx1Z2luc1tiXSkmJmEuZWxlbWVudFswXS5wYXJlbnROb2RlKWZvcih2YXIgZT0wO2U8Yi5sZW5ndGg7ZSsrKWEub3B0aW9uc1tiW2VdWzBdXSYmDQpiW2VdWzFdLmFwcGx5KGEuZWxlbWVudCxkKX19LGNvbnRhaW5zOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGRvY3VtZW50LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTY6YSE9PWImJmEuY29udGFpbnMoYil9LGhhc1Njcm9sbDpmdW5jdGlvbihhLGIpe2lmKGMoYSkuY3NzKCJvdmVyZmxvdyIpPT09ImhpZGRlbiIpcmV0dXJuIGZhbHNlO2I9YiYmYj09PSJsZWZ0Ij8ic2Nyb2xsTGVmdCI6InNjcm9sbFRvcCI7dmFyIGQ9ZmFsc2U7aWYoYVtiXT4wKXJldHVybiB0cnVlO2FbYl09MTtkPWFbYl0+MDthW2JdPTA7cmV0dXJuIGR9LGlzT3ZlckF4aXM6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBhPmImJmE8YitkfSxpc092ZXI6ZnVuY3Rpb24oYSxiLGQsZSxoLGkpe3JldHVybiBjLnVpLmlzT3ZlckF4aXMoYSxkLGgpJiZjLnVpLmlzT3ZlckF4aXMoYixlLGkpfX0pfX0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/_importbuddy/importbuddy/js/ui.core.js,importbuddy/js/ui.core.js
###PACKDATA,FILE_START,/_importbuddy/importbuddy/lib/index.php,importbuddy/lib/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/lib/index.php,importbuddy/lib/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_assets.php,importbuddy/views/_assets.php
PD9waHANCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnc3R5bGUuY3NzJyApOw0KcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICducHJvZ3Jlc3MuY3NzJyApOw0KcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdhbmltYXRlLmNzcycgKTsNCg0KcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAnanF1ZXJ5LmpzJyApOw0KcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAndWkuY29yZS5qcycgKTsNCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ3Rvb2x0aXAuanMnICk7DQpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICducHJvZ3Jlc3MuanMnICk7DQpwYl9iYWNrdXBidWRkeTo6bG9hZF9zY3JpcHQoICdpbXBvcnRidWRkeS5qcycgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_assets.php,importbuddy/views/_assets.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_dbreplace.php,importbuddy/views/_dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQo/Pg0KDQo8L2Rpdj4NCjwvZGl2Pg0KDQoNCjwvYm9keT4NCjwvaHRtbD4NCg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_footer.php,importbuddy/views/_footer.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_header.php,importbuddy/views/_header.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_html_1_stash.php,importbuddy/views/_html_1_stash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_iframe_footer.php,importbuddy/views/_iframe_footer.php
CTxzY3JpcHQ+Ly9iYl9hY3Rpb24oICdpZnJhbWVMb2FkZWQnICk7PC9zY3JpcHQ+DQo8L2h0bWw+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_iframe_footer.php,importbuddy/views/_iframe_footer.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/_iframe_header.php,importbuddy/views/_iframe_header.php
PGh0bWw+DQo8P3BocA0KcmVxdWlyZSggJ19hc3NldHMucGhwJyApOw0KDQoNCg0KaWYgKCAndHJ1ZScgIT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7IC8vIE5PUk1BTCwgTk9UIERFUExPWU1FTlQuDQo/Pg0KCTxzY3JpcHQ+DQoJCXZhciB3aW4gPSB3aW5kb3cuZGlhbG9nQXJndW1lbnRzIHx8IG9wZW5lciB8fCBwYXJlbnQgfHwgdG9wOw0KCQl3aW4ud2luZG93LnNjcm9sbFRvKDAsMCk7DQoJCQ0KCQlmdW5jdGlvbiBwYl9zdGF0dXNfYXBwZW5kKCBzdGF0dXNfc3RyaW5nICkgew0KCQkJLy92YXIgd2luID0gd2luZG93LmRpYWxvZ0FyZ3VtZW50cyB8fCBvcGVuZXIgfHwgcGFyZW50IHx8IHRvcDsNCgkJCXdpbi5wYl9zdGF0dXNfYXBwZW5kKCBzdGF0dXNfc3RyaW5nICk7DQoJCX0NCgkJZnVuY3Rpb24gcGJfc3RhdHVzX3VuZG91cmwoIHVuZG9fdXJsICkgew0KCQkJLy92YXIgd2luID0gd2luZG93LmRpYWxvZ0FyZ3VtZW50cyB8fCBvcGVuZXIgfHwgcGFyZW50IHx8IHRvcDsNCgkJCXdpbi5wYl9zdGF0dXNfdW5kb3VybCggdW5kb191cmwgKTsNCgkJfQ0KCQkNCgkJDQoJCQ0KCQlmdW5jdGlvbiBwYWdlVGl0bGUoIHRpdGxlICkgew0KCQkJDQoJCQl3aW4ualF1ZXJ5KCAnI3BhZ2VUaXRsZScgKS5odG1sKCB0aXRsZSApOw0KCQl9DQoJCQ0KCQlmdW5jdGlvbiBiYl9hY3Rpb24oIGFjdGlvbiwgbm90ZSApIHsNCgkJCXdpbi5iYl9hY3Rpb24oIGFjdGlvbiwgbm90ZSApOw0KCQl9DQoJCQ0KCQlmdW5jdGlvbiBiYl9yZXN0b3JlRGF0YSggZGF0YSApIHsNCgkJCXdpbi5iYl9yZXN0b3JlRGF0YSggZGF0YSApOw0KCQl9DQoJCQ0KCQlmdW5jdGlvbiBiYl9zaG93U3RlcCggc3RlcCwgZGF0YSApIHsNCgkJCXdpbi5iYl9zaG93U3RlcCggc3RlcCwgZGF0YSApOw0KCQl9DQoJCQ0KCTwvc2NyaXB0Pg0KPD9waHAgfSBlbHNlIHsgLy8gREVQTE9ZTUVOVCA/Pg0KCTxzY3JpcHQ+DQoJCWZ1bmN0aW9uIHBiX3N0YXR1c19hcHBlbmQoKSB7DQoJCX0NCgkJDQoJCWZ1bmN0aW9uIHBiX3N0YXR1c191bmRvdXJsKCB1bmRvX3VybCApIHsNCgkJfQ0KCQkNCgkJZnVuY3Rpb24gcGFnZVRpdGxlKCB0aXRsZSApIHsNCgkJfQ0KCQkNCgkJZnVuY3Rpb24gYmJfYWN0aW9uKCBhY3Rpb24sIG5vdGUgKSB7DQoJCX0NCgkJDQoJCWZ1bmN0aW9uIGJiX3Jlc3RvcmVEYXRhKCBkYXRhICkgew0KCQl9DQoJCQ0KCQlmdW5jdGlvbiBiYl9zaG93U3RlcCggc3RlcCwgZGF0YSApIHsNCgkJfQ0KCTwvc2NyaXB0Pg0KPD9waHAgfSA/Pg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/_iframe_header.php,importbuddy/views/_iframe_header.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/cleanupSettings.htm,importbuddy/views/cleanupSettings.htm
PCUgaWYgKCBwb3RlbnRpYWxQcm9ibGVtcy5sZW5ndGggPiAwICkgeyAlPg0KCTxkaXYgY2xhc3M9Im1haW5fYm94X2hlYWQgd2FybmluZ19hbGVydF9ib3giPg0KCQk8c3BhbiBjbGFzcz0iZXJyb3Jfd2FybmluZ190aXRsZSI+T25lIG9yIG1vcmUgcG90ZW50aWFsIHByb2JsZW1zIG1heSBoYXZlIGJlZW4gZm91bmQ6PC9zcGFuPg0KCQk8dWwgY2xhc3M9ImJhY2t1cGJ1ZGR5X3dhcm5pbmdfbGlzdCI+DQoJCQk8JSBqUXVlcnkuZWFjaCggcG90ZW50aWFsUHJvYmxlbXMsIGZ1bmN0aW9uKCBrZXksIHBvdGVudGlhbFByb2JsZW0gKXsgJT4NCgkJCTxsaT48JT1wb3RlbnRpYWxQcm9ibGVtJT48L2xpPg0KCQkJPCUgfSk7ICU+DQoJCTwvdWw+DQoJPC9kaXY+PGJyPg0KPCUgfSAlPg0KDQo8JSBpZiAoICcxJyA9PSBibG9nUHVibGljU3RhdHVzICkgew0KCXNvdXJjZVNpdGVQdWJsaWNTdGF0dXNUZXh0ID0gJ1B1YmxpYyAtIERvIG5vdCBkaXNjb3VyYWdlIHNlYXJjaCBlbmdpbmVzIGZyb20gaW5kZXhpbmcgdGhpcyBzaXRlJzsNCn0gZWxzZSBpZiAoICcwJyA9PSBibG9nUHVibGljU3RhdHVzICkgew0KCXNvdXJjZVNpdGVQdWJsaWNTdGF0dXNUZXh0ID0gJ1ByaXZhdGUgLSBEaXNjb3VyYWdlIHNlYXJjaCBlbmdpbmVzIGZyb20gaW5kZXhpbmcgdGhpcyBzaXRlJzsNCn0gZWxzZSB7DQoJc291cmNlU2l0ZVB1YmxpY1N0YXR1c1RleHQgPSAnQ3VycmVudCBzdGF0dXMgbm90IGRldGVjdGVkJzsNCn0NCiU+DQoNCg0KDQoNCjxoMz5WZXJpZnkgc2l0ZSBiZWZvcmUgcHJvY2VlZGluZyB0byBjbGVhbnVwOjwvaDM+DQo8YSBocmVmPSI8JT1ob21ldXJsJT4iIHRhcmdldD0iX2JsYW5rIj48JT1ob21ldXJsJT48L2E+DQo8YnI+PGJyPg0KDQoNCjxzY3JpcHQ+DQpqUXVlcnkoICcuZXhwYW5kZXInICkuY2xpY2soIGZ1bmN0aW9uKCl7DQoJalF1ZXJ5KHRoaXMpLm5leHQoJy5jb250ZW50Jykuc2xpZGVUb2dnbGUoKTsNCn0pOw0KPC9zY3JpcHQ+DQoNCjxoMz5Db21tb24gaXNzdWVzICYgdGlwczo8L2gzPg0KPGRpdiBjbGFzcz0iZXhwYW5kZXItYm94Ij4NCgk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+Q2xpY2tpbmcgb24gYSBwb3N0IHJlc3VsdHMgaW4gYSA0MDQgTm90IEZvdW5kPC9hPg0KCTxkaXYgY2xhc3M9ImNvbnRlbnQiPg0KCQlUeXBpY2FsbHkgY2F1c2VkIGJ5IGEgcHJvYmxlbSB3aXRoIHlvdXIgLmh0YWNjZXNzIGZpbGUsIHRoZXJlIGlzIGEgc2ltcGxlIGZpeDogTG9nIGludG8geW91ciB3cC1hZG1pbiwgbmF2aWdhdGUgdG8gU2V0dGluZ3M6IFBlcm1hbGlua3MgaW4gdGhlIFdvcmRQcmVzcyBtZW51IGFuZCBjbGljayB0aGUgIlNhdmUiIGJ1dHRvbiB0byB1cGRhdGUgcGVybWFsaW5rIHNldHRpbmdzIHRvIHlvdXIgLmh0YWNjZXNzIGZpbGUuIFRoaXMgdHlwaWNhbGx5IHJlc29sdmVzIHRoaXMgcHJvYmxlbS4NCgk8L2Rpdj4NCjwvZGl2Pg0KPGRpdiBjbGFzcz0iZXhwYW5kZXItYm94Ij4NCgk8YSBjbGFzcz0iZXhwYW5kZXIiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+TG9nZ2luZyBpbiByZWRpcmVjdHMgYmFjayB0byB0aGUgb2xkIHNpdGU8L2E+DQoJPGRpdiBjbGFzcz0iY29udGVudCI+DQoJCVRoaXMgaXMgdXN1YWxseSBjYXVzZWQgYnkgZW50ZXJpbmcgdGhlIHNvdXJjZSBzaXRlIFVSTCBhcyB0aGUgZGVzdGluYXRpb24gVVJMIG9uIFN0ZXAgMy4gIFJlLXJlc3RvcmluZyB1c2luZyB0aGUgY29ycmVjdCBVUkwgc2hvdWxkIGZpeCB0aGlzIHByb2JsZW0uDQoJPC9kaXY+DQo8L2Rpdj4NCjxkaXYgY2xhc3M9ImV4cGFuZGVyLWJveCI+DQoJPGEgY2xhc3M9ImV4cGFuZGVyIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiPlNvdXJjZSBzaXRlIGhhcyBjaGFuZ2VkIHRvIHRoZSBkZXN0aW5hdGlvbiBVUkw8L2E+DQoJPGRpdiBjbGFzcz0iY29udGVudCI+DQoJCVRoaXMgaXMgY2F1c2VkIGlmIHlvdSByZXN0b3JlZCBvdmVyIHlvdXIgc291cmNlIHNpdGUgZGF0YWJhc2UgYnkgZW50ZXJpbmcgdGhlIHNvdXJjZSBzaXRlIGRhdGFiYXNlIHNldHRpbmdzIG9uIFN0ZXAgMy4gVGhpcyBtZWFucyB0aGF0IHlvdXIgbmV3IHNpdGUgQU5EIHlvdXIgb2xkIHNpdGUgYXJlIG5vdyB1c2luZyB0aGUgc2FtZSBkYXRhYmFzZSBidXQgdGhlIGRhdGFiYXNlIGhhcyBiZWVuIG1pZ3JhdGVkIHRvIHdvcmsgd2l0aCB0aGUgbmV3IFVSTC4gWW91IG1heSByZS1yZXN0b3JlIGJvdGggdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gdXNpbmcgY29ycmVjdCBzZXR0aW5ncyBvciB1c2UgdGhlIG1hc3MgZGF0YWJhc2UgcmVwbGFjZW1lbnQgdG9vbC4gIFlvdSBtYXkgY29ycmVjdCB0aGUgbW9kaWZpZWQgVVJMIG9uIHRoZSBzb3VyY2Ugc2l0ZSBieSB1c2luZyB0aGUgU2VydmVyIFRvb2xzIHBhZ2UncyBNYXNzIFRleHQgUmVwbGFjZSB0b29sIHdpdGhpbiB0aGUgRGF0YWJhc2UgdGFiLg0KCTwvZGl2Pg0KPC9kaXY+DQo8ZGl2IGNsYXNzPSJleHBhbmRlci1ib3giPg0KCTxhIGNsYXNzPSJleHBhbmRlciIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIj5GaWxlIHBlcm1pc3Npb25zIGhhdmUgY2hhbmdlZDwvYT4NCgk8ZGl2IGNsYXNzPSJjb250ZW50Ij4NCgkJQ3VzdG9tIGZpbGUgcGVybWlzc2lvbnMgbWF5IGJlIHNlcnZlci1zcGVjaWZpYyBhbmQgbWF5IG5vdCBzdGF5IHRoZSBzYW1lIGFzIHRoZSBzb3VyY2Ugc2l0ZS4gSWYgeW91IG1hZGUgYW55IGN1c3RvbSBmaWxlIHBlcm1pc3Npb24gY2hhbmdlcyAoZWl0aGVyIG1hbnVhbGx5IG9yIHZpYSBhIHBsdWdpbiBzdWNoIGFzIGEgU2VjdXJpdHkgcGx1Z2luKSB5b3UgbWF5IG5lZWQgdG8gbWFudWFsbHkgcmUtYXBwbHkgdGhlbS4gIE5vdCBhbGwgc2VydmVycyB3aWxsIGZ1bmN0aW9uIHByb3Blcmx5IHdpdGggdGhlIHNhbWUgcGVybWlzc2lvbnMuDQoJPC9kaXY+DQo8L2Rpdj4NCjxicj48YnI+DQoNCg0KDQo8Zm9ybSBvblN1Ym1pdD0ialF1ZXJ5KCcjY2xlYW51cFNldHRpbmdzLXJlc3RvcmVEYXRhJykudmFsKCB3aW5kb3cuYnRvYSggZW5jb2RlVVJJQ29tcG9uZW50KCBKU09OLnN0cmluZ2lmeSggd2luZG93LnJlc3RvcmVEYXRhICkgKSApICk7IiBhY3Rpb249Ij9hamF4PTYiIHRhcmdldD0ibWluaUZyYW1lIiBtZXRob2Q9InBvc3QiPjwhLS0gdGhpcyBmb3JtIGlzIG9ubHkgc3VibWl0dGVkIGFmdGVyIHJ1bm5pbmcgdGhyb3VnaCBqYXZhc2NyaXB0LiBzdWJtaXR0aW5nIGFjdHVhbCBmb3JtIGluc3RlYWQgb2YgdXNpbmcgalF1ZXJ5IHBvc3Qgc28gd2UgY2FuIHRhcmdldCBpZnJhbWUuIC0tPg0KCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlc3RvcmVEYXRhIiBpZD0iY2xlYW51cFNldHRpbmdzLXJlc3RvcmVEYXRhIiB2YWx1ZT0iIj4NCgkNCgkNCgkNCgk8ZGl2IGNsYXNzPSJtYWluX2JveF9mb290Ij4NCgkJDQoJCTxoMz5TaXRlIFNlYXJjaCBFbmdpbmUgVmlzaWJpbGl0eTwvaDM+DQoJCTxkaXYgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsgdGV4dC1hbGlnbjogbGVmdDsiPg0KCQkJPGxhYmVsIGZvcj0ic2V0X2Jsb2dfcHVibGljLWtlZXAiIHN0eWxlPSJmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9InNldF9ibG9nX3B1YmxpYyIgaWQ9InNldF9ibG9nX3B1YmxpYy1rZWVwIiB2YWx1ZT0iIiBjaGVja2VkPSJjaGVja2VkIj5ObyBjaGFuZ2UgKGRlZmF1bHQpOiA8JT1zb3VyY2VTaXRlUHVibGljU3RhdHVzVGV4dCU+PC9sYWJlbD48YnI+DQoJCQk8bGFiZWwgZm9yPSJzZXRfYmxvZ19wdWJsaWMtcHVibGljIiBzdHlsZT0iZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJzZXRfYmxvZ19wdWJsaWMiIGlkPSJzZXRfYmxvZ19wdWJsaWMtcHVibGljIiB2YWx1ZT0iMSI+UHVibGljIC0gRG8gbm90IGRpc2NvdXJhZ2Ugc2VhcmNoIGVuZ2luZXMgZnJvbSBpbmRleGluZyB0aGlzIHNpdGU8L2xhYmVsPjxicj4NCgkJCTxsYWJlbCBmb3I9InNldF9ibG9nX3B1YmxpYy1wcml2YXRlIiBzdHlsZT0iZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJzZXRfYmxvZ19wdWJsaWMiIGlkPSJzZXRfYmxvZ19wdWJsaWMtcHJpdmF0ZSIgdmFsdWU9IjAiPlByaXZhdGUgLSBEaXNjb3VyYWdlIHNlYXJjaCBlbmdpbmVzIGZyb20gaW5kZXhpbmcgdGhpcyBzaXRlPC9sYWJlbD48YnI+DQoJCTwvZGl2Pg0KCQkJDQoJCTxicj48YnI+DQoJCQ0KCQk8aDM+SW1wb3J0QnVkZHkgQ2xlYW51cDo8L2gzPg0KCQk8dGFibGUgc3R5bGU9Im1hcmdpbi1sZWZ0OiBhdXRvOyBtYXJnaW4tcmlnaHQ6IGF1dG87IHRleHQtYWxpZ246IGxlZnQ7Ij48dHI+PHRkPg0KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2JhY2t1cCIgc3R5bGU9IndpZHRoOiBhdXRvOyBmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImRlbGV0ZV9iYWNrdXAiIGlkPSJkZWxldGVfYmFja3VwIiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIGJhY2t1cCB6aXAgYXJjaGl2ZTwvbGFiZWw+DQoJCQk8YnI+DQoJCQk8bGFiZWwgZm9yPSJkZWxldGVfdGVtcCIgc3R5bGU9IndpZHRoOiBhdXRvOyBmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImRlbGV0ZV90ZW1wIiBpZD0iZGVsZXRlX3RlbXAiIHZhbHVlPSIxIiBjaGVja2VkPiBEZWxldGUgdGVtcG9yYXJ5IGltcG9ydCBmaWxlczwvbGFiZWw+DQoJCTwvdGQ+PHRkPg0KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBzdHlsZT0id2lkdGg6IGF1dG87IGZvbnQtc2l6ZTogMTJweDsiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmFtZT0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiBpZD0iZGVsZXRlX2ltcG9ydGJ1ZGR5IiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIEltcG9ydEJ1ZGR5IHRvb2wgZmlsZXM8L2xhYmVsPg0KCQkJPGJyPg0KCQkJPGxhYmVsIGZvcj0iZGVsZXRlX2ltcG9ydGJ1ZGR5X2RpcmVjdG9yeSIgc3R5bGU9IndpZHRoOiBhdXRvOyBmb250LXNpemU6IDEycHg7Ij48aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9ImRlbGV0ZV9pbXBvcnRidWRkeV9kaXJlY3RvcnkiIGlkPSJkZWxldGVfaW1wb3J0YnVkZHlfZGlyZWN0b3J5IiB2YWx1ZT0iMSIgY2hlY2tlZD4gRGVsZXRlIEltcG9ydEJ1ZGR5IGRpcmVjdG9yeTwvbGFiZWw+DQoJCQk8YnI+DQoJCQk8bGFiZWwgZm9yPSJkZWxldGVfaW1wb3J0YnVkZHlsb2ciIHN0eWxlPSJ3aWR0aDogYXV0bzsgZm9udC1zaXplOiAxMnB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJkZWxldGVfaW1wb3J0YnVkZHlsb2ciIGlkPSJkZWxldGVfaW1wb3J0YnVkZHlsb2ciIHZhbHVlPSIxIiBjaGVja2VkPiBEZWxldGUgaW1wb3J0YnVkZHkudHh0IGxvZyBmaWxlPC9sYWJlbD4NCgkJPC90ZD48L3RyPjwvdGFibGU+DQoJCQ0KCQk8YnI+DQoJCTxjZW50ZXI+DQoJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJuZXh0U3RlcCIgdmFsdWU9IkZpbmlzaCBDbGVhbnVwIiBjbGFzcz0iaXQtYnV0dG9uIHBiX2RhdGFiYXNlX25leHRfdGVzdCI+DQoJCTwvY2VudGVyPg0KCQ0KCTwvZGl2Pg0KPC9mb3JtPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/cleanupSettings.htm,importbuddy/views/cleanupSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/cpanelTutorial.htm,importbuddy/views/cpanelTutorial.htm
PG9iamVjdCBjbGFzc2lkPSJjbHNpZDpkMjdjZGI2ZS1hZTZkLTExY2YtOTZiOC00NDQ1NTM1NDAwMDAiIGNvZGViYXNlPSJodHRwOi8vZnBkb3dubG9hZC5tYWNyb21lZGlhLmNvbS9wdWIvc2hvY2t3YXZlL2NhYnMvZmxhc2gvc3dmbGFzaC5jYWIjdmVyc2lvbj03LDAsMCwwIiBpZD0iQ2FwdGl2YXRlMSI+DQoJPHBhcmFtIG5hbWU9Im1vdmllIiB2YWx1ZT0iaHR0cDovL3d3dy5jcGFuZWwubmV0L21lZGlhL3R1dG9yaWFscy9teXNxbHdpemFyZC5zd2YiPg0KCTxwYXJhbSBuYW1lPSJxdWFsaXR5IiB2YWx1ZT0iaGlnaCI+PHBhcmFtIG5hbWU9Imxvb3AiIHZhbHVlPSIwIj4NCgk8ZW1iZWQgc3JjPSJodHRwOi8vd3d3LmNwYW5lbC5uZXQvbWVkaWEvdHV0b3JpYWxzL215c3Fsd2l6YXJkLnN3ZiIgd2lkdGg9IjEwMCUiIGhlaWdodD0iNTAwIiBsb29wPSIwIiBxdWFsaXR5PSJsb3ciIHBsdWdpbnNwYWdlPSJodHRwOi8vd3d3Lm1hY3JvbWVkaWEuY29tL2dvL2dldGZsYXNocGxheWVyIiB0eXBlPSJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCIgbWVudT0iZmFsc2UiPg0KPC9vYmplY3Q+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/cpanelTutorial.htm,importbuddy/views/cpanelTutorial.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/databaseSettings.htm,importbuddy/views/databaseSettings.htm

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/databaseSettings.htm,importbuddy/views/databaseSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KDQokcGFnZV90aXRsZSA9ICdEYXRhYmFzZSBUZXh0IFJlcGxhY2UgVG9vbCc7DQpyZXF1aXJlX29uY2UoICdfaGVhZGVyLnBocCcgKTsNCj8+DQoNCjxkaXYgY2xhc3M9IndyYXAiPg0KPD9waHANCiRjb25maWdGaWxlID0gJyc7DQppZiAoICEgZmlsZV9leGlzdHMoIEFCU1BBVEggLiAnd3AtY29uZmlnLnBocCcgKSApIHsgLy8gTm9ybWFsIGNvbmZpZyBmaWxlIG5vdCBmb3VuZCBzbyB3YXJuIG9yIHNlZSBpZiBwYXJlbnQgY29uZmlnIG1heSBleGlzdC4NCgkkcGFyZW50Q29uZmlnTWVzc2FnZSA9ICcnOw0KCSRwYXJlbnRDb25maWcgPSAgZGlybmFtZSggQUJTUEFUSCApIC4gJy93cC1jb25maWcucGhwJzsNCglpZiAoIEBmaWxlX2V4aXN0cyggJHBhcmVudENvbmZpZyApICkgeyAvLyBQYXJlbnQgY29uZmlnIGV4aXN0cyBzbyBvZmZlciBpdCBhcyBhbiBvcHRpb24gb3IgcG9zc2libHkgdXNlIGl0IGlmIHVzZXIgaGFzIHNlbGVjdGVkIHRvIGRvIHNvLg0KCQlpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAncGFyZW50X2NvbmZpZycgKSA9PSAndHJ1ZScgKSB7IC8vIFVzZXIgb3B0ZWQgdG8gdXNlIHBhcmVudCBjb25maWcuDQoJCQkkY29uZmlnRmlsZSA9ICRwYXJlbnRDb25maWc7DQoJCX0gZWxzZSB7IC8vIFVzZXIgaGFzIG5vdCBvcHRlZCB0byB1c2UgcGFyZW50IGNvbmZpZyB5ZXQgc28gc2V0IG1lc3NhZ2UgdG8gb2ZmZXIgaXQuDQoJCQkkcGFyZW50Q29uZmlnTWVzc2FnZSA9ICc8YnI+PGJyPjxiPkhvd2V2ZXI8L2I+LCBhIHdwLWNvbmZpZy5waHAgZmlsZSB3YXMgZm91bmQgaW4gdGhlIHBhcmVudCBkaXJlY3RvcnkgYXMgYCcgLiAkcGFyZW50Q29uZmlnIC4gJ2AuIDxhIGhyZWY9Ij9wYWdlPWRicmVwbGFjZSZwYXJlbnRfY29uZmlnPXRydWUiPjxiPkNsaWNrIGhlcmU8L2I+PC9hPiBpZiB5b3Ugd291bGQgbGlrZSB0byBydW4gdGhpcyB0b29sIHVzaW5nIHRoaXMgd3AtY29uZmlnLnBocCBmaWxlIGluIHRoZSBwYXJlbnQgZGlyZWN0b3J5Lic7DQoJCX0NCgl9DQoJaWYgKCAnJyA9PSAkY29uZmlnRmlsZSApIHsNCgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnPGI+RXJyb3I6PC9iPiBUaGlzIHRvb2wgcmVxdWlyZXMgYW4gZXhpc3RpbmcgV29yZFByZXNzIGluc3RhbGxhdGlvbiB0byBwZXJmb3JtIGRhdGFiYXNlIHJlcGxhY2VtZW50cyBvbi4gTm8gV29yZFByZXNzIHdwLWNvbmZpZy5waHAgY29uZmlndXJhdGlvbiBmaWxlIHdhcyBmb3VuZCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgaW1wb3J0YnVkZHkucGhwLiAnIC4gJHBhcmVudENvbmZpZ01lc3NhZ2UgLiAnIDxicj48YnI+IDxiPk5vdGU6PC9iPiBJbXBvcnRCdWRkeSBhdXRvbWF0aWNhbGx5IGhhbmRsZXMgbWlncmF0aW5nICYgcmVwbGFjaW5nIHlvdXIgc2l0ZSBVUkxzIGFuZCBmaWxlIHBhdGhzIGR1cmluZyByZXN0b3JlL21pZ3JhdGlvbjsgdGhpcyB0b29sIGlzIG5vdCBuZWVkZWQgZm9yIG5vcm1hbCBiYWNrdXAgLyByZXN0b3JlIG9wZXJhdGlvbnMuJywgdHJ1ZSApOw0KCX0NCn0gZWxzZSB7IC8vIFVzZSBub3JtYWwgY29uZmlnIGZpbGUuDQoJJGNvbmZpZ0ZpbGUgPSBBQlNQQVRIIC4gJ3dwLWNvbmZpZy5waHAnOw0KfQ0KDQppZiAoICcnICE9ICRjb25maWdGaWxlICkgew0KCQ0KCS8vIFJlYWQgaW4gd3AtY29uZmlnLnBocCBmaWxlIGNvbnRlbnRzLg0KCSRjb25maWdDb250ZW50cyA9IGZpbGVfZ2V0X2NvbnRlbnRzKCAkY29uZmlnRmlsZSApOw0KCWlmICggZmFsc2UgPT09ICRjb25maWdDb250ZW50cyApIHsNCgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnRXJyb3I6IFVuYWJsZSB0byByZWFkIHdwLWNvbmZpZy5waHAgY29uZmlndXJhdGlvbiBmaWxlLicgKTsNCgkJcmV0dXJuOw0KCX0NCgkNCgkvLyBHcmFiIGRhdGFiYXNlIHNldHRpbmdzIGZyb20gd3AtY29uZmlnLnBocCBjb250ZW50cy4NCglwcmVnX21hdGNoKCAnL2RlZmluZVwoW1xzXSooXCd8IilEQl9OQU1FKFwnfCIpLFtcc10qKFwnfCIpKC4qKShcJ3wiKVtcc10qXCk7L2knLCAkY29uZmlnQ29udGVudHMsICRtYXRjaGVzICk7DQoJJGRhdGFiYXNlU2V0dGluZ3NbJ25hbWUnXSA9ICRtYXRjaGVzWzRdOw0KCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX1VTRVIoXCd8IiksW1xzXSooXCd8IikoLiopKFwnfCIpW1xzXSpcKTsvaScsICRjb25maWdDb250ZW50cywgJG1hdGNoZXMgKTsNCgkkZGF0YWJhc2VTZXR0aW5nc1sndXNlcm5hbWUnXSA9ICRtYXRjaGVzWzRdOw0KCXByZWdfbWF0Y2goICcvZGVmaW5lXChbXHNdKihcJ3wiKURCX1BBU1NXT1JEKFwnfCIpLFtcc10qKFwnfCIpKC4qKShcJ3wiKVtcc10qXCk7L2knLCAkY29uZmlnQ29udGVudHMsICRtYXRjaGVzICk7DQoJJGRhdGFiYXNlU2V0dGluZ3NbJ3Bhc3N3b3JkJ10gPSAkbWF0Y2hlc1s0XTsNCglwcmVnX21hdGNoKCAnL2RlZmluZVwoW1xzXSooXCd8IilEQl9IT1NUKFwnfCIpLFtcc10qKFwnfCIpKC4qKShcJ3wiKVtcc10qXCk7L2knLCAkY29uZmlnQ29udGVudHMsICRtYXRjaGVzICk7DQoJJGRhdGFiYXNlU2V0dGluZ3NbJ2hvc3QnXSA9ICRtYXRjaGVzWzRdOw0KCXByZWdfbWF0Y2goICcvXCR0YWJsZV9wcmVmaXhbXHNdKj1bXHNdKihcJ3wiKSguKikoXCd8Iik7L2knLCAkY29uZmlnQ29udGVudHMsICRtYXRjaGVzICk7DQoJJGRhdGFiYXNlU2V0dGluZ3NbJ3ByZWZpeCddID0gJG1hdGNoZXNbMl07DQoJDQoJLy9wcmludF9yKCAkZGF0YWJhc2VTZXR0aW5ncyApOw0KCQ0KCS8vIENvbm5lY3QgdG8gZGF0YWJhc2UuDQoJZ2xvYmFsICR3cGRiOw0KCSR3cGRiID0gbmV3IHdwZGIoICRkYXRhYmFzZVNldHRpbmdzWyd1c2VybmFtZSddLCAkZGF0YWJhc2VTZXR0aW5nc1sncGFzc3dvcmQnXSwgJGRhdGFiYXNlU2V0dGluZ3NbJ25hbWUnXSwgJGRhdGFiYXNlU2V0dGluZ3NbJ2hvc3QnXSApOw0KCWlmICggZmFsc2UgPT09ICR3cGRiLT5kYmggKSB7DQoJCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0Vycm9yICM4NTgzODM6IFVuYWJsZSB0byBjb25uZWN0IHRvIGRhdGFiYXNlIHVzaW5nIHNldHRpbmdzIGluIHdwLWNvbmZpZy5waHAuIFZlcmlmeSBjb25uZWN0aW9uIHNldHRpbmdzLicgKTsNCgl9IGVsc2Ugew0KCQlyZXF1aXJlX29uY2UoICdfZGJyZXBsYWNlLnBocCcgKTsNCgl9DQp9DQo/Pg0KPC9kaXY+DQoNCjw/cGhwDQpyZXF1aXJlX29uY2UoICdfZm9vdGVyLnBocCcgKTs=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/dbreplace.php,importbuddy/views/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/finalCleanup.htm,importbuddy/views/finalCleanup.htm
VGhpcyBzdGVwIGhhbmRsZXMgZGVsZXRpbmcgZmlsZXMuIEluIHJhcmUgaW5zdGFuY2VzIG9uIHNvbWUgc2VydmVycyB5b3UgbWF5IHJlY2VpdmUgZXJyb3JzIGxvYWRpbmcgZmlsZXMgb3IgYW4gdW5zdHlsZWQgcGFnZSBoZXJlIGR1ZSB0byBmaWxlcyBnZXR0aW5nIGRlbGV0aW5nIHByZW1hdHVyZWx5IGJlZm9yZSB0aGUgcGFnZSBjb21wbGV0ZXMgbG9hZGluZy4gVGhpcyBtYXkgc2FmZWx5IGJlIGlnbm9yZWQuIEl0IGlzIGNvbW1vbiB0byBub3QgYmUgYWJsZSB0byBkZWxldGUgc29tZSBmaWxlcyBkdWUgdG8gcGVybWlzc2lvbiBlcnJvcnMuIFlvdSBtYXkgbWFudWFsbHkgZGVsZXRlIHRoZW0uIDxiPmltcG9ydGJ1ZGR5LnBocDwvYj4gc2hvdWxkIGFsd2F5cyBiZSBkZWxldGVkIGFmdGVyIHJlc3RvcmUgZm9yIGJlc3Qgc2VjdXJpdHkuDQoNCjxoMyBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyI+WW91ciBzaXRlIGlzIHJlYWR5IHRvIGdvIGF0DQo8YSBocmVmPSI8JT1ob21ldXJsJT4iIHRhcmdldD0iX2JsYW5rIj48Yj48JT1ob21ldXJsJT48L2I+PC9hPjxicj48YnI+DQpUaGFuayB5b3UgZm9yIGNob29zaW5nIEJhY2t1cEJ1ZGR5ITwvaDM+DQoNCg0KPC9kaXY+PC9kaXY+PGJyPjxicj48YnI+
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/finalCleanup.htm,importbuddy/views/finalCleanup.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/finished.htm,importbuddy/views/finished.htm
PGgxIGNsYXNzPSJhbmltYXRlZCBmYWRlSW5Eb3duIj5SZXN0b3JlIEZpbmlzaGVkLjwvaDE+DQoNCjxoMz5Zb3VyIHNpdGUgc2hvdWxkIGJlIHJlYWR5IHRvIGdvIGF0Ojxicj48YnI+PGEgaHJlZj0iPCU9aG9tZXVybCU+IiB0YXJnZXQ9Il9ibGFuayI+PCU9aG9tZXVybCU+PC9hPjwvaDM+PGJyPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/finished.htm,importbuddy/views/finished.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/home.php,importbuddy/views/home.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/home.php,importbuddy/views/home.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/importingDatabase.htm,importbuddy/views/importingDatabase.htm
PGNlbnRlcj4NCgk8aDM+UmVzdG9yaW5nIERhdGFiYXNlIC4uLjwvaDM+DQoJPGg0IGlkPSJpbXBvcnRpbmdEYXRhYmFzZS1wcm9ncmVzc01lc3NhZ2UiPjwvaDQ+DQo8L2NlbnRlcj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/importingDatabase.htm,importbuddy/views/importingDatabase.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/index.php,importbuddy/views/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/index.php,importbuddy/views/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/login.php,importbuddy/views/login.php
PHNjcmlwdD5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoICdBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcgKTs8L3NjcmlwdD4NCjw/cGhwDQoNCg0KaWYgKCBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdwYXNzd29yZCcgKSAhPSAnJyApIHsNCglnbG9iYWwgJHBiX2xvZ2luX2F0dGVtcHRzOw0KCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJ0ludmFsaWQgcGFzc3dvcmQuIFBsZWFzZSBlbnRlciB0aGUgcGFzc3dvcmQgeW91IHByb3ZpZGVkIHdpdGhpbiBCYWNrdXBCdWRkeSBTZXR0aW5ncy4gQXR0ZW1wdCAjJyAuICRwYl9sb2dpbl9hdHRlbXB0cyAuICcuJyApOw0KCWVjaG8gJzxicj4nOw0KfQ0KPz4NCg0KPHA+RW50ZXIgeW91ciBJbXBvcnRCdWRkeSBwYXNzd29yZCBiZWxvdyB0byBiZWdpbi48L3A+DQoNCjxmb3JtIG1ldGhvZD0icG9zdCI+DQoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0ibG9naW4iPg0KCTxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHN0eWxlPSJ3aWR0aDogMjUwcHg7Ij4NCgk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJBdXRoZW50aWNhdGUiIGNsYXNzPSJpdC1idXR0b24iPg0KPC9mb3JtPg0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/login.php,importbuddy/views/login.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/migratingDatabase.htm,importbuddy/views/migratingDatabase.htm
PGNlbnRlcj4NCgk8aDM+TWlncmF0aW5nIERhdGFiYXNlIC4uLjwvaDM+DQoJPGg0IGlkPSJtaWdyYXRpbmdEYXRhYmFzZS1wcm9ncmVzc01lc3NhZ2UiPjwvaDQ+DQo8L2NlbnRlcj4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/migratingDatabase.htm,importbuddy/views/migratingDatabase.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/unzippingFiles.htm,importbuddy/views/unzippingFiles.htm
PGNlbnRlcj4NCgk8aDM+UGxlYXNlIHdhaXQgd2hpbGUgeW91ciBmaWxlcyBhcmUgcmVzdG9yZWQgLi4uPC9oMz4NCgk8aDQgaWQ9InVuemlwcGluZ0ZpbGVzLXByb2dyZXNzTWVzc2FnZSI+UmVzdG9yaW5nIEZpbGVzPC9oND4NCjwvY2VudGVyPg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/unzippingFiles.htm,importbuddy/views/unzippingFiles.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/views/urlReplaceSettings.htm,importbuddy/views/urlReplaceSettings.htm

###PACKDATA,FILE_END,/_importbuddy/importbuddy/views/urlReplaceSettings.htm,importbuddy/views/urlReplaceSettings.htm
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/2.php,importbuddy/controllers/ajax/2.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/2.php,importbuddy/controllers/ajax/2.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/4.php,importbuddy/controllers/ajax/4.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/4.php,importbuddy/controllers/ajax/4.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/5.php,importbuddy/controllers/ajax/5.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/5.php,importbuddy/controllers/ajax/5.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/6.php,importbuddy/controllers/ajax/6.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KcGJfYmFja3VwYnVkZHk6OmxvYWRfdmlldyggJ19pZnJhbWVfaGVhZGVyJyk7DQpwYl9iYWNrdXBidWRkeTo6c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCk7DQplY2hvICI8c2NyaXB0PnBhZ2VUaXRsZSggJ1N0ZXAgNjogQ2xlYW51cCAmIENvbXBsZXRpb24nICk7PC9zY3JpcHQ+IjsNCmVjaG8gIjxzY3JpcHQ+YmJfc2hvd1N0ZXAoICdjbGVhbnVwU2V0dGluZ3MnICk7PC9zY3JpcHQ+IjsNCnBiX2JhY2t1cGJ1ZGR5OjpmbHVzaCgpOw0KDQoNCmlmICggJ3RydWUnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGVwbG95JyApICkgeyAvLyBkZXBsb3ltZW50IG1vZGUgcHJlLWxvYWRzIHN0YXRlIGRhdGEgaW4gYSBmaWxlIGluc3RlYWQgb2YgcGFzc2luZyB2aWEgcG9zdC4NCgkvLyBQYXJzZSBzdWJtaXR0ZWQgcmVzdG9yZURhdGEgcmVzdG9yZSBzdGF0ZSBmcm9tIHByZXZpb3VzIHN0ZXAuDQoJJHJlc3RvcmVEYXRhID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncmVzdG9yZURhdGEnICk7DQoJDQoJDQoJLy8gRGVjb2RlIHN1Ym1pdHRlZCBkYXRhLCByZXBvcnRpbmcgZGV0YWlscyBvbiBmYWlsdXJlLg0KCSRkZWNvZGVGYWlsUmVhc29uID0gJyc7DQoJaWYgKCBmYWxzZSA9PT0gKCAkcmVzdG9yZURhdGEgPSBiYXNlNjRfZGVjb2RlKCAkcmVzdG9yZURhdGEgKSApICkgeyAvLyBmYWxzZSBpZiBmYWlsZWQNCgkJJGRlY29kZUZhaWxSZWFzb24gPSAnRVJST1IgIzgzODkzYjogUmVzdG9yZSBoYWx0ZWQuIFVuYWJsZSB0byBiYXNlNjRfZGVjb2RlKCkgc3VibWl0dGVkIGZvcm0gZGF0YSBgJyAuIGh0bWxlbnRpdGllcyggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAncmVzdG9yZURhdGEnICkgKSAuICdgLic7DQoJfSBlbHNlIHsgLy8gU3VjY2Vzcy4NCgkJJHJlc3RvcmVEYXRhID0gdXJsZGVjb2RlKCAkcmVzdG9yZURhdGEgKTsNCgkJaWYgKCBudWxsID09PSAoICRyZXN0b3JlRGF0YSA9IGpzb25fZGVjb2RlKCAkcmVzdG9yZURhdGEsIHRydWUgKSApICkgeyAvLyBudWxsIGlmIGZhaWxlZA0KCQkJJG1lc3NhZ2UgPSAnRVJST1IgIzgzODkzYzogUmVzdG9yZSBoYWx0ZWQuIFVuYWJsZSB0byBkZWNvZGUgSlNPTiByZXN0b3JlIGJhc2U2NCBkZWNvZGVkIGRhdGEgYCcgLiBodG1sZW50aXRpZXMoIGJhc2U2NF9kZWNvZGUoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Jlc3RvcmVEYXRhJyApICkgKSAuICdgLiBCZWZvcmUgYmFzZTY0IGRlY29kZTogYCcgLiBodG1sZW50aXRpZXMoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Jlc3RvcmVEYXRhJyApICkgLiAnYC4nOw0KCQkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdqc29uX2xhc3RfZXJyb3InICkgKSB7DQoJCSAJCSRtZXNzYWdlIC49ICcganNvbl9sYXN0X2Vycm9yOiBgJyAuIGpzb25fbGFzdF9lcnJvcigpIC4gJ2AuJzsNCgkJIAl9DQoJCSAJJGRlY29kZUZhaWxSZWFzb24gPSAkbWVzc2FnZTsNCgkJfSBlbHNlIHsgLy8gU3VjY2Vzcy4NCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1N1Y2Nlc3MgZGVjb2Rpbmcgc3VibWl0dGVkIGVuY29kZWQgZGF0YS4nICk7DQoJCX0NCgl9DQoJLy8gUmVwb3J0IGZhaWx1cmUgYW5kIGZhdGFsbHkgaGFsdC4NCglpZiAoICcnICE9PSAkZGVjb2RlRmFpbFJlYXNvbiApIHsNCgkJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAkbWVzc2FnZSApOw0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSApOw0KCQlkaWUoKTsNCgl9DQoJDQoJDQp9IGVsc2Ugew0KCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnXSApICYmICggY291bnQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGVmYXVsdF9zdGF0ZV9vdmVycmlkZXMnXSApID4gMCApICkgeyAvLyBEZWZhdWx0IHN0YXRlIG92ZXJyaWRlcyBleGlzdC4gQXBwbHkgdGhlbS4NCgkJJHJlc3RvcmVEYXRhID0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydkZWZhdWx0X3N0YXRlX292ZXJyaWRlcyddOw0KCQkNCgkJLyoNCgkJZWNobyAnPHByZT4nOw0KCQlwcmludF9yKCAkcmVzdG9yZURhdGEgKTsNCgkJZWNobyAnPC9wcmU+JzsNCgkJKi8NCgl9IGVsc2Ugew0KCQlkaWUoICdFcnJvciAjMzI3ODMyMTogTWlzc2luZyBleHBlY3RlZCBkZWZhdWx0IHN0YXRlIG92ZXJyaWRlLicgKTsNCgl9DQp9DQoNCg0KLy8gSW5zdGFudGlhdGUgcmVzdG9yZSBjbGFzcy4NCnJlcXVpcmVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2NsYXNzZXMvcmVzdG9yZS5waHAnICk7DQokcmVzdG9yZSA9IG5ldyBiYWNrdXBidWRkeV9yZXN0b3JlKCAncmVzdG9yZScsICRyZXN0b3JlRGF0YSApOw0KdW5zZXQoICRyZXN0b3JlRGF0YSApOyAvLyBBY2Nlc3MgdmlhICRyZXN0b3JlLT5fc3RhdGUgdG8gbWFrZSBzdXJlIGl0IGlzIGFsd2F5cyB1cCB0byBkYXRlLg0KaWYgKCAndHJ1ZScgIT0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdkZXBsb3knICkgKSB7IC8vIFdlIGRvbnQgYWNjZXB0IHN1Ym1pdHRlZCBmb3JtIG9wdGlvbnMgZHVyaW5nIGRlcGxveS4NCgkkcmVzdG9yZS0+X3N0YXRlID0gcGFyc2Vfb3B0aW9ucyggJHJlc3RvcmUtPl9zdGF0ZSApOw0KfSBlbHNlIHsgLy8gRGVwbG95bWVudCBzaG91bGQgc2xlZXAgdG8gaGVscCBnaXZlIHRpbWUgZm9yIHRoZSBzb3VyY2Ugc2l0ZSB0byBncmFiIHRoZSBsYXN0IHN0YXR1cyBsb2cuDQoJc2xlZXAoIDUgKTsNCn0NCg0KJGZvb3RlciA9IGZpbGVfZ2V0X2NvbnRlbnRzKCBwYl9iYWNrdXBidWRkeTo6JF9wbHVnaW5fcGF0aCAuICcvdmlld3MvX2lmcmFtZV9mb290ZXIucGhwJyApOw0KDQppZiAoICd0cnVlJyA9PSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsNCgllY2hvICc8aDU+RmluaXNoZWQgZGVwbG95aW5nIHB1c2hlZCBkYXRhICYgdGVtcG9yYXJ5IGZpbGUgY2xlYW51cC48L2g1Pic7DQp9DQplY2hvICI8c2NyaXB0PmJiX3Nob3dTdGVwKCAnZmluaXNoZWQnLCAiIC4ganNvbl9lbmNvZGUoICRyZXN0b3JlLT5fc3RhdGUgKSAuICIgKTs8L3NjcmlwdD4iOw0KDQoNCi8vIFJlcGxhY2VzIHNsZWVwaW5nIDYgc2Vjb25kcy4gTW9yZSByZWxpYWJsZSBidXQgdXNlcyBsb3RzIG9mIENQVS4NCiRzdG9wX3RpbWVfbGltaXQgPSA2Ow0KcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnQmVnZ2luaW5nIGAnIC4gJHN0b3BfdGltZV9saW1pdCAuICdgIHNlY29uZCBzbGVlcCB3aGlsZSBmaWxlcyBkZWxldGUuJyApOw0KcGJfYmFja3VwYnVkZHk6OmZsdXNoKCB0cnVlICk7DQokdCA9IDA7IC8vIFRpbWUgPSAwOw0Kd2hpbGUoICR0IDwgJHN0b3BfdGltZV9saW1pdCApIHsNCgkkbm93ID0gdGltZSgpOw0KCXdoaWxlICggdGltZSgpIDwgKCAkbm93ICsgMSApICkgeyB0cnVlOyB9DQoJJHQrKzsNCn0NCg0KaWYgKCAnJyAhPT0gJHJlc3RvcmUtPl9zdGF0ZVsnY2xlYW51cCddWydzZXRfYmxvZ19wdWJsaWMnXSApIHsNCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdDaGFuZ2luZyBibG9nX3B1YmxpYyBzZWFyY2ggZW5naW5lIHZpc2liaWxpdHkgYmFzZWQgb24gc2VsZWN0ZWQgc2V0dGluZyB3aXRoIHZhbHVlIGAnIC4gJHJlc3RvcmUtPl9zdGF0ZVsnY2xlYW51cCddWydzZXRfYmxvZ19wdWJsaWMnXSAuICdgLicgKTsNCgkkcmVzdG9yZS0+c2V0QmxvZ1B1YmxpYyggJHJlc3RvcmUtPl9zdGF0ZVsnY2xlYW51cCddWydzZXRfYmxvZ19wdWJsaWMnXSApOw0KfSBlbHNlIHsNCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdObyBjaGFuZ2UgdG8gYmxvZ19wdWJsaWMgc2VhcmNoIGVuZ2luZSB2aXNpYmlsaXR5IGJhc2VkIG9uIHNlbGVjdGVkIHNldHRpbmcuJyApOw0KfQ0KDQppZiAoICd0cnVlJyA9PSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2RlcGxveScgKSApIHsgLy8gRGVwbG95bWVudA0KCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0RlcGxveW1lbnQgc28gc2tpcHBpbmcgY2xlYW51cCBwcm9jZWR1cmVzLicgKTsNCn0gZWxzZSB7DQoJY2xlYW51cCggJHJlc3RvcmUtPl9zdGF0ZSwgJHJlc3RvcmUgKTsNCn0NCmVjaG8gJGZvb3RlcjsgLy8gV2UgbXVzdCBwcmVsb2FkIHRoZSBmb290ZXIgZmlsZSBjb250ZW50cyBzaW5jZSB3ZSBhcmUgYWJvdXQgdG8gZGVsZXRlIGl0Lg0KDQoNCmlmICggJ3RydWUnID09IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGVwbG95JyApICkgeyAvLyBEZXBsb3ltZW50DQoJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnRGVwbG95bWVudCBmaW5pc2hlZCAoaW1wb3J0YnVkZHkpLicgKTsNCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGVwbG95RmluaXNoZWQnLCAnRmluaXNoZWQuJyApOw0KfSBlbHNlIHsgLy8gU3RhbmRhcmQgcmVzdG9yZS4NCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnYmFja3VwYnVkZHlfbWlsZXN0b25lJywgJ2ZpbmlzaF9pbXBvcnRidWRkeScgKTsNCn0NCg0KDQovLyBQYXJzZSBzdWJtaXR0ZWQgb3B0aW9ucy9zZXR0aW5ncy4NCmZ1bmN0aW9uIHBhcnNlX29wdGlvbnMoICRyZXN0b3JlRGF0YSApIHsNCgkNCglpZiAoICcxJyA9PSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdkZWxldGVfYmFja3VwJyApICkgew0KCQkkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlQXJjaGl2ZSddID0gdHJ1ZTsNCgl9IGVsc2Ugew0KCQkkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlQXJjaGl2ZSddID0gZmFsc2U7DQoJfQ0KCQ0KCWlmICggJzEnID09IHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2RlbGV0ZV90ZW1wJyApICkgew0KCQkkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlVGVtcEZpbGVzJ10gPSB0cnVlOw0KCX0gZWxzZSB7DQoJCSRyZXN0b3JlRGF0YVsnY2xlYW51cCddWydkZWxldGVUZW1wRmlsZXMnXSA9IGZhbHNlOw0KCX0NCgkNCglpZiAoICcxJyA9PSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdkZWxldGVfaW1wb3J0YnVkZHknICkgKSB7DQoJCSRyZXN0b3JlRGF0YVsnY2xlYW51cCddWydkZWxldGVJbXBvcnRCdWRkeSddID0gdHJ1ZTsNCgl9IGVsc2Ugew0KCQkkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlSW1wb3J0QnVkZHknXSA9IGZhbHNlOw0KCX0NCgkNCglpZiAoICcxJyA9PSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdkZWxldGVfaW1wb3J0YnVkZHlfZGlyZWN0b3J5JyApICkgew0KCQkkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlSW1wb3J0QnVkZHlEaXJlY3RvcnknXSA9IHRydWU7DQoJfSBlbHNlIHsNCgkJJHJlc3RvcmVEYXRhWydjbGVhbnVwJ11bJ2RlbGV0ZUltcG9ydEJ1ZGR5RGlyZWN0b3J5J10gPSBmYWxzZTsNCgl9DQoJDQoJaWYgKCAnMScgPT0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnZGVsZXRlX2ltcG9ydGJ1ZGR5bG9nJyApICkgew0KCQkkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlSW1wb3J0TG9nJ10gPSB0cnVlOw0KCX0gZWxzZSB7DQoJCSRyZXN0b3JlRGF0YVsnY2xlYW51cCddWydkZWxldGVJbXBvcnRMb2cnXSA9IGZhbHNlOw0KCX0NCgkNCgkvLyBTZWFyY2ggZW5naW5lIHZpc2liaWxpdHkgKHNldF9ibG9nX3B1YmxpYyB3cF9vcHRpb25zKS4NCglpZiAoICcxJyA9PSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdzZXRfYmxvZ19wdWJsaWMnICkgKSB7DQoJCSRyZXN0b3JlRGF0YVsnY2xlYW51cCddWydzZXRfYmxvZ19wdWJsaWMnXSA9IHRydWU7DQoJfSBlbHNlaWYgKCAnMCcgPT0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnc2V0X2Jsb2dfcHVibGljJyApICkgew0KCQkkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnc2V0X2Jsb2dfcHVibGljJ10gPSBmYWxzZTsNCgl9DQoJDQoJcmV0dXJuICRyZXN0b3JlRGF0YTsNCn0NCg0KDQovKgljbGVhbnVwKCkNCiAqCQ0KICoJQ2xlYW5zIHVwIGFueSB0ZW1wb3JhcnkgZmlsZXMgbGVmdCBieSBpbXBvcnRidWRkeS4NCiAqCQ0KICoJQHJldHVybgkJbnVsbA0KICovDQpmdW5jdGlvbiBjbGVhbnVwKCAkcmVzdG9yZURhdGEsICRyZXN0b3JlICkgew0KCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1N0YXJ0aW5nIGltcG9ydGJ1ZGR5IGNsZWFudXAgcHJvY2VkdXJlcy4nICk7DQoJDQoJaWYgKCB0cnVlICE9PSAkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlQXJjaGl2ZSddICkgew0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdTa2lwcGVkIGRlbGV0aW5nIGJhY2t1cCBhcmNoaXZlLicgKTsNCgl9IGVsc2Ugew0KCQlyZW1vdmVfZmlsZSggJHJlc3RvcmVEYXRhWydhcmNoaXZlJ10sICdiYWNrdXAgLlpJUCBmaWxlICgnIC4gJHJlc3RvcmVEYXRhWydhcmNoaXZlJ10gLiAnKScsIHRydWUgKTsNCgl9DQoJDQoJaWYgKCB0cnVlICE9PSAkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlVGVtcEZpbGVzJ10gKSB7DQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1NraXBwZWQgZGVsZXRpbmcgdGVtcG9yYXJ5IGZpbGVzLicgKTsNCgl9IGVsc2Ugew0KCQkvLyBGdWxsIGJhY2t1cCAuc3FsIGZpbGUNCgkJcmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnd3AtY29udGVudC91cGxvYWRzL3RlbXBfJy4gJHJlc3RvcmVEYXRhWydzZXJpYWwnXSAuJy9kYi5zcWwnLCAnZGIuc3FsIChiYWNrdXAgZGF0YWJhc2UgZHVtcCknLCBmYWxzZSApOw0KCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvdGVtcF8nLiAkcmVzdG9yZURhdGFbJ3NlcmlhbCddIC4nL2RiXzEuc3FsJywgJ2RiXzEuc3FsIChiYWNrdXAgZGF0YWJhc2UgZHVtcCknLCBmYWxzZSApOw0KCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvYmFja3VwYnVkZHlfdGVtcC8nLiAkcmVzdG9yZURhdGFbJ3NlcmlhbCddIC4nL2RiXzEuc3FsJywgJ2RiXzEuc3FsIChiYWNrdXAgZGF0YWJhc2UgZHVtcCknLCBmYWxzZSApOw0KCQkvLyBEQiBvbmx5IHNxbCBmaWxlDQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ2RiLnNxbCcsICdkYi5zcWwgKGJhY2t1cCBkYXRhYmFzZSBkdW1wKScsIGZhbHNlICk7DQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ2RiXzEuc3FsJywgJ2RiXzEuc3FsIChiYWNrdXAgZGF0YWJhc2UgZHVtcCknLCBmYWxzZSApOw0KCQkNCgkJLy8gRnVsbCBiYWNrdXAgZGF0IGZpbGUNCgkJcmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnd3AtY29udGVudC91cGxvYWRzL3RlbXBfJyAuICRyZXN0b3JlRGF0YVsnc2VyaWFsJ10gLiAnL2JhY2t1cGJ1ZGR5X2RhdC5waHAnLCAnYmFja3VwYnVkZHlfZGF0LnBocCAoYmFja3VwIGRhdGEgZmlsZSknLCBmYWxzZSApOw0KCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvYmFja3VwYnVkZHlfdGVtcC8nIC4gJHJlc3RvcmVEYXRhWydzZXJpYWwnXSAuICcvYmFja3VwYnVkZHlfZGF0LnBocCcsICdiYWNrdXBidWRkeV9kYXQucGhwIChiYWNrdXAgZGF0YSBmaWxlKScsIGZhbHNlICk7DQoJCS8vIERCIG9ubHkgZGF0IGZpbGUNCgkJcmVtb3ZlX2ZpbGUoIEFCU1BBVEggLiAnYmFja3VwYnVkZHlfZGF0LnBocCcsICdiYWNrdXBidWRkeV9kYXQucGhwIChiYWNrdXAgZGF0YSBmaWxlKScsIGZhbHNlICk7DQoJCQ0KCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICd3cC1jb250ZW50L3VwbG9hZHMvYmFja3VwYnVkZHlfdGVtcC8nIC4gJHJlc3RvcmVEYXRhWydzZXJpYWwnXSAuICcvJywgJ1RlbXBvcmFyeSBiYWNrdXAgZGlyZWN0b3J5JywgZmFsc2UgKTsNCgkJDQoJCS8vIFRlbXAgcmVzdG9yZSBkaXIuDQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L3RlbXBfJy4gJHJlc3RvcmVEYXRhWydzZXJpYWwnXSAuJy8nLCAnVGVtcG9yYXJ5IHJlc3RvcmUgZGlyZWN0b3J5JywgZmFsc2UgKTsNCgkJDQoJCS8vIFJlbW92ZSBzdGF0ZSBmaWxlIChkZXBsb3ltZW50L2RlZmF1bHQgc2V0dGluZ3MpLg0KCQlnbG9iYWwgJGltcG9ydGJ1ZGR5X2ZpbGU7DQoJCSRpbXBvcnRGaWxlU2VyaWFsID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0X3NlcmlhbF9mcm9tX2ZpbGUoICRpbXBvcnRidWRkeV9maWxlICk7DQoJCSRzdGF0ZV9maWxlID0gQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gJGltcG9ydEZpbGVTZXJpYWwgLiAnLXN0YXRlLnBocCc7DQoJCXJlbW92ZV9maWxlKCAkc3RhdGVfZmlsZSwgJ0RlZmF1bHQgc3RhdGUgZGF0YSBmaWxlJywgZmFsc2UgKTsNCgl9DQoJDQoJZ2xvYmFsICRpbXBvcnRidWRkeV9maWxlOw0KCWlmICggdHJ1ZSAhPT0gJHJlc3RvcmVEYXRhWydjbGVhbnVwJ11bJ2RlbGV0ZUltcG9ydEJ1ZGR5J10gKSB7DQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ1NraXBwZWQgZGVsZXRpbmcgJyAuICRpbXBvcnRidWRkeV9maWxlIC4gJyAodGhpcyBzY3JpcHQpLicgKTsNCgl9IGVsc2Ugew0KCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICRpbXBvcnRidWRkeV9maWxlLCAkaW1wb3J0YnVkZHlfZmlsZSAuICcgKHRoaXMgc2NyaXB0KScsIHRydWUgKTsNCgl9DQoJDQoJaWYgKCB0cnVlICE9PSAkcmVzdG9yZURhdGFbJ2NsZWFudXAnXVsnZGVsZXRlSW1wb3J0QnVkZHlEaXJlY3RvcnknXSApIHsNCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnU2tpcHBlZCBkZWxldGluZyBpbXBvcnRidWRkeSBkaXJlY3RvcnkuJyApOw0KCX0gZWxzZSB7DQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5LycsICdJbXBvcnRCdWRkeSBEaXJlY3RvcnknLCB0cnVlICk7DQoJCXJlbW92ZV9maWxlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L19zZXR0aW5nc19kYXQucGhwJywgJ19zZXR0aW5nc19kYXQucGhwICh0ZW1wb3Jhcnkgc2V0dGluZ3MgZmlsZSknLCBmYWxzZSApOw0KCX0NCgkNCgkvLyBEZWxldGUgbG9nIGZpbGUgbGFzdC4NCglpZiAoIHRydWUgIT09ICRyZXN0b3JlRGF0YVsnY2xlYW51cCddWydkZWxldGVJbXBvcnRMb2cnXSApIHsNCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnU2tpcHBlZCBkZWxldGluZyBpbXBvcnQgbG9nIChkZWxldGVJbXBvcnRCdWRkeURpcmVjdG9yeSBtYXkgb3ZlcnJpZGUpLicgKTsNCgl9IGVsc2Ugew0KCQlyZW1vdmVfZmlsZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS0nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCcsICdpbXBvcnRidWRkeS0nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCBsb2cgZmlsZScsIHRydWUgKTsNCgl9DQp9DQoNCg0KDQoNCg0KLy8gVXNlZCBieSBjbGVhbnVwKCkgYWJvdmUuDQpmdW5jdGlvbiByZW1vdmVfZmlsZSggJGZpbGUsICRkZXNjcmlwdGlvbiwgJGVycm9yX29uX21pc3NpbmcgPSBmYWxzZSApIHsNCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdEZWxldGluZyBgJyAuICRkZXNjcmlwdGlvbiAuICdgLi4uJyApOw0KDQoJQGNobW9kKCAkZmlsZSwgMDc1NSApOyAvLyBIaWdoIHBlcm1pc3Npb25zIHRvIGRlbGV0ZS4NCgkNCglpZiAoIGlzX2RpciggJGZpbGUgKSApIHsgLy8gZGlyZWN0b3J5Lg0KCQlwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0tPnVubGlua19yZWN1cnNpdmUoICRmaWxlICk7DQoJCWlmICggZmlsZV9leGlzdHMoICRmaWxlICkgKSB7DQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnVW5hYmxlIHRvIGRlbGV0ZSBkaXJlY3Rvcnk6IGAnIC4gJGRlc2NyaXB0aW9uIC4gJ2AuIFlvdSBzaG91bGQgbWFudWFsbHkgZGVsZXRlIGl0LicgKTsNCgkJfSBlbHNlIHsNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ0RlbGV0ZWQuJywgZmFsc2UgKTsgLy8gTm8gbG9nZ2luZyBvZiB0aGlzIGFjdGlvbiB0byBwcmV2ZW50IHJlY3JlYXRpbmcgbG9nLg0KCQl9DQoJfSBlbHNlIHsgLy8gZmlsZQ0KCQlpZiAoIGZpbGVfZXhpc3RzKCAkZmlsZSApICkgew0KCQkJaWYgKCB0cnVlICE9PSBAdW5saW5rKCAkZmlsZSApICkgew0KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICdVbmFibGUgdG8gZGVsZXRlIGZpbGU6IGAnIC4gJGRlc2NyaXB0aW9uIC4gJ2AuIFlvdSBzaG91bGQgbWFudWFsbHkgZGVsZXRlIGl0LicgKTsNCgkJCX0gZWxzZSB7DQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnRGVsZXRlZC4nLCBmYWxzZSApOyAvLyBObyBsb2dnaW5nIG9mIHRoaXMgYWN0aW9uIHRvIHByZXZlbnQgcmVjcmVhdGluZyBsb2cuDQoJCQl9DQoJCX0NCgl9DQp9IC8vIEVuZCByZW1vdmVfZmlsZSgpLg0KDQoNCmRpZSgpOyAvLyBEb24ndCB3YW50IHRvIGFjY2lkZW50bHkgZ28gYmFjayB0byBhbnkgZmlsZXMgd2hpY2ggbWF5IGJlIGdvbmUuDQoNCg==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/6.php,importbuddy/controllers/ajax/6.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQoNCkF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uDQoNCi8vcHJpbnRfciggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCkgKTsNCg0KJGNwYW5lbF91c2VyID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3VzZXInICk7DQokY3BhbmVsX3Bhc3N3b3JkID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3Bhc3MnICk7DQokY3BhbmVsX2hvc3QgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfdXJsJyApOw0KJGNwYW5lbF9wb3J0ID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3BvcnQnICk7DQokY3BhbmVsX3Byb3RvY29sID0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnY3BhbmVsX3Byb3RvY29sJyApOw0KJGRiX25hbWUgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfZGJuYW1lJyApOw0KJGRiX3VzZXIgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfZGJ1c2VyJyApOw0KJGRiX3Bhc3MgPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdjcGFuZWxfZGJwYXNzJyApOw0KDQovLyBOZWVkZWQgZm9yIEhUVFAgcmVxdWVzdHMuDQokcmVxdWVzdGNvcmVfZmlsZSA9IHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvcmVxdWVzdGNvcmUvcmVxdWVzdGNvcmUuY2xhc3MucGhwJzsNCnJlcXVpcmVfb25jZSggJHJlcXVlc3Rjb3JlX2ZpbGUgKTsNCg0KcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliL2NwYW5lbC9jcGFuZWwucGhwJyApOw0KJGNyZWF0ZV9kYl9yZXN1bHQgPSBwYl9iYWNrdXBidWRkeV9jcGFuZWw6OmNyZWF0ZV9kYiggJGNwYW5lbF91c2VyLCAkY3BhbmVsX3Bhc3N3b3JkLCAkY3BhbmVsX2hvc3QsICRkYl9uYW1lLCAkZGJfdXNlciwgJGRiX3Bhc3MsICRjcGFuZWxfcG9ydCwgJGNwYW5lbF9wcm90b2NvbCApOw0KDQppZiAoICRjcmVhdGVfZGJfcmVzdWx0ID09PSB0cnVlICkgew0KCWVjaG8gJ1N1Y2Nlc3MhIENyZWF0ZWQgZGF0YWJhc2UsIHVzZXIsIGFuZCBhc3NpZ25lZCB1c2VyIHRvIGRhdGFiYXNlLic7DQp9IGVsc2Ugew0KCWVjaG8gIlVuYWJsZSB0byBhdXRvbWF0aWNhbGx5IGNyZWF0ZSBkYXRhYmFzZSB3aXRoIHRoZSBwcm92aWRlZCBzZXR0aW5ncy4gQ2hlY2sgc2V0dGluZ3Mgb3IgbWFudWFsbHkgY3JlYXRlIHRoZSBkYXRhYmFzZSBmcm9tIHlvdXIgaG9zdCdzIGNvbnRyb2wgcGFuZWwuIFNlZSB0dXRvcmlhbCBhdDogIjsNCgllY2hvICJodHRwOi8vaXRoZW1lcy5jb20vdHV0b3JpYWwtY3JlYXRlLWRhdGFiYXNlLWluLWNwYW5lbC9cblxuIjsNCgllY2hvICJFcnJvciBkZXRhaWxzOlxuIiAuIGltcGxvZGUoICJcbiIsICRjcmVhdGVfZGJfcmVzdWx0KTsNCn0NCg0KZGllKCk7DQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/cpanel_createdb.php,importbuddy/controllers/ajax/cpanel_createdb.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KDQokZmlsZSA9IEFCU1BBVEggLiBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdmaWxlJyApOw0KDQppZiAoICcnID09ICRmaWxlICkgew0KCWRpZSggJ05vIGZpbGUgcGFzc2VkLicgKTsNCn0NCmlmICggISBmaWxlX2V4aXN0cyggJGZpbGUgKSApIHsNCglkaWUoICdGaWxlIG5vdCBmb3VuZC4nICk7DQp9DQoNCiRmaWxlSGFzaCA9IEBtZDVfZmlsZSggJGZpbGUgKTsNCg0KaWYgKCBmYWxzZSA9PT0gJGZpbGVIYXNoICkgew0KCWRpZSggJ1VuYWJsZSB0byBjYWxjdWxhdGUgaGFzaC4gVmVyaWZ5IGZpbGUgcGVybWlzc2lvbnMuJyApOw0KfSBlbHNlIHsNCglkaWUoIGpzb25fZW5jb2RlKCBhcnJheSggJ2hhc2gnID0+ICRmaWxlSGFzaCApICkgKTsNCn0=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/file_hash.php,importbuddy/controllers/ajax/file_hash.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/getDeployLog.php,importbuddy/controllers/ajax/getDeployLog.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQoNCmlmICggJ3RydWUnICE9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnZGVwbG95JyApICkgew0KCWRpZSggJ0FjY2VzcyBkZW5pZWQuJyApOw0KfQ0KDQovLyBPbmx5IGFsbG93IGFjY2VzcyB0byB0aGlzIGZpbGUgaWYgaXQgaGFzIGEgc2VyaWFsIGhpZGluZyBpdC4gVXNlZCBieSBkZXBsb3ltZW50Lg0KZ2xvYmFsICRpbXBvcnRidWRkeV9maWxlOw0KJGltcG9ydEZpbGVTZXJpYWwgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRfc2VyaWFsX2Zyb21fZmlsZSggJGltcG9ydGJ1ZGR5X2ZpbGUgKTsNCmlmICggJycgPT0gJGltcG9ydEZpbGVTZXJpYWwgKSB7DQoJZGllKCAnQWNjZXNzIGRlbmllZC4nICk7DQp9DQoNCnBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJyoqKiBFbmQgSW1wb3J0QnVkZHkgTG9nIFNlY3Rpb24gKERlcGxveW1lbnQpJyApOw0KDQovLyBMb2cgdG8gbWFrZSBhIGNvcHkgb2YgcmV0cmlldmVkIGRlcGxveSBpbmZvIGludG8uDQokbG9nX2RpcmVjdG9yeSA9IGJhY2t1cGJ1ZGR5X2NvcmU6OmdldExvZ0RpcmVjdG9yeSgpOw0KJGJhY2t1cF9sb2dfZmlsZSA9ICRsb2dfZGlyZWN0b3J5IC4gJ3N0YXR1cy1kZXBsb3ljb3B5LScgLiAkaW1wb3J0RmlsZVNlcmlhbCAuICcudHh0JzsNCg0KJHN0YXR1c19saW5lcyA9IHBiX2JhY2t1cGJ1ZGR5OjpnZXRfc3RhdHVzKCAnJywgdHJ1ZSwgZmFsc2UsIHRydWUsICRiYWNrdXBfbG9nX2ZpbGUgKTsgLy8gQ2xlYXIgZmlsZSwgZG9udCB1bmxpbmsgZmlsZSwgc3VwcmVzcyBzdGF0dXMgcmV0cmlldmFsIG1zZywgYmFja3VwIGludG8gJGxvZ19maWxlDQplY2hvIGltcGxvZGUoICcnLCAkc3RhdHVzX2xpbmVzICk7DQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/getDeployLog.php,importbuddy/controllers/ajax/getDeployLog.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/hash_forgotpass.php,importbuddy/controllers/ajax/hash_forgotpass.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQoNCmlmICggJycgPT0gcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbmV3cGFzc3dvcmQnICkgKSB7DQoJZGllKCAnRXJyb3IgIzg0OTM0ODk6IE1pc3NpbmcgcGFzc3dvcmQuJyApOw0KfQ0KDQpkaWUoIG1kNSggcGJfYmFja3VwYnVkZHk6Ol9QT1NUKCAnbmV3cGFzc3dvcmQnICkgKSApOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/hash_forgotpass.php,importbuddy/controllers/ajax/hash_forgotpass.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/index.php,importbuddy/controllers/ajax/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/index.php,importbuddy/controllers/ajax/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KDQovLyBJbmNsdWRlIHRoZSBEQiBUZXN0cyBjbGFzcyBhbmQgaW5pdCBpdC4NCnJlcXVpcmVfb25jZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS9jbGFzc2VzL3Rlc3QtZGIucGhwJyApOw0KJGltcG9ydGJ1ZGR5X3Rlc3RfZGIgPSBuZXcgaW1wb3J0YnVkZHlfdGVzdF9kYigpOw0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/ajax/mysql_test.php,importbuddy/controllers/ajax/mysql_test.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
PD9waHANCmRpZSgpOw0KDQppZiAoICEgZGVmaW5lZCggJ1BCX0lNUE9SVEJVRERZJyApIHx8ICggdHJ1ZSAhPT0gUEJfSU1QT1JUQlVERFkgKSApIHsNCglkaWUoICc8aHRtbD48L2h0bWw+JyApOw0KfQ0KDQpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KDQo/Pg0KPGRpdiBpZD0icGJfY3JlYXRlYWRtaW5fbW9kYWwiIHN0eWxlPSJkaXNwbGF5OiBub25lOyBoZWlnaHQ6IDkwJTsiPg0KCQk8ZGl2IGNsYXNzPSJtb2RhbCI+DQoJCQk8ZGl2IGNsYXNzPSJtb2RhbF9oZWFkZXIiPg0KCQkJCTxhIGNsYXNzPSJtb2RhbF9jbG9zZSI+JnRpbWVzOzwvYT4NCgkJCQk8aDI+U2VydmVyIEluZm9ybWF0aW9uPC9oMj4NCgkJCTwvZGl2Pg0KCQkJPGRpdiBjbGFzcz0ibW9kYWxfY29udGVudCI+DQoJCQkJDQoJCQkJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KCQkJCQlqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgew0KCQkJCQkJalF1ZXJ5KCAnI2NyZWF0ZWFkbWluX2Zvcm0nICkuc3VibWl0KGZ1bmN0aW9uKCl7DQoJCQkJCQkJDQoJCQkJCQkJalF1ZXJ5KCAnLmNyZWF0ZWFkbWluX2xvYWRpbmcnICkuc2hvdygpOw0KCQkJCQkJCWpRdWVyeS5wb3N0KCdpbXBvcnRidWRkeS5waHA/YWpheD1jcmVhdGVfYWRtaW4nLA0KCQkJCQkJCQlqUXVlcnkoICcjY3JlYXRlYWRtaW5fZm9ybScgKS5zZXJpYWxpemUoKSwgZnVuY3Rpb24oZGF0YSkgew0KCQkJCQkJCQkJDQoJCQkJCQkJCQlkYXRhID0galF1ZXJ5LnRyaW0oIGRhdGEgKTsNCgkJCQkJCQkJCWpRdWVyeSggJy5jcmVhdGVhZG1pbl9sb2FkaW5nJyApLmhpZGUoKTsNCgkJCQkJCQkJCQ0KCQkJCQkJCQkJaWYgKCBkYXRhID09ICcxJyApIHsNCgkJCQkJCQkJCQlhbGVydCggJ1N1Y2Nlc3MnICk7DQoJCQkJCQkJCQl9IGVsc2Ugew0KCQkJCQkJCQkJCWFsZXJ0KCAnRXJyb3I6ICcgKyBkYXRhICk7DQoJCQkJCQkJCQl9DQoJCQkJCQkJCQkNCgkJCQkJCQkJfQ0KCQkJCQkJCSk7DQoJCQkJCQkJDQoJCQkJCQkJcmV0dXJuIGZhbHNlOw0KCQkJCQkJCQ0KCQkJCQkJfSk7DQoJCQkJCX0pOw0KCQkJCTwvc2NyaXB0Pg0KCQkJCQ0KCQkJCTxmb3JtIGlkPSJjcmVhdGVhZG1pbl9mb3JtIj4NCgkJCQkJVXNlcm5hbWU6IDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSI+DQoJCQkJCUVtYWlsOiA8aW5wdXQgdHlwZT0iZW1haWwiIG5hbWU9ImVtYWlsIj4NCgkJCQkJUGFzc3dvcmQ6IDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiPg0KCQkJCQlDb25maXJtIFBhc3N3b3JkOiA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkX2NvbmZpcm0iPg0KCQkJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJzdWJtaXQiIHZhbHVlPSJDcmVhdGUgQWRtaW4gVXNlciIgY2xhc3M9ImJ1dHRvbiI+DQoJCQkJCTxzcGFuIGNsYXNzPSJjcmVhdGVhZG1pbl9sb2FkaW5nIiBzdHlsZT0iZGlzcGxheTogbm9uZTsgbWFyZ2luLWxlZnQ6IDEwcHg7Ij48aW1nIHNyYz0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpOyA/Pi9pbWFnZXMvbG9hZGluZy5naWYiIGFsdD0iJyAuIF9fKCdMb2FkaW5nLi4uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIiB0aXRsZT0iJyAuIF9fKCdMb2FkaW5nLi4uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIiB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogLTNweDsiPjwvc3Bhbj4NCgkJCQk8L2Zvcm0+DQoJCQkJDQoJCQkJDQoJCTwvZGl2Pg0KCTwvZGl2Pg0KPC9kaXY+DQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/create_admin.php,importbuddy/controllers/pages/create_admin.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KDQoNCiRkYXRhID0gYXJyYXkoKTsNCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3ZpZXcoICdkYnJlcGxhY2UnLCAkZGF0YSApOw0KPz48c2NyaXB0PmpRdWVyeSggJyNwYWdlVGl0bGUnICkuaHRtbCggJ0RhdGFiYXNlIFRleHQgUmVwbGFjZScgKTs8L3NjcmlwdD4=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/dbreplace.php,importbuddy/controllers/pages/dbreplace.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQoNCg0KLyoqKioqKiBCRUdJTiBBVVRIRU5USUNBVElPTiAqKioqKi8NCi8vcmVxdWlyZV9vbmNlKCBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NsYXNzZXMvYXV0aC5waHAnICk7DQpBdXRoOjpjaGVjaygpOw0KaWYgKCAoIHRydWUgPT09IEF1dGg6OmlzX2F1dGhlbnRpY2F0ZWQoKSApICYmICggJ2xvZ2luJyA9PSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdhY3Rpb24nICkgKSApIHsgLy8gT24gc3VjY2Vzc2Z1bCBsb2dpbiB0byBzdGVwIDAsIHJlZGlyZWN0IHRvIHN0ZXAgMS4NCgloZWFkZXIoICdMb2NhdGlvbjogJyAuIHBiX2JhY2t1cGJ1ZGR5OjpwYWdlX3VybCgpICk7DQp9DQovKioqKioqIEVORCBBVVRIRU5USUNBVElPTiAqKioqKi8NCg0KDQokbW9kZSA9ICdodG1sJzsNCg0KDQovLyBSZWdpc3RlciBQSFAgc2h1dGRvd24gZnVuY3Rpb24gdG8gaGVscCBjYXRjaCBhbmQgbG9nIGZhdGFsIFBIUCBlcnJvcnMgZHVyaW5nIGJhY2t1cC4NCnJlZ2lzdGVyX3NodXRkb3duX2Z1bmN0aW9uKCAnc2h1dGRvd25fZnVuY3Rpb24nICk7DQovL2Vycm9yX3JlcG9ydGluZyggRV9FUlJPUiB8IEVfV0FSTklORyB8IEVfUEFSU0UgfCBFX05PVElDRSApOyAvLyBISUdIDQoNCi8qCXNodXRkb3duX2Z1bmN0aW9uKCkNCiAqCQ0KICoJVXNlZCBmb3IgY2F0Y2hpbmcgZmF0YWwgUEhQIGVycm9ycyBkdXJpbmcgYmFja3VwIHRvIHdyaXRlIHRvIGxvZyBmb3IgZGVidWdnaW5nLg0KICoJDQogKglAcmV0dXJuCQludWxsDQogKi8NCmZ1bmN0aW9uIHNodXRkb3duX2Z1bmN0aW9uKCkgew0KCQ0KCQ0KCS8vIEdldCBlcnJvciBtZXNzYWdlLg0KCS8vIEVycm9yIHR5cGVzOiBodHRwOi8vcGhwLm5ldC9tYW51YWwvZW4vZXJyb3JmdW5jLmNvbnN0YW50cy5waHANCgkkZSA9IGVycm9yX2dldF9sYXN0KCk7DQoJaWYgKCAkZSA9PT0gTlVMTCApIHsgLy8gTm8gZXJyb3Igb2YgYW55IGtpbmQuDQoJCXJldHVybjsNCgl9IGVsc2UgeyAvLyBTb21lIHR5cGUgb2YgZXJyb3IuDQoJCWlmICggIWlzX2FycmF5KCAkZSApIHx8ICggJGVbJ3R5cGUnXSAhPSBFX0VSUk9SICkgJiYgKCAkZVsndHlwZSddICE9IEVfVVNFUl9FUlJPUiApICkgeyAvLyBSZXR1cm4gaWYgbm90IGEgZmF0YWwgZXJyb3IuDQoJCQkvL2VjaG8gJzwhLS0gJyAuIHByaW50X3IoICRlLCB0cnVlICkgLiAnIC0tPicgLiAiXG4iOw0KCQkJcmV0dXJuOw0KCQl9DQoJfQ0KCQ0KCQ0KCS8vIENhbGN1bGF0ZSBsb2cgZGlyZWN0b3J5Lg0KCSRsb2dfZGlyZWN0b3J5ID0gYmFja3VwYnVkZHlfY29yZTo6Z2V0TG9nRGlyZWN0b3J5KCk7IC8vIEFsc28gaGFuZGxlIHdoZW4gaW4gaW1wb3J0YnVkZHkuDQoJJG1haW5fZmlsZSA9ICRsb2dfZGlyZWN0b3J5IC4gJ2xvZy0nIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydsb2dfc2VyaWFsJ10gLiAnLnR4dCc7DQoJDQoJDQoJLy8gRGV0ZXJtaW5lIGlmIHdyaXRpbmcgdG8gYSBzZXJpYWwgbG9nLg0KCWlmICggcGJfYmFja3VwYnVkZHk6OiRfc3RhdHVzX3NlcmlhbCAhPSAnJyApIHsNCgkJJHNlcmlhbCA9IHBiX2JhY2t1cGJ1ZGR5OjokX3N0YXR1c19zZXJpYWw7DQoJCSRzZXJpYWxfZmlsZSA9ICRsb2dfZGlyZWN0b3J5IC4gJ3N0YXR1cy0nIC4gJHNlcmlhbCAuICdfJyAuIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snbG9nX3NlcmlhbCddIC4gJy50eHQnOw0KCQkkd3JpdGVfc2VyaWFsID0gdHJ1ZTsNCgl9IGVsc2Ugew0KCQkkd3JpdGVfc2VyaWFsID0gZmFsc2U7DQoJfQ0KCQ0KCQ0KCS8vIEZvcm1hdCBlcnJvciBtZXNzYWdlLg0KCSRlX3N0cmluZyA9ICctLS0tLSBGQVRBTCBFUlJPUiAtLS0tLSBBIGZhdGFsIFBIUCBlcnJvciB3YXMgZW5jb3VudGVyZWQ6ICc7DQoJZm9yZWFjaCggKGFycmF5KSRlIGFzICRlX2xpbmVfdGl0bGUgPT4gJGVfbGluZSApIHsNCgkJJGVfc3RyaW5nIC49ICRlX2xpbmVfdGl0bGUgLiAnID0+ICcgLiAkZV9saW5lIC4gIjsgIjsNCgl9DQoJJGVfc3RyaW5nID0gcnRyaW0oICRlX3N0cmluZywgJzsgJyApIC4gJy4nOw0KCQ0KCS8vIFdyaXRlIHRvIGxvZy4NCglAZmlsZV9wdXRfY29udGVudHMoICRtYWluX2ZpbGUsICRlX3N0cmluZywgRklMRV9BUFBFTkQgKTsNCgkNCgkvLyBJTVBPUlRCVUREWQ0KCSRzdGF0dXMgPSBwYl9iYWNrdXBidWRkeTo6JGZvcm1hdC0+ZGF0ZSggdGltZSgpICkgLiAiXHQiIC4NCgkJCQlzcHJpbnRmKCAiJTAxLjJmIiwgcm91bmQoIG1pY3JvdGltZSggdHJ1ZSApIC0gcGJfYmFja3VwYnVkZHk6OiRzdGFydF90aW1lLCAyICkgKSAuICJcdCIgLg0KCQkJCXNwcmludGYoICIlMDEuMmYiLCByb3VuZCggbWVtb3J5X2dldF9wZWFrX3VzYWdlKCkgLyAxMDQ4NTc2LCAyICkgKSAuICJcdCIgLg0KCQkJCSdlcnJvcicgLiAiXHRcdCIgLg0KCQkJCXN0cl9yZXBsYWNlKCBjaHIoOSksICcgICAnLCAkZV9zdHJpbmcgKQ0KCQkJOw0KCSRzdGF0dXMgPSBzdHJfcmVwbGFjZSggJ1xcJywgJy8nLCAkc3RhdHVzICk7DQoJZWNobyAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPnBiX3N0YXR1c19hcHBlbmQoIicgLiBzdHJfcmVwbGFjZSggJyInLCAnJnF1b3Q7JywgJHN0YXR1cyApIC4gJyIpOzwvc2NyaXB0Pic7DQoJDQp9IC8vIEVuZCBzaHV0ZG93bl9mdW5jdGlvbi4NCg0KDQovLyBIYW5kbGUgQUpBWC4NCiRhamF4ID0gJyc7DQppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ2FqYXgnICkgIT0gJycgKSB7DQoJJGFqYXggPSBwYl9iYWNrdXBidWRkeTo6X1BPU1QoICdhamF4JyApOw0KfSBlbHNlaWYgKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2FqYXgnICkgIT0gJycgKSB7DQoJJGFqYXggPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ2FqYXgnICk7DQp9DQppZiAoICRhamF4ICE9ICcnICkgeyAvLyBBSkFYDQoJaWYgKCAkYWpheCAhPSAnaGFzaF9mb3Jnb3RwYXNzJyApIHsNCgkJQXV0aDo6cmVxdWlyZV9hdXRoZW50aWNhdGlvbigpOyAvLyBEaWUgaWYgbm90IGxvZ2dlZCBpbi4NCgl9DQoJDQoJJHBhZ2UgPSBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NvbnRyb2xsZXJzL2FqYXgvJyAuICRhamF4IC4gJy5waHAnOw0KCWlmICggZmlsZV9leGlzdHMoICRwYWdlICkgKSB7DQoJCXJlcXVpcmVfb25jZSggJHBhZ2UgKTsNCgl9IGVsc2Ugew0KCQllY2hvICd7RXJyb3I6IEludmFsaWQgQUpBWCBhY3Rpb24gYCcgLiBodG1sZW50aXRpZXMoICRhamF4ICkgLiAnYCBGaWxlIG5vdCBmb3VuZDogYCcgLiAkcGFnZSAuICdgLn0nOw0KCX0NCglyZXR1cm47DQoJDQp9DQoNCg0KLy8gRGV0ZXJtaW5lIHBhZ2UgdG8gbG9hZC4NCmlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdwYWdlJyApICE9ICcnICkgeyAvLyBOYW1lZCBwYWdlLg0KCQ0KCUF1dGg6OnJlcXVpcmVfYXV0aGVudGljYXRpb24oKTsgLy8gRGllIGlmIG5vdCBsb2dnZWQgaW4uDQoJDQoJJHBhZ2VTbHVnID0gc3RyX3JlcGxhY2UoIGFycmF5KCAnXFwnLCAnLycgKSwgJycsIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAncGFnZScgKSApOw0KCWlmICggISBjdHlwZV9hbG51bSggc3RyX3JlcGxhY2UoIGFycmF5KCAnLScsICdfJyApLCAnJywgJHBhZ2VTbHVnICkgKSApIHsgLy8gRGlzYWxsb3cgbm9uLWFscGhhbnVtZXJpYyBleGNlcHQgZGFzaCwgdW5kZXJzY29yZS4NCgkJZGllKCAnRXJyb3IgIzg1NzQ3ODMzLiBQYWdlIGNvbnRhaW5zIGRpc2FsbG93ZWQgY2hhcmFjdGVycy4gT25seSBhbHBoYW51bWVyaWMsIGRhc2hlcywgYW5kIHVuZGVyc2NvcmVzIHBlcm1pdHRlZC4nICk7DQoJfSANCgkNCgkkcGFnZUZpbGUgPSBBQlNQQVRIIC4gJ2ltcG9ydGJ1ZGR5L2NvbnRyb2xsZXJzL3BhZ2VzLycgLiAkcGFnZVNsdWcgLiAnLnBocCc7DQoJaWYgKCBmaWxlX2V4aXN0cyggJHBhZ2VGaWxlICkgKSB7DQoJCWVjaG8gJzwhLS0gU3RhcnRpbmcgcGFnZSAnIC4gJHBhZ2VTbHVnIC4gJy4gLS0+JzsNCgkJcmVxdWlyZV9vbmNlKCAkcGFnZUZpbGUgKTsNCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmluaXNoZWQgcGFnZSAnIC4gJHBhZ2VTbHVnIC4gJy4nICk7DQoJfSBlbHNlIHsNCgkJZWNobyAne0Vycm9yOiBJbnZhbGlkIHBhZ2UgYCcgLiBodG1sZW50aXRpZXMoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnc3RlcCcgKSApIC4gJy5waHAnIC4gJ2AufSc7DQoJfQ0KCXJldHVybjsNCgkNCn0gZWxzZWlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApICE9ICcnICkgeyAvLyBOdW1lcmljYWwgc3RlcC4NCgkNCglpZiAoIHRydWUgIT09IEF1dGg6OmlzX2F1dGhlbnRpY2F0ZWQoKSApIHsgLy8gSWYgbm90IGxvZ2dlZCBpbiB0aGVuIHByb3ZpZGUgbG9naW4gcGFnZS4NCgkJJHN0ZXAgPSAnbG9naW4nOw0KCX0gZWxzZSB7DQoJCSRzdGVwID0gcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdzdGVwJyApOw0KCQlBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KCX0NCgkNCn0gZWxzZSB7IC8vIFVua25vd24uIERlZmF1bHQgdG8gbG9naW4uDQoJaWYgKCB0cnVlICE9PSBBdXRoOjppc19hdXRoZW50aWNhdGVkKCkgKSB7IC8vIElmIG5vdCBsb2dnZWQgaW4gdGhlbiBwcm92aWRlIGxvZ2luIHBhZ2UuDQoJCSRzdGVwID0gJ2xvZ2luJzsNCgl9IGVsc2Ugew0KCQkkc3RlcCA9ICdob21lQmFja3VwU2VsZWN0JzsNCgl9DQp9DQoNCiRzdGVwRmlsZSA9IEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvY29udHJvbGxlcnMvcGFnZXMvJyAuICRzdGVwIC4gJy5waHAnOw0KJHN0ZXAgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3N0ZXAnICk7DQpyZXF1aXJlX29uY2UoIEFCU1BBVEggLiAnaW1wb3J0YnVkZHkvdmlld3MvX2hlYWRlci5waHAnICk7DQplY2hvICc8IS0tIFN0YXJ0aW5nIHN0ZXAgZmlsZSBgJyAuIGJhc2VuYW1lKCAkc3RlcEZpbGUgKSAuICdgLiAtLT4nOw0KDQovKmlmICggJHN0ZXAgPiAwICkgeyAvLyBMb2FkIHN0ZXBzIGFmdGVyIDAgaW4gaWZyYW1lLg0KCWVjaG8gcGJfYmFja3VwYnVkZHk6OiRjbGFzc2VzWydpbXBvcnQnXS0+c3RhdHVzX2JveCggJ0ltcG9ydEJ1ZGR5IHYnIC4gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydiYl92ZXJzaW9uJ10gLiAnLi4uIFBvd2VyZWQgYnkgQmFja3VwQnVkZHkuJyApOw0KCWVjaG8gJzxpZnJhbWUgaWQ9InBiX2JhY2t1cGJ1ZGR5X21vZGFsX2lmcmFtZSIgbmFtZT0icGJfYmFja3VwYnVkZHlfbW9kYWxfaWZyYW1lIiBzcmM9IicgLiBwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSAuICdpbXBvcnRidWRkeS5waHA/YWpheD0nIC4gJHN0ZXAgLiAnIiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxODAwIiBmcmFtZWJvcmRlcj0iMCIgcGFkZGluZz0iMCIgbWFyZ2luPSIwIj5FcnJvciAjNDU4NDU5NDU3OS4gQnJvd3NlciBub3QgY29tcGF0aWJsZSB3aXRoIGlmcmFtZXMuPC9pZnJhbWU+JzsNCn0gZWxzZSB7DQoJKi8NCglpZiAoIGZpbGVfZXhpc3RzKCAkc3RlcEZpbGUgKSApIHsNCgkJcmVxdWlyZV9vbmNlKCAkc3RlcEZpbGUgKTsNCgl9IGVsc2Ugew0KCQllY2hvICd7RXJyb3I6IEludmFsaWQgc3RlcCBmaWxlIGAnIC4gaHRtbGVudGl0aWVzKCAkc3RlcCApIC4gJy5waHAnIC4gJ2AufSc7DQoJfQ0KLy99DQpwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdGaW5pc2hlZCBzdGVwLicgKTsNCnJlcXVpcmVfb25jZSggQUJTUEFUSCAuICdpbXBvcnRidWRkeS92aWV3cy9fZm9vdGVyLnBocCcgKTsNCg0KcmV0dXJuOw0KDQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/default.php,importbuddy/controllers/pages/default.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/homeBackupSelect.php,importbuddy/controllers/pages/homeBackupSelect.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/homeBackupSelect.php,importbuddy/controllers/pages/homeBackupSelect.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/index.php,importbuddy/controllers/pages/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/index.php,importbuddy/controllers/pages/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/login.php,importbuddy/controllers/pages/login.php
PHNjcmlwdD5qUXVlcnkoICcjcGFnZVRpdGxlJyApLmh0bWwoICdBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcgKTs8L3NjcmlwdD4NCjw/cGhwDQppZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfUE9TVCggJ3Bhc3N3b3JkJyApICE9ICcnICkgew0KCWdsb2JhbCAkcGJfbG9naW5fYXR0ZW1wdHM7DQoJcGJfYmFja3VwYnVkZHk6OmFsZXJ0KCAnSW52YWxpZCBwYXNzd29yZC4gUGxlYXNlIGVudGVyIHRoZSBwYXNzd29yZCB5b3UgcHJvdmlkZWQgd2l0aGluIEJhY2t1cEJ1ZGR5IFNldHRpbmdzLiBBdHRlbXB0ICMnIC4gJHBiX2xvZ2luX2F0dGVtcHRzIC4gJy4nICk7DQoJZWNobyAnPGJyPic7DQp9DQoNCmlmICggISBpc19jYWxsYWJsZSggJ2pzb25fZGVjb2RlJyApICkgew0KCSRtZXNzYWdlID0gJ0Vycm9yICM4NDM5ODQzNDogTWlzc2luZyByZXF1aXJlZCBQSFAgZnVuY3Rpb24ganNvbl9kZWNvZGUoKS4gWW91ciBQSFAgdmVyc2lvbiBpcyB0b28gb2xkIG9yIGRhbWFnZWQuIEl0IGlzIE5PVCBjb21wYXRpYmxlIHdpdGggV29yZFByZXNzIGFzIGl0IGlzLiBQbGVhc2UgY29udGFjdCB5b3VyIGhvc3QgdG8gZml4IHRoaXMuJzsNCglwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbWVzc2FnZSApOw0KCXBiX2JhY2t1cGJ1ZGR5OjphbGVydCggJG1lc3NhZ2UsIHRydWUgKTsNCn0NCj8+DQoNCjxwPkVudGVyIHlvdXIgSW1wb3J0QnVkZHkgcGFzc3dvcmQgYmVsb3cgdG8gYmVnaW4uPC9wPg0KDQo8YnI+DQoNCjxmb3JtIG1ldGhvZD0icG9zdCI+DQoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0ibG9naW4iPg0KCTxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHN0eWxlPSJ3aWR0aDogMjUwcHg7IHZlcnRpY2FsLWFsaWduOiAtMnB4OyI+DQoJPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0IiB2YWx1ZT0iQXV0aGVudGljYXRlIiBjbGFzcz0iaXQtYnV0dG9uIj4NCgk8YnV0dG9uIGhyZWY9IiNwYl9mb3Jnb3RwYXNzd29yZF9tb2RhbCIgY2xhc3M9ImJ1dHRvbiBidXR0b24tc2Vjb25kYXJ5IGxlYW5Nb2RhbCBjcmVhdGVkYl9tb2RhbF9saW5rIj5Gb3Jnb3QgUGFzc3dvcmQ/PC9idXR0b24+DQo8L2Zvcm0+DQoNCg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoJalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsNCgkJalF1ZXJ5KCcubGVhbk1vZGFsJykubGVhbk1vZGFsKA0KCQkJeyB0b3AgOiA0NSwgb3ZlcmxheSA6IDAuNCwgY2xvc2VCdXR0b246ICIubW9kYWxfY2xvc2UiIH0NCgkJKTsNCgkJDQoJCWpRdWVyeSggJyNjcmVhdGVwYXNzX2Zvcm0nICkuc3VibWl0KGZ1bmN0aW9uKCl7DQoJCQkNCgkJCWlmICggalF1ZXJ5KCAnI25ld19wYXNzJyApLnZhbCgpICE9IGpRdWVyeSh0aGlzKS5maW5kKCAnI25ld19wYXNzX2NvbmZpcm0nICkudmFsKCkgKSB7DQoJCQkJYWxlcnQoICdQYXNzd29yZCBhbmQgY29uZmlybWF0aW9uIGRvIG5vdCBtYXRjaC4nICk7DQoJCQkJcmV0dXJuIGZhbHNlOw0KCQkJfQ0KCQkJDQoJCQlpZiAoICcnID09PSBqUXVlcnkoICcjbmV3X3Bhc3MnICkudmFsKCkgKSB7DQoJCQkJYWxlcnQoICdZb3UgbXVzdCBwcm92aWRlIGEgbmV3IHBhc3N3b3JkLicgKTsNCgkJCQlyZXR1cm4gZmFsc2U7DQoJCQl9DQoJCQkNCgkJCWpRdWVyeSggJy5jcmVhdGVwYXNzX2xvYWRpbmcnICkuc2hvdygpOw0KCQkJalF1ZXJ5LnBvc3QoJ2ltcG9ydGJ1ZGR5LnBocD9hamF4PWhhc2hfZm9yZ290cGFzcycsDQoJCQl7DQoJCQkJbmV3cGFzc3dvcmQ6IGpRdWVyeSggJyNuZXdfcGFzcycgKS52YWwoKSwNCgkJCX0sIGZ1bmN0aW9uKGRhdGEpIHsNCgkJCQkJDQoJCQkJCWRhdGEgPSBqUXVlcnkudHJpbSggZGF0YSApOw0KCQkJCQlqUXVlcnkoICcuY3JlYXRlcGFzc19sb2FkaW5nJyApLmhpZGUoKTsNCgkJCQkJDQoJCQkJCWpRdWVyeSggJy5mb3Jnb3RwYXNzX2Zvcm1fd3JhcCcgKS5oaWRlKCk7DQoJCQkJCWpRdWVyeSggJy5mb3Jnb3RwYXNzX2ZpbmlzaF9oYXNoJykudmFsKCBkYXRhICk7DQoJCQkJCWpRdWVyeSggJy5mb3Jnb3RwYXNzX2ZpbmlzaF93cmFwJyApLnNob3coKTsNCgkJCQl9DQoJCQkpOw0KCQkJDQoJCQlyZXR1cm4gZmFsc2U7DQoJCQkNCgkJfSk7DQoJfSk7DQo8L3NjcmlwdD4NCg0KDQoNCjxkaXYgaWQ9InBiX2ZvcmdvdHBhc3N3b3JkX21vZGFsIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KCTxkaXYgY2xhc3M9Im1vZGFsIj4NCgkJPGRpdiBjbGFzcz0ibW9kYWxfaGVhZGVyIj4NCgkJCTxhIGNsYXNzPSJtb2RhbF9jbG9zZSI+JnRpbWVzOzwvYT4NCgkJCTxoMj5QYXNzd29yZCBSZXNldDwvaDI+DQoJCQlBZnRlciBzdWJtaXR0aW5nIHlvdSB3aWxsIG5lZWQgdG8gZWRpdCB5b3VyIGltcG9ydGJ1ZGR5LnBocCBmaWxlIG9uIHRoaXMgc2VydmVyIGFuZCBlZGl0IGEgbGluZSBvZiBjb2RlIHdpdGggYSBoYXNoZWQgdmVyc2lvbiBvZiB0aGlzIHBhc3N3b3JkLg0KCQk8L2Rpdj4NCgkJPGRpdiBjbGFzcz0ibW9kYWxfY29udGVudCI+DQoJCQkNCgkJCQ0KCQkJPGRpdiBjbGFzcz0iZm9yZ290cGFzc19mb3JtX3dyYXAiPg0KCQkJCQ0KCQkJCQ0KCQkJCTxjZW50ZXI+DQoJCQkJCTxmb3JtIGlkPSJjcmVhdGVwYXNzX2Zvcm0iPg0KCQkJCQkJPHRhYmxlPg0KCQkJCQkJCTx0cj4NCgkJCQkJCQkJPHRkPk5ldyBQYXNzd29yZDwvdGQ+PHRkPjxpbnB1dCB0eXBlPSJwYXNzd29yZCIgbmFtZT0ibmV3cGFzc3dvcmQiIGlkPSJuZXdfcGFzcyI+PC90ZD4NCgkJCQkJCQk8L3RyPg0KCQkJCQkJCTx0cj4NCgkJCQkJCQkJPHRkPkNvbmZpcm0gUGFzc3dvcmQ8L3RkPjx0ZD48aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9Im5ld3Bhc3N3b3JkX2NvbmZpcm0iIGlkPSJuZXdfcGFzc19jb25maXJtIj48L3RkPg0KCQkJCQkJCTwvdHI+DQoJCQkJCQk8L3RhYmxlPg0KCQkJCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0IiB2YWx1ZT0iU3VibWl0IiBjbGFzcz0iYnV0dG9uLXByaW1hcnkiPg0KCQkJCQk8L2Zvcm0+DQoJCQkJCTxzcGFuIGNsYXNzPSJjcmVhdGVwYXNzX2xvYWRpbmciIHN0eWxlPSJkaXNwbGF5OiBub25lOyBtYXJnaW4tbGVmdDogMTBweDsiPjxpbWcgc3JjPSI8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fdXJsKCk7ID8+L2ltYWdlcy9sb2FkaW5nLmdpZiIgYWx0PSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHRpdGxlPSInIC4gX18oJ0xvYWRpbmcuLi4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICciIHdpZHRoPSIxNiIgaGVpZ2h0PSIxNiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtM3B4OyI+PC9zcGFuPg0KCQkJCTwvY2VudGVyPg0KCQkJCQ0KCQkJPC9kaXY+DQoJCQkNCgkJCQ0KCQkJPGRpdiBjbGFzcz0iZm9yZ290cGFzc19maW5pc2hfd3JhcCIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCgkJCQlUbyBlbmFibGUgdGhpcyBuZXcgcGFzc3dvcmQgZm9yIGFjY2Vzc2luZyBpbXBvcnRidWRkeS5waHAgb3BlbiBpbXBvcnRidWRkeS5waHAgaW4gYSB0ZXh0IGVkaXRvciBhbmQgZmluZCBsaW5lIDEzIHRoYXQgbG9va3MgbGlrZSB0aGUgZm9sbG93aW5nLCByZXBsYWNpbmcgdGhlIFgncyBpbiB0aGlzIGxpbmUgd2l0aCB0aGUgcGFzc3dvcmQgaGFzaCBjb2RlIGJlbG93LiBNYWtlIHN1cmUgeW91IHJlLXNhdmUgdGhpcyBlZGl0ZWQgdmVyc2lvbiB0byB0aGUgc2VydmVyIHRoZW4gcmVmcmVzaCB0aGlzIHBhZ2UgdG8gbG9nIGluLjxicj48YnI+DQoJCQkJDQoJCQkJPGk+ZGVmaW5lKCAnUEJfUEFTU1dPUkQnLCAnWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFgnICk7PC9pPjxicj48YnI+DQoJCQkJDQoJCQkJPGI+TmV3IHBhc3N3b3JkIGhhc2ggY29kZTo8L2I+PGJyPg0KCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9yZ290cGFzc19maW5pc2hfaGFzaCIgdmFsdWU9IiIgcmVhZG9ubHk9InJlYWRvbmx5IiBzaXplPSI0MCI+DQoJCQk8L2Rpdj4NCgkJCQ0KCQkJDQoJCTwvZGl2Pg0KCTwvZGl2Pg0KPC9kaXY+DQo=
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/login.php,importbuddy/controllers/pages/login.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
PD9waHANCmlmICggIWRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSApIHsgLy8gTk9UIElOIElNUE9SVEJVRERZOg0KCXdwX2VucXVldWVfc2NyaXB0KCAndGhpY2tib3gnICk7DQoJd3BfcHJpbnRfc2NyaXB0cyggJ3RoaWNrYm94JyApOw0KCXdwX3ByaW50X3N0eWxlcyggJ3RoaWNrYm94JyApOw0KCT8+DQoJPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCgkjYmFja3VwYnVkZHktbWV0YS1saW5rLXdyYXAgYS5zaG93LXNldHRpbmdzIHsNCgkJZmxvYXQ6IHJpZ2h0Ow0KCQltYXJnaW46IDAgMCAwIDZweDsNCgl9DQoJI3NjcmVlbi1tZXRhLWxpbmtzICNiYWNrdXBidWRkeS1tZXRhLWxpbmstd3JhcCBhIHsNCgkJYmFja2dyb3VuZDogbm9uZTsNCgl9DQoJI3NjcmVlbi1tZXRhLWxpbmtzICNiYWNrdXBidWRkeS1tZXRhLWxpbmstd3JhcCBhOmFmdGVyIHsNCgkJY29udGVudDogJyc7DQoJCW1hcmdpbi1yaWdodDogNXB4Ow0KCX0NCgk8L3N0eWxlPg0KDQoJPD9waHANCg0KCXBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2FkbWluLmpzJyApOw0KCQ0KCQ0KCQ0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnRpdGxlKCBfXyggJ1NlcnZlciBUb29scycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7DQoJYmFja3VwYnVkZHlfY29yZTo6dmVyc2lvbnNfY29uZmlybSgpOw0KCQ0KCSRkZWZhdWx0X3RhYiA9IDA7DQoJaWYgKCBpc19udW1lcmljKCBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3RhYicgKSApICkgew0KCQkkZGVmYXVsdF90YWIgPSBwYl9iYWNrdXBidWRkeTo6X0dFVCggJ3RhYicgKTsNCgl9DQoJDQoJZWNobyAnJzsNCglwYl9iYWNrdXBidWRkeTo6JHVpLT5zdGFydF90YWJzKA0KCQknZ2V0dGluZ19zdGFydGVkJywNCgkJYXJyYXkoDQoJCQlhcnJheSgNCgkJCQkndGl0bGUnCQk9PgkJX18oICdTZXJ2ZXInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQknc2x1ZycJCT0+CQknc2VydmVyJywNCgkJCSksDQoJCQlhcnJheSgNCgkJCQkndGl0bGUnCQk9PgkJX18oICdEYXRhYmFzZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLA0KCQkJCSdzbHVnJwkJPT4JCSdkYXRhYmFzZScsDQoJCQkpLA0KCQkJYXJyYXkoDQoJCQkJJ3RpdGxlJwkJPT4JCV9fKCAnU2l0ZSBTaXplIE1hcHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQknc2x1ZycJCT0+CQknZmlsZXMnLA0KCQkJKSwNCgkJCWFycmF5KA0KCQkJCSd0aXRsZScJCT0+CQlfXyggJ1dvcmRQcmVzcyBTY2hlZHVsZXMgKENyb24pJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJJ3NsdWcnCQk9PgkJJ2Nyb24nLA0KCQkJKSwNCgkJKSwNCgkJJ3dpZHRoOiAxMDAlOycsDQoJCXRydWUsDQoJCSRkZWZhdWx0X3RhYg0KCSk7DQoJDQoJDQoJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnc2VydmVyJyApOw0KCQkNCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vc2VydmVyLnBocCcgKTsNCgkJDQoJCQ0KCQlyZXF1aXJlX29uY2UoICdzZXJ2ZXJfaW5mby9wZXJtaXNzaW9ucy5waHAnICk7DQoJCQ0KCQkNCgkJJHdwX3VwbG9hZF9kaXIgPSB3cF91cGxvYWRfZGlyKCk7DQoJCSR3cF9zZXR0aW5ncyA9IGFycmF5KCk7DQoJCQ0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsncGF0aCddICkgKSB7DQoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnVXBsb2FkIEZpbGUgUGF0aCcsICR3cF91cGxvYWRfZGlyWydwYXRoJ10sICd3cF91cGxvYWRfZGlyKCknICk7DQoJCX0NCgkJaWYgKCBpc3NldCggJHdwX3VwbG9hZF9kaXJbJ3VybCddICkgKSB7DQoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnVXBsb2FkIFVSTCcsICR3cF91cGxvYWRfZGlyWyd1cmwnXSwgJ3dwX3VwbG9hZF9kaXIoKScgKTsNCgkJfQ0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2Rpclsnc3ViZGlyJ10gKSApIHsNCgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgU3ViZGlyZWN0b3J5JywgJHdwX3VwbG9hZF9kaXJbJ3N1YmRpciddLCAnd3BfdXBsb2FkX2RpcigpJyk7DQoJCX0NCgkJaWYgKCBpc3NldCggJHdwX3VwbG9hZF9kaXJbJ2Jhc2V1cmwnXSApICkgew0KCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBCYXNlIFVSTCcsICR3cF91cGxvYWRfZGlyWydiYXNldXJsJ10sICd3cF91cGxvYWRfZGlyKCknICk7DQoJCX0NCgkJaWYgKCBpc3NldCggJHdwX3VwbG9hZF9kaXJbJ2Jhc2VkaXInXSApICkgew0KCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBCYXNlIERpcmVjdG9yeScsICR3cF91cGxvYWRfZGlyWydiYXNlZGlyJ10sICd3cF91cGxvYWRfZGlyKCknICk7DQoJCX0NCgkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1NpdGUgVVJMJywgc2l0ZV91cmwoKSwgJ3NpdGVfdXJsKCknICk7DQoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdIb21lIFVSTCcsIGhvbWVfdXJsKCksICdob21lX3VybCgpJyApOw0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnV29yZFByZXNzIFJvb3QgUGF0aCcsIEFCU1BBVEgsICdBQlNQQVRIJyApOw0KCQkNCgkJLy8gTXVsdGlzaXRlIGV4dHJhczoNCgkJJHdwX3NldHRpbmdzX211bHRpc2l0ZSA9IGFycmF5KCk7DQoJCWlmICggaXNfbXVsdGlzaXRlKCkgKSB7DQoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnTmV0d29yayBTaXRlIFVSTCcsIG5ldHdvcmtfc2l0ZV91cmwoKSwgJ25ldHdvcmtfc2l0ZV91cmwoKScgKTsNCgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdOZXR3b3JrIEhvbWUgVVJMJywgbmV0d29ya19ob21lX3VybCgpLCAnbmV0d29ya19ob21lX3VybCgpJyApOw0KCQl9DQoJCQ0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgbG9jYWwgc3RvcmFnZScsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldEJhY2t1cERpcmVjdG9yeSgpLCAnQmFja3VwQnVkZHkgU2V0dGluZ3MnICk7DQoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdCYWNrdXBCdWRkeSB0ZW1wb3JhcnkgZmlsZXMnLCBiYWNrdXBidWRkeV9jb3JlOjpnZXRUZW1wRGlyZWN0b3J5KCksICdVcGxvYWQgQmFzZSArIEJhY2t1cEJ1ZGR5JyApOw0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgbG9ncycsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldExvZ0RpcmVjdG9yeSgpLCAnVXBsb2FkIEJhc2UgKyBCYWNrdXBCdWRkeScgKTsNCgkJDQoJCS8vIERpc3BsYXkgV1Agc2V0dGluZ3MuLg0KCQlwYl9iYWNrdXBidWRkeTo6JHVpLT5saXN0X3RhYmxlKA0KCQkJJHdwX3NldHRpbmdzLA0KCQkJYXJyYXkoDQoJCQkJJ2FjdGlvbicJCQkJCT0+CXBiX2JhY2t1cGJ1ZGR5OjpwYWdlX3VybCgpLA0KCQkJCSdjb2x1bW5zJwkJCQkJPT4JYXJyYXkoDQoJCQkJCQkJCQkJCQkJX18oICdVUkxzICYgUGF0aHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQkJCQkJCQkJCQlfXyggJ1ZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJCQkJCQkJCQkJX18oICdPYnRhaW5lZCB2aWEnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQkJCQkJCQkJCSksDQoJCQkJJ2NzcycJCQkJCQk9PgkJJ3dpZHRoOiAxMDAlOycsDQoJCQkpDQoJCSk7DQoJCQ0KCQkNCglwYl9iYWNrdXBidWRkeTo6JHVpLT5lbmRfdGFiKCk7DQoJDQoJDQoJDQoJLy8gVGhpcyBwYWdlIGNhbiB0YWtlIGEgYml0IHRvIHJ1bi4NCgkvLyBSdW5zIEFGVEVSIHNlcnZlciBpbmZvcm1hdGlvbiBpcyBkaXNwbGF5ZWQgc28gd2UgY2FuIHZpZXcgdGhlIGRlZmF1bHQgbGltaXRzIGZvciB0aGUgc2VydmVyLg0KCXBiX2JhY2t1cGJ1ZGR5OjpzZXRfZ3JlZWR5X3NjcmlwdF9saW1pdHMoKTsNCgkNCgkNCgkNCglwYl9iYWNrdXBidWRkeTo6JHVpLT5zdGFydF90YWIoICdkYXRhYmFzZScgKTsNCgkJDQoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL2RhdGFiYXNlLnBocCcgKTsNCgkJZWNobyAnPGJyPjxicj48YSBuYW1lPSJkYXRhYmFzZV9yZXBsYWNlIj48L2E+JzsNCgkJZWNobyAnPGRpdiBjbGFzcz0icGJfaHRpdGxlIj4nIC4gJ0FkdmFuY2VkOiAnIC4gX18oICdEYXRhYmFzZSBNYXNzIFRleHQgUmVwbGFjZW1lbnQnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2Rpdj48YnI+JzsNCgkJcGJfYmFja3VwYnVkZHk6OmxvYWRfdmlldyggJ19zZXJ2ZXJfdG9vbHMtZGF0YWJhc2VfcmVwbGFjZScgKTsNCgkJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOw0KCQ0KCQ0KCQ0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X3RhYiggJ2ZpbGVzJyApOw0KCQkNCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vc2l0ZV9zaXplLnBocCcgKTsNCgkJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOw0KCQ0KCQ0KCQ0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPnN0YXJ0X3RhYiggJ2Nyb24nICk7DQoJCQ0KCQlyZXF1aXJlX29uY2UoICdzZXJ2ZXJfaW5mby9jcm9uLnBocCcgKTsNCgkJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOw0KCQ0KCQ0KCWVjaG8gJzxiciBzdHlsZT0iY2xlYXI6IGJvdGg7Ij48YnI+PGJyPic7DQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYnMoKTsNCgkNCgkNCgkNCgkvLyBIYW5kbGVzIHRoaWNrYm94IGF1dG8tcmVzaXppbmcuIEtlZXAgYXQgYm90dG9tIG9mIHBhZ2UgdG8gYXZvaWQgaXNzdWVzLg0KCWlmICggIXdwX3NjcmlwdF9pcyggJ21lZGlhLXVwbG9hZCcgKSApIHsNCgkJd3BfZW5xdWV1ZV9zY3JpcHQoICdtZWRpYS11cGxvYWQnICk7DQoJCXdwX3ByaW50X3NjcmlwdHMoICdtZWRpYS11cGxvYWQnICk7DQoJfQ0KCQ0KfSBlbHNlIHsgLy8gSU5TSURFIElNUE9SVEJVRERZOg0KCWlmICggcGJfYmFja3VwYnVkZHk6Ol9HRVQoICdza2lwX3NlcnZlcmluZm8nICkgPT0gJycgKSB7IC8vIEdpdmUgYSB3b3JrYXJvdW5kIHRvIHNraXAgdGhpcy4NCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vc2VydmVyLnBocCcgKTsNCgl9IGVsc2Ugew0KCQllY2hvICd7U2tpcHBpbmcgU2VydmVyIEluZm8uIHNlY3Rpb24gYmFzZWQgb24gcXVlcnlzdHJpbmcufSc7DQoJfQ0KfQ0K
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/controllers/pages/serverinfo.php,importbuddy/controllers/pages/serverinfo.php
PD9waHANCmlmICggISBkZWZpbmVkKCAnUEJfSU1QT1JUQlVERFknICkgfHwgKCB0cnVlICE9PSBQQl9JTVBPUlRCVUREWSApICkgew0KCWRpZSggJzxodG1sPjwvaHRtbD4nICk7DQp9DQpBdXRoOjpyZXF1aXJlX2F1dGhlbnRpY2F0aW9uKCk7IC8vIERpZSBpZiBub3QgbG9nZ2VkIGluLg0KDQpyZXF1aXJlX29uY2UoIEFCU1BBVEggLidpbXBvcnRidWRkeS92aWV3cy9faGVhZGVyLnBocCcgKTsNCj8+DQo8c2NyaXB0PmpRdWVyeSggJyNwYWdlVGl0bGUnICkuaHRtbCggJ1NlcnZlciBJbmZvcm1hdGlvbicgKTs8L3NjcmlwdD4NCg0KPGRpdiBjbGFzcz0id3JhcCI+DQoJPD9waHANCglnbG9iYWwgJGRldGVjdGVkX21heF9leGVjdXRpb25fdGltZTsNCglyZXF1aXJlX29uY2UoICdzZXJ2ZXJfdG9vbHMucGhwJyApOw0KCT8+DQo8L2Rpdj4NCg0KPD9waHANCnJlcXVpcmVfb25jZSggQUJTUEFUSCAuJ2ltcG9ydGJ1ZGR5L3ZpZXdzL19mb290ZXIucGhwJyApOw==
###PACKDATA,FILE_END,/_importbuddy/importbuddy/controllers/pages/serverinfo.php,importbuddy/controllers/pages/serverinfo.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/lib/pclzip/index.php,importbuddy/lib/pclzip/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/_importbuddy/importbuddy/lib/pclzip/index.php,importbuddy/lib/pclzip/index.php
###PACKDATA,FILE_START,/_importbuddy/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php

###PACKDATA,FILE_END,/_importbuddy/importbuddy/lib/pclzip/pclzip.php,importbuddy/lib/pclzip/pclzip.php
###PACKDATA,FILE_START,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php

###PACKDATA,FILE_END,/classes/_migrate_database.php,importbuddy/classes/_migrate_database.php
###PACKDATA,FILE_START,/classes/core.php,importbuddy/classes/core.php

###PACKDATA,FILE_END,/classes/core.php,importbuddy/classes/core.php
###PACKDATA,FILE_START,/classes/import.php,importbuddy/classes/import.php
PD9waHANCmNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2ltcG9ydCB7DQoJDQoJDQoJDQoJDQoJDQoJDQoJDQoJLyoqDQoJICoJd2lwZVByZWZpeCgpDQoJICoNCgkgKglDbGVhciBvdXQgdGFibGVzIG1hdGNoaW5nIHN1cHBsaWVkIHByZWZpeC4NCgkgKg0KCSAqCUByZXR1cm4JCQlib29sZWFuCQlDdXJyZW50bHkgYWx3YXlzIHRydWUuDQoJICovDQoJZnVuY3Rpb24gd2lwZVByZWZpeCggJHByZWZpeCwgJGNvbmZpcm0gPSBmYWxzZSApIHsNCgkJaWYgKCAkY29uZmlybSAhPT0gdHJ1ZSApIHsNCgkJCWRpZSggJ0Vycm9yICM1NDY2NTY2YjogUGFyYW1ldGVyIDIgdG8gd2lwZVByZWZpeCgpIG11c3QgYmUgYm9vbGVhbiB0cnVlIHRvIHByb2NlZWQuJyApOw0KCQl9DQoJCQ0KCQlpZiAoICRwcmVmaXggPT0gJycgKSB7DQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnd2FybmluZycsICdObyBkYXRhYmFzZSBwcmVmaXggc3BlY2lmaWVkIHRvIHdpcGUuJyApOw0KCQkJcmV0dXJuIGZhbHNlOw0KCQl9DQoJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgJ0JlZ2lubmluZyB3aXBlIG9mIGRhdGFiYXNlIHRhYmxlcyBtYXRjaGluZyBwcmVmaXggYCcgLiAkcHJlZml4IC4gJ2AuLi4nICk7DQoJCQ0KCQkvLyBDb25uZWN0IHRvIGRhdGFiYXNlLg0KCQkvLyR0aGlzLT5jb25uZWN0X2RhdGFiYXNlKCk7DQoJCQ0KCQlnbG9iYWwgJHdwZGI7DQoJCSRyb3dzID0gJHdwZGItPmdldF9yZXN1bHRzKCAiU0VMRUNUIHRhYmxlX25hbWUgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIFdIRVJFIHRhYmxlX25hbWUgTElLRSAnIiAuIGJhY2t1cGJ1ZGR5X2NvcmU6OmRiRXNjYXBlKCBzdHJfcmVwbGFjZSggJ18nLCAnXF8nLCAkcHJlZml4ICkgKSAuICIlJyBBTkQgdGFibGVfc2NoZW1hID0gREFUQUJBU0UoKSIsIEFSUkFZX0EgKTsNCgkJJHRhYmxlX3dpcGVfY291bnQgPSBjb3VudCggJHJvd3MgKTsNCgkJZm9yZWFjaCggJHJvd3MgYXMgJHJvdyApIHsNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0Ryb3BwaW5nIHRhYmxlIGAnIC4gJHJvd1sndGFibGVfbmFtZSddIC4gJ2AuJyApOw0KCQkJJHdwZGItPnF1ZXJ5KCAnRFJPUCBUQUJMRSBgJyAuICRyb3dbJ3RhYmxlX25hbWUnXSAuICdgJyApOw0KCQl9DQoJCXVuc2V0KCAkcm93cyApOw0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdXaXBlZCBkYXRhYmFzZSBvZiAnIC4gJHRhYmxlX3dpcGVfY291bnQgLiAnIHRhYmxlcy4nICk7DQoJCQ0KCQlyZXR1cm4gdHJ1ZTsNCgl9IC8vIEVuZCB3aXBlUHJlZml4KCkuDQoJDQoJDQoJDQoJLyoqDQoJICoJd2lwZURhdGFiYXNlKCkNCgkgKg0KCSAqCUNsZWFyIG91dCB0aGUgZXhpc3RpbmcgZGF0YWJhc2UgdG8gcHJlcGFyZSBmb3IgaW1wb3J0aW5nIG5ldyBkYXRhLg0KCSAqDQoJICoJQHJldHVybgkJCWJvb2xlYW4JCUN1cnJlbnRseSBhbHdheXMgdHJ1ZS4NCgkgKi8NCglmdW5jdGlvbiB3aXBlRGF0YWJhc2UoICRjb25maXJtID0gZmFsc2UgKSB7DQoJCWlmICggJGNvbmZpcm0gIT09IHRydWUgKSB7DQoJCQlkaWUoICdFcnJvciAjNTQ2NjU2NmE6IFBhcmFtZXRlciAxIHRvIHdpcGVEZGF0YWJhc2UoKSBtdXN0IGJlIGJvb2xlYW4gdHJ1ZSB0byBwcm9jZWVkLicgKTsNCgkJfQ0KCQkNCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCAnQmVnaW5uaW5nIHdpcGUgb2YgQUxMIGRhdGFiYXNlIHRhYmxlcy4uLicgKTsNCgkJDQoJCS8vIENvbm5lY3QgdG8gZGF0YWJhc2UuDQoJCS8vJHRoaXMtPmNvbm5lY3RfZGF0YWJhc2UoKTsNCgkJDQoJCWdsb2JhbCAkd3BkYjsNCgkJJHJvd3MgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoICJTRUxFQ1QgdGFibGVfbmFtZSBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgV0hFUkUgdGFibGVfc2NoZW1hID0gREFUQUJBU0UoKSIsIEFSUkFZX0EgKTsNCgkJJHRhYmxlX3dpcGVfY291bnQgPSBjb3VudCggJHJvd3MgKTsNCgkJZm9yZWFjaCggJHJvd3MgYXMgJHJvdyApIHsNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0Ryb3BwaW5nIHRhYmxlIGAnIC4gJHJvd1sndGFibGVfbmFtZSddIC4gJ2AuJyApOw0KCQkJJHdwZGItPnF1ZXJ5KCAnRFJPUCBUQUJMRSBgJyAuICRyb3dbJ3RhYmxlX25hbWUnXSAuICdgJyApOw0KCQl9DQoJCXVuc2V0KCAkcm93cyApOw0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdXaXBlZCBkYXRhYmFzZSBvZiAnIC4gJHRhYmxlX3dpcGVfY291bnQgLiAnIHRhYmxlcy4nICk7DQoJCQ0KCQlyZXR1cm4gdHJ1ZTsNCgl9IC8vIEVuZCB3aXBlRGF0YWJhc2UoKS4NCgkNCgkNCgkNCgkvKglwcmVnX2VzY2FwZV9iYWNrKCkNCgkgKgkNCgkgKglFc2NhcGUgYmFja3JlZmVyZW5jZXMgZnJvbSBzdHJpbmcgZm9yIHVzZSB3aXRoIHJlZ2V4LiBVc2VkIGJ5IG1pZ3JhdGVfd3BfY29uZmlnKCkuDQoJICoJQHNlZSBtaWdyYXRlX3dwX2NvbmZpZygpDQoJICoJDQoJICoJQHBhcmFtCQlzdHJpbmcJCSRzdHJpbmcJCVN0cmluZyB0byBlc2NhcGUuDQoJICoJQHJldHVybgkJc3RyaW5nCQkJCQlFc2NhcGVkIHN0cmluZy4NCgkgKi8NCglmdW5jdGlvbiBwcmVnX2VzY2FwZV9iYWNrKCRzdHJpbmcpIHsNCgkJLy8gUmVwbGFjZSAkIHdpdGggXCQgYW5kIFwgd2l0aCBcXA0KCQkkc3RyaW5nID0gcHJlZ19yZXBsYWNlKCcjKD88IVxcXFwpKFxcJHxcXFxcKSMnLCAnXFxcXCQxJywgJHN0cmluZyk7DQoJCXJldHVybiAkc3RyaW5nOw0KCX0gLy8gRW5kIHByZWdfZXNjYXBlX2JhY2soKS4NCgkNCgkNCgkNCgkNCgkNCgkNCgkNCgkvLyBUT0RPOiBzd2l0Y2ggdG8gdXNpbmcgcGJfYmFja3VwYnVkZHk6OnN0YXR1c19ib3goKSBpbnN0ZWFkLg0KCS8qKg0KCSAqCXN0YXR1c19ib3goKQ0KCSAqDQoJICoJRGlzcGxheXMgYSB0ZXh0YXJlYSBmb3IgcGxhY2luZyBzdGF0dXMgdGV4dCBpbnRvLg0KCSAqDQoJICoJQHBhcmFtCQkJJGRlZmF1bHRfdGV4dAlzdHJpbmcJCUZpcnN0IGxpbmUgb2YgdGV4dCB0byBkaXNwbGF5Lg0KCSAqCUBwYXJhbQkJCWJvb2xlYW4JCQkkaGlkZGVuCQlXaGV0aGVyIG9yIG5vdCB0byBhcHBseSBkaXNwbGF5OiBub25lOyBDU1MuDQoJICoJQHJldHVybgkJCQkJCQlzdHJpbmcJCUhUTUwgZm9yIHRleHRhcmVhLg0KCSAqLw0KCWZ1bmN0aW9uIHN0YXR1c19ib3goICRkZWZhdWx0X3RleHQgPSAnJywgJGhpZGRlbiA9IGZhbHNlICkgew0KCQlkZWZpbmUoICdQQl9TVEFUVVMnLCB0cnVlICk7IC8vIFRlbGxzIGZyYW1ld29yayBzdGF0dXMoKSBmdW5jdGlvbiB0byBvdXRwdXQgZnV0dXJlIGxvZ2dpbmcgaW5mbyBpbnRvIHN0YXR1cyBib3ggdmlhIGphdmFzY3JpcHQuDQoJCSRyZXR1cm4gPSAnPGRpdiBpZD0icGJfYmFja3VwYnVkZHlfc3RhdHVzX3dyYXAiIHN0eWxlPSJwYWRkaW5nOiAwOyI+PHByZSByZWFkb25seT0icmVhZG9ubHkiIGlkPSJiYWNrdXBidWRkeV9tZXNzYWdlcyIgd3JhcD0ib2ZmIic7DQoJCWlmICggJGhpZGRlbiA9PT0gdHJ1ZSApIHsNCgkJCSRyZXR1cm4gLj0gJyBzdHlsZT0iZGlzcGxheTogbm9uZTsgIic7DQoJCX0NCgkJJHJldHVybiAuPSAnPicgLiAkZGVmYXVsdF90ZXh0IC4gJzwvcHJlPic7DQoJCSRyZXR1cm4gLj0gJzxkaXYgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsiPg0KCQkJPGJ1dHRvbiBjbGFzcz0iYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiBvbkNsaWNrPSJiYWNrdXBidWRkeV9zYXZlTG9nQXNGaWxlKCk7IiBzdHlsZT0ibWFyZ2luLWxlZnQ6IGF1dG87IG1hcmdpbi1yaWdodDogYXV0bzsgZGlzcGxheTogaW5oZXJpdDsgZm9udC1zaXplOiAwLjllbTsiPkRvd25sb2FkIFN0YXR1cyBMb2cgKC50eHQpPC9idXR0b24+DQoJCTwvZGl2Pic7DQoJCSRyZXR1cm4gLj0gJzwvZGl2Pic7DQoJCQ0KCQlyZXR1cm4gJHJldHVybjsNCgl9DQoJDQoJDQoJDQoJDQoJDQoJDQp9IC8vIEVuZCBjbGFzcy4NCj8+DQo=
###PACKDATA,FILE_END,/classes/import.php,importbuddy/classes/import.php
###PACKDATA,FILE_START,/classes/restore.php,importbuddy/classes/restore.php

###PACKDATA,FILE_END,/classes/restore.php,importbuddy/classes/restore.php
###PACKDATA,FILE_START,/classes/_restoreFiles.php,importbuddy/classes/_restoreFiles.php
PD9waHANCmNsYXNzIGJhY2t1cGJ1ZGR5X3Jlc3RvcmVfZmlsZXMgew0KDQoJLyogcmVzdG9yZSgpDQoJICoNCgkgKiBSZXN0b3JlIG9uZSBvciBtb3JlIGZpbGVzIHRvIGEgcGF0aC4NCgkgKg0KCSAqIEBwYXJhbQkkYXJjaGl2ZV9maWxlCUJhY2t1cCB6aXAgYXJjaGl2ZSBmaWxlIHRvIHJlc3RvcmUgZmlsZXMgZnJvbS4NCgkgKiBAcGFyYW0JJGZpbGVzCQkJQXJyYXkgb2YgZmlsZXMgdG8gcmVzdG9yZS4gRWFjaCBrZXkgYW5kIHZhbHVlIG11c3QgYmUgdGhlIHNhbWUuIEZvcm1hdDogYXJyYXkoICdmaWxlbmFtZS50eHQnID0+ICdmaWxlbmFtZS50eHQnICk7DQoJICogQHBhcmFtCSRmaW5hbFBhdGgJCURlc3RpbmF0aW9uIHBhdGggdG8gZXh0cmFjdCBpbnRvLg0KCSAqIEByZXR1cm4JYm9vbAkJCVRydWUgb24gc3VjY2VzcywgZWxzZSBmYWxzZS4NCgkgKg0KCSAqLw0KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gcmVzdG9yZSggJGFyY2hpdmVfZmlsZSwgJGZpbGVzLCAkZmluYWxQYXRoLCAmJHppcGJ1ZGR5ID0gbnVsbCApIHsNCgkJaWYgKCAhZGVmaW5lZCggJ1BCX1NUQU5EQUxPTkUnICkgfHwgUEJfU1RBTkRBTE9ORSA9PT0gZmFsc2UgKSB7DQoJCQlpZiAoICEgY3VycmVudF91c2VyX2NhbiggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWydyb2xlX2FjY2VzcyddICkgKSB7DQoJCQkJZGllKCAnRXJyb3IgIzQ3MzYyMy4gQWNjZXNzIERlbmllZC4nICk7DQoJCQl9DQoJCX0NCgkJDQoJCSRzZXJpYWwgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRfc2VyaWFsX2Zyb21fZmlsZSggJGFyY2hpdmVfZmlsZSApOyAvLyBzZXJpYWwgb2YgYXJjaGl2ZS4NCgkJJHN1Y2Nlc3MgPSBmYWxzZTsNCgkJDQoJCWZvcmVhY2goICRmaWxlcyBhcyAkZmlsZSApIHsNCgkJCSRmaWxlID0gc3RyX3JlcGxhY2UoICcqJywgJycsICRmaWxlICk7IC8vIFJlbW92ZSBhbnkgd2lsZGNhcmQuDQoJCQlpZiAoIGZpbGVfZXhpc3RzKCAkZmluYWxQYXRoIC4gJGZpbGUgKSAmJiBpc19kaXIoICRmaW5hbFBhdGggLiAkZmlsZSApICkgew0KCQkJCWlmICggKCAkZmlsZV9jb3VudCA9IEBzY2FuZGlyKCAkZmluYWxQYXRoIC4gJGZpbGUgKSApICYmICggY291bnQoICRmaWxlX2NvdW50ICkgPiAyICkgKSB7DQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsIF9fKCAnRXJyb3IgIzkwMzYuIFRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnkgYmVpbmcgcmVzdG9yZWQgYWxyZWFkeSBleGlzdHMgYW5kIGlzIE5PVCBlbXB0eS4gVGhlIGRpcmVjdG9yeSB3aWxsIG5vdCBiZSByZXN0b3JlZCB0byBwcmV2ZW50IGluYWR2ZXJ0ZW50bHkgbG9zaW5nIGZpbGVzIHdpdGhpbiB0aGUgZXhpc3RpbmcgZGlyZWN0b3J5LiBEZWxldGUgZXhpc3RpbmcgZGlyZWN0b3J5IGZpcnN0IGlmIHlvdSB3aXNoIHRvIHByb2NlZWQgb3IgcmVzdG9yZSBpbmRpdmlkdWFsIGZpbGVzLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJyBFeGlzdGluZyBkaXJlY3Rvcnk6IGAnIC4gJGZpbmFsUGF0aCAuICRmaWxlIC4gJ2AuJyApOw0KCQkJCQlyZXR1cm4gZmFsc2U7DQoJCQkJfQ0KCQkJfQ0KCQl9DQoJCQ0KCQkNCgkJaWYgKCBudWxsID09PSAkemlwYnVkZHkgKSB7DQoJCQlyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvemlwYnVkZHkvemlwYnVkZHkucGhwJyApOw0KCQkJJHppcGJ1ZGR5ID0gbmV3IHBsdWdpbmJ1ZGR5X3ppcGJ1ZGR5KCBiYWNrdXBidWRkeV9jb3JlOjpnZXRCYWNrdXBEaXJlY3RvcnkoKSApOw0KCQl9DQoJCQ0KCQkNCgkJLy8gQ2FsY3VsYXRlIHRlbXAgZGlyZWN0b3J5ICYgbG9jayBpdCBkb3duLg0KCQkkdGVtcF9kaXIgPSBnZXRfdGVtcF9kaXIoKTsNCgkJJGRlc3RpbmF0aW9uID0gJHRlbXBfZGlyIC4gJ2JhY2t1cGJ1ZGR5LScgLiAkc2VyaWFsOw0KCQlpZiAoICggKCAhIGZpbGVfZXhpc3RzKCAkZGVzdGluYXRpb24gKSApICYmICggZmFsc2UgPT09IG1rZGlyKCAkZGVzdGluYXRpb24sIDA3NzcsIHRydWUgKSApICkgKSB7DQoJCQkkZXJyb3IgPSAnRXJyb3IgIzQ1ODQ4NTk0NTogVW5hYmxlIHRvIGNyZWF0ZSB0ZW1wb3JhcnkgbG9jYXRpb24gYCcgLiAkZGVzdGluYXRpb24gLiAnYC4gQ2hlY2sgcGVybWlzc2lvbnMuJzsNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRlcnJvciApOw0KCQkJcmV0dXJuIGZhbHNlOw0KCQl9DQoJCQ0KCQkNCgkJLy8gSWYgdGVtcCBkaXJlY3RvcnkgaXMgd2l0aGluIHdlYnJvb3QgdGhlbiBsb2NrIGl0IGRvd24uDQoJCSR0ZW1wX2RpciA9IHN0cl9yZXBsYWNlKCAnXFwnLCAnLycsICR0ZW1wX2RpciApOyAvLyBOb3JtYWxpemUgZm9yIFdpbmRvd3MuDQoJCSR0ZW1wX2RpciA9IHJ0cmltKCAkdGVtcF9kaXIsICcvXFwnICkgLiAnLyc7IC8vIEVuZm9yY2Ugc2luZ2xlIHRyYWlsaW5nIHNsYXNoLg0KCQlpZiAoIEZBTFNFICE9PSBzdHJpc3RyKCAkdGVtcF9kaXIsIEFCU1BBVEggKSApIHsgLy8gVGVtcCBkaXIgaXMgd2l0aGluIHdlYnJvb3QuDQoJCQlwYl9iYWNrdXBidWRkeTo6YW50aV9kaXJlY3RvcnlfYnJvd3NpbmcoICRkZXN0aW5hdGlvbiApOw0KCQl9DQoJCXVuc2V0KCAkdGVtcF9kaXIgKTsNCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRXh0cmFjdGluZyBpbnRvIHRlbXBvcmFyeSBkaXJlY3RvcnkgIicgLiAkZGVzdGluYXRpb24gLiAnIi4nICk7DQoJCQ0KCQkkcHJldHR5RmlsZXNMaXN0ID0gYXJyYXkoKTsNCgkJZm9yZWFjaCggJGZpbGVzIGFzICRmaWxlU291cmNlID0+ICRmaWxlRGVzdGluYXRpb24gKSB7DQoJCQkkcHJldHR5RmlsZXNMaXN0W10gPSAkZmlsZVNvdXJjZSAuICcgPT4gJyAuICRmaWxlRGVzdGluYXRpb247DQoJCX0NCgkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRmlsZXMgdG8gZXh0cmFjdDogYCcgLiBodG1sZW50aXRpZXMoIGltcGxvZGUoICcsICcsICRwcmV0dHlGaWxlc0xpc3QgKSApIC4gJ2AuJyApOw0KCQl1bnNldCggJHByZXR0eUZpbGVzTGlzdCApOw0KCQkNCgkJcGJfYmFja3VwYnVkZHk6OmZsdXNoKCk7DQoJCQ0KCQkvLyBEbyB0aGUgYWN0dWFsIGV4dHJhY3Rpb24uDQoJCSRleHRyYWN0X3N1Y2Nlc3MgPSB0cnVlOw0KCQlpZiAoIGZhbHNlID09PSAkemlwYnVkZHktPmV4dHJhY3QoICRhcmNoaXZlX2ZpbGUsICRkZXN0aW5hdGlvbiwgJGZpbGVzICkgKSB7DQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAnRXJyb3IgIzU4NDk4NDQ1OGIuIFVuYWJsZSB0byBleHRyYWN0LicgKTsNCgkJCSRleHRyYWN0X3N1Y2Nlc3MgPSBmYWxzZTsNCgkJfQ0KCQkNCgkJaWYgKCB0cnVlID09PSAkZXh0cmFjdF9zdWNjZXNzICkgew0KCQkJDQoJCQkvLyBWZXJpZnkgYWxsIGZpbGVzL2RpcmVjdG9yaWVzIHRvIGJlIGV4dHJhY3RlZCBleGlzdCBpbiB0ZW1wIGRlc3RpbmF0aW9uIGRpcmVjdG9yeS4gSWYgYW55IG1pc3NpbmcgdGhlbiBkZWxldGUgZXZlcnl0aGluZyBhbmQgYmFpbCBvdXQuDQoJCQlmb3JlYWNoKCAkZmlsZXMgYXMgJiRmaWxlICkgew0KCQkJCSRmaWxlID0gc3RyX3JlcGxhY2UoICcqJywgJycsICRmaWxlICk7IC8vIFJlbW92ZSBhbnkgd2lsZGNhcmQuDQoJCQkJaWYgKCAhIGZpbGVfZXhpc3RzKCAkZGVzdGluYXRpb24gLiAnLycgLiAkZmlsZSApICkgew0KCQkJCQkvLyBDbGVhbnVwLg0KCQkJCQlmb3JlYWNoKCAkZmlsZXMgYXMgJGZpbGUgKSB7DQoJCQkJCQlAdHJpZ2dlcl9lcnJvciggJycgKTsgLy8gQ2xlYXIgb3V0IGxhc3QgZXJyb3IuDQoJCQkJCQlAdW5saW5rKCAkZGVzdGluYXRpb24gLiAnLycgLiAkZmlsZSk7DQoJCQkJCQkkbGFzdF9lcnJvciA9IGVycm9yX2dldF9sYXN0KCk7DQoJCQkJCQlpZiAoIGlzX2FycmF5KCAkbGFzdF9lcnJvciApICkgew0KCQkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRsYXN0X2Vycm9yWydtZXNzYWdlJ10gLiAnIEZpbGU6IGAnIC4gJGxhc3RfZXJyb3JbJ2ZpbGUnXSAuICdgLiBMaW5lOiBgJyAuICRsYXN0X2Vycm9yWydsaW5lJ10gLiAnYC4nICk7DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2Vycm9yJywgJ0Vycm9yICM4NTQ3ODM0NzQuIE9uZSBvciBtb3JlIGV4cGVjdGVkIGZpbGVzIC8gZGlyZWN0b3JpZXMgbWlzc2luZy4nICk7DQoJCQkJCQ0KCQkJCQkkZXh0cmFjdF9zdWNjZXNzID0gZmFsc2U7DQoJCQkJCWJyZWFrOw0KCQkJCX0NCgkJCX0NCgkJCXVuc2V0KCAkZmlsZSApOw0KCQkJDQoJCQkvLyBNYWRlIGl0IHRoaXMgZmFyIHNvIGZpbGVzIGFsbCBleGlzdC4gTW92ZSB0aGVtIGFsbC4NCgkJCWZvcmVhY2goICRmaWxlcyBhcyAkZmlsZSApIHsNCgkJCQlAdHJpZ2dlcl9lcnJvciggJycgKTsgLy8gQ2xlYXIgb3V0IGxhc3QgZXJyb3IuDQoJCQkJaWYgKCBmYWxzZSA9PT0gcGJfYmFja3VwYnVkZHk6OiRmaWxlc3lzdGVtLT5yZWN1cnNpdmVfY29weSggJGRlc3RpbmF0aW9uIC4gJy8nIC4gJGZpbGUsICRmaW5hbFBhdGggLiAkZmlsZSApICkgew0KCQkJCQkkbGFzdF9lcnJvciA9IGVycm9yX2dldF9sYXN0KCk7DQoJCQkJCWlmICggaXNfYXJyYXkoICRsYXN0X2Vycm9yICkgKSB7DQoJCQkJCQkvL3ByaW50X3IoICRsYXN0X2Vycm9yICk7DQoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZXJyb3InLCAkbGFzdF9lcnJvclsnbWVzc2FnZSddIC4gJyBGaWxlOiBgJyAuICRsYXN0X2Vycm9yWydmaWxlJ10gLiAnYC4gTGluZTogYCcgLiAkbGFzdF9lcnJvclsnbGluZSddIC4gJ2AuJyApOw0KCQkJCQl9DQoJCQkJCSRlcnJvciA9ICdFcnJvciAjOTAzNS4gVW5hYmxlIHRvIGNvcHlyZXN0b3JlZCBmaWxlIGAnIC4gJGRlc3RpbmF0aW9uIC4gJy8nIC4gJGZpbGUgLiAnYCB0byBgJyAuICRmaW5hbFBhdGggLiAkZmlsZSAuICdgLiBWZXJpZnkgcGVybWlzc2lvbnMgb24gZGVzdGluYXRpb24gbG9jYXRpb24gJiB0aGF0IHRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnkvZmlsZSBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0Lic7DQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdlcnJvcicsICRlcnJvciApOw0KCQkJCX0gZWxzZSB7DQoJCQkJCSRkZXRhaWxzID0gJ1JlY3Vyc2l2ZWx5IG1vdmVkIGAnIC4gJGRlc3RpbmF0aW9uIC4gJy8nIC4gJGZpbGUgLiAnYCB0byBgJyAuICRmaW5hbFBhdGggLiAkZmlsZSAuICdgLjxicj4nOw0KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICRkZXRhaWxzICk7DQoJCQkJCSRzdWNjZXNzID0gdHJ1ZTsNCgkJCQl9DQoJCQl9DQoJCQkNCgkJfSAvLyBlbmQgZXh0cmFjdCBzdWNjZXNzLg0KCQkNCgkJDQoJCS8vIFRyeSB0byBjbGVhbnVwLg0KCQlpZiAoIGZpbGVfZXhpc3RzKCAkZGVzdGluYXRpb24gKSApIHsNCgkJCWlmICggZmFsc2UgPT09IHBiX2JhY2t1cGJ1ZGR5OjokZmlsZXN5c3RlbS0+dW5saW5rX3JlY3Vyc2l2ZSggJGRlc3RpbmF0aW9uICkgKSB7DQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnVW5hYmxlIHRvIGRlbGV0ZSB0ZW1wb3JhcnkgaG9sZGluZyBkaXJlY3RvcnkgYCcgLiAkZGVzdGluYXRpb24gLiAnYC4nICk7DQoJCQl9IGVsc2Ugew0KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0NsZWFuZWQgdXAgdGVtcG9yYXJ5IGZpbGVzLicgKTsNCgkJCX0NCgkJfQ0KCQkNCgkJDQoJCWlmICggdHJ1ZSA9PT0gJHN1Y2Nlc3MgKSB7DQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsICdGaWxlIHJldHJpZXZhbCBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LicgKTsNCgkJCXJldHVybiB0cnVlOw0KCQl9IGVsc2Ugew0KCQkJcmV0dXJuIGZhbHNlOw0KCQl9DQoJCQ0KCX0gLy8gRW5kIGZ1bmN0aW9uIHJlc3RvcmUoKS4NCg0KfSAvLyBFbmQgY2xhc3Mu
###PACKDATA,FILE_END,/classes/_restoreFiles.php,importbuddy/classes/_restoreFiles.php
###PACKDATA,FILE_START,/classes/remote_api.php,importbuddy/classes/remote_api.php

###PACKDATA,FILE_END,/classes/remote_api.php,importbuddy/classes/remote_api.php
###PACKDATA,FILE_START,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
KGZ1bmN0aW9uKCQpew0KIA0KICAgICQuZm4uZXh0ZW5kKHsgDQogICAgICAgICANCiAgICAgICAgbGVhbk1vZGFsOiBmdW5jdGlvbihvcHRpb25zKSB7DQogCQkJDQogCQkJdmFyIHdpbiA9IHdpbmRvdy5kaWFsb2dBcmd1bWVudHMgfHwgb3BlbmVyIHx8IHBhcmVudCB8fCB0b3A7DQogCQkJDQogICAgICAgICAgICB2YXIgZGVmYXVsdHMgPSB7DQogICAgICAgICAgICAgICAgdG9wOiAxMDAsDQogICAgICAgICAgICAgICAgb3ZlcmxheTogMC41LA0KICAgICAgICAgICAgICAgIGNsb3NlQnV0dG9uOiBudWxsDQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICB2YXIgb3ZlcmxheSA9ICQoIjxkaXYgaWQ9J2xlYW5fb3ZlcmxheSc+PC9kaXY+Iik7DQogICAgICAgICAgICANCiAgICAgICAgICAgICQoImJvZHkiKS5hcHBlbmQob3ZlcmxheSk7DQogICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgb3B0aW9ucyA9ICAkLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7DQogDQogICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdmFyIG8gPSBvcHRpb25zOw0KICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgJCh0aGlzKS5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAJdmFyIG1vZGFsX2lkID0gJCh0aGlzKS5hdHRyKCJocmVmIik7DQoNCgkJCQkkKCIjbGVhbl9vdmVybGF5IikuY2xpY2soZnVuY3Rpb24oKSB7IA0KICAgICAgICAgICAgICAgICAgICAgY2xvc2VfbW9kYWwobW9kYWxfaWQpOyAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgJChvLmNsb3NlQnV0dG9uKS5jbGljayhmdW5jdGlvbigpIHsgDQogICAgICAgICAgICAgICAgICAgICBjbG9zZV9tb2RhbChtb2RhbF9pZCk7ICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAJDQogICAgICAgICAgICAgIAl2YXIgbW9kYWxfaGVpZ2h0ID0gJChtb2RhbF9pZCkub3V0ZXJIZWlnaHQoZmFsc2UpOw0KICAgICAgICAJICAJdmFyIG1vZGFsX3dpZHRoID0gJChtb2RhbF9pZCkub3V0ZXJXaWR0aChmYWxzZSk7DQoNCiAgICAgICAgCQkkKCcjbGVhbl9vdmVybGF5JykuY3NzKHsgJ2Rpc3BsYXknIDogJ2Jsb2NrJywgb3BhY2l0eSA6IDAgfSk7DQoNCiAgICAgICAgCQkkKCcjbGVhbl9vdmVybGF5JykuZmFkZVRvKDIwMCxvLm92ZXJsYXkpOw0KDQogICAgICAgIAkJJChtb2RhbF9pZCkuY3NzKHsgDQogICAgICAgIAkJDQogICAgICAgIAkJCSdkaXNwbGF5JyA6ICdibG9jaycsDQogICAgICAgIAkJCSdwb3NpdGlvbicgOiAnZml4ZWQnLA0KICAgICAgICAJCQknb3BhY2l0eScgOiAwLA0KICAgICAgICAJCQknei1pbmRleCc6IDExMDAwLA0KICAgICAgICAJCQknbGVmdCcgOiA1MCArICclJywNCiAgICAgICAgCQkJJ21hcmdpbi1sZWZ0JyA6IC0obW9kYWxfd2lkdGgvMikgKyAicHgiLA0KICAgICAgICAJCQkndG9wJyA6IG8udG9wICsgInB4Ig0KICAgICAgICAJCQ0KICAgICAgICAJCX0pOw0KDQogICAgICAgIAkJJChtb2RhbF9pZCkuZmFkZVRvKDIwMCwxKTsNCg0KICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgCX0pOw0KICAgICAgICAgICAgIA0KICAgICAgICAgICAgfSk7DQoNCgkJCWZ1bmN0aW9uIGNsb3NlX21vZGFsKG1vZGFsX2lkKXsNCg0KICAgICAgICAJCSQoIiNsZWFuX292ZXJsYXkiKS5mYWRlT3V0KDIwMCk7DQoNCiAgICAgICAgCQkkKG1vZGFsX2lkKS5jc3MoeyAnZGlzcGxheScgOiAnbm9uZScgfSk7DQoJCQkNCgkJCX0NCiAgICANCiAgICAgICAgfQ0KICAgIH0pOw0KICAgICANCn0pKGpRdWVyeSk7
###PACKDATA,FILE_END,/js/jquery.leanModal.min.js,importbuddy/js/jquery.leanModal.min.js
###PACKDATA,FILE_START,/css/animate.css,importbuddy/css/animate.css

###PACKDATA,FILE_END,/css/animate.css,importbuddy/css/animate.css
###PACKDATA,FILE_START,/images/working.gif,importbuddy/images/working.gif
R0lGODlhKwALAPEAAPn5+SiKt5LC2CiKtyH/C05FVFNDQVBFMi4wAwEAAAAh/hpDcmVhdGVkIHdpdGggYWpheGxvYWQuaW5mbwAh+QQJCgAAACwAAAAAKwALAAACMoSOCMuW2diD88UKG95W88uF4DaGWFmhZid93pq+pwxnLUnXh8ou+sSz+T64oCAyTBUAACH5BAkKAAAALAAAAAArAAsAAAI9xI4IyyAPYWOxmoTHrHzzmGHe94xkmJifyqFKQ0pwLLgHa82xrekkDrIBZRQab1jyfY7KTtPimixiUsevAAAh+QQJCgAAACwAAAAAKwALAAACPYSOCMswD2FjqZpqW9xv4g8KE7d54XmMpNSgqLoOpgvC60xjNonnyc7p+VKamKw1zDCMR8rp8pksYlKorgAAIfkECQoAAAAsAAAAACsACwAAAkCEjgjLltnYmJS6Bxt+sfq5ZUyoNJ9HHlEqdCfFrqn7DrE2m7Wdj/2y45FkQ13t5itKdshFExC8YCLOEBX6AhQAADs=
###PACKDATA,FILE_END,/images/working.gif,importbuddy/images/working.gif
###PACKDATA,FILE_START,/images/bullet_go.png,importbuddy/images/bullet_go.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEsSURBVDjLY/j//z8DJZhhmBuQvdj8a+p8w//xc3U5yTIgeb7h18bNUf/DZ2j8958qz0nQgPyltv9zF5v/TV9o/Ddxrv7fmvWh/1ednvi/ZLX/f9d+8b+23YI8eA0AOvn/hnPT/q89OwWsccXpCf8n7Cn5v/B41/+MpW7/TdvZ/+o2M/LjNADoZLDmvl35/zt3ZP9v3Zb2v2Fz4v+mren/Zxxq/h+zwOa/aj3DH5wGRM/W/L/y1IT/S0/0/l94rOv/vKMdQEOy/k8/1PQ/banHf8VahlfSlQwGOA0InK74z3Oi9D/nftF/1t38/+LmW/2fdrDhf9Jit//ytQzPJSsZtEiKBe1mxq/xC53/y1czPAFqVic5GoFO/ipXzfxftJJBkeyUKFzOwDm48wIAh5XH+g7drOwAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/bullet_go.png,importbuddy/images/bullet_go.png
###PACKDATA,FILE_START,/images/favicon.png,importbuddy/images/favicon.png
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAACFdJREFUeNrkl21sleUZx3/383JeaE9L29Pa8iZ9se0E0SHoBDUUt+gkQxd0aqImW5aZuUzNsky36cZcBl+2D3OLLhr1wxKikQwN4CYdbBYNQoeg0hSspOXQck4tbc9L29Nz7ue+r304BwaCxg8mftidXHmS50nu+3dd93X9r+tRIsKXuRy+5PWlA3gHDhxARPA8j3g8TnV1NVVVVVgR1PQ0JpPBra5m6t1DhJsX1+R27Vo129fXWBwYCIVaWsLF48cDt7o68NvaZipvvLHfrYz1KtfBjcVQCxZgfZ+Q75PP5/F9n0KhwODgIFprlFJ4n0WnfB+3sjJeHBpaP/32W3ePP/N0hz09vojCLG4oRNDfjxuJYsfGmBkeJv+fgzNe4yWJ2E039UQvv3xLqLLyTRsEnx2Bi5+scB2nenZ4+JGxF164d7qnp410GtdxcJXCiUZpePJJIkuXAlAcGGD0sccIhhNzCsMnO6cPHOj0Wlp+MHfDhn9V33nnn5yKim2fG0CUwlHq66Nbt/7h46eeWmaTpwhFo7jhMK4CZ7aIN38B4dWrccPh0iZ1dah583AnJlCREFhBf/QRyU2butK793Qt+tUTf3VaWx9F6+SnJqGIoByHaCz22Knnn3998Bc/X6ZHR3Gjc1AolDEoY1EmoIBQPKd6rbUYgCBAjEVZixPyccJhMm/tpf+BB+4z/f3/9MPhlZ8se0cphYhgRaifP/93Ey+/vHngyd/6EhhsoUiQzZYsk0Gn0xTHx4nMm0ckFDq7Sdj38S9dzOzpcYLJNEE6U7JsDkSYPnqUvgcfvLyYSOzwIpFrrbUopUrW09NDJBKho7PzAWdk5C/7N9yByqSpbGigvmstflUML1ZJqC4OIvj1DUSXfxWvqek8T8zYGPlDh9BjY9hiEWsMs6lRdDbLx3t2kzkxRP3627jqueeGPjp+fM3kxMQJEYHdu3fz3gcfdIpI+uDDD8trNTWyq6FBUq+8Il/UOvXSS/J6bY281tQkqV27RES27ty5U7344os4+XyeS1taHi+MjlYPv/EG4ji49fXE16z5wsSmYe1avMYmZtNphl57FWBDY1PTN+bNm4fX3Nz8lao5c24f3bePqWSSynCY7GyBd/7+D2oWL+bCKoFLlyylsmbuee+nJic50deHKufYuak2fuxD0tkcbjjM2LuHCaam6Fyy5KF9e/fu8rTW6xRUJN9/n8BYAsDJZuj97vcomAAXVZKG8mZFLEt++CPWP/3n8wD+vfE3HHnqj/g4+I4i4jhYAQO4rsMl1VUEIZ/JE0Pkx8eJLlp0fVVV1WKvpqZmBcBYIoHWmqIJEXEcOupq8ABXKVQZQAE6l8MdGb4gMnNOnGDFnCh+rKqsZQojQoCgBWasJbBCvjBNoDWeUtVLly692ovFYs0AudkC2hq0tSixiFK4gKdUSQfK9auDgJjnXtjVXIcZYwmCAJTCIhjAiqABLRAg5ApF8vlZaoDDhw/P90SkAsDGKpk2hpA1JV+VwkUwSuEASkApCKzFXmSGMFYoGoNYiyAICoNgbBkAwQhkxWLKDuRyuUpvenp6pra2lrrOTg5YS8xaLGBR+ICrQFGGALQxWKUuALCKEoAxiKJ0/yIEQCCgFRQKBfQljVTW1gIwMzMz46RSqQRA5/U3kI5ESReKaGspWEPBWgrGUDxj1hAAmfEJ8oViGRQKgWEqk0FTikLB2PKzZEVrMNYwVCxSt/xq5tbXEwQBSqmUNzQ0dHjlypUb5l3WRuet6+j721aWOQ6eAiPglqPgUEpGLxImtf8Az6y+nlhtLQJMT0wS7j9CLByhUI6gQbBl70VBRhtOAXfdfx/KcchMTuYSicRhb3Bw8PXx8fFf1tXVRe544nHe697F0VyWtnAIT8qHC7hlAK0UYQlwDvaiy+GPAH4oRN5RWBGsFUQpAgQBckY4ojXL132LlbffBkBfX19vMpk86l5zzTVJpdS17e3tHXMbG6mqjfPmju3MGENUlbLfihCIYBECsQQi4LrgOOA6iOuikdJdi6BFMCJosYxb4WgQ0HRZO4+8/BIVc+cyNTXF9u3bf6q17ne7urpIpVLHFy1adG9NTY3fsuJqouEI+3fvYdxaRM4kIoiU7twIBOckWCClw40IRkqtOQuMGMugWBa2d/CzbdtovKwNgO7u7j3Hjh37te/7xu3q6kJrPTIyMkJnZ+faSCRCxw3Xs6C9naP73yGRzZKRUv8PynlhylJrKdW7BorAlEAGSFrLSRGywNe+eSsPbdlCU0c7AAcPHpzcs2fPXZ7nJZVSuGvWrMF1XbLZ7NsnT55c0NraujwajbLwiitYfed3cEU4nUgwnMsxKUJGhLQIk2WbEOF02UYRRsuR6Vixkvs3beaezZuorKuDkvDM7Nix4x5r7duOU5qF1MaNG8/WcrFYDDU0NPx+3bp1P25razv7fmJkhN5tr3J0bw8f7ttP9vQYpqgJjEah8PwQoUiYxtY22m9YzVW33MJVN9+MckuCEwQBPT09qZ6enu9ba3e67v+U9DwAAK01oVDovuuuu27zqlWr5ldUVJz3PZ/LMTY4SDqZIjs2RigSIdZQT3zhQmrmz8c7Z1ICGB4epru7u3tgYOAnvu8fOeP5pwKcmfGCIGiNx+OPXnnlld9etmxZPB6Pf+7+HwQBiUSC3t7e9wcGBp6dnZ191vd9fdEB/GIAZ/XdGLTWrdXV1Xc3NjauX7hwYUtzc3M8FovheR6+75+BRWtNKpUKBgcHR5LJ5OFUKrUlCIKdnudNf9Lrzw1wLogxBqVUq+M4y4GGSCRSF41G640xs/l8/rTWOiMix6y1h5RSac/zUBfpGRcA/N//Hf93AHiGrdXcwqWjAAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/images/favicon.png,importbuddy/images/favicon.png
###PACKDATA,FILE_START,/images/sort_down.png,importbuddy/images/sort_down.png
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAICAYAAADA+m62AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAHBJREFUeNqMkD0OABEQRmcmVChIqN3/WBJHoLVYxK7GK4TvZwIMIcANrC0xxpJSOkzOOXjvASvUBOdcOxzBoXeDRhO11p+QlBKEEKtNc2OMAcbYKxL1aTsrWE201u4lPB4zUUphzrn8r9HA2+95BBgA3YASwqCieowAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/sort_down.png,importbuddy/images/sort_down.png
###PACKDATA,FILE_START,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAABtNJREFUeNrsl39sVeUZxz/ve85pL9iWUmxHKdCCLrK6pZAZsWQQfiwWxcAYGT+WuWyJcygz/jGW4bKYGHEi8Q9nwhK2JTOybBQWt5g5QJNFMRFRQKqGoUDpLVDoD25vb2/Lveec93n2x72ttLBh/Id/fJM359z3nPN+v+/3eZ/n/V6jqtzMZrnJ7UsC/p9bW6/74Gvbt2MNGMAag6FwjzLLGHN3MGfO1621FkBEJDp58piqvgdcUGNo27z58xH4Xw+cCGrAKJStWPFonEw+5DqTd0p2qMQA0YkTABhjUFWUAkNTMSkXzJ7dtqCjY+c7DQ1/uhEBs2v37msGH1y/np6LF8uG33jjqYFXXtkYtbdPNBg8AygMO8e81w+QmDYNgHhwkPeaF1Dm+yggxQVMmNs0OGnNmh2l8+c/U1NbmwUYj3ddBVI9Pau7d+x4qW/P3grPgGcsRhWsRVU5mxmkuQgO4JeX0+P5JJxDVRFV1BgGjhwtTx/7YMvURzb+NNXT83BVTc3f/m8IWhYtKikpKXm5fevWdanXXsMD1FpEY6wxOAcOZc76tdeQnv29NQzu2oVnDBhDLIIag4sjki/+dnKuv39vuq+vNQzDHx44eDC8JgT3LlxYVVpa+veuvXsXnX7uOVSVu3buJJg0iep77vlCOzzKZOg7dIgjGzcCcOf27UxZuvRgPp9f/frbb6fGpKHv+3skl1v08fPPMxxFVK5axbSWli8MDhBUVFDb0oLMncuVOKJt61YMLPJ9f8+YENy3ePGWIAiWnWltJT+UxYnyn6PHGHjqaa5XqGc0NTHvOyvHjH3wj1c519ZGMRlGvzPA2VNnmBxG5Hu6ufTWW9QuXrzsvsWLt+x7881tpquzc2oikegMgiD459p15I8fQ1RJi5JWJS+CBTxjsCgO+MrdzTx2YN8YAi+2LKfn8Luj4FLsgTVMtpbJxmKNoer++1nywgtEURTlcrmZvog87nleANDX2Ulp7DDGMBGlVBU8D6taKEpqiExh0vFtgrVM8yyBfkbAGUAUXxSxSuwclz79FADP8wIRedwX2GBMYcJsmMcTKQIaAsAXwahiixUxJ4U0u6amqzJRlNKiAk4VMaZwBaIoQo0h79xoARPY4Jf4ft0IAZlaS763Fx/wDCiFCaw1eArGQCzKcCrFcDrNxMpKAIbTabKpFBOdK4TAGJzIaBjEGGIUJxDUN4wSKPH9Ot96nq+qGGNoWLiQj48e5VbP4hmwWli1rwYHGFUiYOCjD/n5rTXEV+3k2sAnKLBGriKvQFxUods5lixcCICqYj3PN+eTSS0vK8NaS6anh199o4nbEBLGFGQHbJGMMWAwDKuSBaIicQ+lDJiAKSoAMo7IENBdXsFvPvqQIJFARBjMZrEDmUwoIgBU1NTw7cd+xqkwZlAcsSqxKqETQhFCJ0QieCKUqVCpyiQRylXxR94VIRIlUiUSJXSOfudoz8esevJJgkSC4gnKQCYT2svpdHtcrOEAK5/YwrzvrqY9Ei7FjpxzhCpEKkRFgFgEdQJS6CpC7ITQOUIR8sVrzjkuOqEjFpZseoRvPfiDUflj57icTrd7yx94IFEzZcq9QRBgrcVayzdXrSTMh7Qdepe0gtNCKBTFqeLMSJ6bQrqpEpvC7xglB/SJ0iVwxfNZv+1ZVvxi82fgcUw2m+XkmTPbzK7du8uqq6ouzm1sLCstLcXzPEay4uzRY7Ru+SXtR44BkAAmoASABwTFehcWieQx5DDkUQyGxmVLWfvM09TecccouHOOfD7P8RMnsr2pVO3IYbTuq/X1uxtmzGA8CYD299/nnb/8leP/2kemp6e41QqKFMqtGb2vmj6du1atpPn7G6hrbByd42rwjnPnOJVMrgdaR09Da+0fbps586H6ujpKSkrwfZ+i4xrTetvP0vXJJwx0d48ZnzJjOnWNjVTW1l7zjYgQxzFhGJK8cIEznZ1/FJGfjPEDIrLpVEeHH4bhjxqmTyeRSOD7/qgaI4pUz55F9exZNzwJVbVgTpwjimNyuRwd58+T7Op6Cdh0PUMSAj9OdnVd6Ovvf+L2+npbVVlJEAR4njeGyNWExgOOdOcczjmiKCKVTnM6mZShK1eeBX59Q08IzAV+V1lR0VxbXU11VdWoGnaEyPgVF0lIETiOY3pTKS729pLOZA4BjwLHP68rPj6/qWnB4ba25elM5uHTyeTKivJyr+KWW6goK2NiMTwjKqgqLo4ZyuXIZLNkhobIDA66KI5fBX4P7L+hLdcR339Vm9/UtB/Yf7itrfpyf//Sy/39zUAzcDtQNd7LAqeBQ8X+b6D3hrb8yz+nN5vAfwcArs2hchpwFZgAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/images/icon_menu_32x32.png,importbuddy/images/icon_menu_32x32.png
###PACKDATA,FILE_START,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php

###PACKDATA,FILE_END,/lib/dbreplace/dbreplace.php,importbuddy/lib/dbreplace/dbreplace.php
###PACKDATA,FILE_START,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
MS4wLjAgLSAyMDExLTA4LTE4IC0gRHVzdGluIEJvbHRvbg0KCUNyZWF0ZWQgZGJyZXBsYWNlIGNsYXNzLg==
###PACKDATA,FILE_END,/lib/dbreplace/history.txt,importbuddy/lib/dbreplace/history.txt
###PACKDATA,FILE_START,/lib/dbreplace/index.htm,importbuddy/lib/dbreplace/index.htm
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/lib/dbreplace/index.htm,importbuddy/lib/dbreplace/index.htm
###PACKDATA,FILE_START,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/lib/dbreplace/index.php,importbuddy/lib/dbreplace/index.php
###PACKDATA,FILE_START,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
PD9waHANCi8vIFRPRE86IEV2ZW50dWFsbHkgcHVsbCBvdXQgYWxsIGNvbW1hbmQgbGluZSBleGVjdXRpb24gdG8gcnVuIHRocm91Z2ggdGhpcyBsaWJyYXJ5Lg0KLy8JCUN1cnJlbnRseSBjb2RlIGlzIGR1Y3BsaWNhdGVkIGJldHdlZW4gdGhlIGxpYnJhcmllcyB0aGF0IHJ1biBjb21tYW5kIGxpbmUgY29tbWFuZHMuDQoNCmNsYXNzIHBiX2JhY2t1cGJ1ZGR5X2NvbW1hbmRidWRkeSB7DQoJDQoJcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkgew0KCX0NCgkNCgkvKglleGVjdXRlKCkNCgkgKgkNCgkgKglFeGVjdXRlIGEgY29tbWFuZCB2aWEgdGhlIGNvbW1hbmQgbGluZS4NCgkgKglFeGFtcGxlIHVzYWdlOg0KCSAqCQlsaXN0KCAkZXhlY19vdXRwdXQsICRleGVjX2V4aXRfY29kZSApID0gJHRoaXMtPmV4ZWN1dGUoICdDT01NQU5ESEhFUkUnICk7DQoJICoJDQoJICoJQHBhcmFtCQlzdHJpbmcJCSRjb21tYW5kCQlDb21tYW5kIGxpbmUgdG8gcnVuLg0KCSAqCUByZXR1cm4JCWFycmF5CQkJCQkJQXNzb2NpYXRpdmUgYXJyYXkgb2YgdGhlIHJlc3BvbnNlIG91dHB1dCBhbmQgZXhpc3QgY29kZS4gVXNlIHdpdGggbGlzdCB0byBhc3NpZ24gdmFyaWFibGVzLg0KCSAqCQkJCQkJCQkJCQlGb3JtYXQ6IGFycmF5KCBFWEVDX09VVFBVVCwgRVhJVF9DT0RFICk7DQoJICovDQoJcHVibGljIGZ1bmN0aW9uIGV4ZWN1dGUoICRjb21tYW5kICkgew0KCQlpZiAoIHN0cmlzdHIoIFBIUF9PUywgJ1dJTicgKSAmJiAhc3RyaXN0ciggUEhQX09TLCAnREFSV0lOJyApICkgew0KCQkJLy8gV2luZG93czsgZG8gbm90aGluZy4NCgkJfSBlbHNlIHsgLy8gTGludXgvTWFjDQoJCQlpZiAoICggaW5pX2dldCggJ2V4ZWNfZGlyJyApICE9PSBmYWxzZSApICYmICggaW5pX2dldCggJ2V4ZWNfZGlyJyApICE9ICcnICkgKSB7IC8vIGV4ZWNfZGlyIFBIUCBwYXRjaCBpbiBwbGFjZTogaHR0cDovL3d3dy5reWJlcmRpZ2kuY3ovcHJvamVjdHMvZXhlY2Rpci8NCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjX2RpciBkZXRlY3RlZC4gU2tpcHBpbmcgcGF0aCBhc3NpZ25tZW50LicgKTsNCgkJCX0gZWxzZSB7DQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnZXhlY19kaXIgbm90IGRldGVjdGVkLiBQcm9jZWVkaW5nIG5vcm1hbGx5LicgKTsNCgkJCQkkY29tbWFuZCA9ICdQQVRIPSRQQVRIOi91c3IvYmluLzovdXNyL2xvY2FsL2Jpbi86dXNyL2xvY2FsL2JpbjovdXNyL2xvY2FsL3NiaW4vOi91c3Ivc2Jpbi86L3NiaW4vOi91c3IvOi9iaW4vJyAuICc7ICcgLiAkY29tbWFuZDsNCgkJCX0NCgkJfQ0KCQkNCgkJLy8gT3V0cHV0IGNvbW1hbmQgKHN0cmlwcyBteXNxbGR1bXAgcGFzc3dvcmRzKS4NCgkJaWYgKCBzdHJzdHIoICRjb21tYW5kLCAnLS1wYXNzd29yZD0nICkgKSB7DQoJCQkkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiA9IHN0cnBvcyggJGNvbW1hbmQsICctLXBhc3N3b3JkPScgKTsNCgkJCSRwYXNzd29yZF9wb3J0aW9uX2VuZCA9IHN0cnBvcyggJGNvbW1hbmQsICcgJywgJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gKTsNCgkJCS8vcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAncGFzcyBzdGFydDogYCcgLiAkcGFzc3dvcmRfcG9ydGlvbl9iZWdpbiAuICdgLiBwYXNzIGVuZDogYCcgLiAkcGFzc3dvcmRfcG9ydGlvbl9lbmQgLiAnYCcgKTsNCgkJCSRwYXNzd29yZF9wb3J0aW9uID0gc3Vic3RyKCAkY29tbWFuZCwgJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4sICggJHBhc3N3b3JkX3BvcnRpb25fZW5kIC0gJHBhc3N3b3JkX3BvcnRpb25fYmVnaW4gKSApOw0KCQkJLy9wYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdwYXNzIHBvcnRpb246IGAnIC4gJHBhc3N3b3JkX3BvcnRpb24gLiAnYC4nICk7DQoJCQkkdW5wYXNzd29yZGVkX2NvbW1hbmQgPSBzdHJfcmVwbGFjZSggJHBhc3N3b3JkX3BvcnRpb24sICctLXBhc3N3b3JkPSpISURERU4qJywgJGNvbW1hbmQgKTsNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ2V4ZWMoKSBjb21tYW5kIChwYXNzd29yZCBoaWRkZW4pIGAnIC4gJHVucGFzc3dvcmRlZF9jb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7DQoJCQl1bnNldCggJHVucGFzc3dvcmRlZF9jb21tYW5kICk7DQoJCX0gZWxzZSB7DQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjKCkgY29tbWFuZCBgJyAuICRjb21tYW5kIC4gJ2AgKHdpdGggcGF0aCBkZWZpbml0aW9uKS4nICk7DQoJCX0NCgkJDQoJCSRleGVjX291dHB1dCA9IGFycmF5KCk7DQoJCUBleGVjKCAkY29tbWFuZCwgJGV4ZWNfb3V0cHV0LCAkZXhlY19leGl0X2NvZGUpOw0KCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdleGVjKCkgY29tbWFuZCBvdXRwdXQ6IGAnIC4gaW1wbG9kZSggJywnLCAkZXhlY19vdXRwdXQgKSAuICdgOyBFeGl0IGNvZGU6IGAnIC4gJGV4ZWNfZXhpdF9jb2RlIC4gJ2A7IEV4aXQgY29kZSBkZXNjcmlwdGlvbjogYCcgLiBwYl9iYWNrdXBidWRkeTo6JGZpbGVzeXN0ZW0tPmV4aXRfY29kZV9sb29rdXAoICRleGVjX2V4aXRfY29kZSApIC4gJ2AnICk7DQoJCQ0KCQlyZXR1cm4gYXJyYXkoICRleGVjX291dHB1dCwgJGV4ZWNfZXhpdF9jb2RlICk7DQoJfSAvLyBFbmQgZXhlY3V0ZSgpLg0KfQ==
###PACKDATA,FILE_END,/lib/commandbuddy/commandbuddy.php,importbuddy/lib/commandbuddy/commandbuddy.php
###PACKDATA,FILE_START,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/lib/commandbuddy/index.php,importbuddy/lib/commandbuddy/index.php
###PACKDATA,FILE_START,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
Mi4wLjAgLSAyMDExLTEwLTA4IC0gRHVzdGluIEJvbHRvbg0KCUFkZGVkIGhpc3RvcnkudHh0Lg0KCUFkZGVkIHVuemlwIGZ1bmN0aW9uYWxpdHku
###PACKDATA,FILE_END,/lib/zipbuddy/history.txt,importbuddy/lib/zipbuddy/history.txt
###PACKDATA,FILE_START,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/lib/zipbuddy/index.php,importbuddy/lib/zipbuddy/index.php
###PACKDATA,FILE_START,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php

###PACKDATA,FILE_END,/lib/zipbuddy/legacy.zipbuddy.php,importbuddy/lib/zipbuddy/legacy.zipbuddy.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbdir.php,importbuddy/lib/zipbuddy/zbdir.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
UEsDBAoAAAAAAC8ELUHj5ZWwDAAAAAwAAAAIABwAdGVzdC50eHRVVAkAA8obUVDjG1FQdXgLAAEE+AEAAAQUAAAASGVsbG8gV29ybGQKUEsBAh4DCgAAAAAALwQtQePllbAMAAAADAAAAAgAGAAAAAAAAQAAAKSBAAAAAHRlc3QudHh0VVQFAAPKG1FQdXgLAAEE+AEAAAQUAAAAUEsFBgAAAAABAAEATgAAAE4AAAAAAA==
###PACKDATA,FILE_END,/lib/zipbuddy/zbzip.php,importbuddy/lib/zipbuddy/zbzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php
PD9waHANCi8qKg0KICoJcGx1Z2luYnVkZHlfemJ6aXBjb3JlIENsYXNzDQogKg0KICogIFByb3ZpZGVzIGFuIGFic3RyYWN0IHppcCBjYXBhYmlsaXR5IGNvcmUgY2xhc3MNCiAqCQ0KICoJVmVyc2lvbjogMS4wLjANCiAqCUF1dGhvcjoNCiAqCUF1dGhvciBVUkk6DQogKg0KICoJQHBhcmFtCQkkcGFyZW50CQlvYmplY3QJCU9wdGlvbmFsIHBhcmVudCBvYmplY3Qgd2hpY2ggY2FuIHByb3ZpZGUgZnVuY3Rpb25zIGZvciByZXBvcnRpbmcsIGV0Yy4NCiAqCUByZXR1cm4JCW51bGwNCiAqDQogKi8NCmlmICggIWNsYXNzX2V4aXN0cyggInBsdWdpbmJ1ZGR5X3piemlwY29yZSIgKSApIHsNCg0KCS8qKg0KCSAqCXBsdWdpbmJ1ZGR5X3N0YXQgQ2xhc3MNCgkgKg0KCSAqCUNvbnZlbmllbmNlIGZvciBiZWluZyBhYmxlIHRvIGF1Z21lbnQgdGhlIHN0YXQoKSBmdW5jdGlvbiBlaXRoZXIgaW4gdGhlIGV2ZW50DQoJICoJb2YgZmFpbHVyZSBvciBmb3IgY2FzZXMgd2hlcmUgdGhlIGFjdHVhbCBmaWxlIHNpemUgcmVwb3J0ZWQgaXMgdG9vIGxhcmdlIGZvciB0aGUNCgkgKgkoc2lnbmVkKSBpbnRlZ2VyIHR5cGUgaW4gd2hpY2ggY2FzZSB3ZSBjcmVhdGUgYW4gYWRkaXRpb25hbCBhc3NvY2lhdGl2ZSBmaWVsZCBpbg0KCSAqCXRoZSBhcnJheSB3aGljaCBpcyBhIGRvdWJsZSBhbmQgY29udGFpbnMgdGhlIGZpbGUgc2l6ZS4NCgkgKglGb3Igbm93IGl0J3MganVzdCBzb21lIHN0YXRpYyBtZXRob2RzIGJ1dCBtaWdodCBleHRlbmQgdG8gYmUgYSB0cnVlIGNsYXNzLg0KCSAqDQoJICoJQHBhcmFtCXN0cmluZwkJJGZpbGVuYW1lCVRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIHN0YXQNCgkgKglAcmV0dXJuCWFycmF5fGJvb2wJCQkJRmFsc2Ugb24gZmFpbHVyZSBvdGhlcndpc2UgYXJyYXkNCgkgKg0KCSAqLw0KCWNsYXNzIHBsdWdpbmJ1ZGR5X3N0YXQgew0KDQoJCWNvbnN0IFRISVJUWV9UV09fQklUID0gMzI7DQoJCWNvbnN0IFNJWFRZX0ZPVVJfQklUID0gNjQ7DQoJCQ0KCQlwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGlzX3BocCggJGJpdHMgKSB7DQoJCQ0KCQkJJHJlc3VsdCA9ICggKCBQSFBfSU5UX1NJWkUgKiA4ICkgPT0gJGJpdHMgKSA/IHRydWUgOiBmYWxzZTsNCgkJCQ0KCQkJcmV0dXJuICRyZXN1bHQ7DQoJCQ0KCQl9DQoJDQoJCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gc3RhdCggJGZpbGVuYW1lICkgew0KCQkNCgkJCSRyZXN1bHQgPSBmYWxzZTsNCg0KCQkJLy8gSWYgdGhlIGZpbGUgaXMgcmVhZGFibGUgdGhlbiB3ZSBzaG91bGQgYmUgYWJsZSB0byBzdGF0IGl0IA0KCQkJaWYgKCBAaXNfcmVhZGFibGUoICRmaWxlbmFtZSApICkgew0KCQkJDQoJCQkJJHN0YXRzID0gQHN0YXQoICRmaWxlbmFtZSApOw0KCQkJCQ0KCQkJCWlmICggZmFsc2UgIT09ICRzdGF0cyApIHsNCgkJCQkNCgkJCQkJLy8gTG9va3MgbGlrZSB3ZSBnb3Qgc29tZSB2YWxpZCBkYXRhIC0gZm9yIG5vdyBqdXN0IHByb2Nlc3MgdGhlIHNpemUNCgkJCQkJaWYgKCBzZWxmOjppc19waHAoIHNlbGY6OlRISVJUWV9UV09fQklUICkgKSB7DQoJCQkJCQ0KCQkJCQkJLy8gUEhQIGlzIDMyIGJpdHMgc28gd2UgbWF5IGhhdmUgYSBmaWxlIHNpemUgcHJvYmxlbSBvdmVyIDJHQi4NCgkJCQkJCS8vIFRoaXMgaXMgb25lIHdheSB0byB0ZXN0IGZvciBhIGZpbGUgc2l6ZSBwcm9ibGVtIC0gdGhlcmUgYXJlIG90aGVycw0KCQkJCQkJaWYgKCAwID4gJHN0YXRzWyAnc2l6ZScgXSApIHsNCgkJCQkJCQ0KCQkJCQkJCS8vIFVuc2lnbmVkIGxvbmcgaGFzIGJlZW4gaW50ZXJwcmV0ZWQgYXMgYSBzaWduZWQgaW50IGFuZCBoYXMgc2lnbiBiaXQNCgkJCQkJCQkvLyBzZXQgc28gaXMgYXBwZWFyaW5nIGFzIG5lZ2F0aXZlIC0gbWFnaWNhbGx5IGNvbnZlcnQgaXQgdG8gYSBkb3VibGUNCgkJCQkJCQkvLyBOb3RlOiB0aGlzIG9ubHkgd29ya3MgdG8gZ2l2ZSB1cyBhbiBleHRlbnNpb24gZnJvbSAyR0IgdG8gNEdCIGJ1dCB0aGF0DQoJCQkJCQkJLy8gc2hvdWxkIGJlIGVub3VnaCBhcyB0aGUgdW5kZXJseWluZyBPUyBwcm9iYWJseSBjYW4ndCBzdXBwb3J0ID40R0Igb3INCgkJCQkJCQkvLyB6aXAgY29tbWFuZCBjYW5ub3QgYW55d2F5DQoJCQkJCQkJJHN0YXRzWyAnZHNpemUnIF0gPSAoIChkb3VibGUpMHg4MDAwMDAwMCArICggJHN0YXRzWyAnc2l6ZScgXSAmIDB4N0ZGRkZGRkYgKSApOw0KCQkJCQkJDQoJCQkJCQl9IGVsc2Ugew0KCQkJCQkJDQoJCQkJCQkJLy8gQXNzdW1lIGl0J3MgdmFsaWQNCgkJCQkJCQkkc3RhdHNbICdkc2l6ZScgXSA9IChkb3VibGUpJHN0YXRzWyAnc2l6ZScgXTsNCgkJCQkJCQ0KCQkJCQkJfQ0KCQkJCQkJCQkJCQkJDQoJCQkJCX0gZWxzZSB7DQoJCQkJCQ0KCQkJCQkJLy8gTG9va3MgbGlrZSA2NCBiaXQgUEhQIHNvIGZpbGUgc2l6ZSBzaG91bGQgYmUgZmluZQ0KCQkJCQkJLy8gRm9yY2UgYWRkZWQgaXRlbSB0byBkb3VibGUgZm9yIGNvbnNpc3RlbmN5DQoJCQkJCQkkc3RhdHNbICdkc2l6ZScgXSA9IChkb3VibGUpJHN0YXRzWyAnc2l6ZScgXTsNCgkJCQkJDQoJCQkJCX0NCgkJCQkJDQoJCQkJCS8vIEFkZCBhbiBhZGRpdGlvbmFsIGl0ZW0gZm9yIHNob3J0IG9jdGFsIHJlcHJlc2VudGF0aW9uIG9mIG1vZGUNCgkJCQkJJHN0YXRzWyAnbW9kZV9vY3RhbF9mb3VyJyBdID0gc3Vic3RyKCBzcHJpbnRmKCAnJW8nLCAkc3RhdHNbICdtb2RlJyBdICksIC00ICk7DQoJCQkJCQ0KCQkJCQkkcmVzdWx0ID0gJHN0YXRzOw0KCQkJCQ0KCQkJCX0gZWxzZSB7DQoJCQkJDQoJCQkJCS8vIEhtbSwgc3RhdCgpIGZhaWxlZCBmb3Igc29tZSByZWFzb24gLSBjb3VsZCBiZSBhbiBMRlMgcHJvYmxlbSB3aXRoIHRoZQ0KCQkJCQkvLyB3YXkgUEhQIGhhcyBiZWVuIGJ1aWx0IDotKA0KCQkJCQkvLyBUT0RPOiBDb25zaWRlciBhbHRlcm5hdGl2ZXMgLSBtYXkgYmUgYWJsZSB0byB1c2UgZXhlYyB0byBydW4gdGhlDQoJCQkJCS8vIGNvbW1hbmQgbGluZSBzdGF0IGZ1bmN0aW9uIHdoaWNoIF9zaG91bGRfIGJlIG9rIGFuZCB3ZSBjYW4gbWFwIG91dHB1dA0KCQkJCQkvLyBpbnRvIHRoZSBzYW1lIGFycmF5IGZvcm1hdC4gVGhpcyBkb2VzIGRlcGVuZCBvbiBoYXZpbmcgZXhlYygpIGFuZCB0aGUNCgkJCQkJLy8gc3RhdCBjb21tYW5kIGF2YWlsYWJsZSBhbmQgaXQncyBkZWZpbml0ZWx5IG5vdCBhIG5pY2Ugb3B0aW9uDQoJCQkJCSRyZXN1bHQgPSBmYWxzZTsNCgkJCQkNCgkJCQl9DQoJCQkNCgkJCX0NCgkJCQ0KCQkJcmV0dXJuICRyZXN1bHQ7DQoJCX0NCgkNCgl9DQoNCglhYnN0cmFjdCBjbGFzcyBwbHVnaW5idWRkeV96YnppcGNvcmUgew0KCQ0KCQkvLyBzdGF0dXMgbWV0aG9kIHR5cGUgcGFyYW1ldGVyIHZhbHVlcyAtIHdvdWxkIGxpa2UgYSBjbGFzcyBmb3IgdGhpcw0KCQljb25zdCBTVEFUVVNfVFlQRV9ERVRBSUxTICAgICAgID0gJ2RldGFpbHMnOw0KCQkNCgkJLy8gQ29uc3RhbnRzIGZvciBoYW5kbGluZyBwYXRocw0KCQljb25zdCBOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgID0gJy8nOw0KCQljb25zdCBESVJFQ1RPUllfU0VQQVJBVE9SUyAgICAgID0gJy9cXCc7DQoNCgkJLy8gQ29uc3RhbnRzIGZvciByZXN1bHQgaGFuZGxpbmcNCgkJY29uc3QgTUFYX0VSUk9SX0xJTkVTX1RPX1NIT1cgICA9IDIwOw0KCQljb25zdCBNQVhfV0FSTklOR19MSU5FU19UT19TSE9XID0gMjA7DQoJCWNvbnN0IE1BWF9PVEhFUl9MSU5FU19UT19TSE9XICAgPSAyMDsNCgkJDQoJCS8vIEVudW1lcmF0ZWQgdHlwZXMgdGhhdCB3ZSBuZWVkIGZvciBub3cNCgkJLy8gTm90ZTogVmFsdWVzIG11c3QgYmUgc2VxdWVudGlhbA0KCQljb25zdCBPU19UWVBFX1VOS05PV04gCT0JMDsNCgkJY29uc3QgT1NfVFlQRV9OSVgJCT0JMTsNCgkJY29uc3QgT1NfVFlQRV9XSU4JCT0JMjsNCgkJY29uc3QgT1NfVFlQRV9NQVgJCT0JMjsNCg0KCQljb25zdCBaSVBfV0FSTklOR19VTktOT1dOICAJCQk9IDA7DQoJCWNvbnN0IFpJUF9XQVJOSU5HX0dFTkVSSUMgIAkJCT0gMTsNCgkJY29uc3QgWklQX1dBUk5JTkdfU0tJUFBFRCAgCQkJPSAyOw0KCQljb25zdCBaSVBfV0FSTklOR19GSUxURVJFRCAJCQk9IDM7DQoJCWNvbnN0IFpJUF9XQVJOSU5HX0xPTkdQQVRIIAkJCT0gNDsNCgkJY29uc3QgWklQX1dBUk5JTkdfSUdOT1JFRF9TWU1MSU5LIAk9IDU7DQoJCQ0KCQljb25zdCBaSVBfT1RIRVJfVU5LTk9XTiAgICAgICAgID0gMDsNCgkJY29uc3QgWklQX09USEVSX0dFTkVSSUMgICAgICAgICA9IDE7DQoJCWNvbnN0IFpJUF9PVEhFUl9TS0lQUEVEICAJCT0gMjsNCgkJY29uc3QgWklQX09USEVSX0ZJTFRFUkVEIAkJPSAzOw0KCQljb25zdCBaSVBfT1RIRVJfTE9OR1BBVEggCQk9IDQ7DQoJCWNvbnN0IFpJUF9PVEhFUl9JR05PUkVEX1NZTUxJTksJPSA1Ow0KCQkNCgkJY29uc3QgQ09NTUFORF9VTktOT1dOX1BBVEgJPSAwOw0KCQljb25zdCBDT01NQU5EX1pJUF9QQVRICQk9IDE7DQoJCWNvbnN0IENPTU1BTkRfVU5aSVBfUEFUSAk9IDI7DQoNCgkJcHVibGljICRfdmVyc2lvbiA9ICcxLjAnOw0KDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBwbHVnaW4gcGF0aCBmb3IgdGhpcyBwbHVnaW4NCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgJF9wbHVnaW5QYXRoIHN0cmluZw0KICAgICAgICAgKi8NCiAgICAgICAgcHVibGljICRfcGx1Z2luUGF0aCA9ICcnOw0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBUaGUgcGF0aCBvZiB0aGlzIGRpcmVjdG9yeSBub2RlDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIHBhdGggc3RyaW5nDQogICAgICAgICAqLw0KICAgICAgICBwcm90ZWN0ZWQgJF9wYXRoID0gIiI7DQogICAgICAgIA0KICAgICAgICAvKioNCiAgICAgICAgICogVGhlIGFic29sdXRlIHBhdGhzIHRvIGJlIGV4Y2x1ZGVkLCBtdXN0IGJlIC8gdGVybWluYXRlZA0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBwYXRoc190b19leGNsdWRlIGFycmF5IG9mIHN0cmluZw0KICAgICAgICAgKi8NCiAgICAgICAgcHJvdGVjdGVkICRfcGF0aHNfdG9fZXhjbHVkZSA9IGFycmF5KCk7DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBkZXRhaWxzIG9mIHRoZSBtZXRob2QNCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgbWV0aG9kX2RldGFpbHMgYXJyYXkNCiAgICAgICAgICovDQoJCXByb3RlY3RlZCAkX21ldGhvZF9kZXRhaWxzID0gYXJyYXkoKTsNCgkJDQogICAgICAgIC8qKg0KICAgICAgICAgKiBUaGUgc2V0IG9mIHBhdGhzIHdoZXJlIHRvIGxvb2sgZm9yIGV4ZWN1dGFibGVzDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyICBleGVjdXRhYmxlX3BhdGhzCWFycmF5DQogICAgICAgICAqLw0KCQlwcm90ZWN0ZWQgJF9leGVjdXRhYmxlX3BhdGhzID0gYXJyYXkoKTsNCgkJDQogICAgICAgIC8qKg0KICAgICAgICAgKiBBcnJheSBvZiBzdGF0dXMgaW5mb3JtYXRpb24NCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgc3RhdHVzIGFycmF5DQogICAgICAgICAqLw0KCQlwcm90ZWN0ZWQgJF9zdGF0dXMgPSBhcnJheSgpOw0KCQkNCiAgICAgICAgLyoqDQogICAgICAgICAqIEVudW1lcmF0ZWQgT1MgdHlwZQ0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBvc190eXBlCWludA0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfb3NfdHlwZSA9IHNlbGY6Ok9TX1RZUEVfVU5LTk9XTjsNCgkJDQogICAgICAgIC8qKg0KICAgICAgICAgKiBDb252ZW5pZW5jZSBib29sZWFuIGluZGljYXRpbmcgaWYgUEhQIGhhcyBleGVjX2RpciBzZXQgb3Igbm90DQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIGV4ZWNfZGlyX3NldAlib29sDQogICAgICAgICAqLw0KCQlwcm90ZWN0ZWQgJF9leGVjX2Rpcl9zZXQgPSBmYWxzZTsNCgkJDQogICAgICAgIC8qKg0KICAgICAgICAgKiBDb252ZW5pZW5jZSBib29sZWFuIGluZGljYXRpbmcgaWYgV2FybmluZ3Mgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBidWlsZGluZyBhcmNoaXZlcw0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBpZ25vcmVfd2FybmluZ3MJYm9vbA0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfaWdub3JlX3dhcm5pbmdzID0gZmFsc2U7DQoJCQ0KICAgICAgICAvKioNCiAgICAgICAgICogQ29udmVuaWVuY2UgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHN5bWxpbmtzIHNob3VsZCBiZSBpZ25vcmVkL25vdC1mb2xsb3dlZCB3aGVuIGJ1aWxkaW5nIGFyY2hpdmVzDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIGlnbm9yZV9zeW1saW5rcwlib29sDQogICAgICAgICAqLw0KCQlwcm90ZWN0ZWQgJF9pZ25vcmVfc3ltbGlua3MgPSBmYWxzZTsNCgkJDQogICAgICAgICAvKioNCiAgICAgICAgICogQ29udmVuaWVuY2UgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGNvbXByZXNzaW9uIHNob3VsIGRiZSB1c2VkIHdoZW4gYnVpbGRpbmcgYXJjaGl2ZXMNCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgY29tcHJlc3Npb24JYm9vbA0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfY29tcHJlc3Npb24gPSBmYWxzZTsNCgkJDQogICAgICAgLyoqDQogICAgICAgICAqIFVzZWQgdG8gdHJhbnNsYXRlIG91ciB3YXJuaW5ncyByZWFzb25zIGludG8gYSBsb25nZXIgZGVzY3JpcHRpb24NCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgYXJyYXkNCiAgICAgICAgICovDQoJCXB1YmxpYyBzdGF0aWMgJF93YXJuaW5nX2Rlc2MgPSBhcnJheSggc2VsZjo6WklQX1dBUk5JTkdfVU5LTk9XTiAgCQkJPT4gJ3dhcm5pbmcgcmVhc29uIHVua25vd24nLA0KCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9XQVJOSU5HX0dFTkVSSUMgIAkJCT0+ICdnZW5lcmFsIHByb2JsZW0gYXMgaW5kaWNhdGVkJywNCgkJCQkJCQkJCQkJICBzZWxmOjpaSVBfV0FSTklOR19TS0lQUEVEICAJCQk9PiAnZmlsZSB1bnJlYWRhYmxlIG9yIGRvZXMgbm90IGV4aXN0JywNCgkJCQkJCQkJCQkJICBzZWxmOjpaSVBfV0FSTklOR19GSUxURVJFRCAJCQk9PiAnZmlsZSBmaWx0ZXJlZCcsDQoJCQkJCQkJCQkJCSAgc2VsZjo6WklQX1dBUk5JTkdfTE9OR1BBVEggCQkJPT4gJ2ZpbGVuYW1lIHBhdGggdG9vIGxvbmcnLA0KCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9XQVJOSU5HX0lHTk9SRURfU1lNTElOSyAgCT0+ICdmaWxlIGlzIGEgc3ltbGluayBhbmQgaXMgaWdub3JlZCBiYXNlZCBvbiBzZXR0aW5ncycsDQoJCQkJCQkJCQkJCSApOw0KDQoJCXB1YmxpYyBzdGF0aWMgJF9vdGhlcl9kZXNjICAgPSBhcnJheSggc2VsZjo6WklQX09USEVSX1VOS05PV04gCQkJPT4gJ290aGVyIHJlYXNvbiB1bmtub3duJywNCgkJCQkJCQkJCQkJICBzZWxmOjpaSVBfT1RIRVJfR0VORVJJQyAJCQk9PiAnb3RoZXIgcHJvYmxlbSBhcyBpbmRpY2F0ZWQnLA0KCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9PVEhFUl9TS0lQUEVEIAkJCT0+ICdmaWxlIHVucmVhZGFibGUgb3IgZG9lcyBub3QgZXhpc3QnLA0KCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9PVEhFUl9GSUxURVJFRAkJCT0+ICdmaWxlIGZpbHRlcmVkJywNCgkJCQkJCQkJCQkJICBzZWxmOjpaSVBfT1RIRVJfTE9OR1BBVEggCQkJPT4gJ2ZpbGVuYW1lIHBhdGggdG9vIGxvbmcnLA0KCQkJCQkJCQkJCQkgIHNlbGY6OlpJUF9PVEhFUl9JR05PUkVEX1NZTUxJTksJPT4gJ2ZpbGUgaXMgYSBzeW1saW5rIGFuZCBpcyBpZ25vcmVkIGJhc2VkIG9uIHNldHRpbmdzJywNCgkJCQkJCQkJCQkJICk7DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBTZXJ2ZXIgQVBJIHRoYXQgaXMgaW4gdXNlDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIHN0cmluZw0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfc2FwaV9uYW1lID0gIiI7DQoNCgkJLyoqDQoJCSAqCV9fY29uc3RydWN0KCkNCgkJICoJDQoJCSAqCURlZmF1bHQgY29uc3RydWN0b3IuDQoJCSAqCQ0KCQkgKglAcmV0dXJuCQludWxsDQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7DQoJCQ0KCQkJLy8gTWFrZSBzdXJlIHdlIGtub3cgd2hhdCB3ZSBhcmUgcnVubmluZyBvbiBmb3IgbGF0ZXINCgkJCSR0aGlzLT5zZXRfb3NfdHlwZSgpOw0KCQkJDQoJCQkvLyBEZXJpdmUgd2hldGhlciB3ZSBhcmUgaWdub3JpbmcgV2FybmluZ3Mgb3Igbm90IChleHBlY3RlZCB0byBiZSBvdmVycmlkZGVuIGJ5IHVzZXIpDQoJCQkkdGhpcy0+c2V0X2lnbm9yZV93YXJuaW5ncygpOw0KCQkJDQoJCQkvLyBEZXJpdmUgd2hldGhlciB3ZSBhcmUgaWdub3Jpbmcvbm90LWZvbGxvd2luZyBzeW1saW5rcyBvciBub3QgKGV4cGVjdGVkIHRvIGJlIG92ZXJyaWRkZW4gYnkgdXNlcikNCgkJCSR0aGlzLT5zZXRfaWdub3JlX3N5bWxpbmtzKCk7DQoJCQkNCgkJCS8vIERlcml2ZSB3aGV0aGVyIGNvbXByZXNzaW9uIHNob3VsZCBiZSB1c2VkIChleHBlY3RlZCB0byBiZSBvdmVycmlkZGVuIGJ5IHVzZXIpDQoJCQkkdGhpcy0+c2V0X2NvbXByZXNzaW9uKCk7DQoJCQkNCgkJCS8vIFNwZWNpZmljIG1ldGhvZCBjb25zdHJ1Y3RvciB3aWxsIG92ZXJyaWRlIHNvbWUgb2YgdGhlc2UgYW5kIHRoZSB0ZXN0cyBtYXkgb3ZlcnJpZGUgb3RoZXJzDQoJCQkkdGhpcy0+X21ldGhvZF9kZXRhaWxzWyAnYXR0cicgXSA9IGFycmF5KCAnbmFtZScgPT4gJ1Vua25vd24gTWV0aG9kJywNCgkJCQkJCQkJCQkJCQkgICdjb21wYXRpYmlsaXR5JyA9PiBmYWxzZSAsDQoJCQkJCQkJCQkJCQkJICAnaXNfY2hlY2tlcicgPT4gZmFsc2UsDQoJCQkJCQkJCQkJCQkJICAnaXNfbGlzdGVyJyA9PiBmYWxzZSwNCgkJCQkJCQkJCQkJCQkgICdpc19hcmNoaXZlcicgPT4gZmFsc2UsDQoJCQkJCQkJCQkJCQkJICAnaXNfdW5hcmNoaXZlcicgPT4gZmFsc2UsDQoJCQkJCQkJCQkJCQkJICAnaXNfY29tbWVudGVyJyA9PiBmYWxzZSwNCgkJCQkJCQkJCQkJCQkgICdpc196aXBwZXInID0+IGZhbHNlLA0KCQkJCQkJCQkJCQkJCSAgJ2lzX3VuemlwcGVyJyA9PiBmYWxzZSwNCgkJCQkJCQkJCQkJCQkgICdpc19leHRyYWN0b3InID0+IGZhbHNlDQoJCQkJCQkJCQkJCQkJICk7DQoNCgkJCS8vIE11c3QgX25vdF8gZGVmYXVsdCAncGF0aCcgdmFsdWVzIGJlY2F1c2Ugd2UgdGVzdCB3aGV0aGVyIHNldCBvciBub3QgdG8gZGVjaWRlIHdoZXRoZXIgdG8gdXNlDQoJCQkkdGhpcy0+X21ldGhvZF9kZXRhaWxzWyAncGFyYW0nIF0gPSBhcnJheSggLy8gJ3BhdGgnID0+ICcnLA0KCQkJCQkJCQkJCQkJCSAgICd6aXAnID0+IGFycmF5KCAvLyAncGF0aCcgPT4gJycsDQoJCQkJCQkJCQkJCQkJICAgCQkndmVyc2lvbicgPT4gYXJyYXkoICdtYWpvcicgPT4gMCwgJ21pbm9yJyA9PiAwICksDQoJCQkJCQkJCQkJCQkJICAgCQknb3B0aW9ucycgPT4gJycsDQoJCQkJCQkJCQkJCQkJICAgCQknaW5mbycgPT4gJycgKSwNCgkJCQkJCQkJCQkJCQkgICAndW56aXAnID0+IGFycmF5KCAvLyAncGF0aCcgPT4gJycsDQoJCQkJCQkJCQkJCQkJICAgCQkndmVyc2lvbicgPT4gYXJyYXkoICdtYWpvcicgPT4gMCwgJ21pbm9yJyA9PiAwICksDQoJCQkJCQkJCQkJCQkJICAgCQknb3B0aW9ucycgPT4gJycsDQoJCQkJCQkJCQkJCQkJICAgCQknaW5mbycgPT4gJycgKQ0KCQkJCQkJCQkJCQkJCSApOw0KDQoJCX0NCgkJDQoJCS8qKg0KCQkgKglfX2Rlc3RydWN0KCkNCgkJICoJDQoJCSAqCURlZmF1bHQgZGVzdHJ1Y3Rvci4NCgkJICoJDQoJCSAqCUByZXR1cm4JCW51bGwNCgkJICoNCgkJICovDQoJCXB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCApIHsNCg0KCQl9DQoJCQkJDQoJCS8qKg0KCQkgKglzZXRfb3NfdHlwZSgpDQoJCSAqDQoJCSAqCVNldHMgdGhlIGlkZW50aWZpZXIgZm9yIHRoZSBPUyB0eXBlIHRoYXQgd2UgYXJlIHJ1bm5pbmcgb24gdGhhdCBjYW4gdGhlbiBiZSB1c2VkIGZvcg0KCQkgKglPUyBzcGVjaWZpYyBwcm9jZXNzaW5nLiBJZiBubyBlbnVtZXJhdGVkIHR5cGUgdmFsdWUgaXMgcGFzc2VkIGluIHRoZW4gZGVkdWNlIHRoZQ0KCQkgKgl2YWx1ZSB0byBzZXQgZnJvbSBzeXN0ZW0gaW5mb3JtYXRpb24uDQoJCSAqCU5vdGU6IEN1cnJlbnRseSB1c2VzIFBIUF9PUyB3aGljaCBzdHJpY3RseSBzcGVha2luZyBpcyB0aGUgT1MgdGhhdCBQSFAgd2FzIGJ1aWx0IG9uDQoJCSAqCXdoZXJlYXMgcGhwX3VuYW1lKCkgY291bGQgYmUgdXNlZCB0byBkZXRlcm1pbmUgdGhlIGFjdHVhbCBPUyBiZWluZyBydW4gb24gaWYgd2UgcmVhbGx5DQoJCSAqCW5lZWQgdGhhdCAoYW5kIHNvbWV0aW1lcyBpdCBoYXMgdG8gcmV2ZXJ0IGJhY2sgdG8ganVzdCByZXR1cm5pbmcgdGhlIFBIUF9PUyB2YWx1ZSBpZg0KCQkgKgl0aGUgT1MgdW5hbWUgbGlicmFyeSBkb2Vzbid0IGV4aXN0IG9yIGlzbid0IHdvcmtpbmcgcHJvcGVybHkuDQoJCSAqDQoJCSAqCUBwYXJhbQkJJG9zX3R5cGUJaW50CQlPUyB0eXBlIHRvIHNldCAoY2FuIGJlIHVzZWQgdG8gb3ZlcnJpZGUgZGVkdWNlZCB0eXBlKQ0KCQkgKg0KCQkgKi8NCgkJIHB1YmxpYyBmdW5jdGlvbiBzZXRfb3NfdHlwZSggJG9zX3R5cGUgPSBQSFBfSU5UX01BWCApIHsNCgkJIA0KCQkgCS8vIENoZWNrIGlmIHdlIGhhdmUgYmVlbiBnaXZlbiBhIHZhbGlkIGVudW1lcmF0ZWQgdmFsdWUNCgkJIAlpZiAoICggc2VsZjo6T1NfVFlQRV9VTktOT1dOIDwgJG9zX3R5cGUgKSAmJiAoIHNlbGY6Ok9TX1RZUEVfTUFYID49ICRvc190eXBlICkgKSB7DQoJCSAJDQoJCSAJCSR0aGlzLT5fb3NfdHlwZSA9ICRvc190eXBlOw0KCQkgCQkNCgkJIAl9IGVsc2Ugew0KCQkgCQkNCgkJIAkJLy8gVXNlIFVDIGZvciBlYXNlIC0gdGhpcyBfc2hvdWxkIG5vdD8gY2F1c2UgYW55IGFtYmlndWl0eQ0KCQkgCQkkb3NfbmFtZSA9IHN0cnRvdXBwZXIoIFBIUF9PUyApOw0KCQkgDQoJCSAJCS8vIEN1cnJlbnRseSB3ZSdsbCBhc3N1bWUgYW55dGhpbmcgdGhhdCBkb2Vzbid0IGxvb2sgbGlrZSBXaW5kb3dzIGlzICpuaXggYmFzZWQNCgkJIAkJaWYgKCBzdWJzdHIoICRvc19uYW1lLCAwLCAzICkgPT09ICdXSU4nKSB7DQoJCSAJCQ0KCQkgCQkJJHRoaXMtPl9vc190eXBlID0gc2VsZjo6T1NfVFlQRV9XSU47DQoJCSAJCQkNCgkJIAkJfSBlbHNlIHsNCgkJIAkJDQoJCSAJCQkkdGhpcy0+X29zX3R5cGUgPSBzZWxmOjpPU19UWVBFX05JWDsNCgkJIAkJCQ0KCQkgCQl9DQoJCSAJDQoJCSAJfQ0KCQkgCQ0KCQkgCXJldHVybiAkdGhpczsNCgkJIAkNCgkJIH0NCg0KCQkvKioNCgkJICoJZ2V0X29zX3R5cGUoKQ0KCQkgKg0KCQkgKglHZXRzIHRoZSBlbnVtZXJhdGVkIGlkZW50aWZpZXIgZm9yIHRoZSBPUyB0eXBlIHRoYXQgd2UgYXJlIHJ1bm5pbmcgb24NCgkJICoNCgkJICoJQHJldHVybgkJaW50CQlFbnVtZXJhdGVkIE9TIHR5cGUgdmFsdWUNCgkJICoNCgkJICovDQoJCSBwdWJsaWMgZnVuY3Rpb24gZ2V0X29zX3R5cGUoICkgew0KCQkgDQoJCQlyZXR1cm4gJHRoaXMtPl9vc190eXBlOw0KDQoJCSB9DQoNCgkJLyoqDQoJCSAqCXNldF9leGVjX2Rpcl9mbGFnKCkNCgkJICoNCgkJICoJQ2hlY2tzIHdoZXRoZXIgZXhlY19kaXIgaXMgc2V0IGluIFBIUCBlbnZpcm9ubWVudCBhbmQgc2V0cyBpbnRlcm5hbCBmbGFnDQoJCSAqDQoJCSAqCUByZXR1cm4JCWJvb2wJCVRydWUgaXMgZXhlY19kaXIgaXMgc2V0IGFuZCBub3QtZW1wdHkNCgkJICoNCgkJICovDQoJCSBwdWJsaWMgZnVuY3Rpb24gc2V0X2V4ZWNfZGlyX2ZsYWcoICkgew0KCQkgDQoJCSAJJGV4ZWNfZGlyID0gJyc7DQoJCSAJJHJlc3VsdCA9IGZhbHNlOw0KDQoJCSAJaWYgKCAoIGZhbHNlICE9PSAoICRleGVjX2RpciA9IGluaV9nZXQoICdleGVjX2RpcicgKSApICkgJiYgKCAnJyAhPSB0cmltKCAkZXhlY19kaXIgKSApICkgew0KCQkgCQ0KCQkgCQkkcmVzdWx0ID0gdHJ1ZTsNCgkJIAkNCgkJIAl9IGVsc2Ugew0KCQkgCQ0KCQkgCQkkcmVzdWx0ID0gZmFsc2U7DQoJCSAJCQ0KCQkgCX0NCgkJIA0KCQkgCSR0aGlzLT5fZXhlY19kaXJfc2V0ID0gJHJlc3VsdDsNCg0KCQkJcmV0dXJuICR0aGlzOw0KDQoJCSB9DQoNCgkJLyoqDQoJCSAqCWdldF9leGVjX2Rpcl9mbGFnKCkNCgkJICoNCgkJICoJR2V0cyB0aGUgZmxhZyBpbmRpY2F0aW5nIHRoZSBzdGF0dXMgb2YgZXhlY19kaXIgc2V0dGluZw0KCQkgKg0KCQkgKglAcmV0dXJuCQlib29sCQlWYWx1ZSBvZiAkX2V4ZWNfZGlyX3NldA0KCQkgKg0KCQkgKi8NCgkJIHB1YmxpYyBmdW5jdGlvbiBnZXRfZXhlY19kaXJfZmxhZygpIHsNCgkJIA0KCQkJcmV0dXJuICR0aGlzLT5fZXhlY19kaXJfc2V0Ow0KDQoJCSB9DQoNCgkJLyoqDQoJCSAqCXNldF9pZ25vcmVfd2FybmluZ3MoKQ0KCQkgKg0KCQkgKglDaGVja3MgY29uZGl0aW9ucyB0byBzZWUgaWYgd2FybmluZ3Mgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBhcmNoaXZlcyBhcmUNCgkJICoJYmVpbmcgYnVpbHQuDQoJCSAqDQoJCSAqCUBwYXJhbQkJYm9vbAkkaWdub3JlCUZhbHNlIHRvIG5vdCBpZ25vcmUgd2FybmluZ3MsIFRydWUgdG8gZm9yY2UgaWdub3JlDQoJCSAqCUByZXR1cm4JCWJvb2wJCQlUcnVlIGlmIGNvbmRpdGlvbnMgaW5kaWNhdGUgd2FybmluZ3Mgc2hvdWxkIGJlIGlnbm9yZWQsIGZhbHNlIG90aGVyd2lzZQ0KCQkgKg0KCQkgKi8NCgkJIHB1YmxpYyBmdW5jdGlvbiBzZXRfaWdub3JlX3dhcm5pbmdzKCAkaWdub3JlID0gbnVsbCApIHsNCgkJIA0KCQkgCSR0aGlzLT5faWdub3JlX3dhcm5pbmdzID0gKCBpc19ib29sKCAkaWdub3JlICkgKSA/ICRpZ25vcmUgOiBmYWxzZSA7DQoNCgkJCXJldHVybiAkdGhpczsNCg0KCQkgfQ0KDQoJCS8qKg0KCQkgKglnZXRfaWdub3JlX3dhcm5pbmdzKCkNCgkJICoNCgkJICoJR2V0cyB0aGUgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgd2FybmluZ3Mgc2hvdWxkIGJlIGlnbm9yZWQgd2hlbiBidWlsZGluZyBhcmNoaXZlcw0KCQkgKg0KCQkgKglAcmV0dXJuCQlib29sCQlWYWx1ZSBvZiAkX2lnbm9yZV93YXJuaW5ncw0KCQkgKg0KCQkgKi8NCgkJIHB1YmxpYyBmdW5jdGlvbiBnZXRfaWdub3JlX3dhcm5pbmdzKCkgew0KCQkgDQoJCQlyZXR1cm4gJHRoaXMtPl9pZ25vcmVfd2FybmluZ3M7DQoNCgkJIH0NCg0KCQkvKioNCgkJICoJc2V0X2lnbm9yZV9zeW5saW5rcygpDQoJCSAqDQoJCSAqCUNoZWNrcyBjb25kaXRpb25zIHRvIHNlZSBpZiBzeW1saW5rcyBzaG91bGQgYmUgaWdub3JlZC9ub3QtZm9sbG93ZWQgd2hlbiBhcmNoaXZlcyBhcmUNCgkJICoJYmVpbmcgYnVpbHQuDQoJCSAqDQoJCSAqCUBwYXJhbQkJYm9vbAkkaWdub3JlCUZhbHNlIHRvIG5vdCBpZ25vcmUgc3ltbGlua3MsIFRydWUgdG8gZm9yY2UgaWdub3JlDQoJCSAqCUByZXR1cm4JCWJvb2wJCQlUcnVlIGlmIGNvbmRpdGlvbnMgaW5kaWNhdGUgc3ltbGlua3Mgc2hvdWxkIGJlIGlnbm9yZWQvbm90LWZvbGxvd2VkLCBmYWxzZSBvdGhlcndpc2UNCgkJICoNCgkJICovDQoJCSBwdWJsaWMgZnVuY3Rpb24gc2V0X2lnbm9yZV9zeW1saW5rcyggJGlnbm9yZSA9IG51bGwgKSB7DQoJCSANCgkJIAkkdGhpcy0+X2lnbm9yZV9zeW1saW5rcyA9ICAoIGlzX2Jvb2woICRpZ25vcmUgKSApID8gJGlnbm9yZSA6IHRydWUgOw0KDQoJCQlyZXR1cm4gJHRoaXM7DQoNCgkJIH0NCg0KCQkvKioNCgkJICoJZ2V0X2lnbm9yZV9zeW1saW5rcygpDQoJCSAqCQ0KCQkgKglUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgb3B0aW9uIHRvIGlnbm9yZSBzeW1saW5rcyBpcyBzZXQuIEluIHRoaXMgY29udGV4dCBpZ25vcmluZw0KCQkgKgltZWFucyBub3QgZm9sbG93aW5nIGJ1dCB0aGUgc3ltbGluayBpdHNlbGYgaXMgcmVjb3JkZWQgaW4gdGhlIGJhY2t1cA0KCQkgKgkNCgkJICoJQHJldHVybgkJYm9vbAkJCQlWYWx1ZSBvZiAkX2lnbm9yZV9zeW1saW5rcw0KCQkgKg0KCQkgKi8NCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldF9pZ25vcmVfc3ltbGlua3MoKSB7DQoJCQ0KCQkJcmV0dXJuICR0aGlzLT5faWdub3JlX3N5bWxpbmtzOw0KCQkNCgkJfQ0KCQkNCgkJLyoqDQoJCSAqCXNldF9jb21wcmVzc2lvbigpDQoJCSAqDQoJCSAqCUNoZWNrcyBjb25kaXRpb25zIHRvIHNlZSBpZiBjb21wcmVzc2lvbiBzaG91bGQgYmUgdXNlZCB3aGVuIGJ1aWxkaW5nIGFyY2hpdmUuDQoJCSAqDQoJCSAqCUBwYXJhbQkJYm9vbAkkY29tcHJlc3Npb24JRmFsc2UgdG8gcHJvaGliaXQgY29tcHJlc3Npb24sIFRydWUgdG8gZm9yY2UgY29tcHJlc3Npb24NCgkJICoJQHJldHVybgkJYm9vbAkJCQkJVHJ1ZSBpZiBjb25kaXRpb25zIGluZGljYXRlIGNvbXByZXNzaW9uIHNob3VsZCBiZSB1c2VkLCBmYWxzZSBvdGhlcndpc2UNCgkJICoNCgkJICovDQoJCSBwdWJsaWMgZnVuY3Rpb24gc2V0X2NvbXByZXNzaW9uKCAkY29tcHJlc3Npb24gPSBudWxsICkgew0KCQkgDQoJCSAJJHRoaXMtPl9jb21wcmVzc2lvbiA9ICAoIGlzX2Jvb2woICRjb21wcmVzc2lvbiApICkgPyAkY29tcHJlc3Npb24gOiB0cnVlIDsNCg0KCQkJcmV0dXJuICR0aGlzOw0KDQoJCSB9DQoNCgkJLyoqDQoJCSAqCWdldF9jb21wcmVzc2lvbigpDQoJCSAqCQ0KCQkgKglUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgb3B0aW9uIHRvIHVzZSBjb21wcmVzc2lvbiBpcyBzZXQuDQoJCSAqCQ0KCQkgKglAcmV0dXJuCQlib29sCQkJCVZhbHVlIG9mICRfY29tcHJlc3Npb24NCgkJICoNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBnZXRfY29tcHJlc3Npb24oKSB7DQoJCQ0KCQkJcmV0dXJuICR0aGlzLT5fY29tcHJlc3Npb247DQoJCQ0KCQl9DQoJCQ0KCQkvKioNCgkJICoJc2V0X3NhcGlfbmFtZSgpDQoJCSAqDQoJCSAqCVNldHMgdGhlIHNhcGkgbmFtZSB0byB0aGF0IGdpdmVuIG9yIGxlYXZlIGVtcHR5DQoJCSAqDQoJCSAqCUBwYXJhbQlzdHJpbmcJJG5hbWUJQSBzYXBpIG5hbWUgdG8gc2V0IChkZWZhdWx0IGVtcHR5KQ0KCQkgKglAcmV0dXJuCW9iamVjdAkJCVRoaXMgb2JqZWN0DQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X3NhcGlfbmFtZSggJHNhcGlfbmFtZSA9ICIiICkgew0KCQkNCgkJCSR0aGlzLT5fc2FwaV9uYW1lID0gJHNhcGlfbmFtZTsNCgkJCQ0KCQkJcmV0dXJuICR0aGlzOw0KCQkJDQoJCX0NCg0KCQkvKioNCgkJICoJZ2V0X3NhcGlfbmFtZSgpDQoJCSAqDQoJCSAqCVJldHVybnMgdGhlIHByZXZpb3VzbHkgc2V0IHNhcGkgbmFtZQ0KCQkgKg0KCQkgKglAcmV0dXJuCXN0cmluZwkJCVRoZSBzdG9yZWQgc2FwaSBuYW1lDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X3NhcGlfbmFtZSgpIHsNCgkJCQ0KCQkJcmV0dXJuICR0aGlzLT5fc2FwaV9uYW1lOw0KCQkJDQoJCX0NCg0KCQkvKioNCgkJICoJZ2V0X3N0YXR1cygpDQoJCSAqCQ0KCQkgKglSZXR1cm5zIHRoZSBzdGF0dXMgYXJyYXkNCgkJICoJDQoJCSAqCUByZXR1cm4JCWFycmF5CVRoZSBzdGF0dXMgYXJyYXkNCgkJICoNCgkJICovDQoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfc3RhdHVzKCkgew0KCQkNCgkJCXJldHVybiAkdGhpcy0+X3N0YXR1czsNCgkJDQoJCX0NCgkJDQoJCS8qKg0KCQkgKglsb2dfYXJjaGl2ZV9maWxlX3N0YXRzKCkNCgkJICoJDQoJCSAqCVByb2R1Y2VkIGEgc3RhdHVzIGxvZyBlbnRyeSBmb3IgdGhlIGFyY2hpdmUgZmlsZSBzdGF0cw0KCQkgKgkNCgkJICoJQHBhcmFtCXN0cmluZwkkZmlsZQlUaGUgZmlsZSB0byBzdGF0IGFuZCBhbmQgbG9nDQoJCSAqCUByZXR1cm4JCQ0KCQkgKg0KCQkgKi8NCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGxvZ19hcmNoaXZlX2ZpbGVfc3RhdHMoICRmaWxlICkgew0KCQkNCgkJCS8vIEdldCB0aGUgZmlsZSBzdGF0cyBzbyB3ZSBjYW4gbG9nIHNvbWUgaW5mb3JtYXRpb24NCgkJCSRmaWxlX3N0YXRzID0gcGx1Z2luYnVkZHlfc3RhdDo6c3RhdCggJGZpbGUgKTsNCgkJCQ0KCQkJLy8gT25seSBsb2cgYW55dGhpbmcgaWYgd2UgZ290IHNvbWUgdmFsaWQgZmlsZSBzdGF0cw0KCQkJaWYgKCBmYWxzZSAhPT0gJGZpbGVfc3RhdHMgKSB7DQoJCQkNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnWmlwIEFyY2hpdmUgZmlsZSBzaXplOiAlMSRzIGJ5dGVzLCBvd25lZCBieSB1c2VyOmdyb3VwICUyJHM6JTMkcyB3aXRoIHBlcm1pc3Npb25zICU0JHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJGZpbGVfc3RhdHNbICdkc2l6ZScgXSwgJGZpbGVfc3RhdHNbICd1aWQnIF0sICRmaWxlX3N0YXRzWyAnZ2lkJyBdLCAkZmlsZV9zdGF0c1sgJ21vZGVfb2N0YWxfZm91cicgXSApICk7DQoNCgkJCX0NCgkJCQ0KCQl9DQoNCgkJLyoqDQoJCSAqCWdldF9tZXRob2RfdGFnKCkNCgkJICoJDQoJCSAqCVJldHVybnMgdGhlIChzdGF0aWMpIG1ldGhvZCB0YWcNCgkJICoJDQoJCSAqCUByZXR1cm4JCXN0cmluZyBUaGUgbWV0aG9kIHRhZw0KCQkgKg0KCQkgKi8NCgkJYWJzdHJhY3QgcHVibGljIGZ1bmN0aW9uIGdldF9tZXRob2RfdGFnKCk7DQoNCgkJLyoqDQoJCSAqCWdldF9pc19jb21wYXRpYmlsaXR5X21ldGhvZCgpDQoJCSAqCQ0KCQkgKglSZXR1cm5zIHRoZSAoc3RhdGljKSBpc19jb21wYXRpYmlsaXR5X21ldGhvZCBib29sZWFuDQoJCSAqCQ0KCQkgKglAcmV0dXJuCQlib29sDQoJCSAqDQoJCSAqLw0KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gZ2V0X2lzX2NvbXBhdGliaWxpdHlfbWV0aG9kKCk7DQoNCgkJLyoqDQoJCSAqCWdldF9tZXRob2RfZGV0YWlscygpDQoJCSAqCQ0KCQkgKglSZXR1cm5zIHRoZSBkZXRhaWxzIGFycmF5DQoJCSAqCQ0KCQkgKglAcmV0dXJuCQlhcnJheQ0KCQkgKg0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIGdldF9tZXRob2RfZGV0YWlscygpIHsNCgkJDQoJCQlyZXR1cm4gJHRoaXMtPl9tZXRob2RfZGV0YWlsczsNCgkJCQ0KCQl9DQoNCgkJLyoqDQoJCSAqCXNldF9tZXRob2RfZGV0YWlscygpDQoJCSAqCQ0KCQkgKglTZXRzIHRoZSBpbnRlcm5hbCAoc2V0dGFibGUpIGRldGFpbHMNCgkJICoJDQoJCSAqCUBwYXJhbQkJYXJyYXkNCgkJICoJQHJldHVybgkJbnVsbA0KCQkgKg0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIHNldF9tZXRob2RfZGV0YWlscyggYXJyYXkgJGRldGFpbHMsICRtZXJnZSA9IHRydWUgKSB7DQoJCQ0KCQkJaWYgKCB0cnVlID09PSAkbWVyZ2UgKSB7DQoJCQkNCgkJCQkkdGhpcy0+X21ldGhvZF9kZXRhaWxzWyAnYXR0cicgXSA9IGFycmF5X21lcmdlKCAkdGhpcy0+X21ldGhvZF9kZXRhaWxzWyAnYXR0cicgXSwgJGRldGFpbHNbICdhdHRyJyBdICk7DQoJCQkJJHRoaXMtPl9tZXRob2RfZGV0YWlsc1sgJ3BhcmFtJyBdID0gYXJyYXlfbWVyZ2UoICR0aGlzLT5fbWV0aG9kX2RldGFpbHNbICdwYXJhbScgXSwgJGRldGFpbHNbICdwYXJhbScgXSApOw0KCQkJDQoJCQl9IGVsc2Ugew0KCQkJDQoJCQkJJHRoaXMtPl9tZXRob2RfZGV0YWlscyA9ICRkZXRhaWxzOw0KCQkJDQoJCQl9DQoJCQkNCgkJCXJldHVybiAkdGhpczsNCgkJCQkJCQ0KCQl9DQoNCgkJLyoqDQoJCSAqCWdldF9leGVjdXRhYmxlX3BhdGhzKCkNCgkJICoJDQoJCSAqCVJldHVybnMgdGhlIGV4ZWN1dGFibGVfcGF0aHMgYXJyYXkNCgkJICoJDQoJCSAqCUByZXR1cm4JCWFycmF5DQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X2V4ZWN1dGFibGVfcGF0aHMoKSB7DQoJCQ0KCQkJcmV0dXJuICR0aGlzLT5fZXhlY3V0YWJsZV9wYXRoczsNCgkJCQ0KCQl9DQoNCgkJLyoqDQoJCSAqCXNldF9leGVjdXRhYmxlX3BhdGhzKCkNCgkJICoJDQoJCSAqCVNldHMgdGhlIGV4ZWN1dGFibGVfcGF0aHMgYXJyYXkgc28gY2FuIGJlIHVzZWQgdG8gYXVnbWVudCBvciBvdmVycmlkZSB0aGUgZGVmYXVsdA0KCQkgKgkNCgkJICoJQHBhcmFtCQkkcGF0aHMJYXJyYXkJUGF0aHMgdG8gc2V0IG9yIG1lcmdlDQoJCSAqCUBwYXJhbQkJJG1lcmdlCWJvb2wJVHJ1ZSAoZGVmYXVsdCkgaWYgbWVyZ2luZyBwYXRocyB3aXRoIGN1cnJlbnQgcGF0aHMNCgkJICoJQHBhcmFtCQkkYmVmb3JlCWJvb2wJVHJ1ZSAoZGVmYXVsdCkgaWYgcGF0aHMgdG8gYmUgcHJlcGVuZGVkDQoJCSAqCUByZXR1cm4JCW51bGwNCgkJICoNCgkJICovDQoJCXB1YmxpYyBmdW5jdGlvbiBzZXRfZXhlY3V0YWJsZV9wYXRocyggYXJyYXkgJHBhdGhzLCAkbWVyZ2UgPSB0cnVlLCAkYmVmb3JlID0gdHJ1ZSApIHsNCgkJDQoJCQlpZiAoIHRydWUgPT09ICRtZXJnZSApIHsNCgkJCQ0KCQkJCWlmICggdHJ1ZSA9PT0gJGJlZm9yZSApIHsNCgkJCQkNCgkJCQkJJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzID0gYXJyYXlfbWVyZ2UoICRwYXRocywgJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzICk7DQoJCQkJCQ0KCQkJCX0gZWxzZSB7DQoJCQkNCgkJCQkJJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzID0gYXJyYXlfbWVyZ2UoICR0aGlzLT5fZXhlY3V0YWJsZV9wYXRocywgJHBhdGhzICk7DQoJCQkJDQoJCQkJfQ0KCQkJDQoJCQl9IGVsc2Ugew0KCQkJDQoJCQkJJHRoaXMtPl9leGVjdXRhYmxlX3BhdGhzID0gJHBhdGhzOw0KCQkJDQoJCQl9DQoJCQkNCgkJCXJldHVybiAkdGhpczsNCgkJCQkJCQ0KCQl9DQoNCgkJLyoqDQoJCSAqCWRlbGV0ZV9kaXJlY3RvcnlfcmVjdXJzaXZlKCkNCgkJICoJDQoJCSAqCVJlY3Vyc2l2ZWx5IGRlbGV0ZSBhIGRpcmVjdG9yeSBhbmQgaXQncyBjb250ZW50DQoJCSAqCQ0KCQkgKglAcGFyYW0JCXN0cmluZwkkZGlyZWN0b3J5CURpcmVjdG9yeSB0byBkZWxldGUNCgkJICoJQHJldHVybgkJYm9vbAkJCQlUcnVlIGlmIG9wZXJhdGlvbiBmdWxseSBzdWNjZXNzZnVsLCBvdGhlcndpc2UgZmFsc2UNCgkJICoNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBkZWxldGVfZGlyZWN0b3J5X3JlY3Vyc2l2ZSggJGRpcmVjdG9yeSApIHsNCgkJCWlmICggJycgPT0gJGRpcmVjdG9yeSApIHsNCgkJCQllcnJvcl9sb2coICdCYWNrdXBCdWRkeSBFcnJvciAjNDczODQzYzogSGFsdGVkIGVtcHR5IGRpcmVjdG9yeSBkZWxldGlvbi4nICk7DQoJCQkJcmV0dXJuIGZhbHNlOw0KCQkJfQ0KDQoJCQkvLyBSZW1vdmUgYW55IHRyYWlsaW5nIGRpcmVjdG9yeSBzZXBhcmF0b3Igc28gd2Uga25vdyB3aGVyZSB3ZSBhcmUNCgkJCSRkaXJlY3RvcnkgPSBydHJpbSggJGRpcmVjdG9yeSwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKTsNCgkJCQ0KCQkJLy8gTm9uLWV4aXN0ZW50IGRpcmVjdG9yeSBzbyBwcmV0ZW5kIHdlIGRlbGV0ZWQgaXQgb2sNCgkJCWlmICggIWZpbGVfZXhpc3RzKCAkZGlyZWN0b3J5ICkgKSB7DQoJCQkNCgkJCQlyZXR1cm4gdHJ1ZTsNCgkJCQkNCgkJCX0NCg0KCQkJLy8gTWFrZSBzdXJlIGl0IHdhc24ndCBqdXN0IGEgZmlsZSBvciBsaW5rIC0gaWYgc28ganVzdCBkZWxldGUgaXQgYW5kIHJldHVybgkJCQ0KCQkJaWYgKCAhaXNfZGlyKCAkZGlyZWN0b3J5ICkgfHwgaXNfbGluayggJGRpcmVjdG9yeSApICkgew0KCQkJDQoJCQkJcmV0dXJuIEB1bmxpbmsoICRkaXJlY3RvcnkgKTsNCgkJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gU28gaXQgaXMgYSBkaXJlY3Rvcnkgc28gcHJvY2VzcyBjb250ZW50DQoJCQlmb3JlYWNoICggc2NhbmRpciggJGRpcmVjdG9yeSApIGFzICRpdGVtICkgew0KCQkJDQoJCQkJLy8gU2tpcCB0aGUgdGhpcyBhbmQgcGFyZW50IGRpcmVjdG9yaWVzDQoJCQkJaWYgKCAkaXRlbSA9PSAnLicgfHwgJGl0ZW0gPT0gJy4uJyApIHsNCgkJCQkNCgkJCQkJY29udGludWU7DQoJCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCQkvLyBEZWxldGUgdGhlIGl0ZW0gaWYgd2UgY2FuCQkJDQoJCQkJaWYgKCAhJHRoaXMtPmRlbGV0ZV9kaXJlY3RvcnlfcmVjdXJzaXZlKCAkZGlyZWN0b3J5IC4gIi8iIC4gJGl0ZW0gKSApIHsNCgkJCQkNCgkJCQkJLy8gVE9ETzogU3VwcG9zZWRseSBjaGFuZ2UgdGhlIHBlcm1zIG9uIHRoZSBpdGVtIHNvIHdlIGNhbiBkZWxldGUgaXQ/DQoJCQkJCUBjaG1vZCggJGRpcmVjdG9yeSAuICIvIiAuICRpdGVtLCAwNzc3ICk7DQoJCQkJCQ0KCQkJCQlpZiAoICEkdGhpcy0+ZGVsZXRlX2RpcmVjdG9yeV9yZWN1cnNpdmUoICRkaXJlY3RvcnkgLiAiLyIgLiAkaXRlbSApICkgew0KCQkJCQkNCgkJCQkJCXJldHVybiBmYWxzZTsNCgkJCQkJCQ0KCQkJCQl9DQoJCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCX0NCgkJCQ0KCQkJcmV0dXJuIEBybWRpciggJGRpcmVjdG9yeSApOw0KCQkJCQ0KCQl9DQoJCQ0KCQkvKglfcmVuZGVyX2V4Y2x1c2lvbnNfZmlsZSgpDQoJCSAqCQ0KCQkgKglmdW5jdGlvbiBkZXNjcmlwdGlvbg0KCQkgKgkNCgkJICoJQHBhcmFtCQlzdHJpbmcJCSRmaWxlCQkJRmlsZSB0byB3cml0ZSBleGNsdXNpb25zIGludG8uDQoJCSAqCUBwYXJhbQkJYXJyYXkJCSRleGNsdXNpb25zCQlBcnJheSBvZiBkaXJlY3Rvcmllcy9wYXRocyB0byBleGNsdWRlLiBPbmUgcGVyIGxpbmUuDQoJCSAqCUBwYXJhbQkJYXRyaW5nCQkkcm9vdAkJCVJvb3QgZGlyZWN0b3J5IHRvIGV4Y2x1ZGUgcmVsYXRpdmUgdG8uDQoJCSAqCUByZXR1cm4JCW51bGwNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBfcmVuZGVyX2V4Y2x1c2lvbnNfZmlsZSggJGZpbGUsICRleGNsdXNpb25zLCAkcm9vdCA9ICcnICkgew0KCQkJaWYgKCAnJyA9PSAkcm9vdCApIHsNCgkJCQkkcm9vdCA9IEFCU1BBVEg7DQoJCQl9IGVsc2Ugew0KCQkJCSRyb290ID0gcnRyaW0oICRyb290LCBESVJFQ1RPUllfU0VQQVJBVE9SICkgLiBESVJFQ1RPUllfU0VQQVJBVE9SOw0KCQkJfQ0KDQoJCQkvLyBBcnJheSBmb3IgY2xlYW5lZCB1cCBleGNsdXNpb25zIGxpc3QNCgkJCSRzYW5pdGl6ZWRfZXhjbHVzaW9ucyA9IGFycmF5KCk7DQoJCQkNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0NyZWF0aW5nIGJhY2t1cCBleGNsdXNpb25zIGZpbGUgYCcgLiAkZmlsZSAuICdgLicgKTsNCgkJCS8vJGV4Y2x1c2lvbnMgPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRfZGlyZWN0b3J5X2V4Y2x1c2lvbnMoKTsNCgkJCQ0KCQkJLy8gVGVzdCBlYWNoIGV4Y2x1c2lvbiBmb3IgdmFsaWRpdHkgKHByZXNlbmNlKSBhbmQgZHJvcCB0aG9zZSBub3QgYWN0dWFsbHkgcHJlc2VudA0KCQkJZm9yZWFjaCggJGV4Y2x1c2lvbnMgYXMgJGV4Y2x1c2lvbiApIHsNCgkJCQkNCgkJCQkvLyBNYWtlIHN1cmUgcGxhdGZvcm0gc3BlY2lmaWMgZGlyZWN0b3J5IHNlcGFyYXRvcnMgYXJlIHVzZWQgKGNvdWxkIGhhdmUgbWlncmF0ZWQgZnJvbSBkaWZmZXJlbnQgcGxhdGZvcm0pDQoJCQkJJGV4Y2x1c2lvbiA9IHByZWdfcmVwbGFjZSggJ3xbJyAuIGFkZHNsYXNoZXMoIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICkgLiAnXSt8JywgRElSRUNUT1JZX1NFUEFSQVRPUiwgJGV4Y2x1c2lvbiApOw0KCQkJCQ0KCQkJCS8vIERJUkVDVE9SWS4NCgkJCQlpZiAoIGlzX2RpciggJHJvb3QgLiBsdHJpbSggJGV4Y2x1c2lvbiwgRElSRUNUT1JZX1NFUEFSQVRPUiApICkgKSB7DQoJCQkJCQ0KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdFeGNsdWRpbmcgZGlyZWN0b3J5IGAnIC4gJGV4Y2x1c2lvbiAuICdgLicgKTsNCgkJCQkJDQoJCQkJCS8vIE5lZWQgdG8gYWRkIHRoZSB3aWxkY2FyZCBzbyB0aGF0IHppcCB3aWxsIGV4Y2x1ZGUgdGhlIGRpcmVjdG9yeSBhbmQgY29udGVudA0KCQkJCQkkZXhjbHVzaW9uID0gcnRyaW0oICRleGNsdXNpb24sIERJUkVDVE9SWV9TRVBBUkFUT1IgKSAuIERJUkVDVE9SWV9TRVBBUkFUT1IgLiAnKic7DQoJCQkJDQoJCQkJLy8gRklMRS4NCgkJCQl9IGVsc2VpZiAoIGlzX2ZpbGUoICRyb290IC4gbHRyaW0oICRleGNsdXNpb24sIERJUkVDVE9SWV9TRVBBUkFUT1IgKSApICkgew0KCQkJCQkNCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnRXhjbHVkaW5nIGZpbGUgYCcgLiAkZXhjbHVzaW9uIC4gJ2AuJyApOw0KCQkJCQ0KCQkJCS8vIFNZTUJPTElDIExJTksuDQoJCQkJfSBlbHNlaWYgKCBpc19saW5rKCAkcm9vdCAuIGx0cmltKCAkZXhjbHVzaW9uLCBESVJFQ1RPUllfU0VQQVJBVE9SICkgKSApIHsNCgkJCQkJDQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0V4Y2x1ZGluZyBzeW1ib2xpYyBsaW5rIGAnIC4gJGV4Y2x1c2lvbiAuICdgLicgKTsNCgkJCQkNCgkJCQkvLyBET0VTIE5PVCBFWElTVC4NCgkJCQl9IGVsc2Ugew0KCQkJCQkNCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnT21pdHRpbmcgZXhjbHVzaW9uIGFzIGZpbGUvZGlyZWN0b3J5IGRvZXMgbm90IGN1cnJlbnRseSBleGlzdDogYCcgLiAkZXhjbHVzaW9uIC4gJ2AuJyApOw0KCQkJCQkNCgkJCQkJLy8gU2tpcCB0byBuZXh0IGV4Y2x1c2lvbg0KCQkJCQljb250aW51ZTsNCgkJCQkJDQoJCQkJfQ0KCQkJCQ0KCQkJCS8vIFdlIGhhdmUgYSB2YWxpZCBleGNsdWRlIHNvIGFkZCBpdA0KCQkJCSRzYW5pdGl6ZWRfZXhjbHVzaW9uc1tdID0gJGV4Y2x1c2lvbjsNCgkJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gUHV0IHRoZSBleGNsdXNpb25zIHRvIGEgZmlsZSBhcyBhIHN0cmluZw0KCQkJZmlsZV9wdXRfY29udGVudHMoICRmaWxlLCBpbXBsb2RlKCBQSFBfRU9MLCAkc2FuaXRpemVkX2V4Y2x1c2lvbnMgKSAuIFBIUF9FT0wgKTsNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgJ0JhY2t1cCBleGNsdXNpb25zIGZpbGUgY3JlYXRlZC4nICk7DQoJCQkNCgkJfSAvLyBFbmQgcmVuZGVyX2V4Y2x1c2lvbnNfZmlsZSgpLg0KCQkNCgkJLyoqDQoJCSAqCXNsYXNoaWZ5KCkNCgkJICoNCgkJICoJQSBmdW5jdGlvbiB0byBhZGQgYSBzbGFzaCB0byB0aGUgZW5kIG9mIGEgcGF0aC4gSXQgaXMgbXVjaCBsaWtlIHRoZSBXb3JkUHJlc3MgdHJhaWxpbmdzbGFzaGl0KCkNCgkJICoJYnV0IGFsbG93cyBmb3Igbm90IGFkZGluZyBhIHNsYXNoIHRvIGFuIGVtcHR5IHBhdGguIFdpbGwgYWRkIGEgbm9ybWFsaXplZCBzbGFzaCB1bmxlc3Mgb3ZlcnJpZGRlbg0KCQkgKglOb3RlOiBXaWxsIG5vdCBwcm9jZXNzIGFueSBlbWJlZGRlZCBkaXJlY3Rvcnkgc2VwYXJhdG9ycw0KCQkgKg0KCQkgKglAcGFyYW0Jc3RyaW5nCSRwYXRoCQkJCQlUaGUgcGF0aCB0byBhZGQgYSB0cmFpbGluZyBzbGFzaCB0bw0KCQkgKglAcGFyYW0JYm9vbAkkaWdub3JlX2VtcHR5CQkJVHJ1ZSAoZGVmYXVsdCkgaWYgc2hvdWxkIF9ub3RfIGFkZCBhIHRyYWlsaW5nIHNsYXNoIHRvIGFuIGVtcHR5IHBhdGgNCgkJICoJQHBhcmFtCWJvb2wJJHVzZV9ub3JtYWxpemVkX3NsYXNoCVRydWUgKGRlZmF1bHQpIHRvIGFkZCBhIG5vcm1hbGl6ZWQgc2xhc2gsIG90aGVyd2lzZSBhZGQgcGxhdGZvcm0gc2VwYXJhdG9yDQoJCSAqCUByZXR1cm4Jc3RyaW5nCQkJCQkJCVRoZSBwYXRoIHdpdGggdHJhaWxpbmcgc2xhc2ggb3B0aW9uYWxseSBhZGRlZA0KCQkgKg0KCQkgKi8NCgkJIA0KCQkgcHJvdGVjdGVkIGZ1bmN0aW9uIHNsYXNoaWZ5KCAkcGF0aCwgJGlnbm9yZV9lbXB0eSA9IHRydWUsICR1c2Vfbm9ybWFsaXplZF9zbGFzaCA9IHRydWUgKSB7DQoJCSANCgkJIAkvLyBDaGVjayBpZiBpdCBpcyBlbXB0eSBub3cgYmVmb3JlIHdlIG1heSByZW1vdmUgYSBzaW5nbGUgc2xhc2gNCgkJIAlpZiAoICEgKCBlbXB0eSggJHBhdGggKSAmJiAoIHRydWUgPT09ICRpZ25vcmVfZW1wdHkgKSApICkgew0KCQkgCQ0KCQkJCS8vIEZpcnN0IHJlbW92ZSBhbnkgdHJhaWxpbmcgc2xhc2ggdGhhdCBtYXkgYmUgcHJlc2VudA0KCQkJCSRwYXRoID0gJHRoaXMtPnVuc2xhc2hpZnkoICRwYXRoICk7DQoJCQkJDQoJCQkJaWYgKCB0cnVlID09PSAkdXNlX25vcm1hbGl6ZWRfc2xhc2ggKSB7DQoJCQkJDQoJCQkJCSRwYXRoID0gJHBhdGggLiBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1I7DQoJCQkJDQoJCQkJfSBlbHNlIHsNCgkJCQkNCgkJCQkJJHBhdGggPSAkcGF0aCAuIERJUkVDVE9SWV9TRVBBUkFUT1I7DQoJCQkJDQoJCQkJfQ0KCQkJCQ0KCQkgCX0NCgkJIAkNCgkJIAlyZXR1cm4gJHBhdGg7DQoJCSANCgkJIH0NCgkJDQoJCS8qKg0KCQkgKgl1bnNsYXNoaWZ5KCkNCgkJICoNCgkJICoJQSBmdW5jdGlvbiB0byByZW1vdmUgYSBzbGFzaCB0byB0aGUgZW5kIG9mIGEgcGF0aC4gSXQgaXMgbXVjaCBsaWtlIHRoZSBXb3JkUHJlc3MgdW50cmFpbGluZ3NsYXNoaXQoKQ0KCQkgKglidXQgY29wZXMgd2l0aCBlaXRoZXIgZm9ybSBvZiB0cmFpbGluZyBzbGFzaC4NCgkJICoJTm90ZTogV2lsbCBub3QgcHJvY2VzcyBhbnkgZW1iZWRkZWQgZGlyZWN0b3J5IHNlcGFyYXRvcnMgYW5kIG1heSBwcm9kdWNlIGFuIGVtcHR5IHBhdGguDQoJCSAqDQoJCSAqCUBwYXJhbQlzdHJpbmcJJHBhdGgJCQkJCVRoZSBwYXRoIHRvIHJlbW92ZSBhIHRyYWlsaW5nIHNsYXNoIGZyb20NCgkJICoJQHBhcmFtCWJvb2wJJGlnbm9yZV9lbXB0eQkJCVRydWUgKGRlZmF1bHQpIGlmIHNob3VsZCBwcm9jZWVkIGV2ZW4gaWYgd2lsbCBwcm9kdWNlIGFuIGVtcHR5IHBhdGgNCgkJICoJQHJldHVybglzdHJpbmcJCQkJCQkJVGhlIHBhdGggd2l0aCB0cmFpbGluZyBzbGFzaCByZW1vdmVkDQoJCSAqDQoJCSAqLw0KCQkgDQoJCSBwcm90ZWN0ZWQgZnVuY3Rpb24gdW5zbGFzaGlmeSggJHBhdGgsICRpZ25vcmVfZW1wdHkgPSB0cnVlICkgew0KCQkgDQoJCSAJLy8gQ3JlYXRlIGEgY2FuZGlkYXRlIHBhdGggdG8gb3B0aW9uYWxseSByZXR1cm4NCgkJIAkkY2FuZGlkYXRlX3BhdGggPSBydHJpbSggJHBhdGgsIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICk7DQoJCSANCgkJIAkvLyBJZiBjYW5kaWRhdGUgaXNuJ3QgZW1wdHkgb3Igd2UncmUgaWdub3JpbmcgaXQgYmVpbmcgZW1wdHkgYW55d2F5DQoJCSAJaWYgKCAhZW1wdHkoICRjYW5kaWRhdGVfcGF0aCApIHx8ICggdHJ1ZSA9PT0gJGlnbm9yZV9lbXB0eSApICkgew0KCQkgCQ0KCQkJCSRwYXRoID0gJGNhbmRpZGF0ZV9wYXRoOw0KCQkJCQ0KCQkgCX0NCgkJIAkNCgkJIAlyZXR1cm4gJHBhdGg7DQoJCSANCgkJIH0NCgkJDQoJCS8qKg0KCQkgKglsb2dfemlwX3JlcG9ydHMoKQ0KCQkgKg0KCQkgKglBIGZ1bmN0aW9uIHRvIHByb2Nlc3MgcmVwb3J0cyBwYXJzZWQgZnJvbSB0aGUgemlwIHByb2Nlc3Mgb3V0cHV0IGFuZCBsb2cgdGhlbSBhbmQgb3B0aW9uYWxseQ0KCQkgKglzZW5kIHRvIGEgZmlsZSBpZiB0aGVyZSBhcmUgYSBsb3Qgb2YgcmVwb3J0cy4gSWYgdGhlIG51bWJlciBvZiByZXBvcnRzIGlzIHN1Y2ggdGhhdCB0aGV5IHJlcXVpcmUNCgkJICoJdG8gYmUgd3JpdHRlbiB0byBhIGZpbGUgdGhlbiBhbGwgdGhlIHJlcG9ydHMgd2lsbCBiZSB3cml0dGVuIHRvIHRoZSBmaWxlLCBub3QganVzdCB0aGUgb3ZlcmZsb3cuDQouCQkgKg0KCQkgKglAcGFyYW0JYXJyYXkJJHJlcG9ydHNfbG9nCQkJYXJyYXkgY29udGFpbmluZyB0aGUgdHlwZSBvZiByZXBvcnRzIHRvIGxvZw0KCQkgKglAcGFyYW0JYXJyYXkJJHJlcG9ydHNfZGVzYwkJCWFycmF5IGNvbnRhaW5pbmcgdGV4dCBkZXNjcmlwdGlvbiBvZiByZXBvcnQgcmVhc29uDQoJCSAqCUBwYXJhbQlzdHJpbmcJJHJlcG9ydF9wcmVmaXgJCQlhIHByZWZpeCBzdHJpbmcgdG8gZ28gYmVmb3JlIHRoZSByZXBvcnQgdGV4dA0KCQkgKglAcGFyYW0JaW50ZWdlcgkkcmVwb3J0X2xpbmVzX3RvX3Nob3cJdGhlIG51bWJlciBvZiByZXBvcnRzIHRvIHNob3cgaW4gbG9nIGJlZm9yZSBvdmVyZmxvd2luZyB0byBhIGZpbGUNCgkJICoJQHBhcmFtCXN0cmluZwkkcmVwb3J0X2ZpbGUJCQlvdmVyZmxvdyBmaWxlIGlmIHRvbyBtYW55IHJlcG9ydHMgdG8gc2hvdyBkaXJlY3RseSBpbiBsb2cNCgkJICoJQHJldHVybglOL0EJCQkJCQkJCUN1cnJlbnRseSBubyByZXR1cm4gcGFyYW1ldGVyDQoJCSAqDQoJCSAqLw0KCQkgDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBsb2dfemlwX3JlcG9ydHMoICRyZXBvcnRzX2xvZywgJHJlcG9ydF9kZXNjLCAkcmVwb3J0X3ByZWZpeCwgJHJlcG9ydF9saW5lc190b19zaG93LCAkcmVwb3J0c19maWxlICkgew0KDQoJCQkkcmVwb3J0cyA9IGFycmF5KCk7DQoJCQkkcmVwb3J0c19jb3VudCA9IDA7DQoJCQkkcmVzdWx0ID0gZmFsc2U7DQoNCgkJCS8vIE1ha2Ugc3VyZSB3ZSBjbGVhciB1cCBhbnQgcHJldmlvdXMgcmVwb3J0cyBmaWxlIHRoYXQgbWF5IHN0aWxsIGJlIHByZXNlbnQNCgkJCWlmICggQGZpbGVfZXhpc3RzKCAkcmVwb3J0c19maWxlICkgKSB7DQoJDQoJCQkJQHVubGluayggJHJlcG9ydHNfZmlsZSApOw0KCQkNCgkJCX0NCg0KCQkJLy8gUGFyc2UgdGhlIHJlcG9ydHMgYXJyYXkgaW50byBhbiBvcmRlcmVkIGFycmF5IGJhc2VkIG9uIGlkIChsb2cgbGluZSBudW1iZXIpIGFzIHNvcnQga2V5DQoJCQlmb3JlYWNoICggJHJlcG9ydHNfbG9nIGFzICRyZWFzb24gPT4gJHJlcG9ydCApIHsNCgkNCgkJCQlmb3JlYWNoICggJHJlcG9ydCBhcyAkaWQgPT4gJGZpbGVuYW1lICkgew0KDQoJCQkJCSRyZXBvcnRzWyAkaWQgXSA9IHNwcmludGYoIF9fKCAnJTEkczogKCUyJHMpOiAlMyRzJyAuIFBIUF9FT0wsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICRyZXBvcnRfcHJlZml4LCAkcmVwb3J0X2Rlc2NbICRyZWFzb24gXSwgJGZpbGVuYW1lICk7DQoNCgkJCQl9DQoJDQoJCQl9DQoJDQoJCQkvLyBNYWtlIHN1cmUgYXJyYXkgaXMgbm93IG9yZGVyZWQgYnkgdGhlIG51bWVyaWMgbG9nIGxpbmUgbnVtYmVyIGtleQ0KCQkJJHJlc3VsdCA9IGtzb3J0KCAkcmVwb3J0cywgU09SVF9OVU1FUklDICk7DQoNCgkJCS8vIEFsd2F5cyBzaG93IHRoZSBmaXJzdCBudW1iZXIgb2YgbGluZXMgaW4gdGhlIGxvZw0KCQkJJHNob3dfbGluZXMgPSBhcnJheV9zbGljZSggJHJlcG9ydHMsIDAsICRyZXBvcnRfbGluZXNfdG9fc2hvdywgdHJ1ZSApOw0KDQoJCQlmb3JlYWNoICggJHNob3dfbGluZXMgYXMgJGxpbmUgKSB7DQoNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCAnWmlwIHByb2Nlc3MgcmVwb3J0ZWQ6ICcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkbGluZSApOw0KDQoJCQl9DQoJCQ0KCQkJLy8gSWYgdGhlcmUgd2VyZSBtb3JlIGxpbmVzIHRoZW4gb3V0cHV0IHRoZSB3aG9sZSB0byB0aGUgcmVwb3J0IGZpbGUNCgkJCSRyZXBvcnRzX2NvdW50ID0gc2l6ZW9mKCAkcmVwb3J0cyApOw0KCQkJaWYgKCAkcmVwb3J0c19jb3VudCAgPiAkcmVwb3J0X2xpbmVzX3RvX3Nob3cgKSB7DQoJDQoJCQkJQGZpbGVfcHV0X2NvbnRlbnRzKCAkcmVwb3J0c19maWxlLCAkcmVwb3J0cyApOw0KCQkNCgkJCQlpZiAoIEBmaWxlX2V4aXN0cyggJHJlcG9ydHNfZmlsZSApICkgew0KCQkNCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXyggJ1ppcCBwcm9jZXNzIHJlcG9ydGVkICUxJHMgbW9yZSAlMiRzIHJlcG9ydCUzJHMgLSBwbGVhc2UgcmV2aWV3IGluOiAlNCRzJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgKCAkcmVwb3J0c19jb3VudCAtICRyZXBvcnRfbGluZXNfdG9fc2hvdyApLCAkcmVwb3J0X3ByZWZpeCwgKCAoIDEgPT0gJHJlcG9ydHNfY291bnQgKSA/ICcnIDogJ3MnICksICRyZXBvcnRzX2ZpbGUgKSApOw0KCQkJDQoJCQkJfQ0KCQkNCgkJCX0NCgkJCQ0KCQl9DQoJCQ0KCQkvKioNCgkJICoJaXNfYXZhaWxhYmxlKCkNCgkJICoJDQoJCSAqCUEgZnVuY3Rpb24gdGhhdCB0ZXN0cyBmb3IgdGhlIGF2YWlsYWJpbGl0eSBvZiB0aGUgc3BlY2lmaWMgbWV0aG9kIGFuZCBpdHMgYXZhaWxhYmxlIG1vZGVzLiBXaWxsIHRlc3QgZm9yDQoJCSAqICBtdWx0aXBsZSBtb2RlcyAoemlwICYgdW56aXApIGFuZCBvbmx5IHJldHVybiBmYWxzZSBpZiBuZWl0aGVyIGlzIGF2YWlsYWJsZS4gQWN0dWFsIGF2YWlsYWJsZSBtb2RlcyB3aWxsDQoJCSAqICBiZSBpbmRpY2F0ZWQgaW4gdGhlIG1ldGhvZCBhdHRyaWJ1dGVzLg0KCQkgKgkNCgkJICoJQHBhcmFtCQlzdHJpbmcJJHRlbXBkaXIJVGVtcG9yYXJ5IGRpcmVjdG9yeSB0byB1c2UgZm9yIGFueSB0ZXN0IGZpbGVzIChtdXN0IGJlIHdyaXRlYWJsZSkNCgkJICoJQHJldHVybgkJYm9vbAkJCQlUcnVlIGlmIHRoZSBtZXRob2QgaXMgYXZhaWxhYmxlIGZvciBhdCBsZWFzdCBvbmUgbW9kZSwgZmFsc2Ugb3RoZXJ3aXNlDQoJCSAqDQoJCSAqLw0KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gaXNfYXZhaWxhYmxlKCAkdGVtcGRpciApOw0KCQkNCgkJLyoqDQoJCSAqCWNyZWF0ZSgpDQoJCSAqCQ0KCQkgKglBIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhbiBhcmNoaXZlIGZpbGUNCgkJICoJDQoJCSAqCVRoZSAkZXhjbHVkZXMgd2lsbCBiZSBhIGxpc3Qgb3IgcmVsYXRpdmUgcGF0aCBleGNsdWRlcyBpZiB0aGUgJGxpc3RtYWtlciBvYmplY3QgaXMgTlVMTCBvdGhlcndpc2UNCgkJICoJd2lsbCBiZSBhYnNvbHV0ZSBwYXRoIGV4Y2x1ZGVzIGFuZCByZWxhdGl2ZSBwYXRoIGV4Y2x1ZGVzIGNhbiBiZSBoYWQgZnJvbSB0aGUgJGxpc3RtYWtlciBvYmplY3QNCgkJICoJDQoJCSAqCUBwYXJhbQkJc3RyaW5nCSR6aXAJCQlGdWxsIHBhdGggJiBmaWxlbmFtZSBvZiBaSVAgQXJjaGl2ZSBmaWxlIHRvIGNyZWF0ZQ0KCQkgKglAcGFyYW0JCXN0cmluZwkkZGlyCQkJRnVsbCBwYXRoIG9mIGRpcmVjdG9yeSB0byBhZGQgdG8gWklQIEFyY2hpdmUgZmlsZQ0KCQkgKglAcGFyYW1lCQlhcnJheQkkZXhjbHVkZXMJCUxpc3Qgb2YgZWl0aGVyIGFic29sdXRlIHBhdGggZXhjbHVzaW9ucyBvciByZWxhdGl2ZSBleGNsdXNpb25zDQoJCSAqCUBwYXJhbQkJc3RyaW5nCSR0ZW1wZGlyCQlGdWxsIHBhdGggb2YgZGlyZWN0b3J5IGZvciB0ZW1wb3JhcnkgdXNhZ2UNCgkJICoJQHBhcmFtCQlvYmplY3QJJGxpc3RtYWtlcgkJVGhlIG9iamVjdCBmcm9tIHdoaWNoIHdlIGNhbiBnZXQgYW4gaW5jbHVzaW9ucyBsaXN0DQoJCSAqCUByZXR1cm4JCWJvb2wJCQkJCVRydWUgaWYgdGhlIGNyZWF0aW9uIHdhcyBzdWNjZXNzZnVsLCBmYWxzZSBvdGhlcndpc2UNCgkJICoNCgkJICovDQoJCWFic3RyYWN0IHB1YmxpYyBmdW5jdGlvbiBjcmVhdGUoICR6aXAsICRkaXIsICRleGNsdWRlcywgJHRlbXBkaXIsICRsaXN0bWFrZXIgPSBOVUxMICk7DQoJCQ0KCQkvKioNCgkJICoJZXh0cmFjdCgpDQoJCSAqDQoJCSAqCUV4dHJhY3RzIHRoZSBjb250ZW50cyBvZiBhIHppcCBmaWxlIHRvIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5IHVzaW5nIHRoZSBiZXN0IHVuemlwIG1ldGhvZHMgcG9zc2libGUuDQoJCSAqDQoJCSAqCUBwYXJhbQlzdHJpbmcJCSR6aXBfZmlsZQkJCQkJRnVsbCBwYXRoICYgZmlsZW5hbWUgb2YgWklQIGZpbGUgdG8gZXh0cmFjdCBmcm9tLg0KCQkgKglAcGFyYW0Jc3RyaW5nCQkkZGVzdGluYXRpb25fZGlyZWN0b3J5CQlGdWxsIGRpcmVjdG9yeSBwYXRoIHRvIGV4dHJhY3QgaW50by4NCgkJICoJQHBhcmFtCWFycmF5CQkkaXRlbXMJCQkJCQlNYXBwaW5nIG9mIHdoYXQgdG8gZXh0cmFjdCBhbmQgdG8gd2hhdA0KCQkgKglAcmV0dXJuCWJvb2wJCQkJCQkJCQl0cnVlIG9uIHN1Y2Nlc3MgKGFsbCBleHRyYWN0aW9ucyBzdWNjZXNzZnVsKSwgZmFsc2Ugb3RoZXJ3aXNlDQoJCSAqLw0KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gZXh0cmFjdCggJHppcF9maWxlLCAkZGVzdGluYXRpb25fZGlyZWN0b3J5ID0gJycsICRpdGVtcyA9IGFycmF5KCkgKTsNCg0KCQkvKioNCgkJICoJZmlsZV9leGlzdHMoKQ0KCQkgKgkNCgkJICoJVGVzdHMgd2hldGhlciBhIGZpbGUgKHdpdGggcGF0aCkgZXhpc3RzIGluIHRoZSBnaXZlbiB6aXAgZmlsZQ0KCQkgKglJZiBsZWF2ZV9vcGVuIGlzIHRydWUgdGhlbiB0aGUgemlwIG9iamVjdCB3aWxsIGJlIGxlZnQgb3BlbiBmb3IgZmFzdGVyIGNoZWNraW5nIGZvciBzdWJzZXF1ZW50IGZpbGVzIHdpdGhpbiB0aGlzIHppcA0KCQkgKgkNCgkJICoJQHBhcmFtCQlzdHJpbmcJJHppcF9maWxlCQlUaGUgemlwIGZpbGUgdG8gY2hlY2sNCgkJICoJQHBhcmFtCQlzdHJpbmcJJGxvY2F0ZV9maWxlCVRoZSBmaWxlIHRvIHRlc3QgZm9yDQoJCSAqCUBwYXJhbQkJYm9vbAkkbGVhdmVfb3BlbgkJT3B0aW9uYWw6IFRydWUgaWYgdGhlIHppcCBmaWxlIHNob3VsZCBiZSBsZWZ0IG9wZW4NCgkJICoJQHJldHVybgkJYm9vbAkJCQkJVHJ1ZSBpZiB0aGUgZmlsZSBpcyBmb3VuZCBpbiB0aGUgemlwIG90aGVyd2lzZSBmYWxzZQ0KCQkgKg0KCQkgKi8NCgkJYWJzdHJhY3QgcHVibGljIGZ1bmN0aW9uIGZpbGVfZXhpc3RzKCAkemlwX2ZpbGUsICRsb2NhdGVfZmlsZSwgJGxlYXZlX29wZW4gPSBmYWxzZSApOw0KCQkNCgkJLyoJZ2V0X2ZpbGVfbGlzdCgpDQoJCSAqCQ0KCQkgKglHZXQgYW4gYXJyYXkgb2YgYWxsIGZpbGVzIGluIGEgemlwIGZpbGUgd2l0aCBzb21lIGZpbGUgcHJvcGVydGllcy4NCgkJICoJDQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkkemlwX2ZpbGUJVGhlIGZpbGUgdG8gbGlzdCB0aGUgY29udGVudCBvZg0KCQkgKglAcmV0dXJuCQlib29sfGFycmF5CQkJCWZhbHNlIG9uIGZhaWx1cmUsIG90aGVyd2lzZSBhcnJheSBvZiBmaWxlIHByb3BlcnRpZXMgKG1heSBiZSBlbXB0eSkNCgkJICovDQoJCWFic3RyYWN0IHB1YmxpYyBmdW5jdGlvbiBnZXRfZmlsZV9saXN0KCAkemlwX2ZpbGUgKTsNCgkJDQoJCS8qCXNldF9jb21tZW50KCkNCgkJICoJDQoJCSAqCVJldHJpZXZlIGFyY2hpdmUgY29tbWVudC4NCgkJICoJDQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkJJHppcF9maWxlCQlGaWxlbmFtZSBvZiBhcmNoaXZlIHRvIHNldCBjb21tZW50IG9uLg0KCQkgKglAcGFyYW0JCXN0cmluZwkJCSRjb21tZW50CQlDb21tZW50IHRvIGFwcGx5IHRvIGFyY2hpdmUuDQoJCSAqCUByZXR1cm4JCWJvb2wJCQkJCQkJdHJ1ZSBvbiBzdWNjZXNzLCBvdGhlcndpc2UgZmFsc2UuDQoJCSAqLw0KCQlhYnN0cmFjdCBwdWJsaWMgZnVuY3Rpb24gc2V0X2NvbW1lbnQoICR6aXBfZmlsZSwgJGNvbW1lbnQgKTsNCg0KCQkvKglnZXRfY29tbWVudCgpDQoJCSAqCQ0KCQkgKglSZXRyaWV2ZSBhcmNoaXZlIGNvbW1lbnQuDQoJCSAqCQ0KCQkgKglAcGFyYW0JCXN0cmluZwkJJHppcF9maWxlCQlGaWxlbmFtZSBvZiBhcmNoaXZlIHRvIHJldHJpZXZlIGNvbW1lbnQgZnJvbS4NCgkJICoJQHJldHVybgkJYm9vbHxzdHJpbmcJCQkJCWZhbHNlIG9uIGZhaWx1cmUsIFppcCBjb21tZW50IG90aGVyd2lzZS4NCgkJICovDQoJCWFic3RyYWN0IHB1YmxpYyBmdW5jdGlvbiBnZXRfY29tbWVudCggJHppcF9maWxlICk7DQoJCQ0KDQoJfSAvLyBlbmQgcGx1Z2luYnVkZHlfemJ6aXBjb3JlIGNsYXNzLgkNCgkNCn0NCj8+DQo=
###PACKDATA,FILE_END,/lib/zipbuddy/zbzipcore.php,importbuddy/lib/zipbuddy/zbzipcore.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipexec.php,importbuddy/lib/zipbuddy/zbzipexec.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzippclzip.php,importbuddy/lib/zipbuddy/zbzippclzip.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipproc.php,importbuddy/lib/zipbuddy/zbzipproc.php
###PACKDATA,FILE_START,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php

###PACKDATA,FILE_END,/lib/zipbuddy/zbzipziparchive.php,importbuddy/lib/zipbuddy/zbzipziparchive.php
###PACKDATA,FILE_START,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php
PD9waHANCi8qKg0KICoJcGx1Z2luYnVkZHlfemlwYnVkZHkgQ2xhc3MgKEV4cGVyaW1lbnRhbCkNCiAqDQogKglIYW5kbGVzIHppcHBpbmcgYW5kIHVuemlwcGluZywgdXNpbmcgdGhlIGJlc3QgbWV0aG9kcyBhdmFpbGFibGUgYW5kIGZhbGxpbmcgYmFjayB0byB3b3JzZSBtZXRob2RzDQogKglhcyBuZWVkZWQgZm9yIGNvbXBhdGliaWxpdHkuIEFsbG93cyBmb3IgZm9yY2luZyBjb21wYXRpYmlsaXR5IG1vZGVzLg0KICoJDQogKglWZXJzaW9uOiAxLjAuMA0KICoJQXV0aG9yOiANCiAqCUF1dGhvciBVUkk6IA0KICoNCiAqDQogKi8NCg0KLy8gVGVzdCBpZiB3ZSBhcmUgbG9hZGluZyBhcyBzdGFuZGFyZCBvciBleHBlcmltZW50YWwgLSBpZiBleHBlcmltZW50YWwganVzdCBkcm9wIHRocm91Z2gNCmlmICggMCA9PT0gc3RyY21wKCBiYXNlbmFtZSggZGlybmFtZSggX19GSUxFX18gKSApLCAnemlwYnVkZHknICkgKSB7DQoJDQoJLy8gTGVnYWN5IHppcC4NCglpZiAoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FsdGVybmF0aXZlX3ppcF8xJ10gKSAmJiAoICcxJyA9PSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FsdGVybmF0aXZlX3ppcF8xJ10gKSApIHsNCg0KICAgICAgICBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FsdGVybmF0aXZlX3ppcF8xJ10gPSAwOw0KICAgICAgICBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FsdGVybmF0aXZlX3ppcF8yJ10gPSAwOw0KICAgICAgICBwYl9iYWNrdXBidWRkeTo6c2F2ZSgpOw0KCQ0KCQkvKg0KCQkvLyBVc2VyIGVuYWJsZWQgZXhwZXJpbWVudGFsIHNvIGxvb2sgZm9yIGl0IGFuZCBsb2FkIGl0IGlzIGZvdW5kLCBvdGhlcndpc2UgbG9nDQoJCSRsZWdhY3lfemlwYnVkZHkgPSBkaXJuYW1lKCBkaXJuYW1lKCBfX0ZJTEVfXyApICkgLiAnL3ppcGJ1ZGR5L2xlZ2FjeS56aXBidWRkeS5waHAnOw0KCQlpZiAoIEBpc19yZWFkYWJsZSggJGxlZ2FjeV96aXBidWRkeSApICkgew0KCQkJDQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdMb2FkaW5nIGxlZ2FjeSB6aXBidWRkeS4nICk7DQoJCQlyZXF1aXJlX29uY2UoICRsZWdhY3lfemlwYnVkZHkgKTsNCgkJCXJldHVybjsNCgkJCQ0KCQl9IGVsc2Ugew0KCQkJDQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdMZWdhY3kgWmlwIFN5c3RlbSBlbmFibGVkIGJ1dCBub3QgZm91bmQvcmVhZGFibGUgYXQ6ICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkJGxlZ2FjeV96aXBidWRkeSApICk7DQoJCQkNCgkJDQoJCX0NCgkJKi8NCgkNCgl9DQoJDQoJDQoJLy8gQ3VycmVudGx5IGxvYWRpbmcgYXMgc3RhbmRhcmQgc28gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gbG9hZCBleHBlcmltZW50YWwNCglpZiAoIGlzc2V0KCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FsdGVybmF0aXZlX3ppcF8yJ10gKSAmJiAoICcxJyA9PSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ2FsdGVybmF0aXZlX3ppcF8yJ10gKSApIHsNCgkNCgkJLy8gVXNlciBlbmFibGVkIGV4cGVyaW1lbnRhbCBzbyBsb29rIGZvciBpdCBhbmQgbG9hZCBpdCBpcyBmb3VuZCwgb3RoZXJ3aXNlIGxvZw0KCQkkZXhwZXJpbWVudGFsX3ppcGJ1ZGR5ID0gZGlybmFtZSggZGlybmFtZSggX19GSUxFX18gKSApIC4gJy94emlwYnVkZHkvemlwYnVkZHkucGhwJzsNCgkJaWYgKCBAaXNfcmVhZGFibGUoICRleHBlcmltZW50YWxfemlwYnVkZHkgKSApIHsNCgkJCQ0KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCAnTG9hZGluZyBleHBlcmltZW50YWwgemlwYnVkZHkuJyApOw0KCQkJcmVxdWlyZV9vbmNlKCAkZXhwZXJpbWVudGFsX3ppcGJ1ZGR5ICk7DQoJCQkNCgkJfSBlbHNlIHsNCgkJDQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdBbHRlcm5hdGUgWmlwIFN5c3RlbSBlbmFibGVkIGJ1dCBub3QgZm91bmQvcmVhZGFibGUgYXQ6ICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkZXhwZXJpbWVudGFsX3ppcGJ1ZGR5ICkgKTsNCg0KCQkNCgkJfQ0KCQ0KCX0NCg0KfSANCg0KaWYgKCAhY2xhc3NfZXhpc3RzKCAicGx1Z2luYnVkZHlfemlwYnVkZHkiICkgKSB7DQoNCgljbGFzcyBwbHVnaW5idWRkeV96aXBidWRkeSB7DQoJDQoJCWNvbnN0IFpJUF9NRVRIT0RTX1RSQU5TSUVOVCA9ICdwYl9iYWNrdXBidWRkeV9hdmFpbF96aXBfbWV0aG9kcyc7DQoJCWNvbnN0IFpJUF9NRVRIT0RTX1RSQU5TSUVOVF9FWFBFUklNRU5UQUwgPSAncGJfYmFja3VwYnVkZHlfYXZhaWxfeHppcF9tZXRob2RzJzsNCgkJY29uc3QgWklQX01FVEhPRFNfVFJBTlNJRU5UX0xJRkUgPSA0MzIwMDsgLy8gMTIgSG91cnMgLSByZWFsbHkgc2hvdWxkbid0IGNoYW5nZSB1bmxlc3Mgc2VydmVyIHByb2JsZW0NCgkJY29uc3QgTk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SID0gJy8nOw0KCQljb25zdCBESVJFQ1RPUllfU0VQQVJBVE9SUyA9ICcvXFwnOw0KDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBwbHVnaW4gcGF0aCBmb3IgdGhpcyBwbHVnaW4NCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgc3RyaW5nDQogICAgICAgICAqLw0KICAgICAgICBwdWJsaWMgJF9wbHVnaW5QYXRoID0gJyc7DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBwYXRoIG9mIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5IHRoYXQgY2FuIGJlIHVzZWQgZm9yIGNyZWF0aW5nIGZpbGVzIGFuZCBzdHVmZg0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBzdHJpbmcNCiAgICAgICAgICovDQogICAgICAgIHByb3RlY3RlZCAkX3RlbXBkaXIgPSAiIjsNCiAgICAgICAgDQogICAgICAgIC8qKg0KICAgICAgICAgKiBUaGUgbGlzdCBvZiB6aXAgbWV0aG9kcyB0aGF0IGFyZSByZXF1ZXN0ZWQgdG8gYmUgdXNlZA0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBhcnJheSBvZiBzdHJpbmcNCiAgICAgICAgICovDQogICAgICAgIHByb3RlY3RlZCAkX3JlcXVlc3RlZF96aXBfbWV0aG9kcyA9IGFycmF5KCk7DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBtb2RlIHdoaWNoIHRoZSBvYmplY3QgaXMgYmVpbmcgY3JlYXRlZCBmb3INCiAgICAgICAgICogTm90ZTogVGhpcyBpcyBub3cgaWdub3JlZCBhcyBhbiBvYmplY3QgaXMgaW5zdGFudGlhdGVkIGZvciBib3RoIHppcCAmIHVuemlwIHNlcnZpY2VzDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIHN0cmluZw0KICAgICAgICAgKi8NCiAgICAgICAgcHJvdGVjdGVkICRfbW9kZSA9ICIiOw0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBTdGF0dXMgbWVzc2FnZSBhcnJheSB1c2VkIHdoZW4gY2FsbGluZyBvdGhlciBtZXRob2RzIHRvIGdldCBzdGF0dXMgaW5mb3JtYXRpb24gYmFjaw0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBhcnJheSBvZiBzdHJpbmcNCiAgICAgICAgICovDQogICAgICAgIHB1YmxpYyAkX3N0YXR1cyA9IGFycmF5KCk7DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBsaXN0IG9mIHppcCBtZXRob2RzIHRoYXQgYXJlIHRvIGJlIHVzZWQgb3IgYXJlIGF2YWlsYWJsZQ0KICAgICAgICAgKiBIYWQgdG8gbWFrZSB0aGlzIHB1YmxpYyBmb3Igbm93IGJlY2F1c2Ugc29tZXRoaW5nIGFjY2Vzc2VzIGl0IGRpcmVjdGx5IC0gYmFkIGthcm1hDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIGFycmF5IG9mIHN0cmluZw0KICAgICAgICAgKi8NCiAgICAgICAgcHVibGljICRfemlwX21ldGhvZHMgPSBhcnJheSgpOw0KICAgICAgICANCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBkZXRhaWxzIG9mIHRoZSB2YXJpb3VzIHppcCBtZXRob2RzIHRoYXQgYXJlIGF2YWlsYWJsZQ0KICAgICAgICAgKiBIYXZlIHRvIG1ha2UgdGhpcyBhIHNlcGFyYXRlIGFycmF5IGluZGV4ZWQgYnkgdGhlIG1ldGhvZCB0YWcuIElkZWFsbHkgd291bGQgYmUgY29tYmluZWQNCiAgICAgICAgICogd2l0aCB0aGUgemlwIG1ldGhvZHMgYXJyYXkgYnV0IHRoYXQgd291bGQgaW52b2x2ZSBtb3JlIGdlbmVyYWwgY2hhbmdlcyBlbHNld2hlcmUgc28gdGhhdA0KICAgICAgICAgKiByZWZhY3RvcmluZyBjYW4gYmUgZG9uZSBsYXRlciAtIG1haW4gcHJvYmxlbSBpcyB0aGUgZGlyZWN0IGFjY2VzcyB0byB0aGUgemlwIG1ldGhvZHMNCiAgICAgICAgICogYXJyYXkgdGhhdCBpcyBtYWRlIHJhdGhlciB0aGFuIHRocm91Z2ggYSBmdW5jdGlvbi4NCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgYXJyYXkgb2YgYXJyYXkgb2YgYXJyYXkNCiAgICAgICAgICovDQogICAgICAgIHByb3RlY3RlZCAkX3ppcF9tZXRob2RzX2RldGFpbHMgPSBhcnJheSgpOw0KICAgICAgICANCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBsaXN0IG9mIHppcCBtZXRob2RzIHRoYXQgYXJlIHN1cHBvcnRlZCwgaS5lLiwgdGhlcmUgaXMgYSBzdXBwb3J0aW5nIGNsYXNzIGRlZmluZWQNCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgYXJyYXkgb2Ygc3RyaW5nDQogICAgICAgICAqLw0KICAgICAgICBwcm90ZWN0ZWQgJF9zdXBwb3J0ZWRfemlwX21ldGhvZHMgPSBhcnJheSgpOw0KICAgICAgICANCiAgICAgICAgLyoqDQogICAgICAgICAqIFdoZXRoZXIgb3Igbm90IHdlIGFyZSBmb3JjZSBvdmVycmlkaW5nIHppcCBtZXRob2QgY2FjaGluZyBmb3IgdGhpcyBpbnN0YW5jZSBvZiB6aXBidWRkeQ0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBib29sZWFuDQogICAgICAgICAqLw0KCQlwcm90ZWN0ZWQgJF96aXBfbWV0aG9kX2NhY2hpbmdfZm9yY2VfZGlzYWJsZWQgPSBmYWxzZTsNCg0KICAgICAgICAvKioNCiAgICAgICAgICogV2hldGhlciBvciBub3Qgd2UgY2FuIGNhbGwgYSBzdGF0dXMgY2FsYmFjaw0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBib29sDQogICAgICAgICAqLw0KCQlwcm90ZWN0ZWQgJF9oYXZlX3N0YXR1c19jYWxsYmFjayA9IGZhbHNlOw0KCQkNCiAgICAgICAgLyoqDQogICAgICAgICAqIE9iamVjdC0+bWV0aG9kIGFycmF5IGZvciBzdGF0dXMgZnVuY3Rpb24NCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgYXJyYXkNCiAgICAgICAgICovDQoJCXByb3RlY3RlZCAkX3N0YXR1c19jYWxsYmFjayA9IGFycmF5KCk7DQoJCQ0KICAgICAgICAvKioNCiAgICAgICAgICogVGhlIGRpcmVjdG9yeSBuYW1lIHRoYXQgd2UgYXJlIGxvYWRlZCBmcm9tIChub3Q6IG5vdCBwYXRoKQ0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBzdHJpbmcNCiAgICAgICAgICovDQoJCXByb3RlY3RlZCAkX3doZXJlYW1pID0gIiI7DQoJCQ0KICAgICAgICAvKioNCiAgICAgICAgICogV2hldGhlciB3ZSBhcmUgbG9hZGVkIGFzIHRoZSBleHBlcmltZW50YWwgemlwYnVkZHkNCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgYm9vbA0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfaXNfZXhwZXJpbWVudGFsID0gZmFsc2U7DQoJCQ0KICAgICAgICAvKioNCiAgICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHppcCBtZXRob2RzIHRyYW5zaWVudCB3aWxsIGJlIGRlcGVuZGVudCBvbiBpZiB3ZSBhcmUgc3RhbmRhcmQgb3IgZXhwZXJpbWVudGFsDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIHN0cmluZw0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfemlwX21ldGhvZHNfdHJhbnNpZW50ID0gIiI7DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFRoZSBTZXJ2ZXIgQVBJIHRoYXQgaXMgaW4gdXNlDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIHN0cmluZw0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfc2FwaV9uYW1lID0gIiI7DQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIENvbnZlbmllbmNlIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBXYXJuaW5ncyBzaG91bGQgYmUgaWdub3JlZCB3aGVuIGJ1aWxkaW5nIGFyY2hpdmVzDQogICAgICAgICAqIA0KICAgICAgICAgKiBAdmFyIGlnbm9yZV93YXJuaW5ncwlib29sDQogICAgICAgICAqLw0KCQlwcm90ZWN0ZWQgJF9pZ25vcmVfd2FybmluZ3MgPSBudWxsOw0KCQkNCiAgICAgICAgLyoqDQogICAgICAgICAqIENvbnZlbmllbmNlIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBzeW1saW5rcyBzaG91bGQgYmUgaWdub3JlZC9ub3QtZm9sbG93ZWQgd2hlbiBidWlsZGluZyBhcmNoaXZlcw0KICAgICAgICAgKiANCiAgICAgICAgICogQHZhciBpZ25vcmVfc3ltbGlua3MJYm9vbA0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfaWdub3JlX3N5bWxpbmtzID0gbnVsbDsNCgkJDQogICAgICAgICAvKioNCiAgICAgICAgICogQ29udmVuaWVuY2UgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIGNvbXByZXNzaW9uIHNob3VsIGRiZSB1c2VkIHdoZW4gYnVpbGRpbmcgYXJjaGl2ZXMNCiAgICAgICAgICogDQogICAgICAgICAqIEB2YXIgY29tcHJlc3Npb24JYm9vbA0KICAgICAgICAgKi8NCgkJcHJvdGVjdGVkICRfY29tcHJlc3Npb24gPSBudWxsOw0KCQkNCgkJLyoqDQoJCSAqIA0KCQkgKiBnZXRfdHJhbnNpZW50X25hbWVzX3N0YXRpYygpDQoJCSAqDQoJCSAqIEdldCB0aGUgdHJhbnNpZW50IG5hbWUocykgdGhhdCBtYXkgYmUgaW4gdXNlDQoJCSAqDQoJCSAqIEByZXR1cm4JCWFycmF5CVRoZSB0cmFuc2llbnQgbmFtZShzKQ0KCQkgKg0KCQkgKi8NCgkJcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfdHJhbnNpZW50X25hbWVzX3N0YXRpYygpIHsNCgkJDQoJCQlyZXR1cm4gYXJyYXkoIHNlbGY6OlpJUF9NRVRIT0RTX1RSQU5TSUVOVCwNCgkJCQkJCSAgc2VsZjo6WklQX01FVEhPRFNfVFJBTlNJRU5UX0VYUEVSSU1FTlRBTCApOw0KCQkJDQoJCX0NCg0KCQkvKioNCgkJICoJX19jb25zdHJ1Y3QoKQ0KCQkgKgkNCgkJICoJRGVmYXVsdCBjb25zdHJ1Y3Rvci4NCgkJICoJDQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkkdGVtcF9kaXIJCVRoZSBwYXRoIG9mIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5IHRvIHVzZQ0KCQkgKglAcGFyYW0JCWFycmF5CQkkemlwX21ldGhvZHMJT3B0aW9uYWw6IFRoZSBzZXQgb2YgemlwIG1ldGhvZHMgcmVxdWVzdGVkIHRvIHVzZQ0KCQkgKglAcGFyYW0JCXN0cmluZwkJJG1vZGUJCQlPcHRpb25hbDogVGhlIHppcCBtb2RlIGZvciB0aGUgb2JqZWN0IChpZ25vcmVkIGN1cnJlbnRseSAtIG1heSBiZSByZXVzZWQ/KQ0KCQkgKglAcmV0dXJuCQludWxsDQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoICR0ZW1wX2RpciwgJHppcF9tZXRob2RzID0gYXJyYXkoKSwgJG1vZGUgPSAnemlwJyApIHsNCg0KCQkJLy8gTm9ybWFsaXplIHRoZSB0cmFpbGluZyBkaXJlY3Rvcnkgc2VwYXJhdG9yIG9uIHRoZSBwYXRoDQoJCQkkdGVtcF9kaXIgPSBydHJpbSggJHRlbXBfZGlyLCBzZWxmOjpESVJFQ1RPUllfU0VQQVJBVE9SUyApIC4gc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SOw0KCQkJDQoJCQkvLyBOb3JtYWxpemUgcGxhdGZvcm0gc3BlY2lmaWMgZGlyZWN0b3J5IHNlcGFyYXRvcnMgaW4gcGF0aA0KCQkJJHRoaXMtPl90ZW1wZGlyID0gc3RyX3JlcGxhY2UoIERJUkVDVE9SWV9TRVBBUkFUT1IsIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiwgJHRlbXBfZGlyICk7DQoJCQkNCgkJCS8vIE5vdGU6IHRoaXMgd2lsbCBiZSByZW1vdmVkIGFuZCBzaG91bGQgbm8gbG9uZ2VyIGJlIHVzZWQgLSBhbiBvYmplY3QgaXMgaW5zdGFudGlhdGVkIGZvcg0KCQkJLy8gYm90aCB6aXAgJiB1bnppcCBzZXJ2aWNlcw0KCQkJJHRoaXMtPl9tb2RlID0gJG1vZGU7DQoJCQkNCgkJCS8vIFJlY29yZCB3aGVyZSB3ZSBhcmUgbG9jYXRlZCAodGhlIGRpcmVjdG9yeSBuYW1lKQ0KCQkJJHRoaXMtPl93aGVyZWFtaSA9IGJhc2VuYW1lKCBkaXJuYW1lKCBfX0ZJTEVfXyApICk7DQoJCQkNCgkJCS8vIFVzZSBvdXIgbG9jYXRpb24gdG8gZGV0ZXJtaW5lIHdoaWNoIHppcCBtZXRob2RzIHRyYW5zaWVudCB3ZSBzaG91bGQgYmUgdXNpbmcNCgkJCSR0aGlzLT5femlwX21ldGhvZHNfdHJhbnNpZW50ID0gKCAwID09PSBzdHJjbXAoICR0aGlzLT5fd2hlcmVhbWksICd6aXBidWRkeScgKSApID8gc2VsZjo6WklQX01FVEhPRFNfVFJBTlNJRU5UIDogc2VsZjo6WklQX01FVEhPRFNfVFJBTlNJRU5UX0VYUEVSSU1FTlRBTCA7DQoNCgkJCS8vIFNldCBhIGZsYWcgZm9yIGVhc3kgY29uZGl0aW9uYWwgdGVzdGluZw0KCQkJJHRoaXMtPl9pc19leHBlcmltZW50YWwgPSAoIDAgPT09IHN0cmNtcCggJHRoaXMtPl93aGVyZWFtaSwgJ3ppcGJ1ZGR5JyApICkgPyBmYWxzZSA6IHRydWUgOw0KDQoJCQkvLyBTZXQgdGhlIHNhcGkgbmFtZSBzbyB3ZSBjYW4gdXNlIGl0IGxhdGVyCQkJDQoJCQkkdGhpcy0+c2V0X3NhcGlfbmFtZSgpOw0KCQkJDQoJCQkvLyBEZXJpdmUgd2hldGhlciB3ZSBhcmUgaWdub3JpbmcgV2FybmluZ3Mgb3Igbm90IChjYW4gYmUgb3ZlcnJpZGRlbiBieSBtZXRob2QgY2FsbCkNCgkJCSR0aGlzLT5zZXRfaWdub3JlX3dhcm5pbmdzKCk7DQoJCQkNCgkJCS8vIERlcml2ZSB3aGV0aGVyIHdlIGFyZSBpZ25vcmluZy9ub3QtZm9sbG93aW5nIHN5bWxpbmtzIG9yIG5vdCAoY2FuIGJlIG92ZXJyaWRkZW4gYnkgbWV0aG9kIGNhbGwpDQoJCQkkdGhpcy0+c2V0X2lnbm9yZV9zeW1saW5rcygpOw0KCQkJDQoJCQkvLyBEZXJpdmUgd2hldGhlciBjb21wcmVzc2lvbiBzaG91bGQgYmUgdXNlZCAoY2FuIGJlIG92ZXJyaWRkZW4gYnkgbWV0aG9kIGNhbGwpDQoJCQkkdGhpcy0+c2V0X2NvbXByZXNzaW9uKCk7DQoJCQkJCQkNCgkJCS8vIE1ha2Ugc3VyZSB3ZSBsb2FkIHRoZSBjb3JlIGFic3RyYWN0IGNsYXNzIGFzIHRoaXMgd2lsbCBhbHdheXMgYmUgbmVlZGVkDQoJCQlyZXF1aXJlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvJyAuICR0aGlzLT5fd2hlcmVhbWkgLiAnL3piemlwY29yZS5waHAnICk7DQoJCQkNCgkJCS8vIElmIHdlIGxvYWRlZCB0aGF0IG9rIHRoZW4gdHJ5IHRoZSBtZXRob2Qgc3BlY2lmaWMgY2xhc3Nlcw0KCQkJLy8gQ291bGQgbWFrZSB0aGlzIG1vcmUgZ2VuZXJpYyBiYXNlZCBvbiBjb25maWcgb3Igc29tZXN1Y2gNCgkJCWlmICggY2xhc3NfZXhpc3RzKCAncGx1Z2luYnVkZHlfemJ6aXBjb3JlJyApICkgew0KLy8gCQkJDQovLyAJCQkJLy8gT25seSBwcm92aWRlIHByb2MgbW9kZSB3aGVuIGV4cGVyaW1lbnRhbCB6aXAgZW5hYmxlZA0KLy8gCQkJCWlmICggdHJ1ZSA9PT0gJHRoaXMtPl9pc19leHBlcmltZW50YWwgKSB7DQovLyAJCQkJDQovLyAJCQkJCWluY2x1ZGVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi8nIC4gJHRoaXMtPl93aGVyZWFtaSAuICcvemJ6aXBwcm9jLnBocCcgKTsNCi8vIAkJCQkJDQovLyAJCQkJCWlmICggY2xhc3NfZXhpc3RzKCAncGx1Z2luYnVkZHlfemJ6aXBwcm9jJyApICkgew0KLy8gCQkJCQkNCi8vIAkJCQkJCWlmICggJHRoaXMtPmNoZWNrX21ldGhvZF9kZXBlbmRlbmNpZXMoICdwbHVnaW5idWRkeV96YnppcHByb2MnICkgKSB7DQovLyAJCQkJCQkNCi8vIAkJCQkJCQkkdGhpcy0+c2V0X3N1cHBvcnRlZF96aXBfbWV0aG9kcyggcGx1Z2luYnVkZHlfemJ6aXBwcm9jOjpnZXRfbWV0aG9kX3RhZ19zdGF0aWMoKSApOw0KLy8gCQkJCQkJCQ0KLy8gCQkJCQkJfQ0KLy8gCQkJCQkJDQovLyAJCQkJCX0NCi8vIAkJCQkNCi8vIAkJCQl9DQovLyAJCQkJDQoJCQkJaW5jbHVkZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliLycgLiAkdGhpcy0+X3doZXJlYW1pIC4gJy96YnppcGV4ZWMucGhwJyApOw0KCQkJCWlmICggY2xhc3NfZXhpc3RzKCAncGx1Z2luYnVkZHlfemJ6aXBleGVjJyApICkgew0KCQkJCQ0KCQkJCQlpZiAoICR0aGlzLT5jaGVja19tZXRob2RfZGVwZW5kZW5jaWVzKCAncGx1Z2luYnVkZHlfemJ6aXBleGVjJyApICkgew0KCQkJCQkNCgkJCQkJCSR0aGlzLT5zZXRfc3VwcG9ydGVkX3ppcF9tZXRob2RzKCBwbHVnaW5idWRkeV96YnppcGV4ZWM6OmdldF9tZXRob2RfdGFnX3N0YXRpYygpICk7DQoJCQkJCQkNCgkJCQkJfQ0KDQoJCQkJfQ0KCQkJCQ0KCQkJCWluY2x1ZGVfb25jZSggcGJfYmFja3VwYnVkZHk6OnBsdWdpbl9wYXRoKCkgLiAnL2xpYi8nIC4gJHRoaXMtPl93aGVyZWFtaSAuICcvemJ6aXB6aXBhcmNoaXZlLnBocCcgKTsNCgkJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ3BsdWdpbmJ1ZGR5X3piemlwemlwYXJjaGl2ZScgKSApIHsNCgkJCQkNCgkJCQkJaWYgKCAkdGhpcy0+Y2hlY2tfbWV0aG9kX2RlcGVuZGVuY2llcyggJ3BsdWdpbmJ1ZGR5X3piemlwemlwYXJjaGl2ZScgKSApIHsNCgkJCQkJDQoJCQkJCQkkdGhpcy0+c2V0X3N1cHBvcnRlZF96aXBfbWV0aG9kcyggcGx1Z2luYnVkZHlfemJ6aXB6aXBhcmNoaXZlOjpnZXRfbWV0aG9kX3RhZ19zdGF0aWMoKSApOw0KCQkJCQkJDQoJCQkJCX0NCg0KCQkJCX0NCgkJCQkNCgkJCQlpbmNsdWRlX29uY2UoIHBiX2JhY2t1cGJ1ZGR5OjpwbHVnaW5fcGF0aCgpIC4gJy9saWIvJyAuICR0aGlzLT5fd2hlcmVhbWkgLiAnL3piemlwcGNsemlwLnBocCcgKTsNCgkJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ3BsdWdpbmJ1ZGR5X3piemlwcGNsemlwJyApICkgew0KCQkJCQ0KCQkJCQlpZiAoICR0aGlzLT5jaGVja19tZXRob2RfZGVwZW5kZW5jaWVzKCAncGx1Z2luYnVkZHlfemJ6aXBwY2x6aXAnICkgKSB7DQoJCQkJCQ0KCQkJCQkJJHRoaXMtPnNldF9zdXBwb3J0ZWRfemlwX21ldGhvZHMoIHBsdWdpbmJ1ZGR5X3piemlwcGNsemlwOjpnZXRfbWV0aG9kX3RhZ19zdGF0aWMoKSApOw0KCQkJCQkJDQoJCQkJCX0NCg0KCQkJCX0NCgkJCQkNCgkJCX0NCgkJCQ0KIAkJCS8vIFdvcmsgb3V0IHRoZSBsaXN0IG9mIHppcCBtZXRob2RzIGZyb20gdGhlIHJlcXVlc3RlZCBhbmQgYXZhaWxhYmxlIGFsb25nIHdpdGggdGhlaXIgZGV0YWlscw0KCQkJJHRoaXMtPnNldF96aXBfbWV0aG9kcyggJHppcF9tZXRob2RzICk7DQoJCQkNCgkJfQ0KCQkNCgkJDQoJCS8qKg0KCQkgKglfX2Rlc3RydWN0KCkNCgkJICoJDQoJCSAqCURlZmF1bHQgZGVzdHJ1Y3Rvci4NCgkJICoJDQoJCSAqCUByZXR1cm4JCW51bGwNCgkJICoNCgkJICovDQoJCXB1YmxpYyBmdW5jdGlvbiBfX2Rlc3RydWN0KCApIHsNCg0KCQl9DQoJCQ0KCQkvKioNCgkJICoJc2V0X3NhcGlfbmFtZSgpDQoJCSAqDQoJCSAqCVNldHMgdGhlIHNhcGkgbmFtZSB0byB0aGF0IGdpdmVuIG9yIHJldHJpZXZlcyBmcm9tIFBIUA0KCQkgKglUT0RPOiBFeHRlbmQgdG8gYWxzbyBzZXQgYSBzYXBpIGlkIGNvbnN0YW50IGJhc2VkIG9uIHRoZSBuYW1lPw0KCQkgKg0KCQkgKglAcGFyYW0Jc3RyaW5nCSRuYW1lCUEgc2FwaSBuYW1lIHRvIHNldCAoZGVmYXVsdCBlbXB0eSkNCgkJICoJQHJldHVybglvYmplY3QJCQlUaGlzIG9iamVjdA0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIHNldF9zYXBpX25hbWUoICRzYXBpX25hbWUgPSAiIiApIHsNCgkJDQoJCQlpZiAoIGVtcHR5KCAkc2FwaV9uYW1lICkgKSB7DQoJCQkJDQoJCQkJJHNhcGlfbmFtZSA9IHBocF9zYXBpX25hbWUoKTsNCgkJCQkNCgkJCX0NCgkJCQ0KCQkJJHRoaXMtPl9zYXBpX25hbWUgPSAkc2FwaV9uYW1lOw0KCQkJDQoJCQlyZXR1cm4gJHRoaXM7DQoJCQkNCgkJfQ0KDQoJCS8qKg0KCQkgKglnZXRfc2FwaV9uYW1lKCkNCgkJICoNCgkJICoJUmV0dXJucyB0aGUgcHJldmlvdXNseSBzZXQgc2FwaSBuYW1lDQoJCSAqDQoJCSAqCUByZXR1cm4Jc3RyaW5nCQkJVGhlIHN0b3JlZCBzYXBpIG5hbWUNCgkJICovDQoJCXB1YmxpYyBmdW5jdGlvbiBnZXRfc2FwaV9uYW1lKCkgew0KCQkJDQoJCQlyZXR1cm4gJHRoaXMtPl9zYXBpX25hbWU7DQoJCQkNCgkJfQ0KDQoJCS8qKg0KCQkgKglkZXJpdmVfb3B0aW9uYWxfYm9vbCgpDQoJCSAqDQoJCSAqCVV0aWxpdHkgZnVuY3Rpb24gdG8gZGVyaXZlIHRoZSB2YWx1ZSBvZiBhbiBvcHRpb25hbCBib29sZWFuIGZsYWcgYmFzZWQgb24gZWl0aGVyDQoJCSAqCWEgc3BlY2lmYyB2YWx1ZSBiZWluZyBnaXZlbiBvciB0aGUgcmVsYXRlZCBnbG9iYWwgb3B0aW9uIGJlaW5nIHNldCBvciBhIGdpdmVuDQoJCSAqCWRlZmF1dGwgdmFsdWUgb3RoZXJpc2UuIElmIHRoZSBwcm92aWRlZCAkdmFsdWUgaXMgbnVsbCB0aGVuIHRoaXMgZm9yY2VzIHRoZSB1c2UNCgkJICoJb2YgdGhlIGdsb2JhbCBvcHRpb24gaWYgaXQgaXMgc2V0IG9yIG90aGVyd2lzZSB0aGUgZGVmYXVsdCB2YWx1ZSBnaXZlbg0KCQkgKg0KCQkgKglAcGFyYW0JCXN0cmluZwkJJG9wdGlvbgkJVGhlIG9wdGlvbiBuYW1lIGluIHRoZSBnbG9iYWwgb3B0aW9ucyBhcnJheQ0KCQkgKglAcGFyYW0JCWJvb2wJCSR2YWx1ZQkJU2hvdWxkIGJlIGJvb2wgdHJ1ZXxmYWxzZSBidXQgY291bGQgYmUgbnVsbA0KCQkgKglAcmV0dXJuCQlib29sCQlWYWx1ZSBvZiAkX2lnbm9yZV93YXJuaW5ncw0KCQkgKg0KCQkgKi8NCgkJIHByb3RlY3RlZCBmdW5jdGlvbiBkZXJpdmVfb3B0aW9uYWxfYm9vbCggJG9wdGlvbiwgJHZhbHVlLCAkZGVmYXVsdCApIHsNCgkJIAkkcmVzdWx0ID0gZmFsc2U7DQoJCSAJaWYgKCBpc19ib29sKCAkdmFsdWUgKSkgew0KCQkgCQkkcmVzdWx0ID0gJHZhbHVlOw0KCQkgCX0gZWxzZWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sgJG9wdGlvbiBdICkgKSB7DQoJCSAJCSggKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbICRvcHRpb24gXSA9PSAnMScgKSB8fCAoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1sgJG9wdGlvbiBdID09IHRydWUgKSApID8gJHJlc3VsdCA9IHRydWUgOiAkcmVzdWx0ID0gZmFsc2UgOw0KCQkgCX0gZWxzZSB7DQoJCSAJCSRyZXN1bHQgPSAkZGVmYXVsdDsNCgkJIAl9DQoJCSAJcmV0dXJuICRyZXN1bHQ7DQoJCSB9DQoJCSANCgkJLyoqDQoJCSAqCXNldF9pZ25vcmVfd2FybmluZ3MoKQ0KCQkgKg0KCQkgKglAcGFyYW0JbWl4ZWQJJGlnbm9yZQkJdHJ1ZXxmYWxzZSBmb3Igc3BlY2lmaWMgc2V0dGluZyBvciBudWxsIGZvciBjaG9pY2UJDQoJCSAqCUByZXR1cm4Jb2JqZWN0CQkJCVRoaXMgb2JqZWN0DQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X2lnbm9yZV93YXJuaW5ncyggJGlnbm9yZSA9IG51bGwgKSB7DQoJCQ0KCQkgCSR0aGlzLT5faWdub3JlX3dhcm5pbmdzID0gJHRoaXMtPmRlcml2ZV9vcHRpb25hbF9ib29sKCAnaWdub3JlX3ppcF93YXJuaW5ncycsICRpZ25vcmUsIGZhbHNlICk7DQoJCSAJDQoJCQlyZXR1cm4gJHRoaXM7DQoJCQkNCgkJfQ0KDQoJCS8qKg0KCQkgKglnZXRfaWdub3JlX3dhcm5pbmdzKCkNCgkJICoNCgkJICoJUmV0dXJucyB0aGUgcHJldmlvdXNseSBzZXQgaWdub3JlIHdhcm5pbmdzIGZsYWcNCgkJICoNCgkJICoJQHJldHVybgltaXhlZAkJCVRoZSBzdG9yZWQgaWdub3JlIHdhcm5pbmdzIGZsYWcgdHJ1ZXxmYWxzZXxudWxsDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X2lnbm9yZV93YXJuaW5ncygpIHsNCgkJCQ0KCQkJcmV0dXJuICR0aGlzLT5faWdub3JlX3dhcm5pbmdzOw0KCQkJDQoJCX0NCg0KCQkvKioNCgkJICoJc2V0X2lnbm9yZV9zeW1saW5rcygpDQoJCSAqDQoJCSAqCUBwYXJhbQltaXhlZAkkaWdub3JlCQl0cnVlfGZhbHNlIGZvciBzcGVjaWZpYyBzZXR0aW5nIG9yIG51bGwgZm9yIGNob2ljZQkNCgkJICoJQHJldHVybglvYmplY3QJCQkJVGhpcyBvYmplY3QNCgkJICovDQoJCXB1YmxpYyBmdW5jdGlvbiBzZXRfaWdub3JlX3N5bWxpbmtzKCAkaWdub3JlID0gbnVsbCApIHsNCgkJDQoJCSAJJHRoaXMtPl9pZ25vcmVfc3ltbGlua3MgPSAkdGhpcy0+ZGVyaXZlX29wdGlvbmFsX2Jvb2woICdpZ25vcmVfemlwX3N5bWxpbmtzJywgJGlnbm9yZSwgdHJ1ZSApOw0KCQkJDQoJCQlyZXR1cm4gJHRoaXM7DQoJCQkNCgkJfQ0KDQoJCS8qKg0KCQkgKglnZXRfaWdub3JlX3N5bWxpbmtzKCkNCgkJICoNCgkJICoJUmV0dXJucyB0aGUgcHJldmlvdXNseSBzZXQgaWdub3JlIHN5bWxpbmtzIGZsYWcNCgkJICoNCgkJICoJQHJldHVybgltaXhlZAkJCVRoZSBzdG9yZWQgaWdub3JlIHN5bWxpbmtzIGZsYWcgdHJ1ZXxmYWxzZXxudWxsDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X2lnbm9yZV9zeW1saW5rcygpIHsNCgkJCQ0KCQkJcmV0dXJuICR0aGlzLT5faWdub3JlX3N5bWxpbmtzOw0KCQkJDQoJCX0NCg0KCQkvKioNCgkJICoJc2V0X2NvbXByZXNzaW9uKCkNCgkJICoNCgkJICoJQHBhcmFtCW1peGVkCSRjb21wcmVzc2lvbgl0cnVlfGZhbHNlIGZvciBzcGVjaWZpYyBzZXR0aW5nIG9yIG51bGwgZm9yIGNob2ljZQkNCgkJICoJQHJldHVybglvYmplY3QJCQkJCVRoaXMgb2JqZWN0DQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X2NvbXByZXNzaW9uKCAkY29tcHJlc3Npb24gPSBudWxsICkgew0KCQkNCgkJIAkkdGhpcy0+X2NvbXByZXNzaW9uID0gJHRoaXMtPmRlcml2ZV9vcHRpb25hbF9ib29sKCAnY29tcHJlc3Npb24nLCAkY29tcHJlc3Npb24sIHRydWUgKTsNCgkJCQ0KCQkJcmV0dXJuICR0aGlzOw0KCQkJDQoJCX0NCg0KCQkvKioNCgkJICoJZ2V0X2NvbXByZXNzaW9uKCkNCgkJICoNCgkJICoJUmV0dXJucyB0aGUgcHJldmlvdXNseSBzZXQgY29tcHJlc3Npb24gZmxhZw0KCQkgKg0KCQkgKglAcmV0dXJuCW1peGVkCQkJVGhlIHN0b3JlZCBjb21wcmVzc2lvbiBmbGFnIHRydWV8ZmFsc2V8bnVsbA0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIGdldF9jb21wcmVzc2lvbigpIHsNCgkJCQ0KCQkJcmV0dXJuICR0aGlzLT5fY29tcHJlc3Npb247DQoJCQkNCgkJfQ0KDQoJCS8qKg0KCQkgKglzZXRfc3VwcG9ydGVkX3ppcF9tZXRob2RzKCkNCgkJICoNCgkJICoJQXBwZW5kcyBvciBwcmVwZW5kcyB0aGUgbWV0aG9kIG9yIG1ldGhvZHMgcGFzc2VkIHRvIHRoZSBleGlzdGluZyBzdXBwb3J0ZWQgbWV0aG9kcyBhcnJheQ0KCQkgKg0KCQkgKglAcGFyYW0Jc3RyaW5nL2FycmF5CSRtZXRob2RzCUVpdGhlciBhIChjb21tYSBzZXBhcmF0ZWQpIHN0cmluZyBvZiBtZXRob2RzIG9yIGFuIGFycmF5DQoJCSAqCUBwYXJhbQlib29sCQkJJGFwcGVuZAkJVHJ1ZSBpZiAkbWV0aG9kcyBzaG91bGQgYmUgYXBwZW5kZWQgdG8gZXhpc3Rpbmcgc3VwcG9ydGVkIG1ldGhvZHMNCgkJICoJQHJldHVybglib29sCQkJCQkJVHJ1ZSBpZiBzZXQgc3VjY2VlZGVkLCBvdGhlcndpc2UgZmFsc2UNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBzZXRfc3VwcG9ydGVkX3ppcF9tZXRob2RzKCAkbWV0aG9kcywgJGFwcGVuZCA9IHRydWUgKSB7DQoJCQ0KCQkJJHJlc3VsdCA9IGZhbHNlOw0KCQkNCgkJCS8vIElmICRtZXRob2RzIGlzIGEgc3RyaW5nIHdlIG5lZWQgdG8gdHVybiBpdCBpbnRvIGFuIGFycmF5IChvZiBvbmUgb3IgbW9yZSBlbGVtZW50cykgb3INCgkJCS8vIG90aGVyd2lzZSBhc3N1bWUgaXQgaXMgYW4gYXJyYXkgYWxyZWFkeSAoYnV0IHdlIGRvdWJsZSBjaGVjayBpbiBhIG1vKQ0KCQkJKCBpc19zdHJpbmcoICRtZXRob2RzICkgKSA/ICRtZXRob2RzX3RvX2FkZCA9IGV4cGxvZGUoICIsIiwgJG1ldGhvZHMgKSA6ICRtZXRob2RzX3RvX2FkZCA9ICRtZXRob2RzOw0KDQoJCQkvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhbiBhcnJheSBhbmQgaWYgc28gdGhlbiBlaXRoZXIgYXBwZW5kIG9yIHByZXBlbmQgdG8gZXhpc3Rpbmcgc3VwcG9ydGVkIG1ldGhvZHMNCgkJCWlmICggaXNfYXJyYXkoICRtZXRob2RzX3RvX2FkZCApICkgew0KCQkJDQoJCQkJKCAkYXBwZW5kICkgPyAkdGhpcy0+X3N1cHBvcnRlZF96aXBfbWV0aG9kcyA9IGFycmF5X21lcmdlKCAkdGhpcy0+X3N1cHBvcnRlZF96aXBfbWV0aG9kcywgJG1ldGhvZHNfdG9fYWRkICkgOg0KCQkJCQkJCSAgJHRoaXMtPl9zdXBwb3J0ZWRfemlwX21ldGhvZHMgPSBhcnJheV9tZXJnZSggJG1ldGhvZHNfdG9fYWRkLCAkdGhpcy0+X3N1cHBvcnRlZF96aXBfbWV0aG9kcyApOw0KCQkJDQoJCQkJJHJlc3VsdCA9IHRydWU7CQkJDQoJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gV2lsbCByZXR1cm4gZmFsc2UgaWYgd2Ugc29tZWhvdyBkaWRuJ3QgZW5kIHVwIHdpdGggYW4gYXJyYXkgdG8gbWVyZ2UNCgkJCXJldHVybiAkcmVzdWx0Ow0KCQkNCgkJfQ0KCQkNCgkJLyoqDQoJCSAqCWNoZWNrX21ldGhvZF9kZXBlbmRlbmNpZXMoKQ0KCQkgKg0KCQkgKglDaGVja3MgdGhlIGRlcGVuZGVuY2llcyB0aGF0IGEgbWV0aG9kIGRlZmluZXMgZm9yIGl0c2VsZiAtIHRoaXMgbWF5IG9wdGlvbmFsbHkgYWxzbyBtZWFuDQoJCSAqCWNhbGxpbmcgYSBnaXZlbiBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGFsbG93cyB0aGUgbWV0aG9kIHRvIGFkZCBpdCdzIG93biB2ZXJ5IHNwZWNpZmljIGNoZWNrcw0KCQkgKgliZXlvbmQgdGhvc2UgdGhhdCBhcmUgcnVuIGFzIHN0YW5kYXJkLg0KCQkgKg0KCQkgKglAcGFyYW0Jc3RyaW5nCQkkY2xhc3NfbmFtZQkJVGhlIG5hbWUgb2YgdGhlIGNsYXNzIHRvIGNoZWNrLCBuZWVkZWQgYmVjYXVzZSB0aGlzIGlzIHN0YXRpYyBjaGVja2luZw0KCQkgKglAcmV0dXJuCWJvb2wJCQkJCQlUcnVlIGlmIGRlcGVuZGVuY3kgY2hlY2sgc3VjY2VlZGVkLCBvdGhlcndpc2UgZmFsc2UNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBjaGVja19tZXRob2RfZGVwZW5kZW5jaWVzKCAkY2xhc3NfbmFtZSApIHsNCgkJDQoJCQkvLyBBc3N1bWUgZGVwZW5kZW5jeSBjaGVja3Mgd2lsbCBwYXNzIC0gd2lsbCBiZSBzZXQgZmFsc2UgaWYgYSBjaGVjayBmYWlscw0KCQkJJHJlc3VsdCA9IHRydWU7DQoJCQkNCgkJCWlmICggIW1ldGhvZF9leGlzdHMoICRjbGFzc19uYW1lLCAnZ2V0X21ldGhvZF9kZXBlbmRlbmNpZXNfc3RhdGljJyApICkgew0KCQkJDQoJCQkJJHJlc3VsdCA9IGZhbHNlOw0KCQkJDQoJCQl9IGVsc2Ugew0KCQkNCgkJCQkkbWV0aG9kX2RlcGVuZGVuY2llcyA9IGNhbGxfdXNlcl9mdW5jKCBhcnJheSggJGNsYXNzX25hbWUsICdnZXRfbWV0aG9kX2RlcGVuZGVuY2llc19zdGF0aWMnICkgKTsNCgkJCQkNCgkJCX0NCgkJCQ0KCQkJaWYgKCAoICRyZXN1bHQgKSAmJiBpc3NldCggJG1ldGhvZF9kZXBlbmRlbmNpZXNbICdjbGFzc2VzJyBdICkgJiYgIWVtcHR5KCAkbWV0aG9kX2RlcGVuZGVuY2llc1sgJ2NsYXNzZXMnIF0gKSApIHsNCgkJCQ0KCQkJCSRjbGFzc2VzID0gJG1ldGhvZF9kZXBlbmRlbmNpZXNbICdjbGFzc2VzJyBdOw0KCQkJDQoJCQkJJGRpc2FibGVkX2NsYXNzZXMgPSBhcnJheV9tYXAoICJ0cmltIiwgZXhwbG9kZSggJywnLCBpbmlfZ2V0KCAnZGlzYWJsZV9jbGFzc2VzJyApICkgKTsNCgkJCQkNCgkJCQkvLyBDaGVjayBlYWNoIGZ1bmN0aW9uIGRlcGVuZGVuY3kgYW5kIGJhaWwgb3V0IG9uIGZpcnN0IGZhaWx1cmUNCgkJCQlmb3JlYWNoICggJGNsYXNzZXMgYXMgJGNsYXNzICkgew0KCQkJCQ0KCQkJCQkkY2xhc3MgPSB0cmltKCAkY2xhc3MgKTsNCgkJCQkJDQoJCQkJCWlmICggISggKCBjbGFzc19leGlzdHMoICRjbGFzcyApICkgJiYgKCAhaW5fYXJyYXkoICRjbGFzcywgJGRpc2FibGVkX2NsYXNzZXMgKSApICkgKSB7DQoNCgkJCQkJCSRyZXN1bHQgPSBmYWxzZTsNCgkJCQkJCWJyZWFrOw0KCQkJCQkJDQoJCQkJCX0NCgkJCQkNCgkJCQl9DQoJCQl9DQoJCQkNCgkJCWlmICggKCAkcmVzdWx0ICkgJiYgaXNzZXQoICRtZXRob2RfZGVwZW5kZW5jaWVzWyAnZnVuY3Rpb25zJyBdICkgJiYgIWVtcHR5KCAkbWV0aG9kX2RlcGVuZGVuY2llc1sgJ2Z1bmN0aW9ucycgXSApICkgew0KCQkJDQoJCQkJJGZ1bmN0aW9ucyA9ICRtZXRob2RfZGVwZW5kZW5jaWVzWyAnZnVuY3Rpb25zJyBdOw0KCQkJCQ0KCQkJCSRkaXNhYmxlZF9mdW5jdGlvbnMgPSBhcnJheV9tYXAoICJ0cmltIiwgZXhwbG9kZSggJywnLCBpbmlfZ2V0KCAnZGlzYWJsZV9mdW5jdGlvbnMnICkgKSApOw0KCQkJCQ0KCQkJCS8vIENoZWNrIGVhY2ggZnVuY3Rpb24gZGVwZW5kZW5jeSBhbmQgYmFpbCBvdXQgb24gZmlyc3QgZmFpbHVyZQ0KCQkJCWZvcmVhY2ggKCAkZnVuY3Rpb25zIGFzICRmdW5jdGlvbiApIHsNCgkJCQkNCgkJCQkJJGZ1bmN0aW9uID0gdHJpbSggJGZ1bmN0aW9uICk7DQoJCQkJCQ0KCQkJCQlpZiAoICEoICggZnVuY3Rpb25fZXhpc3RzKCAkZnVuY3Rpb24gKSApICYmICggIWluX2FycmF5KCAkZnVuY3Rpb24sICRkaXNhYmxlZF9mdW5jdGlvbnMgKSApICkgKSB7DQoNCgkJCQkJCSRyZXN1bHQgPSBmYWxzZTsNCgkJCQkJCWJyZWFrOw0KCQkJCQkJDQoJCQkJCX0NCgkJCQkNCgkJCQl9DQoJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gTm8gZXh0ZW5zaW9uIGNoZWNrcyB5ZXQNCgkJCQ0KCQkJLy8gTm8gZmlsZSBjaGVja3MgeWV0IChuZWVkIHRvIGRldGVybWluZSBob3cgdGhpcyBtaWdodCB3b3JrIGEgYml0IGJldHRlcikNCgkJCQ0KCQkJaWYgKCAoICRyZXN1bHQgKSAmJiBpc3NldCggJG1ldGhvZF9kZXBlbmRlbmNpZXNbICdjaGVja19mdW5jJyBdICkgJiYgIWVtcHR5KCAkbWV0aG9kX2RlcGVuZGVuY2llc1sgJ2NoZWNrX2Z1bmMnIF0gKSApIHsNCgkJCQ0KCQkJCSRyZXN1bHQgPSBjYWxsX3VzZXJfZnVuYyggYXJyYXkoICRjbGFzc19uYW1lLCAkbWV0aG9kX2RlcGVuZGVuY2llc1sgJ2NoZWNrX2Z1bmMnIF0gKSApOw0KCQkJCQ0KCQkJfQ0KCQkJDQoJCQlyZXR1cm4gJHJlc3VsdDsNCgkJDQoJCX0NCgkJDQoJCS8qKg0KCQkgKglkZWR1Y2VfemlwX21ldGhvZHMoKQ0KCQkgKgkNCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgemlwIG1ldGhvZHMgdGhhdCBhcmUgYXZhaWxhYmxlIChvciBqdXN0IHRoZSBiZXN0KSBmaWx0ZXJlZCBieSByZXF1ZXN0ZWQgbWV0aG9kcy4NCgkJICoJQmVjYXVzZSB0aGUgYXZhaWxhYmxlIG1ldGhvZHMgZG9uJ3QgcmVhbGx5IGNoYW5nZSBvZnRlbiAocmFyZWx5IG9uY2Ugc3RhYmxlKSB3ZSB1c2UgYSB0cmFuc2llbnQNCgkJICoJd2hpY2ggaGFzIHNvbWUgZGVmaW5lZCBsaWZldGltZSBzbyB3ZSBkb24ndCB3YXN0ZSB0aW1lIHJlcGVhdGluZyB0aGUgdGVzdGluZyB3aGljaCBpbnZvbHZlcyBjcmVhdGluZw0KCQkgKglvYmplY3RzIGFuZCBwcm9jZXNzZXMgYW5kIGZpbGVzIHdoaWNoIGNhbiBiZSB0aW1lIGNvbnN1bWluZy4NCgkJICoJVGhlIHVzaW5nIHNjcmlwdCBjYW4gZGVjaWRlIHRvIGhhdmUgdGhlIHRyYW5zaWVudCByZWZyZXNoZWQgYnkgZGVsZXRpbmcgaXQgYW5kIHRoZW4gaXQgd2lsbCBiZSByZWdlbmVyYXRlZC4NCgkJICoJTm90ZTogVGhlcmUgaXMgYW4gaW5jbHVkZWQgInNpZ25hdHVyZSIgc28gdGhhdCB3ZSBjYW4gZGV0ZWN0IHNlcnZlciBvciBvdGhlciBtb3ZlcyBhbmQgcmVnZW5lcmF0ZS4NCgkJICoJTm90ZTogZmlsZW10aW1lKCkgaXMgdXNlZCBiZWNhdXNlIHRoaXMgd2lsbCAoc2hvdWxkKSBmb3JjZSB0aGUgdHJhbnNpZW50IHRvIHVwZGF0ZSBpZiB0aGUgcGx1Z2luIGlzDQoJCSAqCXVwZGF0ZWQgYmVjYXVzZSB0aGUgZmlsZSBtb2RpZmljYXRpb24gdGltZSBvZiB0aGUgZmlsZSB3aWxsIGNoYW5nZSBiZWNhdXNlIHRoZSBwbHVnaW4gaXMgaW5zdGFsbGVkIGluIGENCgkJICoJZGlmZmVyZW50IGRpc2sgbG9jYXRpb24gd2l0aCBuZXdseSB3cml0dGVuIGZpbGVzIC0gdGhlIHNhbWUgc2hvdWxkIGFwcGx5IGlmIHRoZSBzaXRlIGlzIHJlc3RvcmVkL21pZ3JhdGVkLg0KCQkgKgkNCgkJICoJQHBhcmFtCQlhcnJheQlBcnJheSByZWZlcmVuY2UgZm9yIHRoZSBkZWR1Y2VkIHppcCBtZXRob2RzDQoJCSAqCUBwYXJhbQkJYXJyYXkJQXJyeSByZWZlcmVuY2UgZm9yIHRoZSBkZXRhaWxzIG9mIHRoZSBkZWR1Y2VkIG1ldGhvZHMNCgkJICoJQHBhcmFtCQlhcnJheQlGbGF0IGFycmF5IG9mIHJlcXVlc3RlZCAocHJlZmVycmVkKSB6aXAgbWV0aG9kcw0KCQkgKglAcGFyYW0JCWJvb2wJVHJ1ZSBpZiBvbmx5IHRoZSBiZXN0IGF2YWlsYWJsZSBtZXRob2Qgd2FudGVkDQoJCSAqCUBwYXJhbQkJc3RyaW5nCVdoaWNoIHppcCBtb2RlIGJlaW5nIHRlc3RlZA0KCQkgKglAcmV0dXJuCQlib29sCVRydWUgaWYgbWV0aG9kcyBhcmUgYXZhaWxhYmxlLCBGYWxzZSBvdGhlcndpc2UNCgkJICoNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBkZWR1Y2VfemlwX21ldGhvZHMoIGFycmF5ICYkbWV0aG9kcywgYXJyYXkgJiRtZXRob2RzX2RldGFpbHMsIGFycmF5ICRyZXF1ZXN0ZWQsICRiZXN0X29ubHkgKSB7DQoJCQkNCgkJCSRhdmFpbGFibGVfbWV0aG9kcyA9IGFycmF5KCk7DQoJCQkkYXZhaWxhYmxlX21ldGhvZHNfZGV0YWlscyA9IGFycmF5KCk7DQoJCQkkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzID0gYXJyYXkoKTsNCgkJCSRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyA9ICIiOw0KCQkJJHNlcnZlcl9zaWduYXR1cmUgPSAiIjsNCg0KCQkJLy8gRGVjaWRlIGlmIHdlIHNob3VsZCB0cnkgZm9yIGNhY2hlZCBtZXRob2RzIG9yIG5vdAkJCQ0KCQkJaWYgKCAkdGhpcy0+dXNlX2NhY2hlZF9tZXRob2RzKCkgKSB7DQoNCgkJCQkkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzID0gZ2V0X3RyYW5zaWVudCggJHRoaXMtPl96aXBfbWV0aG9kc190cmFuc2llbnQgKTsNCgkJCQkNCgkJCQkvLyBEcm9wIHRocm91Z2ggaWYgd2UgZGlkbid0IGdldCBhIHRyYW5zaWVudCBvdGhlcndpc2Ugd2UnbGwgdGVzdCBpdCBmb3IgdmFsaWRpdHkNCgkJCQlpZiAoIGZhbHNlICE9PSAkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzICkgew0KCQkJCQ0KCQkJCQkvLyBHZW5lcmF0ZSBzZXJ2ZXIgc2lnbmF0dXJlIGFuZCBjaGVjayBpdCBtYXRjaGVzIHRoZSBjYWNoZWQgc2lnbmF0dXJlDQoJCQkJCSRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyA9IF9fRklMRV9fIC4gIiA6ICIgLiAoICggJGZpbGVtb2R0aW1lID0gZmlsZW10aW1lKCBfX0ZJTEVfXyApICkgPyAoc3RyaW5nKSAkZmlsZW1vZHRpbWUgOiAnMScgKTsNCgkJCQkJJHNlcnZlcl9zaWduYXR1cmUgPSBtZDUoICRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyApOw0KCQkJCQkNCgkJCQkJaWYgKCAoIGZhbHNlID09PSBpc3NldCggJGFnZ3JlZ2F0ZV9hdmFpbGFibGVfbWV0aG9kc1sgJ2NvbnRyb2wnIF1bICdzaWduYXR1cmUnIF0gKSApIHx8DQoJCQkJCQkgKCAkc2VydmVyX3NpZ25hdHVyZSAhPT0gJGFnZ3JlZ2F0ZV9hdmFpbGFibGVfbWV0aG9kc1sgJ2NvbnRyb2wnIF1bICdzaWduYXR1cmUnIF0gKSApIHsNCg0KCQkJCQkJLy8gRWl0aGVyIG5vIHNpZ25hdHVyZSBwcmV2aW91c2x5IHNldCBvciBpdCBoYXMgY2hhbmdlZCAtIGVpdGhlciB3YXkgd2UgbmVlZCB0byByZWV2YWx1YXRlIGF2YWlsYWJsZSBtZXRob2RzDQoJCQkJCQkkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzID0gZmFsc2U7DQoJCQkJCQkgDQoJCQkJCX0NCgkJCQkNCgkJCQl9DQoNCgkJCX0gZWxzZSB7DQoJCQkNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdaaXAgbWV0aG9kIGNhY2hpbmcgZGlzYWJsZWQgYmFzZWQgb24gc2V0dGluZ3Mgb3IgdW5hdmFpbGFibGUuJyApOw0KCQkJCSRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHMgPSBmYWxzZTsNCgkJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gQ3JlYXRlIG5ldyB0cmFuc2llbnQgaWYgd2UgZGlkbid0IGhhdmUgb25lLCBpdCB3YXMgZXhwaXJlZCBvciB3ZSBudWtlZCBpdCBiZWNhdXNlIGludmFsaWQNCgkJCWlmICggZmFsc2UgPT09ICRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHMgKSB7DQoNCgkJCQkvLyBHZXQgYWxsIGF2YWlsYWJsZSBtZXRob2RzIGluICRhdmFpbGFibGVfbWV0aG9kcyAtIG11c3QgcmV0dXJuIHRoZW0gaW4gb3JkZXIgYmVzdCAtPiB3b3JzdA0KCQkJCS8vIEFsc28gZ2V0dGluZyB0aGUgbWV0aG9kIGRldGFpbHMgYXJyYXkgd2hpY2ggaXMga2V5ZWQgYnkgbWV0aG9kIHRhZw0KCQkJCSR0aGlzLT5nZXRfYXZhaWxhYmxlX3ppcF9tZXRob2RzKCAkdGhpcy0+X3N1cHBvcnRlZF96aXBfbWV0aG9kcywgJGF2YWlsYWJsZV9tZXRob2RzLCAkYXZhaWxhYmxlX21ldGhvZHNfZGV0YWlscyApOw0KCQkJCQ0KCQkJCS8vIE5vdyB3ZSBoYXZlIHRvIGNvbWJpbmUgdGhlIHR3byBhcnJheXMgaW50byBhbiBhZ2dyZWdhdGUgdG8gc2F2ZQ0KCQkJCSRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHNbICdtZXRob2RzJyBdID0gJGF2YWlsYWJsZV9tZXRob2RzOw0KCQkJCSRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHNbICdkZXRhaWxzJyBdID0gJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHM7DQoJCQkJDQoJCQkJLy8gT25seSBzYXZlIGlmIHdlIGFyZSB1c2luZyBjYWNoaW5nDQoJCQkJaWYgKCAkdGhpcy0+dXNlX2NhY2hlZF9tZXRob2RzKCkgKSB7DQoJCQkJDQoJCQkJCS8vIEFkZCB0aGUgc2VydmVyIHNpZ25hdHVyZSBmb3IgZGV0ZWN0aW5nIGludmFsaWRhdGVkIG1ldGhvZHMgZGV0YWlscyBvbiBhIG1pZ3JhdGlvbiBvciBzb21lIG90aGVyIGNoYW5nZQ0KCQkJCQkvLyBOb3RlOiBTZWUgZGlzY3Vzc2lvbiBhYm92ZSBvbiBkZXJpdmF0aW9uIG9mIHNpZ25hdHVyZQ0KCQkJCQkvLyBUT0RPOiBDaGVjaywgcHJvYmFibHkgY2FuIHVzZSB0aGUgc2VydmVyIHNpZ25hdHVyZSBjYWxjdWxhdGVkIGFib3ZlDQoJCQkJCSRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyA9IF9fRklMRV9fIC4gIiA6ICIgLiAoICggJGZpbGVtb2R0aW1lID0gZmlsZW10aW1lKCBfX0ZJTEVfXyApICkgPyAoc3RyaW5nKSAkZmlsZW1vZHRpbWUgOiAnMScgKTsNCgkJCQkJJHNlcnZlcl9zaWduYXR1cmUgPSBtZDUoICRzZXJ2ZXJfc2lnbmF0dXJlX3N0cmluZyApOw0KCQkJCQkkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzWyAnY29udHJvbCcgXVsgJ3NpZ25hdHVyZScgXSA9ICRzZXJ2ZXJfc2lnbmF0dXJlOw0KCQkJCQkNCgkJCQkJc2V0X3RyYW5zaWVudCggJHRoaXMtPl96aXBfbWV0aG9kc190cmFuc2llbnQsICRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHMsIHNlbGY6OlpJUF9NRVRIT0RTX1RSQU5TSUVOVF9MSUZFICk7DQoJCQkJCQ0KCQkJCX0NCgkJCQkJCQkNCgkJCX0gZWxzZSB7DQoJCQkNCgkJCQkvLyBXZSBnb3QgYSB2YWxpZCB0cmFuc2llbnQgdmFsdWUgc28gbm93IHNlcGFyYXRlIHRoZSBhZ2dyZWdhdGUgaW50byB0d28NCgkJCQkkYXZhaWxhYmxlX21ldGhvZHMgPSAkYWdncmVnYXRlX2F2YWlsYWJsZV9tZXRob2RzWyAnbWV0aG9kcycgXTsNCgkJCQkkYXZhaWxhYmxlX21ldGhvZHNfZGV0YWlscyA9ICRhZ2dyZWdhdGVfYXZhaWxhYmxlX21ldGhvZHNbICdkZXRhaWxzJyBdOw0KCQkJDQoJCQl9DQoJCQkNCgkJCS8vIENoZWNrIHdoZXRoZXIgdGhlc2UgbmVlZCB0byBiZSBmaWx0ZXJlZCBieSByZXF1ZXN0ZWQgbWV0aG9kcw0KCQkJaWYgKCAhZW1wdHkoICRyZXF1ZXN0ZWQgKSApIHsNCgkJCQ0KCQkJCS8vIEZpbHRlciB0aGUgYXZhaWxhYmxlIG1ldGhvZHMgLSByZXN1bHQgY291bGQgYmUgZW1wdHkNCgkJCQkvLyBPcmRlciB3aWxsIGJlIHJldGFpbmVkIHJlZ2FyZGxlc3Mgb2Ygb3JkZXIgb2YgcmVxdWVzdGVkIG1ldGhvZHMNCgkJCQkkYXZhaWxhYmxlX21ldGhvZHMgPSBhcnJheV9pbnRlcnNlY3QoICRhdmFpbGFibGVfbWV0aG9kcywgJHJlcXVlc3RlZCApOw0KCQkJCQ0KCQkJfQ0KDQoJCQkvLyBJZiBqdXN0IHRoZSBiZXN0IGF2YWlsYWJsZSByZXF1ZXN0ZWQgdGhlbiBzbGljZSBpdCBvZmYNCgkJCWlmICggKCB0cnVlID09PSAkYmVzdF9vbmx5ICkgJiYgKCAhZW1wdHkoICRhdmFpbGFibGVfbWV0aG9kcyApICkgKSB7DQoJCQkNCgkJCQkkbWV0aG9kcyA9IGFycmF5X3NsaWNlKCAkYXZhaWxhYmxlX21ldGhvZHMsIDAsIDEgKTsNCgkJCQkkbWV0aG9kc19kZXRhaWxzID0gJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHM7DQoJCQkJDQoJCQl9IGVsc2Ugew0KCQkJDQoJCQkJJG1ldGhvZHMgPSAkYXZhaWxhYmxlX21ldGhvZHM7DQoJCQkJJG1ldGhvZHNfZGV0YWlscyA9ICRhdmFpbGFibGVfbWV0aG9kc19kZXRhaWxzOw0KCQkJDQoJCQl9DQoJCQkNCgkJCWlmICggIWVtcHR5KCAkbWV0aG9kcyApICkgew0KCQkJDQoJCQkJcmV0dXJuIHRydWU7DQoJCQkJDQoJCQl9IGVsc2Ugew0KCQkJDQoJCQkJcmV0dXJuIGZhbHNlOw0KCQkJCQ0KCQkJfQ0KCQkNCgkJfQ0KCQkJCQ0KCQkvKioNCgkJICoJc2V0X3ppcF9tZXRob2RfY2FjaGluZ19mb3JjZV9kaXNhYmxlZCgpDQoJCSAqCQ0KCQkgKglTZXQgd2hldGhlciBvciBub3QgemlwIG1ldGhvZCBjYWNoaW5nIHNob3VsZCBiZSBmb3JjZSBkaXNhYmxlZCBmb3IgdGhpcyBpbnN0YW5jZSBvZiB6aXBidWRkeQ0KCQkgKgkNCgkJICoJQHBhcmFtCQlib29sCSRkaXNhYmxlZAlPcHRpb25hbDogVHJ1ZSB0byBkaXNhYmxlOyBmYWxzZSAoZGVmYXVsdCkgdG8gbm90IGRpc2FibGUNCgkJICoJQHJldHVybgkJb2JqZWN0CQkJCVRoaXMgb2JqZWN0DQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X3ppcF9tZXRob2RfY2FjaGluZ19mb3JjZV9kaXNhYmxlZCggJGRpc2FibGVkID0gZmFsc2UgKSB7DQoJCQ0KCQkJJHRoaXMtPl96aXBfbWV0aG9kX2NhY2hpbmdfZm9yY2VfZGlzYWJsZWQgPSAkZGlzYWJsZWQ7DQoJCQkNCgkJCXJldHVybiAkdGhpczsNCgkJDQoJCX0NCgkJDQoJCS8qKg0KCQkgKglnZXRfemlwX21ldGhvZF9jYWNoaW5nX2ZvcmNlX2Rpc2FibGVkKCkNCgkJICoJDQoJCSAqCVJldHVybnMgdGhlIGJvb2xlYW4gb2Ygd2hldGhlciB6aXAgbWV0aGQgY2FjaGluZyBmb3IgdGhpcyBpbnN0YW5jZSBvZiB6aXBidWRkeSBpcyBkaXNhYmxlZCBvciBub3QNCgkJICoJDQoJCSAqCUByZXR1cm4JCWJvb2xlYW4JCVRydWUgaWYgY2FjaGluZyBmb3JjZSBkaXNhYmxlZCwgRmFsc2UgaWYgbm90DQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X3ppcF9tZXRob2RfY2FjaGluZ19mb3JjZV9kaXNhYmxlZCgpIHsNCgkJDQoJCQlyZXR1cm4gJHRoaXMtPl96aXBfbWV0aG9kX2NhY2hpbmdfZm9yY2VfZGlzYWJsZWQ7DQoJCQ0KCQl9DQoJCQkJDQoJCS8qKg0KCQkgKgl1c2VfY2FjaGVkX21ldGhvZHMoKQ0KCQkgKgkNCgkJICoJUmV0dXJucyB3aGV0aGVyIGNvbmRpdGlvbnMvY29uZmlndXJhdGlvbiBpbmRpY2F0ZSBjYWNoZWQgbWV0aG9kcyBzaG91bGQgYmUgdXNlZA0KCQkgKglOb3RlOiBUZW1wb3JhcmlseSBhZGQgdGhlIGNvbmRpdGlvbiBmb3Igd2hldGhlciBnZXRfL3NldF90cmFuc2llbnQgZnVuY3Rpb25zDQoJCSAqCWV4aXN0IC0gaWYgbm90IChtZWFuaW5nIHdlIGFyZSBwcm9iYWJseSBydW5uaW5nIHVuZGVyIGltcG9ydGJ1ZGR5KSB0aGVuIHdlIGFsc28NCgkJICoJc2tpcCBjYWNoaW5nLiBUaGlzIGFkZHMgYSBsaXR0bGUgdGltZSB3aGVuIGluc3RhbnRpYXRpbmcgYmVjYXVzZSB3ZSBoYXZlIHRvIHRlc3QNCgkJICoJZXZlcnkgdGltZSBidXQgaXQncyBhY2NlcHRhYmxlIGZvciBub3cuIEluIHRoZSBsb25nZXIgdGVybSB3ZSB3aWxsIGhhdmUgYW4NCgkJICoJYWx0ZXJuYXRpdmUgd2F5IHRvIGhhbmRsZSB0aGUgdHJhbnNpZW50IGRhdGEgb3V0c2lkZSBvZiBXb3JkUHJlc3MuDQoJCSAqCQ0KCQkgKglAcmV0dXJuCQlib29sCXRydWUgaWYgdXNlIGNhY2hlZCBtZXRob2RzLCBmYWxzZSBvdGhlcndpc2UNCgkJICoNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiB1c2VfY2FjaGVkX21ldGhvZHMoKSB7DQoJCQ0KCQkJLy8gQnkgZGVmYXVsdCB3ZSdsbCBiZSB1c2luZyBjYWNoaW5nDQoJCQkkcmVzdWx0ID0gdHJ1ZTsNCgkJCQ0KCQkJLy8gSGFzIGNhY2hpbmcgYmVlbiBleHBsaWNpdGx5IGRpc2FibGVkDQoJCQkkY2FjaGluZ19kaXNhYmxlZCA9ICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGlzYWJsZV96aXBtZXRob2RfY2FjaGluZyddICkgJiYNCgkJCQkJCQkJICAoIHBiX2JhY2t1cGJ1ZGR5Ojokb3B0aW9uc1snZGlzYWJsZV96aXBtZXRob2RfY2FjaGluZyddID09ICcxJykgKTsNCg0KCQkJLy8gRG8gd2UgaGF2ZSB0aGUgbWVhbnMgdG8gY2FjaGUNCgkJCSRjYWNoaW5nX3VuYXZhaWxhYmxlID0gKCAhKCBmdW5jdGlvbl9leGlzdHMoICdnZXRfdHJhbnNpZW50JyApICYmIGZ1bmN0aW9uX2V4aXN0cyggJ3NldF90cmFuc2llbnQnICkgKSApOwkNCg0KCQkJLy8gSGFzIGNhY2hpbmcgYmVlbiBmb3JjZSBkaXNhYmxlZCBmb3IgdGhpcyBwYXJ0aWN1bGFyIGluc3RhbmNlIG9mIHppcGJ1ZGR5DQoJCQkkY2FjaGluZ19mb3JjZV9kaXNhYmxlZCA9ICR0aGlzLT5nZXRfemlwX21ldGhvZF9jYWNoaW5nX2ZvcmNlX2Rpc2FibGVkKCk7DQoNCgkJCWlmICggJGNhY2hpbmdfZGlzYWJsZWQgfHwgJGNhY2hpbmdfdW5hdmFpbGFibGUgfHwgJGNhY2hpbmdfZm9yY2VfZGlzYWJsZWQgKSB7DQoJCQkNCgkJCQkkcmVzdWx0ID0gZmFsc2U7DQoJCQkJDQoJCQl9DQoJCQkNCgkJCXJldHVybiAkcmVzdWx0Ow0KCQkNCgkJfQ0KCQkJCQ0KCQkvKioNCgkJICoJZ2V0X3ppcF9tZXRob2RzKCkNCgkJICoJDQoJCSAqCVJldHVybnMgdGhlIGFycmF5IG9mIHppcCBtZXRob2RzIHByZXZpb3VzbHkgZGVkdWNlZA0KCQkgKgkNCgkJICoJQHJldHVybgkJYXJyYXkJRmxhdCBhcnJheSBvZiB6aXAgbWV0aG9kcyAoY291bGQgYmUgZW1wdHkpDQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X3ppcF9tZXRob2RzKCkgew0KCQkJDQoJCQlyZXR1cm4gJHRoaXMtPl96aXBfbWV0aG9kczsNCgkJDQoJCX0NCgkJCQkNCgkJLyoqDQoJCSAqCXNldF96aXBfbWV0aG9kcygpDQoJCSAqCQ0KCQkgKglSZXNldHMgdGhlIHppcCBtZXRob2RzIGJhc2VkIG9uIG5ldyBjcml0ZXJpYSBhbmQgcmV0dXJucyB0aGUgYXJyYXkgb2YgemlwIG1ldGhvZHMNCgkJICoJSWYgdGhlIGZpcnN0IGF0dGVtcHQgdG8gZGVkdWNlIG1ldGhvZHMgcmV0dXJucyBhbiBlbXB0eSByZXN1bHQgdGhlbiBmb3JjZSBkaXNhYmxlDQoJCSAqCXVzZSBvZiBjYWNoZWQgemlwIG1ldGhvZHMgYW5kIHRyeSBhZ2Fpbi4NCgkJICoJDQoJCSAqCUBwYXJhbQkJYXJyYXkJJHJlcXVlc3RlZAlGbGF0IGFycmF5IG9mIHJlcXVlc3RlZCAocHJlZmVycmVkKSB6aXAgbWV0aG9kcw0KCQkgKglAcGFyYW0JCWJvb2wJJGJlc3Rfb25seQlPcHRpb25hbDogVHJ1ZSBpZiBvbmx5IHRoZSBiZXN0IGF2YWlsYWJsZSBtZXRob2Qgd2FudGVkDQoJCSAqCUByZXR1cm4JCW9iamVjdAkJCQlUaGlzIG9iamVjdA0KCQkgKg0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIHNldF96aXBfbWV0aG9kcyggYXJyYXkgJHJlcXVlc3RlZCwgJGJlc3Rfb25seSA9IGZhbHNlICkgew0KCQkJDQoJCQkkbWV0aG9kc19hdmFpbGFibGUgPSBmYWxzZTsNCg0KCQkJLy8gVXBkYXRlIHRoZSBtZW1vcnkgb2Ygd2hhdCB6aXAgbWV0aG9kcyB3ZXJlIHJlcXVlc3RlZCAtIG1ha2UgaXQgY2xlYW4NCgkJCSR0aGlzLT5fcmVxdWVzdGVkX3ppcF9tZXRob2RzID0gYXJyYXlfbWFwKCAndHJpbScsICRyZXF1ZXN0ZWQgKTsNCgkJCQ0KCQkJLy8gV29yayBvdXQgdGhlIGxpc3Qgb2YgemlwIG1ldGhvZHMgZnJvbSB0aGUgcmVxdWVzdGVkIGFuZCBhdmFpbGFibGUNCgkJCSRtZXRob2RzX2F2YWlsYWJsZSA9ICR0aGlzLT5kZWR1Y2VfemlwX21ldGhvZHMoICR0aGlzLT5femlwX21ldGhvZHMsICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlscywgJHRoaXMtPl9yZXF1ZXN0ZWRfemlwX21ldGhvZHMsICRiZXN0X29ubHkgKTsNCgkJCQ0KCQkJLy8gSWYgd2UgZW5kIHVwIHdpdGggbm8gemlwIG1ldGhvZHMgY291bGQgYmUgdGhhdCBjYWNoaW5nIG5vdCBmdW5jdGlvbmFsIG9uIHRoaXMNCgkJCS8vIHNlcnZlciBzbyB3ZSdsbCBmb3JjZSBvdmVycmlkZSBhbmQgdHJ5IGFnYWluIGZvciBsdWNrDQoJCQlpZiAoIHRydWUgIT09ICRtZXRob2RzX2F2YWlsYWJsZSApIHsNCgkJCQ0KCQkJCS8vIExvZyB0aGF0IHdlIGFyZSBvdmVycmlkaW5nIGNhY2hpbmcNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICdaaXAgbWV0aG9kIGNhY2hpbmcgZm9yY2UgZGlzYWJsZWQuJyApOw0KCQkJDQoJCQkJJHRoaXMtPnNldF96aXBfbWV0aG9kX2NhY2hpbmdfZm9yY2VfZGlzYWJsZWQoIHRydWUgKTsNCgkJCQkkdGhpcy0+ZGVkdWNlX3ppcF9tZXRob2RzKCAkdGhpcy0+X3ppcF9tZXRob2RzLCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHMsICR0aGlzLT5fcmVxdWVzdGVkX3ppcF9tZXRob2RzLCAkYmVzdF9vbmx5ICk7DQoNCgkJCX0NCg0KCQkJcmV0dXJuICR0aGlzOw0KCQkNCgkJfQ0KCQkJCQkJCQkNCgkJLyoqDQoJCSAqCXJlZnJlc2hfemlwX21ldGhvZHMoKQ0KCQkgKg0KCQkgKglSZWZyZXNoIHRoZSBpbmZvcm1hdGlvbiBvbiB0aGUgYXZhaWxhYmxlIHppcCBtZXRob2RzDQoJCSAqCVRPRE86IFBlcmhhcHMgdGhlIHRyYW5zaWVudCBjb3VsZCBiZSBkZWxldGVkIGhlcmUgcmF0aGVyIHRoYW4gYnkgdGhlIGNhbGxlcj8NCgkJICoNCgkJICoJQHBhcmFtCQlhcnJheQkJJHppcF9tZXRob2RzCU9wdGlvbmFsOiBUaGUgc2V0IG9mIHppcCBtZXRob2RzIHJlcXVlc3RlZCB0byB1c2UNCgkJICoJQHJldHVybgkJb2JqZWN0CQkJCQkJVGhpcyBvYmplY3QNCgkJICovDQoJCXB1YmxpYyBmdW5jdGlvbiByZWZyZXNoX3ppcF9tZXRob2RzKCAkemlwX21ldGhvZHMgPSBhcnJheSgpICkgew0KCQkNCgkJCSR0aGlzLT5zZXRfemlwX21ldGhvZHMoICR6aXBfbWV0aG9kcyApOw0KCQkJDQoJCQlyZXR1cm4gJHRoaXM7DQoJCQkNCgkJfQ0KDQoJCS8qKg0KCQkgKglzYW5pdGl6ZV9leGNsdWRlcygpDQoJCSAqDQoJCSAqCVRha2UgYW4gZXhjbHVzaW9uIGxpc3Qgb2YgZGlyZWN0b3JpZXMgYW5kL29yIGZpbGVzIGFuZCBwcm9kdWNlIGEgc2FuaXRpemVkIGV4Y2x1c2lvbiBsaXN0DQoJCSAqCURpcmVjdG9yaWVzIHdpbGwgYmUgcmVjb2duaXplZCBieSBoYXZpbmcgYSB0cmFpbGluZyBkaXJlY3Rvcnkgc2VwYXJhdG9yIG90aGVyd2lzZSB3aWxsIGJlDQoJCSAqCXRyZWF0ZWQgYXMgYSBmaWxlIChub3RlIHRoYXQgaGVyZSB3ZSBhcmUgd29ya2luZyB3aXRoIHBhdHRlcm5zIGFuZCBub3QgdGVzdGluZyB0byBzZWUNCgkJICoJd2hldGhlciBzb21ldGhpbmcgX2lzXyBhIGRpcmVjdG9yeSBvciBub3QgYmVjYXVzZSB3ZSBkb24ndCBuZWNlc3NhcmlseSBoYXZlIHRoZSBmdWxsDQoJCSAqCWRpcmVjdG9yeSBwYXRoKS4NCgkJICoJTm90ZTogQW55dGhpbmcgdGhhdCBjb250YWlucyBhIHdpbGRjYXJkIGNoYXJhY3RlciAoKiBvciA/KSBpcyBpZ25vcmVkIGFzIHRoZXNlIGFyZSBub3QNCgkJICoJY3VycmVudGx5IHN1cHBvcnRlZCAoYW5kIG1heWJlIG5ldmVyIHdpbGwgYWNyb3NzIHRoZSBib2FyZCkuIEZvciBjb21tYW5kIHppcCB6aXAgd2UgY2FuDQoJCSAqCWNvbnNpZGVyIGFuIG9wdGlvbiB0byBoYXZlIHRoZXNlIGFzIHNlcGFyYXRlIGV4Y2x1c2lvbnMgKGFuZCBjdXJyZW50bHkgd2UgY2FuIGFjY29tb2RhdGUNCgkJICoJdGhlbiB0aHJvdWdoIHNwZWNpZnlpbmcgZW52aXJvbm1lbnQgWklQT1BUUy4NCgkJICoNCgkJICoJQHBhcmFtCWFycmF5CQlMaXN0IG9mIHByaW1hcnkgZXhjbHVzaW9ucyAtIG1heSBiZSBlbXB0eQ0KCQkgKglAcGFyYW0JYXJyYXkJCUxpc3Qgb2Ygc2Vjb25kYXJ5IGV4Y2x1c2lvbnMgLSBtYXkgYmUgZW1wdHkNCgkJICoJQHBhcmFtCXN0cmluZwkJVGhlIGJhc2UgZGlyZWN0b3J5IHRvIGJlIHVzZWQgaWYgbm9ybWFsaXppbmcNCgkJICoNCgkJICoJQHJldHVybgltaXhlZAkJYXJyYXkgb24gc3VjY2VzcywgZmFsc2Ugb3RoZXJ3aXNlDQoJCSAqLw0KCQlwcm90ZWN0ZWQgZnVuY3Rpb24gc2FuaXRpemVfZXhjbHVkZXMoICRwcmltYXJ5LCAkc2Vjb25kYXJ5LCAkYmFzZSA9ICcnICkgew0KDQoJCQkkc2FuaXRpemVkID0gYXJyYXkoKTsNCgkJCQ0KCQkJJGJhc2VkaXIgPSB0cmltKCAkYmFzZSApOw0KCQkJJG5vcm1hbGl6ZSA9ICFlbXB0eSggJGJhc2VkaXIgKTsNCgkJCQ0KCQkJLy8gTm9ybWFsaXplIHRoZSB0cmFpbGluZyBkaXJlY3Rvcnkgc2VwYXJhdG9yIG9uIHRoZSBwYXRoDQoJCQkkYmFzZWRpciA9IHJ0cmltKCAkYmFzZWRpciwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsNCgkJCQ0KCQkJLy8gTm9ybWFsaXplIHBsYXRmb3JtIHNwZWNpZmljIGRpcmVjdG9yeSBzZXBhcmF0b3JzIGluIHBhdGgNCgkJCSRiYXNlZGlyID0gc3RyX3JlcGxhY2UoIERJUkVDVE9SWV9TRVBBUkFUT1IsIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiwgJGJhc2VkaXIgKTsNCgkJDQoJCQkvLyAkcHJpbWFyeSBpcyBjb25zaWRlcmVkIHRvIGJlIHVuY2xlYW4NCgkJCWZvcmVhY2ggKCAkcHJpbWFyeSBhcyAkZXhjbHVkZSApIHsNCgkJCQ0KCQkJCS8vIFJlc2V0IGZsYWcgZm9yIHdoZXRoZXIgdGhpcyBleGNsdWRlIGlzIGEgZGlyZWN0b3J5LWxpa2UgZXhjbHVkZQ0KCQkJCSRpc19kaXJlY3RvcnlfcGF0aCA9IGZhbHNlOw0KCQkJCQ0KCQkJCS8vIEdldCByaWQgb2Ygc3RhbmRhcmQgcHJlZml4L3N1ZmZpeCBkZXRyaXR1cw0KCQkJCSRleGNsdWRlID0gdHJpbSggJGV4Y2x1ZGUgKTsNCgkJCQkNCgkJCQkvLyBQb3NzaWJsZSB0aGF0IHdlIGNvdWxkIGVuZCB1cCB3aXRoIGFuIGVtcHR5IGVudHJ5DQoJCQkJLy8gQWxzbyBpZ25vcmUgaWYgYW55IHdpbGRjYXJkIGNoYXJhY3RlcnMgcHJlc2VudA0KCQkJCWlmICggIWVtcHR5KCAkZXhjbHVkZSApICYmICggIXByZWdfbWF0Y2goICd8Wz8qXXwnLCAkZXhjbHVkZSApICkgKSB7DQoJCQkJDQoJCQkJCS8vIFJlbWVtYmVyIGlmIGl0IGhhcyBhIGRpcmVjdG9yeSBzZXBhcmF0b3Igc3VmZml4DQoJCQkJCWlmICggcHJlZ19tYXRjaCggJ3xbJyAuIGFkZHNsYXNoZXMoIHNlbGY6OkRJUkVDVE9SWV9TRVBBUkFUT1JTICkgLiAnXSR8JywgJGV4Y2x1ZGUgKSApIHsNCgkJCQkJDQoJCQkJCQkkaXNfZGlyZWN0b3J5X3BhdGggPSB0cnVlOw0KCQkJCQkNCgkJCQkJfQ0KCQkJCQkNCgkJCQkJLy8gUmVtb3ZlIHdoYXQgY291bGQgYmUgbXVsdGlwbGUgcHJlZml4IG9yIHN1ZmZpeCBkaXJlY3Rvcnkgc2VwYXJhdG9ycw0KCQkJCQkkZXhjbHVkZSA9IHRyaW0oICRleGNsdWRlLCBzZWxmOjpESVJFQ1RPUllfU0VQQVJBVE9SUyApOw0KCQkJCQkNCgkJCQkJLy8gTWFrZSBzdXJlIHBsYXRmb3JtIHNwZWNpZmljIGRpcmVjdG9yeSBzZXBhcmF0b3JzIGluIHBhdGggYmVjb21lIG5vcm1hbGl6ZWQNCgkJCQkJJGV4Y2x1ZGUgPSBzdHJfcmVwbGFjZSggRElSRUNUT1JZX1NFUEFSQVRPUiwgc2VsZjo6Tk9STV9ESVJFQ1RPUllfU0VQQVJBVE9SLCAkZXhjbHVkZSApOw0KCQkJCQkNCgkJCQkJLy8gQW5kIGFkZCBiYWNrIGEgc2luZ2xlIGluc3RhbmNlIHByZWZpeA0KCQkJCQkkZXhjbHVkZSA9IHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiAuICRleGNsdWRlOw0KCQkJCQkNCgkJCQkJLy8gQW5kIG9wdGlvbmFsbHkgYSBzaW5nbGUgaW5zdGFuY2Ugc3VmZml4DQoJCQkJCWlmICggJGlzX2RpcmVjdG9yeV9wYXRoICkgew0KCQkJCQkNCgkJCQkJCSRleGNsdWRlIC49IHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsNCgkJCQkJCQ0KCQkJCQl9DQoJCQkJCQkJCQkJDQoJCQkJCSRzYW5pdGl6ZWRbXSA9ICRleGNsdWRlOw0KCQkJCQkNCgkJCQl9DQoJCQkJDQoJCQl9DQoJCQkNCgkJCS8vICRzZWNvbmRhcnkgaXMgY29uc2lkZXJlZCB0byBiZSBjbGVhbg0KCQkJaWYgKCAhZW1wdHkoICRzZWNvbmRhcnkgKSApIHsNCgkJCQ0KCQkJCSRzYW5pdGl6ZWQgPSBhcnJheV9tZXJnZSggJHNhbml0aXplZCwgJHNlY29uZGFyeSApOyANCgkJCQ0KCQkJfQ0KCQkJDQoJCQkvLyBHZXQgdW5pcXVlIGVudHJpZXMgYW5kIHJlbnVtYmVyIG51bWVyaWMga2V5cw0KCQkJJHNhbml0aXplZCA9IGFycmF5X21lcmdlKCBhcnJheV91bmlxdWUoICRzYW5pdGl6ZWQgKSApOw0KCQkJDQoJCQlpZiAoIHRydWUgPT0gJG5vcm1hbGl6ZSApIHsNCgkJCQ0KCQkJCS8vIE1ha2Ugc3VyZSB0aGUgbm9ybWFsaXplIGJhc2UgaGFzIGEgdHJhaWxpbmcgZGlyZWN0b3J5IHNlcGFyYXRvcg0KCQkJCSRiYXNlZGlyID0gKCBydHJpbSggJGJhc2VkaXIsIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUiApICkgLiBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1I7DQoJCQkNCgkJCQlmb3JlYWNoICggJHNhbml0aXplZCBhcyAmJGV4Y2x1c2lvbiApIHsNCgkJCQkNCgkJCQkJLy8gTXVzdCByZW1vdmUgYW55IGxlYWRpbmcgRElSRUNUT1JZX1NFUEFSQVRPUiBiZWNhdXNlICRiYXNlZGlyIGFsd2F5cyBoYXMgdHJhaWxpbmcNCgkJCQkJJGV4Y2x1c2lvbiA9IGx0cmltKCAkZXhjbHVzaW9uLCBzZWxmOjpOT1JNX0RJUkVDVE9SWV9TRVBBUkFUT1IgKTsNCgkJCQkJJGV4Y2x1c2lvbiA9ICggJGJhc2VkaXIgLiAkZXhjbHVzaW9uICk7DQoJCQkJCQ0KCQkJCX0NCgkJCQkJCQkJDQoJCQl9DQoJCQkJCQ0KCQkJcmV0dXJuICRzYW5pdGl6ZWQ7DQoJCQ0KCQl9DQoNCgkJLyoqDQoJCSAqCWdldF9hdmFpbGFibGVfemlwX21ldGhvZHMoKQ0KCQkgKgkNCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgemlwIG1ldGhvZHMgdGhhdCBhcmUgYXZhaWxhYmxlIGZvciB0aGUgbW9kZSBvZiB0aGlzIG9iamVjdA0KCQkgKglMaWJyYXJpZXMgbXVzdCBoYXZlIGJlZW4gbG9hZGVkIGFscmVhZHkNCgkJICoJDQoJCSAqCUBwYXJhbQkJYXJyYXkJVGhlIHN1cHBvcnRlZCB6aXAgbWV0aG9kcw0KCQkgKglAcGFyYW0JCWFycmF5CVRoZSBhcnJheSB3aGljaCB3aWxsIGhvbGQgdGhlIGF2YWlsYWJsZSBtZXRob2RzDQoJCSAqCUBwYXJhbQkJYXJyYXkJVGhlIGFycmF5IHRoYXQgd2lsbCBob2xkIHRoZSBhdmFpbGFibGUgbWV0aG9kcyBhdHRyaWJ1dGVzIChtZXRob2QgdGFnIGlzIGtleSkNCgkJICoJQHJldHVybgkJYm9vbAlUcnVlIGlmIG1ldGhvZHMgYXZhaWxhYmxlLCBGYWxzZSBvdGhlcndpc2UNCgkJICoNCgkJICovDQoJCXByb3RlY3RlZCBmdW5jdGlvbiBnZXRfYXZhaWxhYmxlX3ppcF9tZXRob2RzKCBhcnJheSAkc3VwcG9ydGVkX3ppcF9tZXRob2RzLCAmJGF2YWlsYWJsZV9tZXRob2RzLCAmJGF2YWlsYWJsZV9tZXRob2RzX2RldGFpbHMgKSB7DQoJCQ0KCQkJLy8gTWFrZSBzdXJlIHRoZXNlIGFyZSBjbGVhcmVkIGFzIHRoZSBjYWxsZXIgbWlnaHQgbm90IGhhdmUgZG9uZSBzbw0KCQkJJGF2YWlsYWJsZV9tZXRob2RzID0gYXJyYXkoKTsNCgkJCSRhdmFpbGFibGVfbWV0aG9kc19kZXRhaWxzID0gYXJyYXkoKTsNCgkJCQ0KCQkJLy8gVHJ5IGVhY2ggc3VwcG9ydGVkIHppcCBtZXRob2QgdG8gc2VlIHdoYXQgaXQgY2FuIGRvIG9uIHRoaXMgc3lzdGVtCQkNCgkJCWZvcmVhY2ggKCAkc3VwcG9ydGVkX3ppcF9tZXRob2RzIGFzICRtZXRob2RfdGFnICkgew0KDQoJCQkJJGNsYXNzX25hbWUgPSAncGx1Z2luYnVkZHlfemJ6aXAnIC4gJG1ldGhvZF90YWc7DQoJDQoJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsNCgkJCQkNCgkJCQlpZiAoIHRydWUgPT09ICR6aXBwZXItPmlzX2F2YWlsYWJsZSggJHRoaXMtPl90ZW1wZGlyICkgKSB7DQoJCQkJDQoJCQkJCSRhdmFpbGFibGVfbWV0aG9kc1tdID0gJG1ldGhvZF90YWc7DQoJCQkJCSRhdmFpbGFibGVfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdID0gJHppcHBlci0+Z2V0X21ldGhvZF9kZXRhaWxzKCk7DQoJCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCQl1bnNldCggJHppcHBlciApOw0KCQkJfQ0KCQkJCQkJDQoJCQlyZXR1cm4gKCAhZW1wdHkoICRhdmFpbGFibGVfbWV0aG9kcyApICk7DQoNCgkJfQ0KCQkJCQkJDQoJCS8qKg0KCQkgKglnZXRfY29tcGF0aWJpbGl0eV96aXBfbWV0aG9kcygpDQoJCSAqCQ0KCQkgKglSZXR1cm5zIHRoZSBhcnJheSBvZiB6aXAgbWV0aG9kcyB0aGF0IGFyZSByZWdhcmRlZCBhcyAiY29tcGF0aWJpbGl0eSIgbWV0aG9kcw0KCQkgKglMaWJyYXJpZXMgbXVzdCBoYXZlIGJlZW4gbG9hZGVkIGFscmVhZHkNCgkJICoJDQoJCSAqCUByZXR1cm4JCWFycmF5CUZsYXQgYXJyYXkgb2YgemlwIG1ldGhvZHMgKGNvdWxkIGJlIGVtcHR5KQ0KCQkgKg0KCQkgKi8NCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldF9jb21wYXRpYmlsaXR5X3ppcF9tZXRob2RzKCkgew0KCQkNCgkJCSRjb21wYXRpYmlsaXR5X21ldGhvZHMgPSBhcnJheSgpOw0KCQkJDQoJCQlmb3JlYWNoICggJHRoaXMtPl96aXBfbWV0aG9kcyBhcyAkbWV0aG9kX3RhZyApIHsNCg0KCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOw0KCQ0KCQkJCSR6aXBwZXIgPSBuZXcgJGNsYXNzX25hbWUoICR0aGlzICk7DQoJCQkJDQoJCQkJaWYgKCAkemlwcGVyLT5nZXRfaXNfY29tcGF0aWJpbGl0eV9tZXRob2QoKSA9PT0gdHJ1ZSApIHsNCgkJCQkNCgkJCQkJJGNvbXBhdGliaWxpdHlfbWV0aG9kc1tdID0gJG1ldGhvZF90YWc7DQoJCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCQl1bnNldCggJHppcHBlciApOw0KCQkJfQ0KCQkJDQoJCQlyZXR1cm4gJGNvbXBhdGliaWxpdHlfbWV0aG9kczsNCgkJCQ0KCQl9DQoJCQ0KCQkvKioNCgkJICoJZ2V0X2Jlc3RfemlwX21ldGhvZHMoKQ0KCQkgKgkNCgkJICoJUmV0dXJucyB0aGUgYXJyYXkgb2YgYmVzdCB6aXAgbWV0aG9kKHMpDQoJCSAqCUZvciBub3cgd2UgYXNzdW1lIG9ubHkgb25lICJiZXN0IiBtZXRob2QgYXMgYmVpbmcgdGhlIGZpcnN0IG1ldGhvZCBpbiB0aGUgbGlzdA0KCQkgKgl0aGF0IGhhcyB0aGUgcmVxdWVzdGVkIGF0dHJpYnV0ZShzKS4NCgkJICoJTGlicmFyaWVzIG11c3QgaGF2ZSBiZWVuIGxvYWRlZCBhbHJlYWR5DQoJCSAqCQ0KCQkgKglAcGFyYW0JCWFycmF5CSRhdHRyaWJ1dGVzCUFycmF5IG9mIGF0dHJpYnV0ZXMgdG8gY2hlY2sgbWV0aG9kIHN1cHBvcnRzDQoJCSAqCUByZXR1cm4JCWFycmF5CQkJCUZsYXQgYXJyYXkgb2YgemlwIG1ldGhvZHMgKGNvdWxkIGJlIGVtcHR5KQ0KCQkgKg0KCQkgKi8NCgkJcHJvdGVjdGVkIGZ1bmN0aW9uIGdldF9iZXN0X3ppcF9tZXRob2RzKCAkYXR0cmlidXRlcyA9IGFycmF5KCkgKSB7DQoJCQ0KCQkJJGJlc3RfbWV0aG9kcyA9IGFycmF5KCk7DQoJCQkNCgkJCWlmICggIWVtcHR5KCAkdGhpcy0+X3ppcF9tZXRob2RzICkgKSB7DQoJCQkNCgkJCQlpZiAoIGVtcHR5KCAkYXR0cmlidXRlcyApICkgew0KCQkJCQ0KCQkJCQkvLyBObyBhdHRyaWJ1dGVzIHRvIHRlc3QgZm9yIHNvIGp1c3QgdGFrZSB0aGUgZmlyc3QgaW4gdGhlIGxpc3QNCgkJCQkJJGJlc3RfbWV0aG9kc1tdID0gJHRoaXMtPl96aXBfbWV0aG9kc1sgMCBdOw0KCQkJCQkNCgkJCQl9IGVsc2Ugew0KCQkJDQoJCQkJCS8vIEhhdmUgc29tZSBhdHRyaWJ1dGVzIHRvIHRlc3Qgc28gd29yayBhbG9uZyB0aGUgbGlzdCB1bnRpbCB3ZSBmaW5kIGEgbWF0Y2ggb3IgZW5kIG9mIGxpc3QNCgkJCQkJZm9yZWFjaCAoICR0aGlzLT5femlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7DQoJCQkJDQoJCQkJCQkvLyBTdGFydCBhZnJlc2ggZWFjaCB0aW1lIC0gYXNzdW1lIHN1Y2Nlc3MNCgkJCQkJCSRtYXRjaCA9IHRydWU7DQoJCQkJCQlmb3JlYWNoICggJGF0dHJpYnV0ZXMgYXMgJGF0dHJpYnV0ZSApIHsNCgkJCQkJCQ0KCQkJCQkJCS8vIENoZWNrIGVhY2ggYXR0cmlidXRlIGluIHR1cm4gKHByZWNvbmRpdGlvbiB0aGF0IGFsbCBhdHRyaWJ1dGVzIHNldCB0cnVlL2ZhbHNlKQ0KCQkJCQkJCSRtYXRjaCA9ICggJG1hdGNoICYmICggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdWyAnYXR0cicgXVsgJGF0dHJpYnV0ZSBdID09PSB0cnVlICkgKTsNCgkJCQkJCQ0KCQkJCQkJfQ0KCQkJCQkJDQoJCQkJCQlpZiAoIHRydWUgPT09ICRtYXRjaCApIHsNCgkJCQkJCQ0KCQkJCQkJCS8vIEZvdW5kIG91ciBtYXRjaGluZyBtZXRob2Qgc28gYnJlYWsgb3V0IG9mIHRoZSB0ZXN0IGxvb3AgdG8gcmV0dXJuDQoJCQkJCQkJJGJlc3RfbWV0aG9kc1tdID0gJG1ldGhvZF90YWc7DQoJCQkJCQkJYnJlYWs7DQoJCQkJCQkNCgkJCQkJCX0JCQkJCQkNCg0KCQkJCQl9DQoJCQkJDQoJCQkJfQ0KCQkJDQoJCQkNCgkJCX0NCgkJCQkJCQ0KCQkJcmV0dXJuICRiZXN0X21ldGhvZHM7DQoJCQkNCgkJfQ0KCQkNCgkJLyoqDQoJCSAqCWFkZF9kaXJlY3RvcnlfdG9femlwKCkNCgkJICoNCgkJICoJQWRkcyBhIGRpcmVjdG9yeSB0byBhIG5ldyBvciBleGlzdGluZyAoVE9ETzogbm90IHlldCBhdmFpbGFibGUpIFpJUCBmaWxlLg0KCQkgKg0KCQkgKglAcGFyYW0Jc3RyaW5nCQkJCUZ1bGwgcGF0aCAmIGZpbGVuYW1lIG9mIFpJUCBmaWxlIHRvIGNyZWF0ZS4NCgkJICoJQHBhcmFtCXN0cmluZwkJCQlGdWxsIGRpcmVjdG9yeSB0byBhZGQgdG8gemlwIGZpbGUuDQoJCSAqCUBwYXJhbQlhcnJheSggc3RyaW5nICkJCUFycmF5IG9mIHN0cmluZ3Mgb2YgcGF0aHMvZmlsZXMgdG8gZXhjbHVkZSBmcm9tIHppcHBpbmcNCgkJICoJQHBhcmFtCXN0cmluZwkJCQlGdWxsIGRpcmVjdG9yeSBwYXRoIHRvIGRpcmVjdG9yeSB0byB0ZW1wb3JhcmlseSBwbGFjZSBaSVANCgkJICoJQHBhcmFtCWJvb2xlYW4JCQkJVHJ1ZTogb25seSB1c2UgUENMWmlwLiBGYWxzZTogdHJ5IGFsbCBhdmFpbGFibGUNCgkJICoNCgkJICoJQHJldHVybgkJCQkJCXRydWUgb24gc3VjY2VzcywgZmFsc2Ugb3RoZXJ3aXNlDQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gYWRkX2RpcmVjdG9yeV90b196aXAoICR6aXBfZmlsZSwgJGFkZF9kaXJlY3RvcnksICRleGNsdWRlcyA9IGFycmF5KCksICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSA9ICcnICkgew0KCQkJaWYgKCB0cnVlID09PSAkdGhpcy0+X2lzX2V4cGVyaW1lbnRhbCApIHsNCgkJCQ0KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgX18oJ1J1bm5pbmcgYWx0ZXJuYXRpdmUgWklQIHN5c3RlbSAoQkVUQSkgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOw0KCQkJDQoJCQl9IGVsc2Ugew0KCQkJDQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBfXygnUnVubmluZyBzdGFuZGFyZCBaSVAgc3lzdGVtIGJhc2VkIG9uIHNldHRpbmdzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQ0KCQkJfQ0KCQkJDQoJCQkvLyBMZXQncyBqdXN0IGxvZyBpZiB0aGlzIGlzIGEgMzIgb3IgNjQgYml0IHN5c3RlbQ0KCQkJJHBocF9zaXplID0gKCBwbHVnaW5idWRkeV9zdGF0Ojppc19waHAoIHBsdWdpbmJ1ZGR5X3N0YXQ6OlRISVJUWV9UV09fQklUICkgKSA/ICIzMiIgOiAiNjQiIDsNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oICdSdW5uaW5nIHVuZGVyICUxJHMtYml0IFBIUCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkcGhwX3NpemUgKSApOw0KCQkJDQoJCQkvLyBNYWtlIHN1cmUgd2UgdGVsbCB3aGF0IHRoZSBzYXBpIGlzDQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCAnU2VydmVyIEFQSTogJTEkcycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkdGhpcy0+Z2V0X3NhcGlfbmFtZSgpICkgKTsJCQkNCgkJCQkJDQoJCQkkemlwX21ldGhvZHMgPSBhcnJheSgpOw0KCQkJJHNhbml0aXplZF9leGNsdWRlcyA9IGFycmF5KCk7DQoJCQkkbGlzdG1ha2VyID0gTlVMTDsNCgkJCQ0KCQkJLy8gU2V0IHNvbWUgYWRkaXRpb25hbCBzeXN0ZW0gZXhjbHVkZXMgaGVyZSBmb3Igbm93IC0gdGhlc2UgYXJlIGFsbCBmcm9tIHRoZSBzaXRlIGluc3RhbGwgcm9vdA0KCQkJJGFkZGl0aW9uYWxfZXhjbHVkZXMgPSBhcnJheSgpOw0KCQkJDQoJCQkvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhIHZhbGlkIHppcCBtZXRob2Qgc3RyYXRlZ3kgc2V0dGluZyB0byB1c2Ugb3RoZXJ3aXNlIGZhbGwgYmFjayB0byBlbWVyZ2VuY3kgY29tcGF0aWJpbGl0eQ0KCQkJaWYgKCBpc3NldCggcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWyAnemlwX21ldGhvZF9zdHJhdGVneScgXSApICYmIAkoICcwJyAhPT0gcGJfYmFja3VwYnVkZHk6OiRvcHRpb25zWyAnemlwX21ldGhvZF9zdHJhdGVneScgXSApICkgew0KCQkJDQoJCQkJJHppcF9tZXRob2Rfc3RyYXRlZ3kgPSBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbICd6aXBfbWV0aG9kX3N0cmF0ZWd5JyBdOw0KCQkJCXN3aXRjaCAoICR6aXBfbWV0aG9kX3N0cmF0ZWd5ICkgew0KCQkJCQljYXNlICIxIjoNCgkJCQkJCS8vIEJlc3QgQXZhaWxhYmxlDQoJCQkJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+Z2V0X2Jlc3RfemlwX21ldGhvZHMoIGFycmF5KCAnaXNfYXJjaGl2ZXInICkgKTsNCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1VzaW5nIEJlc3QgQXZhaWxhYmxlIHppcCBtZXRob2QgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOw0KCQkJCQkJYnJlYWs7DQoJCQkJCWNhc2UgIjIiOg0KCQkJCQkJLy8gQWxsIEF2YWlsYWJsZQ0KCQkJCQkJJHppcF9tZXRob2RzID0gJHRoaXMtPl96aXBfbWV0aG9kczsNCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1VzaW5nIEFsbCBBdmFpbGFibGUgemlwIG1ldGhvZHMgaW4gcHJlZmVycmVkIG9yZGVyIGJhc2VkIG9uIHNldHRpbmdzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQkJCWJyZWFrOw0KCQkJCQljYXNlICIzIjoNCgkJCQkJCS8vIEZvcmNlIENvbXBhdGliaWxpdHkNCgkJCQkJCSR6aXBfbWV0aG9kcyA9ICR0aGlzLT5nZXRfY29tcGF0aWJpbGl0eV96aXBfbWV0aG9kcygpOwkJCQkNCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdtZXNzYWdlJywgX18oJ1VzaW5nIEZvcmNlZCBDb21wYXRpYmlsaXR5IHppcCBtZXRob2QgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOw0KCQkJCQkJYnJlYWs7DQoJCQkJCWRlZmF1bHQ6DQoJCQkJCQkvLyBIbW0uLi51bnJlY29nbml6ZWQgdmFsdWUgLSBlbWVyZ2VuY3kgY29tcGF0aWJpbGl0eQ0KCQkJCQkJJHppcF9tZXRob2RzID0gJHRoaXMtPmdldF9jb21wYXRpYmlsaXR5X3ppcF9tZXRob2RzKCk7CQkJCQ0KCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBzcHJpbnRmKCBfXygnRm9yY2VkIENvbXBhdGliaWxpdHkgTW9kZSBhcyBaaXAgTWV0aG9kIFN0cmF0ZWd5IHNldHRpbmcgbm90IHJlY29nbml6ZWQ6ICUxJHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX21ldGhvZF9zdHJhdGVneSApICk7DQoJCQkJfQ0KCQkJCQ0KCQkJfSBlbHNlIHsNCgkJCQ0KCQkJCS8vIFdlIGdvdCBubyBvciBhbiBpbnZhbGlkIHppcCBtZXRob2Qgc3RyYXRlZ3kgd2hpY2ggaXMgYSBiYWQgc2l0dWF0aW9uIC0gZW1lcmdlbmN5IGNvbXBhdGliaWxpdHkgaXMgdGhlIG9yZGVyIG9mIHRoZSBkYXkNCgkJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+Z2V0X2NvbXBhdGliaWxpdHlfemlwX21ldGhvZHMoKTsJCQkJDQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBfXygnRm9yY2VkIENvbXBhdGliaWxpdHkgTW9kZSBhcyBaaXAgTWV0aG9kIFN0cmF0ZWd5IG5vdCBzZXQgb3Igc2V0dGluZyBub3QgcmVjb2duaXplZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7DQoJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gQmV0dGVyIG1ha2Ugc3VyZSB3ZSBoYXZlIHNvbWUgYXZhaWxhYmxlIG1ldGhvZHMNCgkJCWlmICggZW1wdHkoICR6aXBfbWV0aG9kcyApICkgew0KCQkJDQoJCQkJLy8gSG1tLCB3ZSBkb24ndCBzZWVtIHRvIGhhdmUgYW55IGF2YWlsYWJsZSBtZXRob2RzLCBvb3BzLCBiZXN0IGdvIG5vIGZ1cnRoZXINCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGYWlsZWQgdG8gY3JlYXRlIGEgWmlwIEFyY2hpdmUgZmlsZSAtIG5vIGF2YWlsYWJsZSBtZXRob2RzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQkNCgkJCQkvLyBXZSBzaG91bGQgaGF2ZSBhIHRlbXBvcmFyeSBkaXJlY3RvcnksIG11c3QgZ2V0IHJpZCBvZiBpdCwgY2FuIHNpbXBseSBybWRpciBpdCBhcyBpdCB3aWxsIChzaG91bGQpIGJlIGVtcHR5DQoJCQkJaWYgKCAhZW1wdHkoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSApICYmIGZpbGVfZXhpc3RzKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsNCgkJCQkJDQoJCQkJCWlmICggIXJtZGlyKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsNCgkJCQkJDQoJCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdUZW1wb3JhcnkgZGlyZWN0b3J5IGNvdWxkIG5vdCBiZSBkZWxldGVkOiAnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJHRlbXBvcmFyeV96aXBfZGlyZWN0b3J5ICk7DQoJCQkJCQ0KCQkJCQl9DQoJCQkJCQkNCgkJCQl9DQoNCgkJCQlyZXR1cm4gZmFsc2U7DQoJCQkJDQoJCQl9DQoJCQkNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0NyZWF0aW5nIFpJUCBmaWxlJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICcgYCcgLiAkemlwX2ZpbGUgLiAnYC4gJyAuIF9fKCdBZGRpbmcgZGlyZWN0b3J5JywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICcgYCcgLiAkYWRkX2RpcmVjdG9yeSAuICdgLiAnIC4gX18oJ0V4Y2x1ZGVzJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc6ICcgLiBpbXBsb2RlKCAnLCcsICRleGNsdWRlcyApICk7DQoJCQkNCgkJCS8vIFdlJ2xsIHRyeSBhbmQgYWxsb3cgZXhjbHVzaW9ucyBmb3IgcGNsemlwIGlmIHdlIGNhbg0KCQkJaW5jbHVkZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvbGliLycgLiAkdGhpcy0+X3doZXJlYW1pIC4gJy96YmRpci5waHAnICk7DQoJCQlpZiAoIGNsYXNzX2V4aXN0cyggJ3BsdWdpbmJ1ZGR5X3piZGlyJyApICkgew0KCQkJDQoJCQkJLy8gR2VuZXJhdGUgb3VyIHNhbml0aXplZCBsaXN0IG9mIGRpcmVjdG9yaWVzL2ZpbGVzIHRvIGV4Y2x1ZGUgYXMgYWJzb2x1dGUgcGF0aHMgKG5vcm1hbGl6ZWQpIGZvciB6YmRpcg0KCQkJCSRzYW5pdGl6ZWRfZXhjbHVkZXMgPSAkdGhpcy0+c2FuaXRpemVfZXhjbHVkZXMoICRleGNsdWRlcywgJGFkZGl0aW9uYWxfZXhjbHVkZXMsICRhZGRfZGlyZWN0b3J5ICk7DQoNCgkJCQkvLyBOb3cgbGV0J3MgY3JlYXRlIHRoZSBsaXN0IG9mIGl0ZW1zIHRvIGFkZCB0byB0aGUgemlwIC0gZmlyc3QgYnVpbGQgdGhlIHRyZWUNCgkJCQkkbGlzdG1ha2VyID0gbmV3IHBsdWdpbmJ1ZGR5X3piZGlyKCAkYWRkX2RpcmVjdG9yeSwgJHNhbml0aXplZF9leGNsdWRlcyApOw0KCQkJCQ0KCQkJCS8vIFJlLWdlbmVyYXRlIG91ciBzYW5pdGl6ZWQgbGlzdCBvZiBkaXJlY3Rvcmllcy9maWxlcyB0byBleGNsdWRlIGFzIHJlbGF0aXZlIHBhdGhzDQoJCQkJLy8gU2xpZ2h0IGtsdWRnZSB0byBkZWFsIHdpdGggYmVpbmcgYWJsZSB0byBlbmFibGUvZGlzYWJsZSB0aGUgaW5jbHVzaW9uIHByb2Nlc3NpbmcNCgkJCQkvLyAoY3VycmVudGx5IGNvbmZpZ3VyZWQgaW4gd3AtY29uZmlnLnBocCkgc28gYWx3YXlzIG5lZWQgdG8gcHJvdmlkZSB0aGUgZXhjbHVkZXMgYXMNCgkJCQkvLyByZWxhdGl2ZSBwYXRoIGZvciBub3cuIFRoaXMgbmVlZHMgdG8gYmUgdGlkaWVkIHVwIGluIGZ1dHVyZSBpZi93aGVuIHRoZSBjYXBhYmlsaXR5DQoJCQkJLy8gaXMgZXN0YWJsaXNoZWQgYXMgc3RhbmRhcmQNCgkJCQkkc2FuaXRpemVkX2V4Y2x1ZGVzID0gJHRoaXMtPnNhbml0aXplX2V4Y2x1ZGVzKCAkZXhjbHVkZXMsICRhZGRpdGlvbmFsX2V4Y2x1ZGVzICk7CQkJCQ0KDQoJCQl9IGVsc2Ugew0KCQkJDQoJCQkJLy8gR2VuZXJhdGUgb3VyIHNhbml0aXplZCBsaXN0IG9mIGRpcmVjdG9yaWVzL2ZpbGVzIHRvIGV4Y2x1ZGUgYXMgcmVsYXRpdmUgcGF0aHMNCgkJCQkkc2FuaXRpemVkX2V4Y2x1ZGVzID0gJHRoaXMtPnNhbml0aXplX2V4Y2x1ZGVzKCAkZXhjbHVkZXMsICRhZGRpdGlvbmFsX2V4Y2x1ZGVzICk7DQoJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gSXRlcmF0ZSBvdmVyIHRoZSBtZXRob2RzIC0gb25jZSB3ZSBzdWNjZWVkIGp1c3QgcmV0dXJuIGRpcmVjdGx5IG90aGVyd2lzZSBkcm9wIHRocm91Z2gNCgkJCWZvcmVhY2ggKCAkemlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7DQoJCQkNCgkJCQkvLyBGaXJzdCBtYWtlIHN1cmUgd2UgY2FuIGFyY2hpdmUgd2l0aCB0aGlzIG1ldGhvZA0KCQkJCWlmICggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdWyAnYXR0cicgXVsgJ2lzX2FyY2hpdmVyJyBdID09PSB0cnVlICkgew0KDQoJCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOw0KCQkNCgkJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsNCgkJCQkJDQoJCQkJCS8vIFNldCB0aGVzZSBvbiBzcGVjaWZpYyB6aXBwZXIgYmFzZWQgb24gdGhlIHZhbHVlcyB3ZSBkZXJpdmVkIGF0IGNvbnN0cnVuY3Rpb24gb3INCgkJCQkJLy8gb3ZlcnJpZGRlbiBieSBzdWJzZXF1ZW50IG1ldGhvZCBjYWxscw0KCQkJCQkkemlwcGVyLT5zZXRfY29tcHJlc3Npb24oICR0aGlzLT5nZXRfY29tcHJlc3Npb24oKSApOw0KCQkJCQkkemlwcGVyLT5zZXRfaWdub3JlX3N5bWxpbmtzKCAkdGhpcy0+Z2V0X2lnbm9yZV9zeW1saW5rcygpICk7DQoJCQkJCSR6aXBwZXItPnNldF9pZ25vcmVfd2FybmluZ3MoICR0aGlzLT5nZXRfaWdub3JlX3dhcm5pbmdzKCkgKTsNCgkJCQkJDQoJCQkJCS8vIFdlIG5lZWQgdG8gdGVsbCB0aGUgbWV0aG9kIHdoYXQgZGV0YWlscyBiZWxvbmcgdG8gaXQNCgkJCQkJJHppcHBlci0+c2V0X21ldGhvZF9kZXRhaWxzKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF0gKTsNCgkJCQkJDQoJCQkJCS8vIFRlbGwgdGhlIG1ldGhvZCB0aGUgc2VydmVyIGFwaSBpbiB1c2UNCgkJCQkJJHppcHBlci0+c2V0X3NhcGlfbmFtZSggJHRoaXMtPmdldF9zYXBpX25hbWUoKSApOw0KCQkJCQkNCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVHJ5aW5nICcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJG1ldGhvZF90YWcgLiBfXygnIG1ldGhvZCBmb3IgWklQLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQkJDQoJCQkJCS8vIEFzIHdlIGFyZSBsb29waW5nIG1ha2Ugc3VyZSB3ZSBoYXZlIG5vIHN0YWxlIGZpbGUgaW5mb3JtYXRpb24NCgkJCQkJY2xlYXJzdGF0Y2FjaGUoKTsNCgkJCQkJDQoJCQkJCS8vIFRoZSB0ZW1wb3JhcnkgemlwIGRpcmVjdG9yeSBfbXVzdF8gZXhpc3QNCgkJCQkJaWYgKCAhZW1wdHkoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSApICkgew0KCQkJCQkNCgkJCQkJCWlmICggIWZpbGVfZXhpc3RzKCAkdGVtcG9yYXJ5X3ppcF9kaXJlY3RvcnkgKSApIHsgLy8gQ3JlYXRlIHRlbXAgZGlyIGlmIGl0IGRvZXMgbm90IGV4aXN0Lg0KCQkJCQkJDQoJCQkJCQkJbWtkaXIoICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSApOw0KCQkJCQkJCQ0KCQkJCQkJfQ0KCQkJCQkJDQoJCQkJCX0NCgkJCQkJDQoJCQkJCS8vIE5vdyB3ZSBhcmUgcmVhZHkgdG8gdHJ5IGFuZCBwcm9kdWNlIHRoZSBiYWNrdXANCgkJCQkJaWYgKCAkemlwcGVyLT5jcmVhdGUoICR6aXBfZmlsZSwgJGFkZF9kaXJlY3RvcnksICRzYW5pdGl6ZWRfZXhjbHVkZXMsICR0ZW1wb3JhcnlfemlwX2RpcmVjdG9yeSwgJGxpc3RtYWtlciApID09PSB0cnVlICkgew0KCQkJCQkNCgkJCQkJCS8vIEdvdCBhIHZhbGlkIHppcCBmaWxlIHNvIHdlIGNhbiBqdXN0IHJldHVybiAtIG1ldGhvZCB3aWxsIGhhdmUgY2xlYW5lZCB1cCB0aGUgdGVtcG9yYXJ5IGRpcmVjdG9yeQ0KCQkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVGhlICcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJG1ldGhvZF90YWcgLiBfXygnIG1ldGhvZCBmb3IgWklQIHdhcyBzdWNjZXNzZnVsLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7DQoJCQkJCQkNCgkJCQkJCS8vIFdlIGhhdmUgdG8gcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3QgYnJlYWsgb3V0IG9mIGZvcmVhY2gNCgkJCQkJCXJldHVybiB0cnVlOw0KCQ0KCQkJCQl9IGVsc2Ugew0KCQkJCQkNCgkJCQkJCS8vIE1ldGhvZCB3aWxsIGhhdmUgY2xlYW5lZCB1cCB0aGUgdGVtcG9yYXJ5IGRpcmVjdG9yeQkJCQkNCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1RoZSAnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICRtZXRob2RfdGFnIC4gX18oJyBtZXRob2QgZm9yIFpJUCB3YXMgdW5zdWNjZXNzZnVsLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQkJCQkJCQkJCQkJCQkNCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7DQoJCQkJCQkNCgkJCQkJfQ0KCQkJCQ0KCQkJCX0gZWxzZSB7DQoJCQkJDQoJCQkJCS8vIFRoaXMgbWV0aG9kIGlzIG5vdCBjb25zaWRlcmVkIHN1aXRhYmxlIChyZWxpYWJsZSBlbm91Z2gpIGZvciBjcmVhdGluZyBhcmNoaXZlcyBvciBsYWNrZWQgemlwIGNhcGFiaWxpdHkNCgkJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnVGhlICcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAkbWV0aG9kX3RhZyAuIF9fKCcgbWV0aG9kIGlzIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGZvciBiYWNrdXAuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwkJCQkJDQoJCQkJDQoJCQkJfQ0KCQkJCQ0KCQkJfQ0KCQkJDQoJCQkvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIGhhdmUgZmFpbGVkIGluIGFsbCBhdHRlbXB0cw0KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRmFpbGVkIHRvIGNyZWF0ZSBhIFppcCBBcmNoaXZlIGZpbGUgd2l0aCBhbnkgbm9taW5hdGVkIG1ldGhvZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICk7DQoJCQkNCgkJCXJldHVybiBmYWxzZTsNCgkNCgkJfQ0KDQoJCS8qKg0KCQkgKgl1bnppcCgpDQoJCSAqDQoJCSAqCUV4dHJhY3RzIHRoZSBjb250ZW50cyBvZiBhIHppcCBmaWxlIHRvIHRoZSBzcGVjaWZpZWQgZGlyZWN0b3J5IHVzaW5nIHRoZSBiZXN0IHVuemlwIG1ldGhvZHMgcG9zc2libGUuDQoJCSAqDQoJCSAqCUBwYXJhbQlzdHJpbmcJCSR6aXBfZmlsZQkJCQkJRnVsbCBwYXRoICYgZmlsZW5hbWUgb2YgWklQIGZpbGUgdG8gZXh0cmFjdCBmcm9tLg0KCQkgKglAcGFyYW0Jc3RyaW5nCQkkZGVzdGluYXRpb25fZGlyZWN0b3J5CQlGdWxsIGRpcmVjdG9yeSBwYXRoIHRvIGV4dHJhY3QgaW50by4NCgkJICoJQHBhcmFtCWJvb2x8c3RyaW5nICRmb3JjZV9jb21wYXRpYmlsaXR5X21vZGUJRmFsc2U6IHVzZSBhbGwgYXZhaWxhYmxlLCBTdHJpbmc6IHVzZSB0aGF0IG1ldGhvZA0KCQkgKg0KCQkgKglAcmV0dXJuCWJvb2wJCQkJCQkJCQl0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG90aGVyd2lzZQ0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIHVuemlwKCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnksICRmb3JjZV9jb21wYXRpYmlsaXR5X21vZGUgPSBmYWxzZSApIHsNCg0KCQkJJHppcF9tZXRob2RzID0gYXJyYXkoKTsNCgkJCQ0KCQkJLy8gVGhlIGZvbGxvd2luZyBpcyBqdXN0IHRvIG1hdGNoIGN1cnJlbnQgZnVuY3Rpb25hbGl0eSBmb3IgaW1wb3J0YnVkZHkgLSBpZGVhbGx5IHdvdWxkIHJhdGhlcg0KCQkJLy8gZG8gaXQgYnkgc2VsZWN0aW5nIGF2YWlsYWJsZSBjb21wYXRpYmlsaXR5IG1ldGhvZHMgYmFzZWQgb24gbWV0aG9kIGF0dHJpYnV0ZXMgLSBtYXkgZG8gdGhhdCBsYXRlcg0KCQkJLy8gKHdvdWxkIGFsc28gbmVlZCBnZXRfY29tcGF0aWJpbGl0eV96aXBfbWV0aG9kcygpIHRvIGJlIHVwZGF0ZWQgdG8gdGFrZSBwYXJhbWV0ZXIgdG8gY2hlY2sNCgkJCS8vIHdoZXRoZXIgY29tcGF0aWJpbGl0eSBtZXRob2QgZm9yIHRoYXQgcGFydGljdWxhciBmdW5jdGlvbi4NCgkJCQkJCQ0KCQkJLy8gRGVjaWRlIHdoaWNoIG1ldGhvZHMgd2UgYXJlIGdvaW5nIHRvIHRyeQ0KCQkJaWYgKCAkZm9yY2VfY29tcGF0aWJpbGl0eV9tb2RlID09ICd6aXBhcmNoaXZlJyApIHsNCg0KCQkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCAnemlwYXJjaGl2ZScgKTsJCQkJDQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ21lc3NhZ2UnLCBfXygnRm9yY2VkIGNvbXBhdGliaWxpdHkgdW56aXAgbWV0aG9kIChaaXBBcmNoaXZlOyBtZWRpdW0gc3BlZWQpIGJhc2VkIG9uIHNldHRpbmdzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQkNCgkJCX0gZWxzZWlmICggJGZvcmNlX2NvbXBhdGliaWxpdHlfbW9kZSA9PSAncGNsemlwJyApIHsNCgkJCQ0KCQkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCAncGNsemlwJyApOwkJCQkNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnbWVzc2FnZScsIF9fKCdGb3JjZWQgY29tcGF0aWJpbGl0eSB1bnppcCBtZXRob2QgKFBDTFppcDsgc2xvdyBzcGVlZCkgYmFzZWQgb24gc2V0dGluZ3MuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOwkJCQ0KCQkJDQoJCQl9IGVsc2Ugew0KCQkJDQoJCQkJJHppcF9tZXRob2RzID0gJHRoaXMtPl96aXBfbWV0aG9kczsNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdVc2luZyBhbGwgYXZhaWxhYmxlIHVuemlwIG1ldGhvZHMgaW4gcHJlZmVycmVkIG9yZGVyLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCX0NCgkJCQkJCQ0KCQkJLy8gQmV0dGVyIG1ha2Ugc3VyZSB3ZSBoYXZlIHNvbWUgYXZhaWxhYmxlIG1ldGhvZHMNCgkJCWlmICggZW1wdHkoICR6aXBfbWV0aG9kcyApICkgew0KCQkJDQoJCQkJLy8gSG1tLCB3ZSBkb24ndCBzZWVtIHRvIGhhdmUgYW55IGF2YWlsYWJsZSBtZXRob2RzLCBvb3BzLCBiZXN0IGdvIG5vIGZ1cnRoZXINCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdVbmFibGUgdG8gZXh0cmFjdCBiYWNrdXAgZmlsZSBjb250ZW50cyAoJTEkcyB0byAlMiRzKTogTm8gYXZhaWxhYmxlIHVuemlwIG1ldGhvZHMgZm91bmQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlLCAkZGVzdGluYXRpb25fZGlyZWN0b3J5ICkgKTsNCgkJCQkNCgkJCQlyZXR1cm4gZmFsc2U7DQoJCQkJDQoJCQl9DQoNCgkJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgbm9ybWFsaXplZCBkaXJlY3Rvcnkgc2VwYXJhdG9yIHN1ZmZpeAkNCgkJCSRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgPSBydHJpbSggJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsJCQ0KDQoJCQkvLyBJdGVyYXRlIG92ZXIgdGhlIG1ldGhvZHMgLSBvbmNlIHdlIHN1Y2NlZWQganVzdCByZXR1cm4gZGlyZWN0bHkgb3RoZXJ3aXNlIGRyb3AgdGhyb3VnaA0KCQkJZm9yZWFjaCAoICR6aXBfbWV0aG9kcyBhcyAkbWV0aG9kX3RhZyApIHsNCgkJCQ0KCQkJCS8vIEZpcnN0IG1ha2Ugc3VyZSB3ZSBjYW4gY2hlY2sgZmlsZSBleGlzdGVuY2Ugd2l0aCB0aGlzIG1ldGhvZCAoaWdub3JlIHNpbGVudGx5IGlmIG5vdCkNCgkJCQkvLyBOb3RlOiBoYXMgdG8gYmUgYWJsZSB0byB1bnppcCBhcyB3ZWxsIGJ1dCBpZiB0aGF0IGZ1bmN0aW9uYWxpdHkgd2Fzbid0IGF2YWlsYWJsZSBpbg0KCQkJCS8vIHRoZSBtZXRob2QgdGhlIGlzX2NoZWNrZXIgYXR0cmlidXRlIHdpbGwgaGF2ZSBiZWVuIHNldCBmYWxzZQ0KCQkJCWlmICggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdWyAnYXR0cicgXVsgJ2lzX3VuYXJjaGl2ZXInIF0gPT09IHRydWUgKSB7DQoNCgkJCQkJJGNsYXNzX25hbWUgPSAncGx1Z2luYnVkZHlfemJ6aXAnIC4gJG1ldGhvZF90YWc7DQoJCQ0KCQkJCQkkemlwcGVyID0gbmV3ICRjbGFzc19uYW1lKCAkdGhpcyApOw0KCQkJCQkNCgkJCQkJLy8gV2UgbmVlZCB0byB0ZWxsIHRoZSBtZXRob2Qgd2hhdCBkZXRhaWxzIGJlbG9uZyB0byBpdA0KCQkJCQkkemlwcGVyLT5zZXRfbWV0aG9kX2RldGFpbHMoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXSApOw0KCQkJCQkJCQkJCQ0KCQkJCQkvLyBOb3cgd2UgYXJlIHJlYWR5IHRvIHRyeSBhbmQgZXh0cmFjdCB0aGUgYmFja3VwDQoJCQkJCSRyZXN1bHQgPSAkemlwcGVyLT5leHRyYWN0KCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKTsNCgkJCQkJDQoJCQkJCS8vIFdpbGwgYmUgZmFsc2UgaWYgd2UgY291bGRuJ3QgZXh0cmFjdCB0aGUgYmFja3VwDQoJCQkJCWlmICggJHJlc3VsdCA9PT0gdHJ1ZSApIHsNCgkJCQkJDQoJCQkJCQkvLyBNdXN0IGFzc3VtZSB0aGF0IHdlIGV4dHJhY3RlZCBvaw0KCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsNCgkJCQkJCQ0KCQkJCQkJLy8gV2UgaGF2ZSB0byByZXR1cm4gaGVyZSBiZWNhdXNlIHdlIGNhbm5vdCBicmVhayBvdXQgb2YgZm9yZWFjaA0KCQkJCQkJcmV0dXJuIHRydWU7DQoJDQoJCQkJCX0gZWxzZSB7DQoJCQkJCQ0KCQkJCQkJLy8gVGhlIHppcHBlciBlbmNvdW50ZXJlZCBhbiBlcnJvciBzbyB3ZSBuZWVkIHRvIGRyb3AgdGhyb3VnaCBhbmQgbG9vcCByb3VuZCB0byB0cnkgYW5vdGhlcg0KCQkJCQkJLy8gV2UnbGwgbm90IHByb2Nlc3MgdGhlIHJlc3VsdCBoZXJlLCBqdXN0IGRyb3AgdGhyb3VnaCBzaWxlbnRseSAodGhlIG1ldGhvZCB3aWxsIGhhdmUgbG9nZ2VkIGl0KQkJCQ0KCQkJCQkJdW5zZXQoICR6aXBwZXIgKTsNCgkJCQkJCQ0KCQkJCQl9DQoJCQkJDQoJCQkJfQ0KCQkJCQ0KCQkJfQ0KCQkJDQoJCQkvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiBubyBtZXRob2QgdG8gZXh0cmFjdCBiYWNrdXAgY29udGVudCB3YXMgYXZhaWxhYmxlIG9yIHdvcmtlZA0KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnVW5hYmxlIHRvIGV4dHJhY3QgYmFja3VwIGZpbGUgY29udGVudHMgKCUxJHMgdG8gJTIkcyk6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSApOw0KCQkJcmV0dXJuIGZhbHNlOw0KCQkJDQoJCX0NCgkJDQoJCS8qKg0KCQkgKglleHRyYWN0KCkNCgkJICoNCgkJICoJRXh0cmFjdHMgdGhlIHNwZWNpZmllZCBjb250ZW50cyBvZiBhIHppcCBmaWxlIHRvIHRoZSBzcGVjaWZpZWQgZGVzdGluYXRpb24gdXNpbmcgdGhlIGJlc3QgdW56aXAgbWV0aG9kcyBwb3NzaWJsZS4NCgkJICoJVGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeSBfbXVzdF8gYWxyZWFkeSBleGlzdCBhbmQgYmUgd3JpdGFibGUgLSB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNyZWF0ZSBpdA0KCQkgKglUaGUgaXRlbXMgYXJlIGFuIGFycmF5IG9mIG1hcHBpbmcgb2Ygd2hhdCA9PiB3aGVyZSwgZS5nLg0KCQkgKglhcnJheSggImRpci9teWZpbGUudHh0IiA9PiAiIiwgImRpci9teWZpbGUudHh0IiA9PiAidG1wZmlsZW5hbWUiLCAiZGlyL215ZmlsZS50eHQiID0+ICJkaXIvbXlmaWxlLnR4dCIgKQ0KCQkgKglJbiB0aGUgZmlyc3QgY2FzZSB0aGUgZmlsZSBpcyBleHRyYWN0ZWQgdG8gJGRlc3RpbmF0aW9uX2RpcmVjdG9yeS9teWZpbGUudHh0DQoJCSAqCUluIHRoZSBzZWNvbmQgY2FzZSB0aGUgZmlsZSBpcyBleHRyYWN0ZWQgdG8gJGRlc3RpbmF0aW9uX2RpcmVjdG9yeS90bXBmaWxlbmFtZQ0KCQkgKglJbiB0aGUgdGhpcmQgY2FzZSB0aGUgZmlsZSBpcyBleHRyYWN0ZWQgdG8gJGRlc3RpbmF0aW9uX2RpcmVjdG9yeS9kaXIvbXlmaWxlLnR4dA0KCQkgKglOb3RlOiBpbiB0aGUgc2Vjb25kIGNhc2UgdGhlIGZpbGUgaXMgaW5pdGlhbGx5IGV4dHJjYXRlZCBhcyBteWZpbGUudHh0IGFuZCB0aGVuIHJlbmFtZSB0byB0bXBmaWxlbmFtZQ0KCQkgKglBbm90aGVyIGV4YW1wbGUgaXMgZm9yIGRpcmVjdG9yeSBleHRyYWN0aW9uOg0KCQkgKglhcnJheSggImRpci8qIiA9PiAiZGlyLyoiICkNCgkJICoJV2hlcmVieSB0aGUgZGlyZWN0b3J5IGRpciBhbmQgYWxsIGl0J3MgY29udGVudCAocmVjdXJzaXZlbHkpIGlzIGV4dHJhY3RlZCB0byAkZGVzdGluYXRpb24vZGlyDQoJCSAqCU5vdGU6IHRoZSAqIGlzIHJlcXVpcmVkIG90aGVyd2lzZSB5b3UganVzdCBnZXQgYW4gZW1wdHkgZGlyZWN0b3J5DQoJCSAqDQoJCSAqCUBwYXJhbQlzdHJpbmcJJHppcF9maWxlCQkJCUZ1bGwgcGF0aCAmIGZpbGVuYW1lIG9mIFpJUCBmaWxlIHRvIGV4dHJhY3QgZnJvbS4NCgkJICoJQHBhcmFtCXN0cmluZwkkZGVzdGluYXRpb25fZGlyZWN0b3J5CUZ1bGwgZGlyZWN0b3J5IHBhdGggdG8gZXh0cmFjdCB0bw0KCQkgKglAcGFyYW0JYXJyYXkJJGl0ZW1zCQkJCQlNYXBwaW5nIG9mIHdoYXQgdG8gZXh0cmFjdCBhbmQgdG8gd2hhdA0KCQkgKg0KCQkgKglAcmV0dXJuCWJvb2wJCQkJCQkJdHJ1ZSBvbiBzdWNjZXNzIChhbGwgZXh0cmFjdGlvbnMgc3VjY2Vzc2Z1bCksIGZhbHNlIG90aGVyd2lzZQ0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIGV4dHJhY3QoICR6aXBfZmlsZSwgJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSwgJGl0ZW1zICkgew0KDQoJCQkkemlwX21ldGhvZHMgPSBhcnJheSgpOw0KCQkJDQoJCQkvLyBUaGUgZm9sbG93aW5nIGlzIGp1c3QgdG8gbWF0Y2ggY3VycmVudCBmdW5jdGlvbmFsaXR5IGZvciBpbXBvcnRidWRkeSAtIGlkZWFsbHkgd291bGQgcmF0aGVyDQoJCQkvLyBkbyBpdCBieSBzZWxlY3RpbmcgYXZhaWxhYmxlIGNvbXBhdGliaWxpdHkgbWV0aG9kcyBiYXNlZCBvbiBtZXRob2QgYXR0cmlidXRlcyAtIG1heSBkbyB0aGF0IGxhdGVyDQoJCQkvLyAod291bGQgYWxzbyBuZWVkIGdldF9jb21wYXRpYmlsaXR5X3ppcF9tZXRob2RzKCkgdG8gYmUgdXBkYXRlZCB0byB0YWtlIHBhcmFtZXRlciB0byBjaGVjaw0KCQkJLy8gd2hldGhlciBjb21wYXRpYmlsaXR5IG1ldGhvZCBmb3IgdGhhdCBwYXJ0aWN1bGFyIGZ1bmN0aW9uLg0KCQkJCQkJDQoJCQkkemlwX21ldGhvZHMgPSAkdGhpcy0+X3ppcF9tZXRob2RzOw0KCQkJCQkJDQoJCQkvLyBCZXR0ZXIgbWFrZSBzdXJlIHdlIGhhdmUgc29tZSBhdmFpbGFibGUgbWV0aG9kcw0KCQkJaWYgKCBlbXB0eSggJHppcF9tZXRob2RzICkgKSB7DQoJCQkNCgkJCQkvLyBIbW0sIHdlIGRvbid0IHNlZW0gdG8gaGF2ZSBhbnkgYXZhaWxhYmxlIG1ldGhvZHMsIG9vcHMsIGJlc3QgZ28gbm8gZnVydGhlcg0KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1VuYWJsZSB0byBleHRyYWN0IGZyb20gYmFja3VwIGZpbGUgKCUxJHMgdG8gJTIkcyk6IE5vIGF2YWlsYWJsZSB1bnppcCBtZXRob2RzIGZvdW5kLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSwgJGRlc3RpbmF0aW9uICkgKTsNCgkJCQkNCgkJCQlyZXR1cm4gZmFsc2U7DQoJCQkJDQoJCQl9DQoJCQkNCgkJCWlmICggISggZmlsZV9leGlzdHMoICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSAmJiBpc19kaXIoICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSAmJiBpc193cml0YWJsZSggJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSApICkgKSB7DQoJCQkNCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdVbmFibGUgdG8gZXh0cmFjdCBmcm9tIGJhY2t1cCBmaWxlICglMSRzIHRvICUyJHMpOiAlMiRzIGRvZXMgbm90IGV4aXN0LCBpcyBub3QgYSBkaXJlY3Rvcnkgb3IgaXMgbm90IHdyaXRlYWJsZScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSwgJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSApICk7DQoJCQkNCgkJCQlyZXR1cm4gZmFsc2U7DQoJCQkJDQoJCQl9DQoJCQkNCgkJCS8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgbm9ybWFsaXplZCBkaXJlY3Rvcnkgc2VwYXJhdG9yIHN1ZmZpeAkNCgkJCSRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgPSBydHJpbSggJGRlc3RpbmF0aW9uX2RpcmVjdG9yeSwgc2VsZjo6RElSRUNUT1JZX1NFUEFSQVRPUlMgKSAuIHNlbGY6Ok5PUk1fRElSRUNUT1JZX1NFUEFSQVRPUjsJCQ0KDQoJCQkvLyBJdGVyYXRlIG92ZXIgdGhlIG1ldGhvZHMgLSBvbmNlIHdlIHN1Y2NlZWQganVzdCByZXR1cm4gZGlyZWN0bHkgb3RoZXJ3aXNlIGRyb3AgdGhyb3VnaA0KCQkJZm9yZWFjaCAoICR6aXBfbWV0aG9kcyBhcyAkbWV0aG9kX3RhZyApIHsNCgkJCQ0KCQkJCS8vIEZpcnN0IG1ha2Ugc3VyZSB3ZSBjYW4gY2hlY2sgZmlsZSBleGlzdGVuY2Ugd2l0aCB0aGlzIG1ldGhvZCAoaWdub3JlIHNpbGVudGx5IGlmIG5vdCkNCgkJCQkvLyBOb3RlOiBoYXMgdG8gYmUgYWJsZSB0byB1bnppcCBhcyB3ZWxsIGJ1dCBpZiB0aGF0IGZ1bmN0aW9uYWxpdHkgd2Fzbid0IGF2YWlsYWJsZSBpbg0KCQkJCS8vIHRoZSBtZXRob2QgdGhlIGlzX2NoZWNrZXIgYXR0cmlidXRlIHdpbGwgaGF2ZSBiZWVuIHNldCBmYWxzZQ0KCQkJCWlmICggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdWyAnYXR0cicgXVsgJ2lzX2V4dHJhY3RvcicgXSA9PT0gdHJ1ZSApIHsNCg0KCQkJCQkkY2xhc3NfbmFtZSA9ICdwbHVnaW5idWRkeV96YnppcCcgLiAkbWV0aG9kX3RhZzsNCgkJDQoJCQkJCSR6aXBwZXIgPSBuZXcgJGNsYXNzX25hbWUoICR0aGlzICk7DQoJCQkJCQ0KCQkJCQkvLyBXZSBuZWVkIHRvIHRlbGwgdGhlIG1ldGhvZCB3aGF0IGRldGFpbHMgYmVsb25nIHRvIGl0DQoJCQkJCSR6aXBwZXItPnNldF9tZXRob2RfZGV0YWlscyggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdICk7DQoJCQkJCQkJCQkJDQoJCQkJCS8vIE5vdyB3ZSBhcmUgcmVhZHkgdG8gdHJ5IGFuZCBleHRyYWN0IGZyb20gdGhlIGJhY2t1cA0KCQkJCQkkcmVzdWx0ID0gJHppcHBlci0+ZXh0cmFjdCggJHppcF9maWxlLCAkZGVzdGluYXRpb25fZGlyZWN0b3J5LCAkaXRlbXMgKTsNCgkJCQkJDQoJCQkJCS8vIFdpbGwgYmUgZmFsc2UgaWYgd2UgY291bGRuJ3QgZXh0cmFjdCBmcm9tIHRoZSBiYWNrdXANCgkJCQkJaWYgKCAkcmVzdWx0ID09PSB0cnVlICkgew0KCQkJCQkNCgkJCQkJCS8vIE11c3QgYXNzdW1lIHRoYXQgd2UgZXh0cmFjdGVkIG9rDQoJCQkJCQl1bnNldCggJHppcHBlciApOw0KCQkJCQkJDQoJCQkJCQkvLyBXZSBoYXZlIHRvIHJldHVybiBoZXJlIGJlY2F1c2Ugd2UgY2Fubm90IGJyZWFrIG91dCBvZiBmb3JlYWNoDQoJCQkJCQlyZXR1cm4gdHJ1ZTsNCgkNCgkJCQkJfSBlbHNlIHsNCgkJCQkJDQoJCQkJCQkvLyBUaGUgemlwcGVyIGVuY291bnRlcmVkIGFuIGVycm9yIHNvIHdlIG5lZWQgdG8gZHJvcCB0aHJvdWdoIGFuZCBsb29wIHJvdW5kIHRvIHRyeSBhbm90aGVyDQoJCQkJCQkvLyBXZSdsbCBub3QgcHJvY2VzcyB0aGUgcmVzdWx0IGhlcmUsIGp1c3QgZHJvcCB0aHJvdWdoIHNpbGVudGx5ICh0aGUgbWV0aG9kIHdpbGwgaGF2ZSBsb2dnZWQgaXQpCQkJDQoJCQkJCQl1bnNldCggJHppcHBlciApOw0KCQkJCQkJDQoJCQkJCX0NCgkJCQkNCgkJCQl9DQoJCQkJDQoJCQl9DQoJCQkNCgkJCS8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIG5vIG1ldGhvZCB0byBleHRyYWN0IGZyb20gYmFja3VwIGNvbnRlbnQgd2FzIGF2YWlsYWJsZSBvciB3b3JrZWQNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1VuYWJsZSB0byBleHRyYWN0IGZyb20gYmFja3VwIGZpbGUgKCUxJHMgdG8gJTIkcyk6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUsICRkZXN0aW5hdGlvbl9kaXJlY3RvcnkgKSApOw0KCQkJcmV0dXJuIGZhbHNlOw0KCQkJDQoJCX0NCgkJDQoJCS8qKg0KCQkgKglmaWxlX2V4aXN0cygpDQoJCSAqCQ0KCQkgKglUZXN0cyB3aGV0aGVyIGEgZmlsZSAod2l0aCBwYXRoKSBleGlzdHMgaW4gdGhlIGdpdmVuIHppcCBmaWxlDQoJCSAqCUlmIGxlYXZlX29wZW4gaXMgdHJ1ZSB0aGVuIHRoZSB6aXAgb2JqZWN0IHdpbGwgYmUgbGVmdCBvcGVuIGZvciBmYXN0ZXIgY2hlY2tpbmcgZm9yIHN1YnNlcXVlbnQgZmlsZXMgd2l0aGluIHRoaXMgemlwDQoJCSAqCQ0KCQkgKglAcGFyYW0JCXN0cmluZwkkemlwX2ZpbGUJCVRoZSB6aXAgZmlsZSB0byBjaGVjaw0KCQkgKglAcGFyYW0JCXN0cmluZwkkbG9jYXRlX2ZpbGUJVGhlIGZpbGUgdG8gdGVzdCBmb3INCgkJICoJQHBhcmFtCQlib29sCSRsZWF2ZV9vcGVuCQlPcHRpb25hbDogVHJ1ZSBpZiB0aGUgemlwIGZpbGUgc2hvdWxkIGJlIGxlZnQgb3Blbg0KCQkgKglAcmV0dXJuCQlib29sCQkJCQlUcnVlIGlmIHRoZSBmaWxlIGlzIGZvdW5kIGluIHRoZSB6aXAgb3RoZXJ3aXNlIGZhbHNlDQoJCSAqDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZmlsZV9leGlzdHMoICR6aXBfZmlsZSwgJGxvY2F0ZV9maWxlLCAkbGVhdmVfb3BlbiA9IGZhbHNlICkgew0KCQkJCQkNCgkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCk7DQoJCQkJCQkNCgkJCSR6aXBfbWV0aG9kcyA9ICR0aGlzLT5femlwX21ldGhvZHM7DQoJCQkNCgkJCS8vIEJldHRlciBtYWtlIHN1cmUgd2UgaGF2ZSBzb21lIGF2YWlsYWJsZSBtZXRob2RzDQoJCQlpZiAoIGVtcHR5KCAkemlwX21ldGhvZHMgKSApIHsNCgkJCQ0KCQkJCS8vIEhtbSwgd2UgZG9uJ3Qgc2VlbSB0byBoYXZlIGFueSBhdmFpbGFibGUgbWV0aG9kcywgb29wcywgYmVzdCBnbyBubyBmdXJ0aGVyDQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRmFpbGVkIHRvIGNoZWNrIGZpbGUgZXhpc3RzIC0gbm8gYXZhaWxhYmxlIG1ldGhvZHMuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOw0KCQkJCQ0KCQkJCXJldHVybiBmYWxzZTsNCgkJCQkNCgkJCX0NCgkJCQkJCQ0KCQkJLy8gSXRlcmF0ZSBvdmVyIHRoZSBtZXRob2RzIC0gb25jZSB3ZSBzdWNjZWVkIGp1c3QgcmV0dXJuIGRpcmVjdGx5IG90aGVyd2lzZSBkcm9wIHRocm91Z2gNCgkJCWZvcmVhY2ggKCAkemlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7DQoJCQkNCgkJCQkvLyBGaXJzdCBtYWtlIHN1cmUgd2UgY2FuIGNoZWNrIGZpbGUgZXhpc3RlbmNlIHdpdGggdGhpcyBtZXRob2QgKGlnbm9yZSBzaWxlbnRseSBpZiBub3QpDQoJCQkJLy8gTm90ZTogaGFzIHRvIGJlIGFibGUgdG8gdW56aXAgYXMgd2VsbCBidXQgaWYgdGhhdCBmdW5jdGlvbmFsaXR5IHdhc24ndCBhdmFpbGFibGUgaW4NCgkJCQkvLyB0aGUgbWV0aG9kIHRoZSBpc19jaGVja2VyIGF0dHJpYnV0ZSB3aWxsIGhhdmUgYmVlbiBzZXQgZmFsc2UNCgkJCQlpZiAoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXVsgJ2F0dHInIF1bICdpc19jaGVja2VyJyBdID09PSB0cnVlICkgew0KDQoJCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOw0KCQkNCgkJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsNCgkJCQkJDQoJCQkJCS8vIFdlIG5lZWQgdG8gdGVsbCB0aGUgbWV0aG9kIHdoYXQgZGV0YWlscyBiZWxvbmcgdG8gaXQNCgkJCQkJJHppcHBlci0+c2V0X21ldGhvZF9kZXRhaWxzKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF0gKTsNCgkJCQkJCQkJCQkNCgkJCQkJLy8gTm93IHdlIGFyZSByZWFkeSB0byB0cnkgYW5kIHRlc3QgZm9yIHRoZSBmaWxlIGV4aXN0ZW5jZQ0KCQkJCQkkcmVzdWx0ID0gJHppcHBlci0+ZmlsZV9leGlzdHMoICR6aXBfZmlsZSwgJGxvY2F0ZV9maWxlLCAkbGVhdmVfb3BlbiApOw0KCQkJCQkNCgkJCQkJLy8gV2lsbCBiZSB0cnVlL2ZhbHNlIGlmIGZpbGUgZm91bmQvbm90LWZvdW5kIG90aGVyd2lzZSBlcnJvciBpbmZvcm1hdGlvbiBhcnJheQ0KCQkJCQlpZiAoICFpc19hcnJheSggJHJlc3VsdCApICkgew0KCQkJCQkNCgkJCQkJCS8vIEVpdGhlciB3ZSBmb3VuZCB0aGUgZmlsZSBvciB3ZSBkaWRuJ3QgYnV0IHdlIGhhdmUgYSB2YWxpZCByZXN1bHQNCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7DQoJCQkJCQkNCgkJCQkJCS8vIFdlIGhhdmUgdG8gcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3QgYnJlYWsgb3V0IG9mIGZvcmVhY2gNCgkJCQkJCXJldHVybiAkcmVzdWx0Ow0KCQ0KCQkJCQl9IGVsc2Ugew0KCQkJCQkNCgkJCQkJCS8vIFRoZSB6aXBwZXIgZW5jb3VudGVyZWQgYW4gZXJyb3Igc28gd2UgbmVlZCB0byBkcm9wIHRocm91Z2ggYW5kIGxvb3Agcm91bmQgdG8gdHJ5IGFub3RoZXINCgkJCQkJCS8vIFdlJ2xsIG5vdCBwcm9jZXNzIHRoZSByZXN1bHQgaGVyZSwganVzdCBkcm9wIHRocm91Z2ggc2lsZW50bHkgKHRoZSBtZXRob2Qgd2lsbCBoYXZlIGxvZ2dlZCBpdCkJCQkNCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7DQoJCQkJCQkNCgkJCQkJfQ0KCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gSWYgd2UgZ290IHRoaXMgZmFyIHRoZW4gbm8gbWV0aG9kIHRvIGNoZWNrIGJhY2t1cCBjb250ZW50IHdhcyBhdmFpbGFibGUgb3Igd29ya2VkDQoJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIHNwcmludGYoIF9fKCdVbmFibGUgdG8gY2hlY2sgaWYgZmlsZSBleGlzdHMgKGxvb2tpbmcgZm9yICUxJHMgaW4gJTIkcyk6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZC4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkbG9jYXRlX2ZpbGUsICR6aXBfZmlsZSApICk7DQoJCQlyZXR1cm4gZmFsc2U7DQoJCQkNCgkJfQ0KCQkJCQ0KCQkvKglnZXRfZmlsZV9saXN0KCkNCgkJICoJDQoJCSAqCUdldCBhbiBhcnJheSBvZiBhbGwgZmlsZXMgaW4gYSB6aXAgZmlsZSB3aXRoIHNvbWUgZmlsZSBwcm9wZXJ0aWVzLg0KCQkgKgkNCgkJICoJQHBhcmFtCQlzdHJpbmcJCSR6aXBfZmlsZQlUaGUgZmlsZSB0byBsaXN0IHRoZSBjb250ZW50IG9mDQoJCSAqCUByZXR1cm4JCWJvb2x8YXJyYXkJCQkJZmFsc2Ugb24gZmFpbHVyZSwgb3RoZXJ3aXNlIGFycmF5IG9mIGZpbGUgcHJvcGVydGllcyAobWF5IGJlIGVtcHR5KQ0KCQkgKi8NCgkJcHVibGljIGZ1bmN0aW9uIGdldF9maWxlX2xpc3QoICR6aXBfZmlsZSApIHsNCg0KCQkJJHppcF9tZXRob2RzID0gYXJyYXkoKTsNCgkJCQkJCQ0KCQkJJHppcF9tZXRob2RzID0gJHRoaXMtPl96aXBfbWV0aG9kczsNCgkJCQ0KCQkJLy8gQmV0dGVyIG1ha2Ugc3VyZSB3ZSBoYXZlIHNvbWUgYXZhaWxhYmxlIG1ldGhvZHMNCgkJCWlmICggZW1wdHkoICR6aXBfbWV0aG9kcyApICkgew0KCQkJDQoJCQkJLy8gSG1tLCB3ZSBkb24ndCBzZWVtIHRvIGhhdmUgYW55IGF2YWlsYWJsZSBtZXRob2RzLCBvb3BzLCBiZXN0IGdvIG5vIGZ1cnRoZXINCgkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGYWlsZWQgdG8gbGlzdCBiYWNrdXAgZmlsZSBjb250ZW50cyAtIG5vIGF2YWlsYWJsZSBtZXRob2RzLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQkNCgkJCQlyZXR1cm4gZmFsc2U7DQoJCQkJDQoJCQl9DQoJCQkJCQkNCgkJCS8vIEl0ZXJhdGUgb3ZlciB0aGUgbWV0aG9kcyAtIG9uY2Ugd2Ugc3VjY2VlZCBqdXN0IHJldHVybiBkaXJlY3RseSBvdGhlcndpc2UgZHJvcCB0aHJvdWdoDQoJCQlmb3JlYWNoICggJHppcF9tZXRob2RzIGFzICRtZXRob2RfdGFnICkgew0KCQkJDQoJCQkJLy8gRmlyc3QgbWFrZSBzdXJlIHdlIGNhbiBsaXN0IGJhY2t1cCBmaWxlIGNvbnRlbnQgd2l0aCB0aGlzIG1ldGhvZCAoaWdub3JlIHNpbGVudGx5IGlmIG5vdCkNCgkJCQkvLyBOb3RlOiBoYXMgdG8gYmUgYWJsZSB0byB1bnppcCBhcyB3ZWxsIGJ1dCBpZiB0aGF0IGZ1bmN0aW9uYWxpdHkgd2Fzbid0IGF2YWlsYWJsZSBpbg0KCQkJCS8vIHRoZSBtZXRob2QgdGhlIGlzX2xpc3RlciBhdHRyaWJ1dGUgd2lsbCBoYXZlIGJlZW4gc2V0IGZhbHNlDQoJCQkJaWYgKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF1bICdhdHRyJyBdWyAnaXNfbGlzdGVyJyBdID09PSB0cnVlICkgew0KDQoJCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOw0KCQkNCgkJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsNCgkJCQkJDQoJCQkJCS8vIFdlIG5lZWQgdG8gdGVsbCB0aGUgbWV0aG9kIHdoYXQgZGV0YWlscyBiZWxvbmcgdG8gaXQNCgkJCQkJJHppcHBlci0+c2V0X21ldGhvZF9kZXRhaWxzKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF0gKTsNCgkJCQkJCQkJCQkNCgkJCQkJLy8gTm93IHdlIGFyZSByZWFkeSB0byB0cnkgYW5kIHRlc3QgZm9yIHRoZSBmaWxlIGV4aXN0ZW5jZQ0KCQkJCQkkcmVzdWx0ID0gJHppcHBlci0+Z2V0X2ZpbGVfbGlzdCggJHppcF9maWxlICk7DQoJCQkJCQ0KCQkJCQkvLyBXaWxsIGJlIGZhbHNlIGlmIHdlIGNvdWxkbid0IGxpc3QgY29udGVudHMgb3IgZmlsZSBsaXN0IGFycmF5IG90aGVyd2lzZQ0KCQkJCQlpZiAoIGlzX2FycmF5KCAkcmVzdWx0ICkgKSB7DQoJCQkJCQ0KCQkJCQkJLy8gV2UgZ290IGEgbGlzdCBzbyBiZXR0ZXIgYXNzdW1lIGl0IGlzIG9rDQoJCQkJCQl1bnNldCggJHppcHBlciApOw0KCQkJCQkJDQoJCQkJCQkvLyBXZSBoYXZlIHRvIHJldHVybiBoZXJlIGJlY2F1c2Ugd2UgY2Fubm90IGJyZWFrIG91dCBvZiBmb3JlYWNoDQoJCQkJCQlyZXR1cm4gJHJlc3VsdDsNCgkNCgkJCQkJfSBlbHNlIHsNCgkJCQkJDQoJCQkJCQkvLyBUaGUgemlwcGVyIGVuY291bnRlcmVkIGFuIGVycm9yIHNvIHdlIG5lZWQgdG8gZHJvcCB0aHJvdWdoIGFuZCBsb29wIHJvdW5kIHRvIHRyeSBhbm90aGVyDQoJCQkJCQkvLyBXZSdsbCBub3QgcHJvY2VzcyB0aGUgcmVzdWx0IGhlcmUsIGp1c3QgZHJvcCB0aHJvdWdoIHNpbGVudGx5ICh0aGUgbWV0aG9kIHdpbGwgaGF2ZSBsb2dnZWQgaXQpCQkJDQoJCQkJCQl1bnNldCggJHppcHBlciApOw0KCQkJCQkJDQoJCQkJCX0NCgkJCQkNCgkJCQl9DQoJCQkJDQoJCQl9DQoJCQkNCgkJCS8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIG5vIG1ldGhvZCB0byBsaXN0IGJhY2t1cCBmaWxlIGNvbnRlbnQgd2FzIGF2YWlsYWJsZSBvciB3b3JrZWQNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1VuYWJsZSB0byBjaGVjayBmaWxlIGNvbnRlbnQgb2YgYmFja3VwICglMSRzKTogTm8gY29tcGF0aWJsZSB6aXAgbWV0aG9kIGZvdW5kLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICR6aXBfZmlsZSApICk7DQoJCQlyZXR1cm4gZmFsc2U7DQoJCQkNCgkJfQ0KCQkNCgkJLyoJc2V0X2NvbW1lbnQoKQ0KCQkgKgkNCgkJICoJUmV0cmlldmUgYXJjaGl2ZSBjb21tZW50Lg0KCQkgKgkNCgkJICoJQHBhcmFtCQlzdHJpbmcJCQkkemlwX2ZpbGUJCUZpbGVuYW1lIG9mIGFyY2hpdmUgdG8gc2V0IGNvbW1lbnQgb24uDQoJCSAqCUBwYXJhbQkJc3RyaW5nfGFycmF5CSRjb21tZW50CQlDb21tZW50IHRvIGFwcGx5IHRvIGFyY2hpdmUuIElmIGFycmF5LCBqc29uIGVuY29kZWQuIERlbGltaW5hdGVkIHdpdGggTWV0YURhdGE6IGFuZCBNZXRhRGF0YS1FbmQ6Lg0KCQkgKglAcmV0dXJuCQlib29sfHN0cmluZwkJCQkJCXRydWUgb24gc3VjY2VzcywgZXJyb3IgbWVzc2FnZSBvdGhlcndpc2UuDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gc2V0X2NvbW1lbnQoICR6aXBfZmlsZSwgJGNvbW1lbnQgKSB7DQoJCQkNCgkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCk7DQoJCQkJCQkNCgkJCSR6aXBfbWV0aG9kcyA9ICR0aGlzLT5femlwX21ldGhvZHM7DQoJCQkNCgkJCS8vIEJldHRlciBtYWtlIHN1cmUgd2UgaGF2ZSBzb21lIGF2YWlsYWJsZSBtZXRob2RzDQoJCQlpZiAoIGVtcHR5KCAkemlwX21ldGhvZHMgKSApIHsNCgkJCQ0KCQkJCS8vIEhtbSwgd2UgZG9uJ3Qgc2VlbSB0byBoYXZlIGFueSBhdmFpbGFibGUgbWV0aG9kcywgb29wcywgYmVzdCBnbyBubyBmdXJ0aGVyDQoJCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBfXygnRmFpbGVkIHRvIHNldCBjb21tZW50IGluIGJhY2t1cCBmaWxlIC0gbm8gYXZhaWxhYmxlIG1ldGhvZHMuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOw0KCQkJCQ0KCQkJCXJldHVybiBmYWxzZTsNCgkJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gRW5jb2RlICRjb21tZW50IGlmIGFuIGFycmF5LiBIYW5kbGUgZGVsaW1pbmF0aW9uLg0KCQkJaWYgKCBpc19hcnJheSggJGNvbW1lbnQgKSApIHsNCgkJCQkkY29tbWVudCA9IGpzb25fZW5jb2RlKCAkY29tbWVudCApOw0KCQkJfQ0KCQkJJGNvbW1lbnQgPSAnTWV0YURhdGE6JyAuICRjb21tZW50IC4gJ01ldGFEYXRhLUVuZDonOw0KCQkJDQoJCQkvLyBJdGVyYXRlIG92ZXIgdGhlIG1ldGhvZHMgLSBvbmNlIHdlIHN1Y2NlZWQganVzdCByZXR1cm4gZGlyZWN0bHkgb3RoZXJ3aXNlIGRyb3AgdGhyb3VnaA0KCQkJZm9yZWFjaCAoICR6aXBfbWV0aG9kcyBhcyAkbWV0aG9kX3RhZyApIHsNCgkJCQkJDQoJCQkJLy8gRmlyc3QgbWFrZSBzdXJlIHdlIGNhbiBtYW5hZ2UgY29tbWVudHMgd2l0aCB0aGlzIG1ldGhvZCAoaWdub3JlIHNpbGVudGx5IGlmIG5vdCkNCgkJCQlpZiAoICR0aGlzLT5femlwX21ldGhvZHNfZGV0YWlsc1sgJG1ldGhvZF90YWcgXVsgJ2F0dHInIF1bICdpc19jb21tZW50ZXInIF0gPT09IHRydWUgKSB7DQoJCQkJCQ0KCQkJCQkkY2xhc3NfbmFtZSA9ICdwbHVnaW5idWRkeV96YnppcCcgLiAkbWV0aG9kX3RhZzsNCgkJCQkJDQoJCQkJCSR6aXBwZXIgPSBuZXcgJGNsYXNzX25hbWUoICR0aGlzICk7DQoJCQkJCQ0KCQkJCQkvLyBXZSBuZWVkIHRvIHRlbGwgdGhlIG1ldGhvZCB3aGF0IGRldGFpbHMgYmVsb25nIHRvIGl0DQoJCQkJCSR6aXBwZXItPnNldF9tZXRob2RfZGV0YWlscyggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdICk7DQoJCQkJCQkJCQkJDQoJCQkJCS8vIE5vdyB3ZSBhcmUgcmVhZHkgdG8gdHJ5IGFuZCB0ZXN0IGZvciB0aGUgZmlsZSBleGlzdGVuY2UNCgkJCQkJJHJlc3VsdCA9ICR6aXBwZXItPnNldF9jb21tZW50KCAkemlwX2ZpbGUsICRjb21tZW50ICk7DQoJCQkJCQ0KCQkJCQkvLyBXaWxsIGJlIGZhbHNlIGlmIHdlIGNvdWxkbid0IHNldCB0aGUgY29tbWVudA0KCQkJCQlpZiAoICRyZXN1bHQgPT09IHRydWUgKSB7DQoJCQkJCQ0KCQkJCQkJLy8gTXVzdCBhc3N1bWUgdGhhdCBjb21tZW50IHdhcyBzZXQgb2sNCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7DQoJCQkJCQkNCgkJCQkJCS8vIFdlIGhhdmUgdG8gcmV0dXJuIGhlcmUgYmVjYXVzZSB3ZSBjYW5ub3QgYnJlYWsgb3V0IG9mIGZvcmVhY2gNCgkJCQkJCXJldHVybiB0cnVlOw0KCQ0KCQkJCQl9IGVsc2Ugew0KCQkJCQkNCgkJCQkJCS8vIFRoZSB6aXBwZXIgZW5jb3VudGVyZWQgYW4gZXJyb3Igc28gd2UgbmVlZCB0byBkcm9wIHRocm91Z2ggYW5kIGxvb3Agcm91bmQgdG8gdHJ5IGFub3RoZXINCgkJCQkJCS8vIFdlJ2xsIG5vdCBwcm9jZXNzIHRoZSByZXN1bHQgaGVyZSwganVzdCBkcm9wIHRocm91Z2ggc2lsZW50bHkgKHRoZSBtZXRob2Qgd2lsbCBoYXZlIGxvZ2dlZCBpdCkJCQkNCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7DQoJCQkJCQkNCgkJCQkJfQ0KCQkJCQ0KCQkJCX0NCgkJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gSWYgd2UgZ290IHRoaXMgZmFyIHRoZW4gY291bGRuJ3Qgc2V0IGEgY29tbWVudCBhdCBhbGwgLSBlaXRoZXIgbm8gYXZhaWxhYmxlIG1ldGhvZCBvciBhbGwgbWV0aG9kIGZhaWxlZA0KCQkJcGJfYmFja3VwYnVkZHk6OnN0YXR1cyggJ2RldGFpbHMnLCBzcHJpbnRmKCBfXygnVW5hYmxlIHRvIHNldCBjb21tZW50IGluIGZpbGUgJTEkczogTm8gY29tcGF0aWJsZSB6aXAgbWV0aG9kIGZvdW5kIG9yIGFsbCBtZXRob2RzIGZhaWxlZCAtIG5vdGUgc3RvcmVkIGludGVybmFsbHkgb25seS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUgKSApOw0KDQoJCQkvLyBSZXR1cm4gbWVzc2FnZSBmb3IgZGlzcGxheSAtIG1heWJlIHNob3VsZCByZXR1cm4gZmFsc2UgYW5kIGhhdmUgY2FsbGVyIGRpc3BsYXkgaXQncyBvd24gbWVzc2FnZT8NCgkJCSRtZXNzYWdlID0gIlxuXG5VbmFibGUgdG8gc2V0IG5vdGUgaW4gZmlsZS5cblRoZSBub3RlIHdpbGwgb25seSBiZSBzdG9yZWQgaW50ZXJuYWxseSBpbiB5b3VyIHNldHRpbmdzIGFuZCBub3QgaW4gdGhlIHppcCBmaWxlIGl0c2VsZi4iOw0KCQkJcmV0dXJuICRtZXNzYWdlOw0KCQkJDQoJCX0NCgkJDQoJCS8qCWdldF9jb21tZW50KCkNCgkJICoJDQoJCSAqCVJldHJpZXZlIGFyY2hpdmUgY29tbWVudC4NCgkJICoJDQoJCSAqCUBwYXJhbQkJc3RyaW5nCQkJCSR6aXBfZmlsZQkJRmlsZW5hbWUgb2YgYXJjaGl2ZSB0byByZXRyaWV2ZSBjb21tZW50IGZyb20uDQoJCSAqCUBwYXJhbQkJYm9vbAkJCQkkcmF3X2NvbW1lbnQJSWYgdHJ1ZSB0aGVuIHJhdyBjb21tZW50IGZpZWxkIGRhdGEgcmV0dXJuZWQgd2l0aG91dCBwcm9jZXNzaW5nIGRlbGltaW5hdG9ycyBub3IganNvbi4gRGVmYXVsdHMgZmFsc2UuDQoJCSAqCUByZXR1cm4JCWJvb2x8c3RyaW5nfGFycmF5CQkJCQlmYWxzZSBvbiBmYWlsdXJlLCBaaXAgY29tbWVudCBvdGhlcndpc2UuIElmIGNvbW1lbnQgaXMganNvbiBlbmNvZGVkIGFycmF5IHJldHVybnMgYXJyYXkuDQoJCSAqLw0KCQlwdWJsaWMgZnVuY3Rpb24gZ2V0X2NvbW1lbnQoICR6aXBfZmlsZSwgJHJhd19jb21tZW50ID0gZmFsc2UgKSB7DQoJCQkNCgkJCSR6aXBfbWV0aG9kcyA9IGFycmF5KCk7DQoJCQkJCQkNCgkJCSR6aXBfbWV0aG9kcyA9ICR0aGlzLT5femlwX21ldGhvZHM7DQoJCQkNCgkJCS8vIEJldHRlciBtYWtlIHN1cmUgd2UgaGF2ZSBzb21lIGF2YWlsYWJsZSBtZXRob2RzDQoJCQlpZiAoIGVtcHR5KCAkemlwX21ldGhvZHMgKSApIHsNCgkJCQkNCgkJCQkvLyBIbW0sIHdlIGRvbid0IHNlZW0gdG8gaGF2ZSBhbnkgYXZhaWxhYmxlIG1ldGhvZHMsIG9vcHMsIGJlc3QgZ28gbm8gZnVydGhlcg0KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0ZhaWxlZCB0byBnZXQgY29tbWVudCBmcm9tIGJhY2t1cCBmaWxlIC0gbm8gYXZhaWxhYmxlIG1ldGhvZHMuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSApOw0KCQkJCQ0KCQkJCXJldHVybiBmYWxzZTsNCgkJCQkNCgkJCX0NCgkJCQ0KCQkJLy8gSXRlcmF0ZSBvdmVyIHRoZSBtZXRob2RzIC0gb25jZSB3ZSBzdWNjZWVkIGp1c3QgcmV0dXJuIGRpcmVjdGx5IG90aGVyd2lzZSBkcm9wIHRocm91Z2gNCgkJCWZvcmVhY2ggKCAkemlwX21ldGhvZHMgYXMgJG1ldGhvZF90YWcgKSB7DQoJCQkNCgkJCQkvLyBGaXJzdCBtYWtlIHN1cmUgd2UgY2FuIG1hbmFnZSBjb21tZW50cyB3aXRoIHRoaXMgbWV0aG9kIChpZ25vcmUgc2lsZW50bHkgaWYgbm90KQ0KCQkJCWlmICggJHRoaXMtPl96aXBfbWV0aG9kc19kZXRhaWxzWyAkbWV0aG9kX3RhZyBdWyAnYXR0cicgXVsgJ2lzX2NvbW1lbnRlcicgXSA9PT0gdHJ1ZSApIHsNCgkJCQkJDQoJCQkJCSRjbGFzc19uYW1lID0gJ3BsdWdpbmJ1ZGR5X3piemlwJyAuICRtZXRob2RfdGFnOw0KCQkJCQkNCgkJCQkJJHppcHBlciA9IG5ldyAkY2xhc3NfbmFtZSggJHRoaXMgKTsNCgkJCQkJDQoJCQkJCS8vIFdlIG5lZWQgdG8gdGVsbCB0aGUgbWV0aG9kIHdoYXQgZGV0YWlscyBiZWxvbmcgdG8gaXQNCgkJCQkJJHppcHBlci0+c2V0X21ldGhvZF9kZXRhaWxzKCAkdGhpcy0+X3ppcF9tZXRob2RzX2RldGFpbHNbICRtZXRob2RfdGFnIF0gKTsNCgkJCQkJCQkJCQkNCgkJCQkJLy8gTm93IHdlIGFyZSByZWFkeSB0byB0cnkgYW5kIHRlc3QgZm9yIHRoZSBmaWxlIGV4aXN0ZW5jZQ0KCQkJCQkkcmVzdWx0ID0gJHppcHBlci0+Z2V0X2NvbW1lbnQoICR6aXBfZmlsZSApOw0KCQkJCQkNCgkJCQkJLy8gV2lsbCBiZSBmYWxzZSBpZiB3ZSBjb3VsZG4ndCBzZXQgdGhlIGNvbW1lbnQNCgkJCQkJaWYgKCBpc19zdHJpbmcgKCAkcmVzdWx0ICkgKSB7DQoJCQkJCQ0KCQkJCQkJLy8gRm9ybWF0IGhhcyBjaGFuZ2VkIGFuZCBubyBsb25nZXIgZW5jb2RpbmcgYXMgaHRtbGVtdGl0aWVzIHdoZW4gc2V0dGluZyBjb21tZW50DQoJCQkJCQkvLyBGb3Igb2xkZXIgYmFja3VwcyBtYXkgbmVlZCB0byByZW1vdmUgZW5jb2RpbmcgLSBhY3Rpb24gX3Nob3VsZF8gYmUgbnVsbCBpZiBOL0ENCgkJCQkJCS8vIE9ubHkgc3Bhbm5lciB3b3VsZCBiZSBpZiBzb21lb25lIGhhZCBwdXQgYW4gZW50aXR5IGluIHRoZWlyIGNvbW1lbnQgYnV0IHRoYXQgaXMNCgkJCQkJCS8vIHJlYWxseSBhbiBvdXRzaWRlciBhbmQgaW4gYW55IGNhc2UgdGhlIGNvcnJlY3Rpb24gaXMgc2ltcGx5IHRvIGVkaXQgYW5kIHJlc2F2ZQ0KCQkJCQkJLy8gVE9ETzogUmVtb3ZlIHRoaXMgd2hlbiBuZXcgZm9ybWF0IGhhcyBiZWVuIGluIHVzZSBmb3Igc29tZSB0aW1lDQoJCQkJCQkkcmVzdWx0ID0gaHRtbF9lbnRpdHlfZGVjb2RlKCAkcmVzdWx0ICk7DQoJCQkJCQ0KCQkJCQkJLy8gTXVzdCBhc3N1bWUgdGhhdCBjb21tZW50IHdhcyByZXRyaWV2ZWQgb2sNCgkJCQkJCXVuc2V0KCAkemlwcGVyICk7DQoJCQkJCQkNCgkJCQkJCS8vIFJldHVybiByYXcgY29tbWVudCBhcy1pcyB3aXRoIG5vIHByb2Nlc3NpbmcgaWYgc3BlY2lmaWVkLg0KCQkJCQkJaWYgKCB0cnVlID09PSAkcmF3X2NvbW1lbnQgKSB7DQoJCQkJCQkJcmV0dXJuICRyZXN1bHQ7DQoJCQkJCQl9DQoJCQkJCQkNCgkJCQkJCS8vIEhhbmRsZSBkZWxpbWluYXRpb24uIERlY29kZSAkcmVzdWx0IGlmIGpzb24gZGVjb2RlZCAoYXNzb2NpYXRpdmUgYXJyYXkgbW9kZSkuDQoJCQkJCQkkc3RhcnRfZGVsaW1pbmF0b3IgPSBzdHJwb3MoICRyZXN1bHQsICdNZXRhRGF0YTonICk7DQoJCQkJCQkkZW5kX2RlbGltaW5hdG9yID0gc3RycG9zKCAkcmVzdWx0LCAnTWV0YURhdGEtRW5kOicgKTsNCgkJCQkJCWlmICggKCBmYWxzZSAhPT0gJHN0YXJ0X2RlbGltaW5hdG9yICkgJiYgKCBmYWxzZSAhPT0gJGVuZF9kZWxpbWluYXRvciApICkgeyAvLyBGb3VuZCBib3RoIGRlbGltaW5hdG9ycy4NCgkJCQkJCQkkcmVzdWx0ID0gc3Vic3RyKCAkcmVzdWx0LCAkc3RhcnRfZGVsaW1pbmF0b3IrOSwgJGVuZF9kZWxpbWluYXRvci05ICk7DQoJCQkJCQkJaWYgKCBOVUxMID09PSAoICRkZWNvZGVkX3Jlc3VsdCA9IGpzb25fZGVjb2RlKCAkcmVzdWx0LCB0cnVlICkgKSApIHsgLy8gSnNvbiBkZWNvZGUgZmFpbGVkIHNvIHJldHVybiBzdHJpbmcuDQoJCQkJCQkJCXJldHVybiAkcmVzdWx0Ow0KCQkJCQkJCX0gZWxzZSB7IC8vIEpzb24gZGVjb2RlIHN1Y2Nlc3Mgc28gcmV0dXJuaW5nIHZhcmlhYmxlIChzaG91bGQgYmUgYW4gYXJyYXkgbW9zdCBsaWtlbHkpLg0KCQkJCQkJCQlyZXR1cm4gJGRlY29kZWRfcmVzdWx0Ow0KCQkJCQkJCX0NCgkJCQkJCQkNCgkJCQkJCX0NCgkJCQkJCQ0KCQkJCQkJLy8gTm8gZGVsaW1pbmF0b3JzIGZvdW5kIGlmIG1hZGUgaXQgdG8gdGhpcyBwb2ludCBzbyBhc3N1bWluZyBwbGFpbiB0ZXh0IGxlZ2FjeSBjb21tZW50IChvciBkZWxpbWluYXRvcnMgbWlzc2luZy9jb3JydXB0KS4NCgkJCQkJCQ0KCQkJCQkJLy8gV2UgaGF2ZSB0byByZXR1cm4gaGVyZSBiZWNhdXNlIHdlIGNhbm5vdCBicmVhayBvdXQgb2YgZm9yZWFjaA0KCQkJCQkJcmV0dXJuICRyZXN1bHQ7DQoJCQkJCQkNCgkJCQkJfSBlbHNlIHsNCgkJCQkJDQoJCQkJCQkvLyBUaGUgemlwcGVyIGVuY291bnRlcmVkIGFuIGVycm9yIHNvIHdlIG5lZWQgdG8gZHJvcCB0aHJvdWdoIGFuZCBsb29wIHJvdW5kIHRvIHRyeSBhbm90aGVyDQoJCQkJCQkvLyBXZSdsbCBub3QgcHJvY2VzcyB0aGUgcmVzdWx0IGhlcmUsIGp1c3QgZHJvcCB0aHJvdWdoIHNpbGVudGx5ICh0aGUgbWV0aG9kIHdpbGwgaGF2ZSBsb2dnZWQgaXQpCQkJDQoJCQkJCQl1bnNldCggJHppcHBlciApOw0KCQkJCQkJDQoJCQkJCX0NCgkJCQkNCgkJCQl9DQoJCQkJDQoJCQl9DQoJCQkNCgkJCS8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIGNvdWxkbid0IGdldCBhIGNvbW1lbnQgYXQgYWxsIC0gZWl0aGVyIG5vIGF2YWlsYWJsZSBtZXRob2Qgb3IgYWxsIG1ldGhvZCBmYWlsZWQNCgkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1VuYWJsZSB0byBnZXQgY29tbWVudCBpbiBmaWxlICUxJHM6IE5vIGNvbXBhdGlibGUgemlwIG1ldGhvZCBmb3VuZCBvciBhbGwgbWV0aG9kcyBmYWlsZWQuJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJHppcF9maWxlICkgKTsNCg0KCQkJcmV0dXJuIGZhbHNlOw0KCQkJDQoJCX0NCgkJCQkNCgkJLy8gRk9SIEZVVFVSRSBVU0U7IE5PVCBZRVQgSU1QTEVNRU5URUQuIFVzZSB0byBjaGVjayAuc3FsIGZpbGUgaXMgbm9uLWVtcHR5Lg0KCQlmdW5jdGlvbiBmaWxlX3N0YXRzKCAkemlwX2ZpbGUsICRsb2NhdGVfZmlsZSwgJGxlYXZlX29wZW4gPSBmYWxzZSApIHsNCgkJCWlmICggaW5fYXJyYXkoICd6aXBhcmNoaXZlJywgJHRoaXMtPl96aXBfbWV0aG9kcyApICkgew0KCQkJCSR0aGlzLT5femlwID0gbmV3IFppcEFyY2hpdmU7DQoJCQkJaWYgKCAkdGhpcy0+X3ppcC0+b3BlbiggJHppcF9maWxlICkgPT09IHRydWUgKSB7DQoJCQkJCWlmICggKCAkc3RhdHMgPSAkdGhpcy0+X3ppcC0+c3RhdE5hbWUoICRsb2NhdGVfZmlsZSApICkgPT09IGZhbHNlICkgeyAvLyBGaWxlIG5vdCBmb3VuZCBpbiB6aXAuDQoJCQkJCQkkdGhpcy0+X3ppcC0+Y2xvc2UoKTsNCgkJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ0ZpbGUgbm90IGZvdW5kICh6aXBhcmNoaXZlKSBmb3Igc3RhdHMnLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzogJyAuICRsb2NhdGVfZmlsZSApOw0KCQkJCQkJcmV0dXJuIGZhbHNlOw0KCQkJCQl9DQoJCQkJCSR0aGlzLT5femlwLT5jbG9zZSgpOw0KCQkJCQlyZXR1cm4gJHN0YXRzOw0KCQkJCX0gZWxzZSB7DQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgc3ByaW50ZiggX18oJ1ppcEFyY2hpdmUgZmFpbGVkIHRvIG9wZW4gZmlsZSB0byBjaGVjayBzdGF0cyAobG9va2luZyBpbiAlMSRzKS4nLCdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAkemlwX2ZpbGUgKSApOw0KCQkJCQkNCgkJCQkJcmV0dXJuIGZhbHNlOw0KCQkJCX0NCgkJCX0NCgkJCQ0KCQkJLy8gSWYgd2UgbWFkZSBpdCB0aGlzIGZhciB0aGVuIHppcGFyY2hpdmUgbm90IGF2YWlsYWJsZS9mYWlsZWQuDQoJCQlpZiAoIGluX2FycmF5KCAncGNsemlwJywgJHRoaXMtPl96aXBfbWV0aG9kcyApICkgew0KCQkJCXJlcXVpcmVfb25jZSggQUJTUEFUSCAuICd3cC1hZG1pbi9pbmNsdWRlcy9jbGFzcy1wY2x6aXAucGhwJyApOw0KCQkJCSR0aGlzLT5femlwID0gbmV3IFBjbFppcCggJHppcF9maWxlICk7DQoJCQkJaWYgKCAoICRmaWxlX2xpc3QgPSAkdGhpcy0+X3ppcC0+bGlzdENvbnRlbnQoKSApID09IDAgKSB7IC8vIElmIHplcm8sIHppcCBpcyBjb3JydXB0IG9yIGVtcHR5Lg0KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsICR0aGlzLT5femlwLT5lcnJvckluZm8oIHRydWUgKSApOw0KCQkJCX0gZWxzZSB7DQoJCQkJCWZvcmVhY2goICRmaWxlX2xpc3QgYXMgJGZpbGUgKSB7DQoJCQkJCQlpZiAoICRmaWxlWydmaWxlbmFtZSddID09ICRsb2NhdGVfZmlsZSApIHsgLy8gRm91bmQgZmlsZS4NCgkJCQkJCQlyZXR1cm4gdHJ1ZTsNCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCQlwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCAnZGV0YWlscycsIF9fKCdGaWxlIG5vdCBmb3VuZCAocGNsemlwKScsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnOiAnIC4gJGxvY2F0ZV9maWxlICk7DQoJCQkJCXJldHVybiBmYWxzZTsNCgkJCQl9DQoJCQl9IGVsc2Ugew0KCQkJCXBiX2JhY2t1cGJ1ZGR5OjpzdGF0dXMoICdkZXRhaWxzJywgX18oJ1VuYWJsZSB0byBjaGVjayBpZiBmaWxlIGV4aXN0czogTm8gY29tcGF0aWJsZSB6aXAgbWV0aG9kIGZvdW5kLicsJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgkJCQlyZXR1cm4gZmFsc2U7DQoJCQl9DQoJCX0NCgkJCQ0KCX0gLy8gRW5kIGNsYXNzDQoJDQoJLy8kcGx1Z2luYnVkZHlfemlwYnVkZHkgPSBuZXcgcGx1Z2luYnVkZHlfemlwYnVkZHkoICR0aGlzLT5fb3B0aW9uc1snYmFja3VwX2RpcmVjdG9yeSddICk7DQoNCn0NCg==
###PACKDATA,FILE_END,/lib/zipbuddy/zipbuddy.php,importbuddy/lib/zipbuddy/zipbuddy.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/lib/mysqlbuddy/index.php,importbuddy/lib/mysqlbuddy/index.php
###PACKDATA,FILE_START,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php

###PACKDATA,FILE_END,/lib/mysqlbuddy/mysqlbuddy.php,importbuddy/lib/mysqlbuddy/mysqlbuddy.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/lib/textreplacebuddy/index.php,importbuddy/lib/textreplacebuddy/index.php
###PACKDATA,FILE_START,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php

###PACKDATA,FILE_END,/lib/textreplacebuddy/textreplacebuddy.php,importbuddy/lib/textreplacebuddy/textreplacebuddy.php
###PACKDATA,FILE_START,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php

###PACKDATA,FILE_END,/lib/cpanel/cpanel.php,importbuddy/lib/cpanel/cpanel.php
###PACKDATA,FILE_START,/lib/cpanel/index.php,importbuddy/lib/cpanel/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/lib/cpanel/index.php,importbuddy/lib/cpanel/index.php
###PACKDATA,FILE_START,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php

###PACKDATA,FILE_END,/pluginbuddy/_pluginbuddy.php,importbuddy/pluginbuddy/_pluginbuddy.php
###PACKDATA,FILE_START,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
MS4wLjAgLSAyMDExLTEyLTEzIC0gRHVzdGluIEJvbHRvbg0KCUluaXRpYWwgcHVzaC4NCjEuMC4xIC0gMjAxMS0xMi0xMyAtIER1c3RpbiBCb2x0b24NCglGaXhlZCBVSSB0aXRsZSgpIG5vdCBzaG93aW5nIGltYWdlLg0KCUZpeGVkIG5vbi1zZXJpZXMgR2V0dGluZyBTdGFydGVkIHBhZ2UgdW5kZWZpbmVkIGluZGV4Lg0KCXBiX2JhY2t1cGJ1ZGR5OjpzZXR0aW5ncygpIHJldHVybnMgYmxhbmsgZm9yIHNlcmllcyB0YWcgaWYgbm90IGZvdW5kLg0KMS4wLjIgLSAyMDExLTAyLTEyIC0gRHVzdGluIEJvbHRvbg0KCUFkZGVkIHVwZGF0ZXIuDQoxLjAuMyAtIDIwMTItMDEtMDQgLSBEdXN0aW4gQm9sdG9uDQoJRml4ZWQgdmFyaW91cyB3aWRnZXQgdGhpbmdzLg0KCVVzaW5nIFVJIGVsZW1lbnRzIG9uIHBhZ2VzIHRoYXQgYXJlbid0IG91ciBvd24uDQoxLjAuNCAtIDIwMTItMDEtMDUgLSBEdXN0aW4gQm9sdG9uDQoJQWRkZWQgb3B0aW9uYWwgYWJpbGl0eSB0byBzcGVjaWZpYyB0aGUgZmlyc3QgcGFyYW1ldGVyICgkdGFnKSBmb3IgYWRkX3Nob3J0Y3V0LCBhZGRfZmlsdGVyLCBhZGRfYWN0aW9uLCBldGMgdGhhdCBhbGxvd3MgcGFzc2luZyBhIGN1c3RvbSBtZXRob2QgY2FsbGJhY2sgbmFtZSB0aGF0IGRpZmZlcnMgZnJvbSB0aGUgdGFnLiBTb21lIGFjdGlvbnMgaGF2ZSBjaGFyYWN0ZXJzIGRpc2FsbG93ZWQgaW4gUEhQIG1ldGhvZCBuYW1lcyBzbyB0aGV5IG5lZWQgdG8gZGlmZmVyLg0KMS4wLjUgLSAyMDEyLTAxLTA1IC0gRHVzdGluIEJvbHRvbg0KCUZpeGVkIGZvcm0gdmFsaWRhdGlvbiBmb3IgZW1wdHkgZm9ybSBlbGVtZW50cy4NCglGaXhlZCBtaXNzaW5nIHRvb2x0aXBzIGluIHNldHRpbmdzIGZvcm1zLg0KMS4wLjYgLSAyMDEyLTAxLTA1IC0gRHVzdGluIEJvbHRvbg0KCUFkZGVkIGJldHRlciBlcnJvciByZXBvcnRpbmcgb24gZm9ybSB2YWxpZGF0aW9uIGZhaWx1cmUuDQoJTm93IGFsbG93aW5nIHBhcnRpYWwgZm9ybSBzYXZpbmcgb24gdmFsaWR0aW9uIGZhaWx1cmUuDQoJQWRkZWQgcmVkIGJvcmRlciBhcm91bmQgZm9ybSBpdGVtcyB0aGF0IGZhaWwgdmFsaWRhdGlvbiBmb3IgZWFzaWVyIHJlY29nbml0aW9uLg0KMS4wLjcgLSAyMDEyLTAxLTA2IC0gRHVzdGluIEJvbHRvbg0KCUZvcm0gdmFsaWRhdGlvbiBmdW5jdGlvbiBudW1iZXIgcnVsZSB3YXMgaW5wcm9wZXJseSBuYW1lZCBudW0uDQoxLjAuOCAtIDIwMTItMDEtMTMgLSBEdXN0aW4gQm9sdG9uDQoJQWRkZWQgZXJyb3IgbWVzc2FnZSBpZiB1cGRhdGVyIHNldHRpbmdzIHBhcmFtZXRlciBtaXNzaW5nLg0KCUZpeGVkIHZlcnNpb24gbnVtYmVyLg0KMS4wLjkgLSAyMDEyLTAxLTEzIC0gRHVzdGluIEJvbHRvbg0KCUZpeGVkIHBsdWdpbmJ1ZGR5X3NldHRpbmdzIGZvcm0gc2V0dGluZyBmb3JtIG5hbWUgc3RhdGljYWxseS4NCglDdXN0b20gcHJvY2Vzc2luZyBhZGRlZCBpbnRvIHBsdWdpbmJ1ZGR5X3NldHRpbmdzIGNsYXNzIHZpYSBwcm9jZXNzKCk7IGp1c3Qgc2V0IHNhdmVwb2ludCBpbiBjb25zdHJ1Y3RvciB0byBmYWxzZSB0byBhY3RpdmF0ZSB0aGlzIG1vZGUuDQoxLjAuMTEgLSAyMDEyLTAxLTE4IC0gRHVzdGluIEJvbHRvbg0KCUFkZGVkIGluaXRpYWwgc3RhcnRpbmdzIGZvciBuZXcgbWVkaWEgbGlicmFyeSBzeXN0ZW0uDQoJVHdlYWtlZCBkb3duc2l6ZXIgbG9hZGVyIHN5c3RlbS4NCglSZW5hbWVkIHBsdWdpbmJ1ZGR5IGNsYXNzIHRvIHBiIGNsYXNzLiBBbGwgcmVmZXJlbmNlcyB0byBwYl9iYWNrdXBidWRkeTo6IHNob3VsZCBjaGFuZ2UgdG8gcGJfYmFja3VwYnVkZHk6Og0KMS4wLjEyIC0gMjAxMi0wMS0xOCAtIER1c3RpbiBCb2x0b24JDQoJX2luaXRfY29yZV9jb250cm9sbGVyKCkgY2xlYW51cC4NCjEuMC4xMyAtIDIwMTItMDEtMTkgLSBEdXN0aW4gQm9sdG9uCQ0KCUZpeGVkIGxhY2sgb2YgcmV0dXJuIGluIHBiX2JhY2t1cGJ1ZGR5Ojp0aXAoKSBhbmQgcGJfYmFja3VwYnVkZHk6OnZpZGVvKCkuDQoxLjAuMTQgLSAyMDEyLTAxLTE5IC0gRHVzdGluIEJvbHRvbg0KCU1vdmVkIGFsbCBmcmFtZXdvcmstcmVxdWlyZWQgSlMgYW5kIENTUyBpbnRvIHBsdWdpbmJ1ZGR5IGRpcmVjdG9yeS4NCjEuMC4xNSAtIDIwMTItMDEtMjUgLSBEdXN0aW4gQm9sdG9uDQoJRml4ZWQgY29yZSBjb250cm9sbGVyIGZvciBkYXNoYm9hcmQgd2lkZ2V0IGJlaW5nIGFibGUgdG8gYWNjZXNzIHByaXZhdGUgc3RhdGljIHZhci4NCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6YW50aV9kaXJlY3RvcnlfYnJvd3NpbmcoKS4NCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6bWtkaXIoKS4NCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6c3RhdHVzKCkuDQoJQWRkZWQgcGJfYmFja3VwYnVkZHk6OmdldF9zdGF0dXMoKS4NCglBZGRlZCBwYl9iYWNrdXBidWRkeTo6ZGVidWcoKS4NCjEuMC4xNiAtIDIwMTItMDEtMjYgLSBEdXN0aW4gQm9sdG9uDQoJQWRkZWQgcGJfYmFja3VwYnVkZHk6OiRmaWxlc3lzdGVtIGNsYXNzIGNvbnRyb2xsZXIgZm9yIGludGVyZmFjaW5nIHdpdGggZmlsZSBzeXN0ZW0uDQoJQWRkZWQgcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQgY2xhc3MgY29udHJvbGxlciBmb3IgZm9ybWF0dGluZyBkYXRhIC8gdGV4dCBpbiBodW1hbiByZWFkYWJsZSBmb3JtYXRzLg0KCWRvd25zaXplciwgdXBkYXRlciwgZmlsZXN5c3RlbSwgYW5kIGZvcm1hdCAnbW9kdWxlcycgbm93IGNvbnRyb2xsZWQgdmlhIG1vZHVsZXMga2V5IGluIHRoZSAkc2V0dGluZ3MgYXJyYXkuICBTZWUgbmV3IGluaXQucGhwLg0KMS4wLjE5IC0gMjAxMi0wMS0zMSAtIER1c3RpbiBCb2x0b24NCglGb3JtIGZpeC4NCglTZXR0aW5ncyBmaXguDQoJQWRkZWQgQ1NTIG9wdGlvbnMgZm9yIGdyb3VwIGxpc3QgaW4gVUkgY2xhc3MuDQoJQWRkZWQgdGl0bGUgdHlwZSBmb3IgZm9ybS9zZXR0aW5ncyBjbGFzc2VzLg0KCVVwZGF0ZWQgYWRtaW4uY3NzIGZvciB0aXRsZSBzZXR0aW5ncyBmb3JtIHR5cGUuDQoxLjAuMjAgLSAyMDEyLTAxLTAxIC0gRHVzdGluIEJvbHRvbg0KCUFkZGVkIGVycm9yIGNvZGUgbG9va3VwIGZ1bmN0aW9uIHRvIGZpbGVzeXN0ZW0gY2xhc3MuIEZvciBleGl0IGNvZGVzIGZyb20gZXhlYygpIGFuZCBzdWNoLg0KCUZpeGVkIHN0YXR1cygpIGJ1Z3Mgd2l0aCBuZXdsaW5lcywgYXJyYXlzIChjaGFuZ2VkIGRlbGltaXRlcikuDQoxLjAuMjEgLSAyMDEyLTAxLTAxIC0gRHVzdGluIEJvbHRvbg0KCUFkZGVkIHd5c2l3eWcgb2JqZWN0IHlvdSBmb3JtICYgc2V0dGluZ3Mgc3lzdGVtLg0KCVRvdWNodXAgdG8gZmlsZXN5c3RlbSBjbGFzcy4NCglBZGRlZCBoaWRkZW4gZm9ybSBvYmplY3QuDQoJU2V0dGluZyB0aGUgdGl0bGUgb2YgYW55IGZvcm0vc2V0dGluZ3Mgb2JqZWN0IHRvICcnIHdpbGwgaGlkZSBpdHMgbGVmdCBjb2x1bW4gKGNvbGxhcHNlcyBsZWZ0KS4NCglBZGRlZCB0aXRsZSBmb3JtIG9iamVjdCB0eXBlIGZvciBmb3JtYXR0aW5nLg0KMS4wLjIyIC0gMjAxMi0wMS0wMyAtIER1c3RpbiBCb2x0b24NCglBZGRlZCBwYjo6JHN0YXJ0X3RpbWUgdG8gdXNlIHRvIGNvbXBhcmUgcGFzc2FnZSBvZiB0aW1lLg0KMS4wLjIzIC0gMjAxMi0wMi0wOCAtIER1c3RpbiBCb2x0b24NCglVcGRhdGVkIHVwZGF0ZXIuDQoxLjAuMjQgLSAyMDEyLTAyLTA4IC0gRHVzdGluIEJvbHRvbg0KCUZpeGVkIGNoZWNrYm94ICJZRVMhIiBkZWJ1ZyBvdXRwdXQuDQoJRml4ZWQgcmFkaW8gaW5wdXQgZGVmYXVsdCBjaGVja2VkIHNlbGVjdGlvbiBub3QgYmVpbmcgYXBwbGllZC4NCjEuMC4yNSAtIDIwMTItMDItMDkgLSBEdXN0aW4gQm9sdG9uDQoJQWRkZWQgb3JpZW50YXRpb24gb3B0aW9uIHRvIHJhZGlvIGJ1dHRvbnMuICBQb3NzaWJsZSB2YWxzOiBob3Jpem9udGFsLCB2ZXJ0aWNhbA0KMS4wLjI2IC0gMjAxMi0wMi0wOSAtIER1c3RpbiBCb2x0b24NCglBZGRlZCB0YWJiZWQgaW50ZXJmYWNlcyBpbnRvICR1aSBjbGFzcy4NCjEuMC4yNyAtIDIwMTItMDItMTAgLSBEdXN0aW4gQm9sdG9uDQoJRml4ZWQgR2V0dGluZyBTdGFydGVkIHBhZ2Ugd2l0aCBvbGRlciBzZXJpZXMgY29uZmxpY3RpbmcuDQoxLjAuMjggLSAyMDEyLTAyLTE3IC0gRHVzdGluIEJvbHRvbg0KCXN0cnN0cigpIHVzZWQgM3JkIHBhcmFtIHdoaWNoIHJlcXVpcmVkIFBIUCA+PSA1LjMgaW4gZm9ybTo6dGVzdF9ydWxlKCkuDQoJQ2xlYW5lZCB1cCBpbml0LnBocCBhIGJpdC4NCglDb2xvciBwaWNrZXI6IEFkZGVkIGNvbG9yIHR5cGUgdG8gZm9ybS9zZXR0aW5ncy4NCgkNCglBZGRlZCBzZXR0aW5ncyBjbGFzcyBtZXRob2Q6IHNldF92YWx1ZSgpIHRvIG92ZXJ3cml0ZSB2YWx1ZXMuDQoJ
###PACKDATA,FILE_END,/pluginbuddy/history.txt,importbuddy/pluginbuddy/history.txt
###PACKDATA,FILE_START,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/pluginbuddy/index.php,importbuddy/pluginbuddy/index.php
###PACKDATA,FILE_START,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php

###PACKDATA,FILE_END,/pluginbuddy/standalone_preloader.php,importbuddy/pluginbuddy/standalone_preloader.php
###PACKDATA,FILE_START,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php

###PACKDATA,FILE_END,/pluginbuddy/classes/core_controllers.php,importbuddy/pluginbuddy/classes/core_controllers.php
###PACKDATA,FILE_START,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php

###PACKDATA,FILE_END,/pluginbuddy/classes/filesystem.php,importbuddy/pluginbuddy/classes/filesystem.php
###PACKDATA,FILE_START,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php

###PACKDATA,FILE_END,/pluginbuddy/classes/form.php,importbuddy/pluginbuddy/classes/form.php
###PACKDATA,FILE_START,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
PD9waHANCg0KDQoNCi8qCWNsYXNzIHBsdWdpbmJ1ZGR5X2Zvcm1hdA0KICoJQGF1dGhvciBEdXN0aW4gQm9sdG9uDQogKgkNCiAqCUhlbHBzIGZvcm1hdCBjb250ZW50IG9yIGRhdGEgc3VjaCBhcyB0aW1lLCBkYXRlLCBmaWxlIHNpemUsIGV0Yy4NCiAqLw0KY2xhc3MgcGJfYmFja3VwYnVkZHlfZm9ybWF0IHsNCgkNCgkNCgkNCgkvLyAqKioqKioqKioqIFBVQkxJQyBQUk9QRVJUSUVTICoqKioqKioqKioNCgkNCgkNCgkNCgkvLyAqKioqKioqKioqIFBSSVZBVEUgUFJPUEVSVElFUyAqKioqKioqKioqDQoJcHJpdmF0ZSAkX3RpbWVzdGFtcCA9ICdNIGosIFkgZzppOnMgYSc7DQoJDQoJDQoJLy8gKioqKioqKioqKiBGVU5DVElPTlMgKioqKioqKioqKg0KCQ0KCQ0KCQ0KCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+X19jb25zdHJ1Y3QoKQ0KCSAqCQ0KCSAqCURlZmF1bHQgY29uc3RydWN0b3IuDQoJICoJDQoJICoJQHJldHVybgkJbnVsbA0KCSAqLw0KCWZ1bmN0aW9uIF9fY29uc3RydWN0KCkgew0KCX0gLy8gRW5kIF9fY29uc3RydWN0KCkuDQoJDQoJDQoJDQoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT5maWxlX3NpemUoKQ0KCSAqCQ0KCSAqCVRha2VzIGEgZmlsZSBzaXplIGluIGJ5dGVzIGFuZCB0cmFuc2Zvcm1zIGl0IGludG8gYSBodW1hbiByZWFkYWJsZSBmb3JtYXQgd2l0aCBtb3JlIGZyaWVuZGx5IHVuaXRzLiBEZWNpZGVzIG9uIHVuaXQgYmFzZWQgb24gdGhlIHNpemUuDQoJICoJDQoJICoJQHBhcmFtCQlpbnQJCSRzaXplCUZpbGUgc2l6ZS4NCgkgKglAcmV0dXJuCQlzdHJpbmcJCQlIdW1hbiBmb3JtYXR0ZWQgZnJpZW5kbHkgcmVhZGFibGUgZm9ybWF0Lg0KCSAqLw0KCWZ1bmN0aW9uIGZpbGVfc2l6ZSggJHNpemUgKSB7DQoJCSRzaXplcyA9IGFycmF5KCAnIEJ5dGVzJywgJyBLQicsICcgTUInLCAnIEdCJywgJyBUQicsICcgUEInLCAnIEVCJywgJyBaQicsICcgWUInKTsNCgkJaWYgKCAkc2l6ZSA9PSAwICkgew0KCQkJcmV0dXJuKCAnMCBNQicgKTsNCgkJfSBlbHNlIHsNCgkJCXJldHVybiAoIHJvdW5kKCAkc2l6ZSAvIHBvdyggMTAyNCwgKCAkaSA9IGZsb29yKCBsb2coICRzaXplLCAxMDI0ICkgKSApICksICRpID4gMSA/IDIgOiAwKSAuICRzaXplc1skaV0gKTsNCgkJfQ0KCX0gLy8gRW5kIGZpbGVfc2l6ZSgpLg0KCQ0KCQ0KCQ0KCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+ZGF0ZSgpDQoJICoJDQoJICoJRm9ybWF0cyBhIHRpbWVzdGFtcCBpbnRvIGEgbmljZSBodW1hbiBkYXRlIGZvcm1hdC4NCgkgKgkNCgkgKglAcGFyYW0JCWludAkJJHRpbWVzdGFtcAkJVGltZXN0YW1wIHRvIG1ha2UgcHJldHR5Lg0KCSAqCUBwYXJhbQkJc3RyaW5nCSRjdXN0b21Gb3JtYXQJQ3VzdG9tIHRpbWVzdGFtcCBmb3JtYXQuIEVsc2UgdXNlcyAkdGhpcy0+X3RpbWVzdGFtcCBkZWZpbmVkIGF0IHRvcCBvZiB0aGlzIGZpbGUuDQoJICoJQHJldHVybgkJc3RyaW5nCQkJCQlQcmV0dHkgaHVtYW4gdGltZXN0YW1wLg0KCSAqLw0KCWZ1bmN0aW9uIGRhdGUoICR0aW1lc3RhbXAsICRjdXN0b21Gb3JtYXQgPSAnJyApIHsNCgkJaWYgKCAnJyA9PSAkY3VzdG9tRm9ybWF0ICkgew0KCQkJcmV0dXJuIGRhdGUoICR0aGlzLT5fdGltZXN0YW1wLCAkdGltZXN0YW1wICk7DQoJCX0gZWxzZSB7DQoJCQlyZXR1cm4gZGF0ZSggJGN1c3RvbUZvcm1hdCwgJHRpbWVzdGFtcCApOw0KCQl9DQoJfSAvLyBFbmQgZGF0ZSgpLg0KCQ0KCQ0KCQ0KCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+bG9jYWxpemVfdGltZSgpDQoJICoJDQoJICoJTG9jYWxpemVzIHRpbWUgZm9yIHRoZSBjdXJyZW50IHVzZXIgZm9yIGRpc3BsYXkuDQoJICoJDQoJICoJQHBhcmFtCQlpbnQJCSR0aW1lc3RhbXAJCVRpbWVzdGFtcCB0byByZW1vdmUgdGltZSBvZmZzZXQgZm9yLg0KCSAqCUByZXR1cm4JCWludAkJCQkJCUNvcnJlY3RlZCB0aW1lc3RhbXAuDQoJICovDQoJZnVuY3Rpb24gbG9jYWxpemVfdGltZSggJHRpbWVzdGFtcCApIHsNCgkJaWYgKCBmdW5jdGlvbl9leGlzdHMoICdnZXRfb3B0aW9uJyApICkgew0KCQkJJGdtdF9vZmZzZXQgPSBnZXRfb3B0aW9uKCAnZ210X29mZnNldCcgKTsNCgkJfSBlbHNlIHsNCgkJCSRnbXRfb2Zmc2V0ID0gMDsNCgkJfQ0KCQlyZXR1cm4gJHRpbWVzdGFtcCArICggJGdtdF9vZmZzZXQgKiAzNjAwICk7DQoJfSAvLyBFbmQgbG9jYWxpemVfdGltZSgpLg0KCQ0KCQ0KCQ0KCS8qCXBsdWdpbmJ1ZGR5X2Zvcm1hdC0+dW5sb2NhbGl6ZV90aW1lKCkNCgkgKgkNCgkgKglSZW1vdmVzIHRoZSB0aW1lem9uZSBvZmZzZXQgb2YgYSBsb2NhbGl6ZWQgdGltZSBkaXNwbGF5IGZvciBhIHVzZXIuDQoJICoJDQoJICoJQHBhcmFtCQlpbnQJCSR0aW1lc3RhbXAJCVRpbWVzdGFtcCB0byByZW1vdmUgdGltZSBvZmZzZXQgZm9yLg0KCSAqCUByZXR1cm4JCWludAkJCQkJCUNvcnJlY3RlZCB0aW1lc3RhbXAuDQoJICovDQoJZnVuY3Rpb24gdW5sb2NhbGl6ZV90aW1lKCAkdGltZXN0YW1wICkgew0KCQlyZXR1cm4gJHRpbWVzdGFtcCAtICggZ2V0X29wdGlvbiggJ2dtdF9vZmZzZXQnICkgKiAzNjAwICk7DQoJfSAvLyBFbmQgdW5sb2NhbGl6ZV90aW1lKCkuDQoJDQoJDQoJDQoJLyoJcGx1Z2luYnVkZHlfZm9ybWF0LT50aW1lX2FnbygpDQoJICoJDQoJICoJQWNjZXB0cyBOT04tbG9jYWxpemVkIHRpbWVzdGFtcHMuDQoJICoJQHNlZSB0aW1lX2R1cmF0aW9uDQoJICoJDQoJICoJQHBhcmFtCQkNCgkgKglAcmV0dXJuCQkNCgkgKi8NCgkgLy8gVE9ETzogZGVwcmVjYXRlZD8NCglmdW5jdGlvbiB0aW1lX2FnbyggJHRpbWVzdGFtcCApIHsNCgkJcmV0dXJuIGh1bWFuX3RpbWVfZGlmZiggJHRpbWVzdGFtcCwgdGltZSgpICk7DQoJfSAvLyBFbmQgdGltZV9hZ28oKS4NCgkNCgkNCgkNCgkvKglwbHVnaW5idWRkeV9mb3JtYXQtPmR1cmF0aW9uKCkNCgkgKgkNCgkgKglSZXR1cm5zIGEgaHVtYW4gcmVhZGFibGUgZHVyYXRpb24uIFVzZWZ1bCBmb3IgdGltZSBhZ28gb3IgY291bnRkb3ducy4NCgkgKglFeDogNSBob3VycywgNCBtaW51dGVzLCA0MyBzZWNvbmRzLg0KCSAqCQ0KCSAqCUBwYXJhbQkJaW50CQkkc2Vjb25kcwkJTnVtYmVyIG9mIHNlY29uZHMgdG8gdHVybiBpbnRvIGEgaHVtYW4gZnJpZW5kbHkgcmVhZGFibGUgZm9ybWF0Lg0KCSAqCUByZXR1cm4JCQkJc3RyaW5nCQkJSHVtYW4gcmVhZGFibGUgc3RyaW5nIGR1cmF0aW9uLg0KCSAqLw0KCWZ1bmN0aW9uIHRpbWVfZHVyYXRpb24oICRzZWNvbmRzICkgew0KCQkkdGltZSA9IHRpbWUoKSAtICRzZWNvbmRzOw0KCQkNCgkJJHBlcmlvZHMgPSBhcnJheShfXygnc2Vjb25kJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJCQkgX18oJ21pbnV0ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLA0KCQkJCQkJIF9fKCdob3VyJywgICAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQkJCSBfXygnZGF5JywgCSAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJCQkgX18oJ3dlZWsnLCAgICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLA0KCQkJCQkJIF9fKCdtb250aCcsICAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQkJCSBfXygneWVhcicsICAgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJCQkgX18oJ2RlY2FkZScuICdMSU9OJyApDQoJCQkJCQkgKTsNCgkJJGxlbmd0aHMgPSBhcnJheSgnNjAnLCc2MCcsJzI0JywnNycsJzQuMzUnLCcxMicsJzEwJyk7DQoJCQ0KCQkkbm93ID0gdGltZSgpOw0KCQkNCgkJJGRpZmZlcmVuY2UgPSAkbm93IC0gJHRpbWU7DQoJCSR0ZW5zZSA9IF9fKCdhZ28nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsNCgkJDQoJCQ0KCQlmb3IoJGogPSAwOyAkZGlmZmVyZW5jZSA+PSAkbGVuZ3Roc1skal0gJiYgJGogPCBjb3VudCgkbGVuZ3RocyktMTsgJGorKykgew0KCQkJJGRpZmZlcmVuY2UgLz0gJGxlbmd0aHNbJGpdOw0KCQl9DQoJCQ0KCQkkZGlmZmVyZW5jZSA9IHJvdW5kKCRkaWZmZXJlbmNlKTsNCgkJDQoJCWlmKCRkaWZmZXJlbmNlICE9IDEpIHsNCgkJCSRwZXJpb2RzWyRqXS49ICJzIjsNCgkJfQ0KCQkNCgkJcmV0dXJuICIkZGlmZmVyZW5jZSAkcGVyaW9kc1skal0iOw0KCX0gLy8gRW5kIGR1cmF0aW9uKCkuDQoJDQoJDQoJDQoJLyoJcHJldHRpZnkoKQ0KCSAqCQ0KCSAqCVRha2VzIGEgc3RyaW5nIGFuZCByZXR1cm5zIGEgbW9yZSBwcmV0dHkgdmVyc2lvbi4gTG9va3MgaW4gYW4gYXJyYXkgZm9yIGEga2V5IG1hdGNoaW5nIHRoZSBzdHJpbmcuDQoJICoJUmV0dXJucyB0aGUgYXNzb2NpYXRlZCB2YWx1ZS4gUmV0dXJucyBvcmlnaW5hbCB2YWx1ZSBpZiBubyBwcmV0dHkgcmVwbGFjZXIgaXMgZm91bmQuDQoJICoJRXg6DQoJICoJCXByZXR0aWZ5KCAnZG9nJywgYXJyYXkoICdjYXRzJyA9PiAnQ2F0cycsICdkb2cnID0+ICdEb2cnICkgKTsNCgkgKgkJUmV0dXJuczogRG9nDQoJICoJDQoJICoJQHBhcmFtCQlzdHJpbmcJCSR2YWx1ZQkJCVZhbHVlIHRvIGJlIHJlcGxhY2VkIHdpdGggYSBwcmV0dHkgdmVyc2lvbi4NCgkgKglAcGFyYW0JCWFycmF5CQkkcmVwbGFjZW1lbnRzCUFycmF5IG9mOiB2YWx1ZSB0byBsb29rIGZvciA9PiB2YWx1ZSB0byByZXBsYWNlIHdpdGguDQoJICoJQHJldHVybgkJc3RyaW5nCQkJCQkJUHJldHR5IHZlcnNpb24gdGhhdCByZXBsYWNlZCAkdmFsdWUuIFJldHVybnMgb3JpZ2luYWwgJHZhbHVlIGlmIG5vdCBmb3VuZCBpbiAkcmVwbGFjZW1lbnRzIGtleXMuDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIHByZXR0aWZ5KCAkdmFsdWUsICRyZXBsYWNlbWVudHMgKSB7DQoJCQ0KCQlpZiAoIGlzc2V0KCAkcmVwbGFjZW1lbnRzWyR2YWx1ZV0gKSApIHsgLy8gRm91bmQgcmVwbGFjZW1lbnQuDQoJCQlyZXR1cm4gJHJlcGxhY2VtZW50c1skdmFsdWVdOw0KCQl9IGVsc2UgeyAvLyBObyByZXBsYWNlbWVudDsgcmV0dXJuIG9yaWdpbmFsIHZhbHVlLg0KCQkJcmV0dXJuICR2YWx1ZTsNCgkJfQ0KCQkNCgl9IC8vIEVuZCBwcmV0dGlmeSgpOw0KCQ0KCQ0KCQ0KCS8qIG11bHRpX2ltcGxvZGUoKQ0KCSAqDQoJICogRGVlcCByZWN1cnNpdmUgaW1wbG9zaW9uLg0KCSAqDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIG11bHRpX2ltcGxvZGUoJGFycmF5LCAkZ2x1ZSkgew0KCSAgICAkcmV0ID0gJyc7DQoNCgkgICAgZm9yZWFjaCAoJGFycmF5IGFzICRpdGVtKSB7DQoJICAgICAgICBpZiAoaXNfYXJyYXkoJGl0ZW0pKSB7DQoJICAgICAgICAgICAgJHJldCAuPSAkdGhpcy0+bXVsdGlfaW1wbG9kZSgkaXRlbSwgJGdsdWUpIC4gJGdsdWU7DQoJICAgICAgICB9IGVsc2Ugew0KCSAgICAgICAgICAgICRyZXQgLj0gJGl0ZW0gLiAkZ2x1ZTsNCgkgICAgICAgIH0NCgkgICAgfQ0KDQoJICAgICRyZXQgPSBzdWJzdHIoJHJldCwgMCwgMC1zdHJsZW4oJGdsdWUpKTsNCg0KCSAgICByZXR1cm4gJHJldDsNCgl9IC8vIEVuZCBtdWx0aV9pbXBsb2RlKCkuDQoJDQoJDQoJDQp9IC8vIEVuZCBjbGFzcyBwbHVnaW5idWRkeV9zZXR0aW5ncy4NCg0K
###PACKDATA,FILE_END,/pluginbuddy/classes/format.php,importbuddy/pluginbuddy/classes/format.php
###PACKDATA,FILE_START,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/pluginbuddy/classes/index.php,importbuddy/pluginbuddy/classes/index.php
###PACKDATA,FILE_START,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php

###PACKDATA,FILE_END,/pluginbuddy/classes/settings.php,importbuddy/pluginbuddy/classes/settings.php
###PACKDATA,FILE_START,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php

###PACKDATA,FILE_END,/pluginbuddy/classes/ui.php,importbuddy/pluginbuddy/classes/ui.php
###PACKDATA,FILE_START,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/pluginbuddy/css/index.php,importbuddy/pluginbuddy/css/index.php
###PACKDATA,FILE_START,/pluginbuddy/css/jQuery-ui-1.11.2.css,importbuddy/pluginbuddy/css/jQuery-ui-1.11.2.css
LnVpLXRvb2x0aXAgew0KCXBhZGRpbmc6IDhweDsNCglwb3NpdGlvbjogYWJzb2x1dGU7DQoJei1pbmRleDogOTk5OTsNCgltYXgtd2lkdGg6IDMwMHB4Ow0KCS13ZWJraXQtYm94LXNoYWRvdzogMCAwIDVweCAjYWFhOw0KCWJveC1zaGFkb3c6IDAgMCA1cHggI2FhYTsNCgl3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7DQp9DQpib2R5IC51aS10b29sdGlwIHsNCglib3JkZXItd2lkdGg6IDJweDsNCn0NCi51aS13aWRnZXQgew0KCXBhZGRpbmc6IDEwcHg7DQoJbGluZS1oZWlnaHQ6IDEuNmVtOw0KfQ0KLnVpLXdpZGdldCAudWktd2lkZ2V0IHsNCglmb250LXNpemU6IDFlbTsNCn0NCi51aS13aWRnZXQtY29udGVudCB7DQoJYm9yZGVyOiAxcHggc29saWQgI2FhYWFhYTsNCgliYWNrZ3JvdW5kOiAjZmZmZmZmOw0KCWNvbG9yOiAjMjIyMjIyOw0KfQ0K
###PACKDATA,FILE_END,/pluginbuddy/css/jQuery-ui-1.11.2.css,importbuddy/pluginbuddy/css/jQuery-ui-1.11.2.css
###PACKDATA,FILE_START,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
Lm1pbmlDb2xvcnMtdHJpZ2dlciB7DQoJaGVpZ2h0OiAyMnB4Ow0KCXdpZHRoOiAyMnB4Ow0KCXZlcnRpY2FsLWFsaWduOiBtaWRkbGU7DQoJbWFyZ2luOiAwIC4yNWVtOw0KCWRpc3BsYXk6IGlubGluZS1ibG9jazsNCglvdXRsaW5lOiBub25lOw0KfQ0KDQoubWluaUNvbG9ycy1zZWxlY3RvciB7DQoJcG9zaXRpb246IGFic29sdXRlOw0KCXdpZHRoOiAxNzVweDsNCgloZWlnaHQ6IDE1MHB4Ow0KCWJhY2tncm91bmQ6ICNGRkY7DQoJYm9yZGVyOiBzb2xpZCAxcHggI0JCQjsNCgktbW96LWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAuMjUpOw0KCS13ZWJraXQtYm94LXNoYWRvdzogMCAwIDZweCByZ2JhKDAsIDAsIDAsIC4yNSk7DQoJYm94LXNoYWRvdzogMCAwIDZweCByZ2JhKDAsIDAsIDAsIC4yNSk7DQoJLW1vei1ib3JkZXItcmFkaXVzOiA1cHg7DQoJLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1cHg7DQoJYm9yZGVyLXJhZGl1czogNXB4Ow0KCXBhZGRpbmc6IDVweDsNCgl6LWluZGV4OiA5OTk5OTk7DQp9DQoNCi5taW5pQ29sb3JzLXNlbGVjdG9yLmJsYWNrIHsNCgliYWNrZ3JvdW5kOiAjMDAwOw0KCWJvcmRlci1jb2xvcjogIzAwMDsNCn0NCg0KLm1pbmlDb2xvcnMtY29sb3JzIHsNCglwb3NpdGlvbjogYWJzb2x1dGU7DQoJdG9wOiA1cHg7DQoJbGVmdDogNXB4Ow0KCXdpZHRoOiAxNTBweDsNCgloZWlnaHQ6IDE1MHB4Ow0KCWN1cnNvcjogY3Jvc3NoYWlyOw0KfQ0KDQoubWluaUNvbG9ycy1odWVzIHsNCglwb3NpdGlvbjogYWJzb2x1dGU7DQoJdG9wOiA1cHg7DQoJbGVmdDogMTYwcHg7DQoJd2lkdGg6IDIwcHg7DQoJaGVpZ2h0OiAxNTBweDsNCgljdXJzb3I6IGNyb3NzaGFpcjsNCn0NCg0KLm1pbmlDb2xvcnMtY29sb3JQaWNrZXIgew0KCXBvc2l0aW9uOiBhYnNvbHV0ZTsNCgl3aWR0aDogMTFweDsNCgloZWlnaHQ6IDExcHg7DQp9DQoNCi5taW5pQ29sb3JzLWh1ZVBpY2tlciB7DQoJcG9zaXRpb246IGFic29sdXRlOw0KCWxlZnQ6IC0zcHg7DQoJd2lkdGg6IDI2cHg7DQoJaGVpZ2h0OiAzcHg7DQp9
###PACKDATA,FILE_END,/pluginbuddy/css/jquery.miniColors.css,importbuddy/pluginbuddy/css/jquery.miniColors.css
###PACKDATA,FILE_START,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAYCAYAAADzoH0MAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEgAACxIB0t1+/AAAAAd0SU1FB9oHHRIvI8D7+LoAAALwSURBVDjLrZTNa11FGMZ/78ycnPvVNG3QlqTxkiuYxaUFQVMoLqqCilD6H0gFF4W4EbdduHDbnbisIIiCtOBKs9GNVKziouoiFmOTtOKtJNE093tmXhdzqpeeuNJZznmf33mfmXceUVUmlgEqwHGgBZwo9u8A68BvwACIDwRuQixADhwDTgLL71/ffArglTOPfQvUAZ2AKID76t3XFARjLa46TX12num5JdbvZ3xysw5Ay996oXVozN6va3S37+L7e8QQAMUpwpln22ArkB+F2gK7oymufOfxhb0rtxpcfskxd+Iw9LZguANhwPUvfsTFKCCGzz/9gaMLS9SPVXlnbYbtXva3t+2e8tZqj9eX/qDb6bCztcZzLz5BjIIJGECwLqN9foXVYZvb3YyH1+1uxuqwTfv8CtZlgBAwmKAGUNSPALh4dpGrK6dLgKsrp7l4dhGgqFWCGpxXAxrxox4+KlZApKRHVVGFoIof9ZJGDc5JBDG4qRrOCHKQGhARREAU3FQtaST+Dx1EbHEGY3xQMGBMmRAVYlR8TLWgRCzOR5tm2GgCAO6ADqImsQ+KManOR4vrDCsAVOs5Wzt9arnlUMWVAHt9z/2BpzcMVOs5AJ1h5cEcgLGOUYioKj7EEsAX30YhYmz6QcBgxlEAwU1VCitC0LKFoP+cTaoVxlFwXtMoZ9U6QdKT/LcOBDACtloHMXgVjBMFjYz7XaKmN+qsKQGcNWhxG+N+FzTiRP97BwmAYLOcKMKHX9/hxi+7JcAbH33P8uIRXj51HJvlgCQLCaBoDMysX+PCwiat6VACtKYDFxY2mVm/hsYUJl4FFxTQyMkn5yFvQK3BpdmMNz/z7PaT+EgVLj2fM5sbmGnA3DyEAUHBRRXe/vhPrN2n0RjwyKNjms0m55qGD9bStZ1rKj9tDtnY2OD3e/fY398nhAAIMpHKMpHIp4Dl977ceBrg1Wea3wA3gJsPh6ocEOvVIpkfB+aL/bvAz0AH6E/G+l/J23lk4gYAJAAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/draghandle.png,importbuddy/pluginbuddy/images/draghandle.png
###PACKDATA,FILE_START,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAITSURBVBgZpcHLThNhGIDh9/vn7/RApwc5VCmFWBPi1mvwAlx7BW69Afeu3bozcSE7E02ILjCRhRrds8AEbKVS2gIdSjvTmf+TYqLu+zyiqszDMCf75PnnnVwhuNcLpwsXk8Q4BYeSOsWpkqrinJI6JXVK6lSRdDq9PO+19vb37XK13Hj0YLMUTVVyWY//Cf8IVwQEGEeJN47S1YdPo4npDpNmnDh5udOh1YsZRcph39EaONpnjs65oxsqvZEyTaHdj3n2psPpKDLBcuOOGUWpZDOG+q0S7751ObuYUisJGQ98T/Ct4Fuo5IX+MGZr95jKjRKLlSxXxFxOEmaaN4us1Upsf+1yGk5ZKhp8C74H5ZwwCGO2drssLZZo1ouIcs2MJikz1oPmapHlaoFXH1oMwphyTghyQj+MefG+RblcoLlaJG/5y4zGCTMikEwTctaxXq/w9kuXdm9Cuzfh9acujXqFwE8xmuBb/hCwl1GKAnGccDwIadQCfD9DZ5Dj494QA2w2qtQW84wmMZ1eyFI1QBVQwV5GiaZOpdsPaSwH5HMZULi9UmB9pYAAouBQbMHHrgQcnQwZV/KgTu1o8PMgipONu2t5KeaNiEkxgAiICDMCCFeEK5aNauAOfoXx8KR9ZOOLk8P7j7er2WBhwWY9sdbDeIJnwBjBWBBAhGsCmiZxPD4/7Z98b/0QVWUehjkZ5vQb/Un5e/DIsVsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/email.png,importbuddy/pluginbuddy/images/email.png
###PACKDATA,FILE_START,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAJFSURBVBgZBcHda5V1AADg5/d733Oc7tjOaNs5GC6KdrEwmpPRxG7spoKghOim7oK8y0MIEQRL+geGEIQ3UXQvSJ8IafZxUbjQhRDZoU60iYsSc9t5v87b84TsVe3mrBWpHoCICIAIACixYTUfOJM2Z62YO97TOULSIKaEQAyESAzEgISAgLpi48de87MLUqmezhGyhO4SCW7f4O81YiSJiCQIkbqmNcXMIjMXeilIGsQxDp8AnKDY5teL3PyU6h4CdY3Av7cYu58R0QghZWeT9fP0v2V7i8Y4j77As2c5sAwIFAXDgjInJxURAzub/PwxMZBGphZYeIWJWZ44xdo5bl4kK8kzioohUUREd4kXP+Kpd3nkee72+epNBleAxdfoLJBlDEuKkpxoBAkBjXGm53n8ZZ45S/shrr7P75eBo6eo9zAsKCqGRBEB/1zj89e5eo7tLRr7ePJtWg9wZZV7t2i2OPQcw5JiRE4UESN1ZPc2g0tceos/LtPYx9HTaPDNe8Dhl9gtyStyUiMIJDXLp2m0GHzN2gdMzdPq0F3k+pcc/4+x/UwepKzIiSDWTB/iwBLT8xw8xt07rJ8HHj7GbkX/B+DBxyhrciIQ2N2i2AG2fiPL+OsXoNVlWPDnDaC5l6qiJJWjLlHxxRs0JhhcIyvp/8SHJylKdiu++4Tr31NW7B8nkrwzp627d9nkHM0Wsea+GSY6tDvESEyY6TIxyZ4GSUp/nTubqyF7WrvZtaKrZ4QSQ+TIMUSJHCVypGhaHW448z+h1tLAgvKk7gAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/feed.png,importbuddy/pluginbuddy/images/feed.png
###PACKDATA,FILE_START,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/pluginbuddy/images/index.php,importbuddy/pluginbuddy/images/index.php
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89+bN/rXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz/SMBAPh+PDwrIsAHvgABeNMLCADATZvAMByH/w/qQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf+bTAICd+Jl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA/g88wAAKCRFRHgg/P9eM4Ors7ONo62Dl8t6r8G/yJiYuP+5c+rcEAAAOF0ftH+LC+zGoA7BoBt/qIl7gRoXgugdfeLZrIPQLUAoOnaV/Nw+H48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl/AV/1s+X48/Pf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H/LcL//wd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s+wM+3zUAsGo+AXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93/+8//UegJQCAZkmScQAAXkQkLlTKsz/HCAAARKCBKrBBG/TBGCzABhzBBdzBC/xgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD/phCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8+Q8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8+xdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR+cQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI+ksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG+Qh8lsKnWJAcaT4U+IoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr+h0uhHdlR5Ol9BX0svpR+iX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK+YTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI+pXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q/pH5Z/YkGWcNMw09DpFGgsV/jvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY/R27iz2qqaE5QzNKM1ezUvOUZj8H45hx+Jx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4/OBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up+6Ynr5egJ5Mb6feeb3n+hx9L/1U/W36p/VHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm+eb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw+6TvZN9un2N/T0HDYfZDqsdWh1+c7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc+Lpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26/uNu5p7ofcn8w0nymeWTNz0MPIQ+BR5dE/C5+VMGvfrH5PQ0+BZ7XnIy9jL5FXrdewt6V3qvdh7xc+9j5yn+M+4zw33jLeWV/MN8C3yLfLT8Nvnl+F30N/I/9k/3r/0QCngCUBZwOJgUGBWwL7+Hp8Ib+OPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo+qi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt/87fOH4p3iC+N7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi/RNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z+pn5mZ2y6xlhbL+xW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a/zYnKOZarnivN7cyzytuQN5zvn//tEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1+1dT1gvWd+1YfqGnRs+FYmKrhTbF5cVf9go3HjlG4dvyr+Z3JS0qavEuWTPZtJm6ebeLZ5bDpaql+aXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO/PLi8ZafJzs07P1SkVPRU+lQ27tLdtWHX+G7R7ht7vPY07NXbW7z3/T7JvttVAVVN1WbVZftJ+7P3P66Jqun4lvttXa1ObXHtxwPSA/0HIw6217nU1R3SPVRSj9Yr60cOxx++/p3vdy0NNg1VjZzG4iNwRHnk6fcJ3/ceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w+0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb++6EHTh0kX/i+c7vDvOXPK4dPKy2+UTV7hXmq86X23qdOo8/pPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb/1tWeOT3dvfN6b/fF9/XfFt1+cif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v+3Njv3H9qwHeg89HcR/cGhYPP/pH1jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAAAgY0hSTQAAeiUAAICDAAD5/wAAgOkAAHUwAADqYAAAOpgAABdvkl/FRgAAAktJREFUeNp0k01IVFEUx3/3vfvmzTjKmKNp2ARiioG4C8IWJURE5EYXgxu3UotqVcvAtlG0cVGk0FLBoE3QStpUCy2SCgwiUJNxPswZdb7ee6fFvBmdyf5w4Z57Pvif/7lHxeNxG2gFwoDBIYR6qCN3DzgAdjQQmbn7aikcLA0oKyYgCIJtK0Q1AQoleYpFF4UCFFJeV4WS3ph6PH5eA6GAdrvNjjuY7bcUCEoJu04nq5s/EYRzXTHa7Z1Ksijc9HOC249OA03ap61E97jK7jerHGeXU8wuRxGBsUGP6ZGBWh9i9bqACRi62q9Isa7hJx9/s57LA5BaCXD/YhfhgC+DV6jF1UTTZr1ikdDh3bYgZB1qaB6JNRo1/vWnjACzo71MDEa50dfK/HgfSlV8jfPQDaPi5ustVjNphmPN9LdVaDxb2WZs4QdDbVHeTJ6pi9eNZEZ6DN5tlln4toOhMr5AirBV8VUejLosAXDLWRMnyb3hIHPXbZq1hSfgCQSNADNXQ9wbDoGTxHOy1QqigVKhpLetxMOWYmYOiwLXYovO2VZXf06GAaG7ZZ8L7XnXW7tilr0AlDdUvmglgIIGcpupyNypaHZCJG0pxH3/YWp+L/fgNvSeAIUqbOx8fTv9NDKQjQvKVCpY3kq3LAJ7Kh6Pm0CTvwsm4AAdS0OTSwmnIwrQqZPpy19eXgJSvm4usA8cVI2cf2qjT5Y6bUyn8pFKJwPAHpBonJrB8TgIeplPVSMgu9/97fsH+j8FsqNrL8aBZt/eB3aPC/w7AI6b1V5KLAy/AAAAAElFTkSuQmCC
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy.png,importbuddy/pluginbuddy/images/pluginbuddy.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB7klEQVR42oWRT4gSURzHZ9u9tKmHos4WBB0VscPSEuEloot2yEsHIRE8hEIHQbBUEFSQQVBQ0EMHRRAvoh78OySMBMqSYKh7URDZg6mYLrK6r28DbjPTxn7gc3nz+7z3Zoa6jmq1+gi+hK/hE3iLuolisfgC0t9At9v90e/3u01QKpVqhULhzX/DXC5nZBiGnc1mUyJitVr9ajQazXQ6/RGjwltkMpnn5XK5sdlsLnbBdrslfC4BNjiJRCLvkexfxYlEIjCZTH7yh7PZLFksFuIbnKdSKUYul9/nwlgs9gDXYYmIaDRK4vE4GY/HgvVarfbdaDS+RXpAhUKh40ql0hbHwWCQ+P1+EggESLv993Gr1To1mUyfEEspDBzl8/l/Yq/XS1wuFyc2v1pnWfZUr9d7EN+j3G63FLvXLwE/djqdxOFwcKfySSaTLbVa/YGL/2Cz2T73er0z/pDP5yODwUAQjkajqcFgyCHRwDtcbLFYFDipPp/Pz3eDy+VSEK7X6wu8CotT/UgeC34XvuA7u91e73Q6Z0TEcDicejyehkaj+YLRZ1ACBezpdLojfAzabDYzNE03w+HwidVq/arVarMKhcKHmWN4F+5BMdzioUQikatUKp1SqTTIZLJXWHsKH0LpLryJfXgbHsKD66Lfk7TS2QhfFGsAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_play.png,importbuddy/pluginbuddy/images/pluginbuddy_play.png
###PACKDATA,FILE_START,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAB/ElEQVR42n2RPYgaQRiG585rclGLhKQ2gYOUipjiyBGCTQhpNEVsrhAigsWhkEKwSEQQjCBroSBiYQpFEBv/Cn+XCLsElOMCBvUaFYWARoXgKSc3eVlQ9jY/LzwwzHzPzDczJJPJCOTzeVIqlQRqtdpj8BK8Bk/AfrFYJOl0mogjlV8A5ivS6XS+93q9ThMpl8t1yG/+J1tYluXm8/mMSrJcLn/xPN+E/B7KvlR+XqlU+M1mc03/kRsEG5xHIpF30GSCHIvFSCKRCEyn05/bwsFgQLPZLI3H4xQ3EHdwlUqlWJVK9WArP0Q7HBUll8sJTCYTGo1G6Xg83q3V6/ULi8XyFuoBCYVCJ9Vq9ZtYXq1WdDgcChsEg0G6WCx2a61W69JqtX6ArCB+v/+4UChAvhWhXWxM+/0+FYfjuEuTyeSFfJ94PB5FIBBo3CCiGqFVdESlSSaTLZ1Od7aVidPp/Njtdn+Ii/Bt1OVy3RJHo9HMbDbnIerBXWK32wlQu93uBu52JS7GD+zG6/X62ufzcTjVD/EIyLYywQue4qRGu93edSD6upnX6+X1ev1nSM+AnEiyZzQaj/EYjM1mYxmGaYbD4XOHw/HFYDBk1Wr1J9ScgHtgD0gjTB7K5XKVVqs1ajQas1KpfIW5p+ARUEjEPwOZIDJwBxyCg79JvwFn8/sITKnYXQAAAABJRU5ErkJggg==
###PACKDATA,FILE_END,/pluginbuddy/images/pluginbuddy_tip.png,importbuddy/pluginbuddy/images/pluginbuddy_tip.png
###PACKDATA,FILE_START,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
R0lGODlhLwA9ALMAAP//////AMbGxgDXAP8AAABLAL0AAFkAAAAAAP///wAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQJBQAJACwKAA4AHAAqAAAEzTAlNKm8OGtJ7f5fN2FIWYKZ2JVC25rhZVqmC6e0TApsH+c7l+3HSbUIAiRPoyoGhUvcaZQKIKxYT0onnU2ZTqlhfNuGL4UrYmxQb7TfwqDAy0ZJb4R8joDqZ2cZe3w2cgUyWhqDcwWNe4coaAOTlJWUkJGLlpWYKJqbk50gn6CiH6SbphuolqqKoKmRkrChsrO0rqu0tbYSrLkhpGm9OpqHibIWjo1cvch4xM/NydS20tDVkdfYKNscXyFlYCJEVGbkb0XPOddA6d7cFxEAIfkECRQACQAsCAAJABwAKgAABM0wJTSpvDhrSe3+XzdhSFmCmdiVQtua4WVapguntEwKbB/nO5ftx0m1CAIkT6MqBoVL3GmUCiCsWE9KJ51NmU6pYXzbhi+HK2JsUG+03wPhwMtGSW+EfI6A6mdnGXt8NnIHMloag3MHjXuHKGgEk5SVlJCRi5aVmCiam5OdIJ+goh+km6YbqJaqiqCpkZKwobKztK6rtLW2Eqy5IaRpvTqah4myFo6NXL3IeMTPzcnUttLQ1ZHX2CjbHF8hZWAiRFRm5G9FzznXQOne3BcRACH5BAkFAAkALAkADAAcACoAAATNMCU0qbw4a0nt/l83YUhZgpnYlULbmuFlWqYLp7RMCmwf5zuX7cdJtQgCJE+jKgaFS9xplAogrFhPSiedTZlOqWF824YvhStibFBvtN/CoMDLRklvhHyOgOpnZxl7fDZyBTJaGoNzBY17hyhoA5OUlZSQkYuWlZgompuTnSCfoKIfpJumG6iWqoqgqZGSsKGys7Suq7S1thKsuSGkab06moeJshaOjVy9yHjEz83J1LbS0NWR19go2xxfIWVgIkRUZuRvRc8510Dp3twXEQAh+QQJFAAJACwIABIAIAAoAAAExBClJKe9OGtZUdUg6I1hGXoZN3Lm9bmIIMuoqb7TOJNibuEUgUcYA/4oGFxstisBlTKCQCoUrV5YZjP5MXavvNwz9QsgzOiO8SQ+u1FrZ+JQXBFboAPhoKXhNXp7dDsHdH8YgQSChYEHhxeJipKSjo9zk5iTlYeRmZSWnZ57oKKYm3+hnqd4qZmrLa2mlpelo7Oxiq+stba3pbp/CKmGsz6dlXE2E4yFLrPJPpbQSNIt02TKj2EbK3gka3DRJyzWweJyJREAOw==
###PACKDATA,FILE_END,/pluginbuddy/images/rawr.gif,importbuddy/pluginbuddy/images/rawr.gif
###PACKDATA,FILE_START,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsNCglqUXVlcnkoJy5iYWNrdXBidWRkeS1kb19idWxrX2FjdGlvbicpLmNsaWNrKCBmdW5jdGlvbigpew0KCQlpZiAoICEgY29uZmlybSggJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkbyB0aGlzIHRvIGFsbCBzZWxlY3RlZCBpdGVtcz8nICkgKSB7DQoJCQlyZXR1cm4gZmFsc2U7DQoJCX0NCgl9KTsNCgkNCgkNCgkNCglqUXVlcnkoJy5wYl9kZWJ1Z19zaG93JykuY2xpY2soZnVuY3Rpb24oZSkgew0KCQlqUXVlcnkodGhpcykuaGlkZSgpOw0KCQlqUXVlcnkodGhpcykucGFyZW50KCkuY2hpbGRyZW4oICcucGJfZGVidWdfaGlkZScpLnNob3coKTsNCgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNzcyggJ2Zsb2F0JywgJ2xlZnQnICk7DQoJCWpRdWVyeSh0aGlzKS5wYXJlbnQoKS5jc3MoICd3aWR0aCcsICc4MCUnICk7DQoJCWpRdWVyeSh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbiggJ2RpdicpLnNob3coKTsNCgl9KTsNCglqUXVlcnkoJy5wYl9kZWJ1Z19oaWRlJykuY2xpY2soZnVuY3Rpb24oZSkgew0KCQlqUXVlcnkodGhpcykuaGlkZSgpOw0KCQlqUXVlcnkodGhpcykucGFyZW50KCkuY2hpbGRyZW4oICcucGJfZGVidWdfc2hvdycpLnNob3coKTsNCgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNzcyggJ2Zsb2F0JywgJ3JpZ2h0JyApOw0KCQlqUXVlcnkodGhpcykucGFyZW50KCkuY3NzKCAnd2lkdGgnLCAnNDBweCcgKTsNCgkJalF1ZXJ5KHRoaXMpLnBhcmVudCgpLmNoaWxkcmVuKCAnZGl2JykuaGlkZSgpOw0KCX0pOw0KCQ0KCWpRdWVyeSggJy5hZHZhbmNlZC10b2dnbGUtdGl0bGUnICkuY2xpY2soZnVuY3Rpb24oKXsNCgkJY29udGFpbmVyV3JhcCA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCAnZm9ybScgKTsNCgkJdGl0bGVUb2dnbGUgPSBjb250YWluZXJXcmFwLmZpbmQoICcuYWR2YW5jZWQtdG9nZ2xlLXRpdGxlJyApOw0KCQlyaWdodEFycm93ID0gdGl0bGVUb2dnbGUuZmluZCggJy5kYXNoaWNvbnMtYXJyb3ctcmlnaHQnICk7DQoJCWlmICggcmlnaHRBcnJvdy5sZW5ndGggPiAwICkgew0KCQkJcmlnaHRBcnJvdy5yZW1vdmVDbGFzcyggJ2Rhc2hpY29ucy1hcnJvdy1yaWdodCcgKS5hZGRDbGFzcyggJ2Rhc2hpY29ucy1hcnJvdy1kb3duJyApOw0KCQl9IGVsc2Ugew0KCQkJdGl0bGVUb2dnbGUuZmluZCggJy5kYXNoaWNvbnMtYXJyb3ctZG93bicgKS5yZW1vdmVDbGFzcyggJ2Rhc2hpY29ucy1hcnJvdy1kb3duJyApLmFkZENsYXNzKCAnZGFzaGljb25zLWFycm93LXJpZ2h0JyApOw0KCQl9DQoJCWNvbnRhaW5lcldyYXAuZmluZCggJy5hZHZhbmNlZC10b2dnbGUnICkudG9nZ2xlKCk7DQoJfSk7DQoJDQoJDQoJalF1ZXJ5KCcucGx1Z2luYnVkZHlfdGlwJykudG9vbHRpcCgpOyAvLyBOb3cgdXNpbmcgalF1ZXJ5IFVJIHRvb2x0aXAuDQoJDQoJDQoJaWYgKHR5cGVvZiBqUXVlcnkudGFibGVEbkQgIT09ICd1bmRlZmluZWQnKSB7IC8vIElmIHRhYmxlRG5EIGZ1bmN0aW9uIGxvYWRlZC4NCgkJalF1ZXJ5KCcucGJfcmVvcmRlcicpLnRhYmxlRG5EKHsNCgkJCW9uRHJvcDogZnVuY3Rpb24odGJvZHksIHJvdykgew0KCQkJCXZhciBuZXdfb3JkZXIgPSBuZXcgQXJyYXkoKTsNCgkJCQl2YXIgcm93cyA9IHRib2R5LnJvd3M7DQoJCQkJZm9yICh2YXIgaT0wOyBpPHJvd3MubGVuZ3RoOyBpKyspIHsNCgkJCQkJbmV3X29yZGVyLnB1c2goIHJvd3NbaV0uaWQuc3Vic3RyaW5nKDExKSApOw0KCQkJCX0NCgkJCQluZXdfb3JkZXIgPSBuZXdfb3JkZXIuam9pbiggJywnICk7DQoJCQkJalF1ZXJ5KCAnI3BiX29yZGVyJyApLnZhbCggbmV3X29yZGVyICkNCgkJCX0sDQoJCQlkcmFnSGFuZGxlOiAicGJfZHJhZ2hhbmRsZSINCgkJfSk7DQoJfQ0KCQ0KCWpRdWVyeSgnLnBiX3RvZ2dsZScpLmNsaWNrKGZ1bmN0aW9uKGUpIHsNCgkJalF1ZXJ5KCAnI3BiX3RvZ2dsZS0nICsgalF1ZXJ5KHRoaXMpLmF0dHIoJ2lkJykgKS5zbGlkZVRvZ2dsZSgpOw0KCX0pOw0KCQ0KCQ0KfSk7
###PACKDATA,FILE_END,/pluginbuddy/js/admin.js,importbuddy/pluginbuddy/js/admin.js
###PACKDATA,FILE_START,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/pluginbuddy/js/index.php,importbuddy/pluginbuddy/js/index.php
###PACKDATA,FILE_START,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js

###PACKDATA,FILE_END,/pluginbuddy/js/jquery.miniColors.min.js,importbuddy/pluginbuddy/js/jquery.miniColors.min.js
###PACKDATA,FILE_START,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
alF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsNCgkNCgkvLyBDaGFuZ2UgdGFiIG9uIGNsaWNrLg0KCWpRdWVyeSggJy5iYWNrdXBidWRkeS10YWJzLXdyYXAgLm5hdi10YWJbaHJlZl49IiMiXScgKS5jbGljayggZnVuY3Rpb24oZSl7IC8qIGlnbm9yZXMgYW55IG5vbiBoYXNodGFnIGxpbmtzIHNpbmNlIHRoZXkgZ28gZGlyZWN0IHRvIGEgVVJMLi4uICovDQoJCWUucHJldmVudERlZmF1bHQoKTsNCgkJDQoJCS8vIEhpZGUgYWxsIHRhYiBibG9ja3MuDQoJCXRoaXNUYWJCbG9jayA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCAnLmJhY2t1cGJ1ZGR5LXRhYnMtd3JhcCcgKTsNCgkJdGhpc1RhYkJsb2NrLmZpbmQoICcuYmFja3VwYnVkZHktdGFiJyApLmhpZGUoKTsNCgkJDQoJCS8vIFVwZGF0ZSBzZWxlY3RlZCB0YWIuDQoJCXRoaXNUYWJCbG9jay5maW5kKCAnLm5hdi10YWItYWN0aXZlJyApLnJlbW92ZUNsYXNzKCAnbmF2LXRhYi1hY3RpdmUnICk7DQoJCWpRdWVyeSh0aGlzKS5hZGRDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOw0KCQkNCgkJLy8gU2hvdyB0aGUgY29ycmVjdCB0YWIgYmxvY2suDQoJCS8vdGFyZ2V0RGl2SUQgPSBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkuc3Vic3RyaW5nKDEpOw0KCQl0aGlzVGFiQmxvY2suZmluZCggalF1ZXJ5KHRoaXMpLmF0dHIoICdocmVmJyApICkuc2hvdygpOw0KCX0pOw0KCQ0KCS8vIENoYW5nZSB0YWIgb24gY2xpY2sgLS0gQUpBWCB2ZXJzaW9uLg0KCWpRdWVyeSggJy5iYWNrdXBidWRkeS10YWJzLXdyYXAgLm5hdi10YWJbaHJlZl49ImphdmFzY3JpcHQiXScgKS5jbGljayggZnVuY3Rpb24oZSl7IC8qIGlnbm9yZXMgYW55IG5vbiBoYXNodGFnIGxpbmtzIHNpbmNlIHRoZXkgZ28gZGlyZWN0IHRvIGEgVVJMLi4uICovDQoJCS8vIEhpZGUgYWxsIHRhYiBibG9ja3MuDQoJCXRoaXNUYWJCbG9jayA9IGpRdWVyeSh0aGlzKS5jbG9zZXN0KCAnLmJhY2t1cGJ1ZGR5LXRhYnMtd3JhcCcgKTsNCgkJdGhpc1RhYkJsb2NrLmZpbmQoICcuYmFja3VwYnVkZHktdGFiJyApLmhpZGUoKTsNCgkJDQoJCS8vIFVwZGF0ZSBzZWxlY3RlZCB0YWIuDQoJCXRoaXNUYWJCbG9jay5maW5kKCAnLm5hdi10YWItYWN0aXZlJyApLnJlbW92ZUNsYXNzKCAnbmF2LXRhYi1hY3RpdmUnICk7DQoJCWpRdWVyeSh0aGlzKS5hZGRDbGFzcyggJ25hdi10YWItYWN0aXZlJyApOw0KCQkNCgkJLy8gU2hvdyB0aGUgY29ycmVjdCB0YWIgYmxvY2suDQoJCS8vdGFyZ2V0RGl2SUQgPSBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICkuc3Vic3RyaW5nKDEpOw0KCQl0aGlzVGFiQmxvY2suZmluZCggalF1ZXJ5KHRoaXMpLmF0dHIoICdkYXRhLWFqYXgnICkgKS5zaG93KCk7DQoJfSk7DQoJDQoJLy8gQXV0by1kaXNwbGF5IHRoZSBjb3JyZWN0IHRhYiBvbiBsb2FkIGlmIHNwZWNpZnlpbmcgYSBub24tZGVmYXVsdC4NCglqUXVlcnkoICcubmF2LXRhYi1hY3RpdmUnICkuZWFjaCggZnVuY3Rpb24oKXsNCgkJalF1ZXJ5KHRoaXMpLmNsaWNrKCk7DQoJfSk7DQp9KTs=
###PACKDATA,FILE_END,/pluginbuddy/js/pb_tabs.js,importbuddy/pluginbuddy/js/pb_tabs.js
###PACKDATA,FILE_START,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js

###PACKDATA,FILE_END,/pluginbuddy/js/tablednd.js,importbuddy/pluginbuddy/js/tablednd.js
###PACKDATA,FILE_START,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
LyoNCiAqIGpRdWVyeSBUb29sdGlwIHBsdWdpbiAxLjMNCiAqDQogKiBodHRwOi8vYmFzc2lzdGFuY2UuZGUvanF1ZXJ5LXBsdWdpbnMvanF1ZXJ5LXBsdWdpbi10b29sdGlwLw0KICogaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9QbHVnaW5zL1Rvb2x0aXANCiAqDQogKiBDb3B5cmlnaHQgKGMpIDIwMDYgLSAyMDA4IErDtnJuIFphZWZmZXJlcg0KICoNCiAqICRJZDoganF1ZXJ5LnRvb2x0aXAuanMgNTc0MSAyMDA4LTA2LTIxIDE1OjIyOjE2WiBqb2Vybi56YWVmZmVyZXIgJA0KICogDQogKiBEdWFsIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgYW5kIEdQTCBsaWNlbnNlczoNCiAqICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHANCiAqICAgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2dwbC5odG1sDQogKi8NCiANCiANCiANCiANCiBpZiAoICd1bmRlZmluZWQnID09IHR5cGVvZiBqUXVlcnkuYnJvd3NlciApIHsNCglqUXVlcnkuYnJvd3Nlcj17fTsoZnVuY3Rpb24oKXtqUXVlcnkuYnJvd3Nlci5tc2llPWZhbHNlOw0KCWpRdWVyeS5icm93c2VyLnZlcnNpb249MDtpZihuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9NU0lFIChbMC05XSspXC4vKSl7DQoJalF1ZXJ5LmJyb3dzZXIubXNpZT10cnVlO2pRdWVyeS5icm93c2VyLnZlcnNpb249UmVnRXhwLiQxO319KSgpOw0KfQ0KIA0KIDsoZnVuY3Rpb24oJCl7dmFyIGhlbHBlcj17fSxjdXJyZW50LHRpdGxlLHRJRCxJRT0kLmJyb3dzZXIubXNpZSYmL01TSUVccyg1XC41fDZcLikvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksdHJhY2s9ZmFsc2U7JC50b29sdGlwPXtibG9ja2VkOmZhbHNlLGRlZmF1bHRzOntkZWxheToyMDAsZmFkZTpmYWxzZSxzaG93VVJMOnRydWUsZXh0cmFDbGFzczoiIix0b3A6MTUsbGVmdDoxNSxpZDoidG9vbHRpcCJ9LGJsb2NrOmZ1bmN0aW9uKCl7JC50b29sdGlwLmJsb2NrZWQ9ISQudG9vbHRpcC5ibG9ja2VkO319OyQuZm4uZXh0ZW5kKHt0b29sdGlwOmZ1bmN0aW9uKHNldHRpbmdzKXtzZXR0aW5ncz0kLmV4dGVuZCh7fSwkLnRvb2x0aXAuZGVmYXVsdHMsc2V0dGluZ3MpO2NyZWF0ZUhlbHBlcihzZXR0aW5ncyk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQuZGF0YSh0aGlzLCJ0b29sdGlwIixzZXR0aW5ncyk7dGhpcy50T3BhY2l0eT1oZWxwZXIucGFyZW50LmNzcygib3BhY2l0eSIpO3RoaXMudG9vbHRpcFRleHQ9dGhpcy50aXRsZTskKHRoaXMpLnJlbW92ZUF0dHIoInRpdGxlIik7dGhpcy5hbHQ9IiI7fSkubW91c2VvdmVyKHNhdmUpLm1vdXNlb3V0KGhpZGUpLmNsaWNrKGhpZGUpO30sZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpbWFnZT0kKHRoaXMpLmNzcygnYmFja2dyb3VuZEltYWdlJyk7aWYoaW1hZ2UubWF0Y2goL151cmxcKFsiJ10/KC4qXC5wbmcpWyInXT9cKSQvaSkpe2ltYWdlPVJlZ0V4cC4kMTskKHRoaXMpLmNzcyh7J2JhY2tncm91bmRJbWFnZSc6J25vbmUnLCdmaWx0ZXInOiJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihlbmFibGVkPXRydWUsIHNpemluZ01ldGhvZD1jcm9wLCBzcmM9JyIraW1hZ2UrIicpIn0pLmVhY2goZnVuY3Rpb24oKXt2YXIgcG9zaXRpb249JCh0aGlzKS5jc3MoJ3Bvc2l0aW9uJyk7aWYocG9zaXRpb24hPSdhYnNvbHV0ZScmJnBvc2l0aW9uIT0ncmVsYXRpdmUnKSQodGhpcykuY3NzKCdwb3NpdGlvbicsJ3JlbGF0aXZlJyk7fSk7fX0pO306ZnVuY3Rpb24oKXtyZXR1cm4gdGhpczt9LHVuZml4UE5HOklFP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcykuY3NzKHsnZmlsdGVyJzonJyxiYWNrZ3JvdW5kSW1hZ2U6Jyd9KTt9KTt9OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXM7fSxoaWRlV2hlbkVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpeyQodGhpcylbJCh0aGlzKS5odG1sKCk/InNob3ciOiJoaWRlIl0oKTt9KTt9LHVybDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHIoJ2hyZWYnKXx8dGhpcy5hdHRyKCdzcmMnKTt9fSk7ZnVuY3Rpb24gY3JlYXRlSGVscGVyKHNldHRpbmdzKXtpZihoZWxwZXIucGFyZW50KXJldHVybjtoZWxwZXIucGFyZW50PSQoJzxkaXYgaWQ9Iicrc2V0dGluZ3MuaWQrJyI+PGgzPjwvaDM+PGRpdiBjbGFzcz0iYm9keSI+PC9kaXY+PGRpdiBjbGFzcz0idXJsIj48L2Rpdj48L2Rpdj4nKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KS5oaWRlKCk7aWYoJC5mbi5iZ2lmcmFtZSloZWxwZXIucGFyZW50LmJnaWZyYW1lKCk7aGVscGVyLnRpdGxlPSQoJ2gzJyxoZWxwZXIucGFyZW50KTtoZWxwZXIuYm9keT0kKCdkaXYuYm9keScsaGVscGVyLnBhcmVudCk7aGVscGVyLnVybD0kKCdkaXYudXJsJyxoZWxwZXIucGFyZW50KTt9ZnVuY3Rpb24gc2V0dGluZ3MoZWxlbWVudCl7cmV0dXJuICQuZGF0YShlbGVtZW50LCJ0b29sdGlwIik7fWZ1bmN0aW9uIGhhbmRsZShldmVudCl7aWYoc2V0dGluZ3ModGhpcykuZGVsYXkpdElEPXNldFRpbWVvdXQoc2hvdyxzZXR0aW5ncyh0aGlzKS5kZWxheSk7ZWxzZQ0Kc2hvdygpO3RyYWNrPSEhc2V0dGluZ3ModGhpcykudHJhY2s7JChkb2N1bWVudC5ib2R5KS5iaW5kKCdtb3VzZW1vdmUnLHVwZGF0ZSk7dXBkYXRlKGV2ZW50KTt9ZnVuY3Rpb24gc2F2ZSgpe2lmKCQudG9vbHRpcC5ibG9ja2VkfHx0aGlzPT1jdXJyZW50fHwoIXRoaXMudG9vbHRpcFRleHQmJiFzZXR0aW5ncyh0aGlzKS5ib2R5SGFuZGxlcikpcmV0dXJuO2N1cnJlbnQ9dGhpczt0aXRsZT10aGlzLnRvb2x0aXBUZXh0O2lmKHNldHRpbmdzKHRoaXMpLmJvZHlIYW5kbGVyKXtoZWxwZXIudGl0bGUuaGlkZSgpO3ZhciBib2R5Q29udGVudD1zZXR0aW5ncyh0aGlzKS5ib2R5SGFuZGxlci5jYWxsKHRoaXMpO2lmKGJvZHlDb250ZW50Lm5vZGVUeXBlfHxib2R5Q29udGVudC5qcXVlcnkpe2hlbHBlci5ib2R5LmVtcHR5KCkuYXBwZW5kKGJvZHlDb250ZW50KX1lbHNle2hlbHBlci5ib2R5Lmh0bWwoYm9keUNvbnRlbnQpO31oZWxwZXIuYm9keS5zaG93KCk7fWVsc2UgaWYoc2V0dGluZ3ModGhpcykuc2hvd0JvZHkpe3ZhciBwYXJ0cz10aXRsZS5zcGxpdChzZXR0aW5ncyh0aGlzKS5zaG93Qm9keSk7aGVscGVyLnRpdGxlLmh0bWwocGFydHMuc2hpZnQoKSkuc2hvdygpO2hlbHBlci5ib2R5LmVtcHR5KCk7Zm9yKHZhciBpPTAscGFydDsocGFydD1wYXJ0c1tpXSk7aSsrKXtpZihpPjApaGVscGVyLmJvZHkuYXBwZW5kKCI8YnIvPiIpO2hlbHBlci5ib2R5LmFwcGVuZChwYXJ0KTt9aGVscGVyLmJvZHkuaGlkZVdoZW5FbXB0eSgpO31lbHNle2hlbHBlci50aXRsZS5odG1sKHRpdGxlKS5zaG93KCk7aGVscGVyLmJvZHkuaGlkZSgpO31pZihzZXR0aW5ncyh0aGlzKS5zaG93VVJMJiYkKHRoaXMpLnVybCgpKWhlbHBlci51cmwuaHRtbCgkKHRoaXMpLnVybCgpLnJlcGxhY2UoJ2h0dHA6Ly8nLCcnKSkuc2hvdygpO2Vsc2UNCmhlbHBlci51cmwuaGlkZSgpO2hlbHBlci5wYXJlbnQuYWRkQ2xhc3Moc2V0dGluZ3ModGhpcykuZXh0cmFDbGFzcyk7aWYoc2V0dGluZ3ModGhpcykuZml4UE5HKWhlbHBlci5wYXJlbnQuZml4UE5HKCk7aGFuZGxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9ZnVuY3Rpb24gc2hvdygpe3RJRD1udWxsO2lmKCghSUV8fCEkLmZuLmJnaWZyYW1lKSYmc2V0dGluZ3MoY3VycmVudCkuZmFkZSl7aWYoaGVscGVyLnBhcmVudC5pcygiOmFuaW1hdGVkIikpaGVscGVyLnBhcmVudC5zdG9wKCkuc2hvdygpLmZhZGVUbyhzZXR0aW5ncyhjdXJyZW50KS5mYWRlLGN1cnJlbnQudE9wYWNpdHkpO2Vsc2UNCmhlbHBlci5wYXJlbnQuaXMoJzp2aXNpYmxlJyk/aGVscGVyLnBhcmVudC5mYWRlVG8oc2V0dGluZ3MoY3VycmVudCkuZmFkZSxjdXJyZW50LnRPcGFjaXR5KTpoZWxwZXIucGFyZW50LmZhZGVJbihzZXR0aW5ncyhjdXJyZW50KS5mYWRlKTt9ZWxzZXtoZWxwZXIucGFyZW50LnNob3coKTt9dXBkYXRlKCk7fWZ1bmN0aW9uIHVwZGF0ZShldmVudCl7aWYoJC50b29sdGlwLmJsb2NrZWQpcmV0dXJuO2lmKGV2ZW50JiZldmVudC50YXJnZXQudGFnTmFtZT09Ik9QVElPTiIpe3JldHVybjt9aWYoIXRyYWNrJiZoZWxwZXIucGFyZW50LmlzKCI6dmlzaWJsZSIpKXskKGRvY3VtZW50LmJvZHkpLnVuYmluZCgnbW91c2Vtb3ZlJyx1cGRhdGUpfWlmKGN1cnJlbnQ9PW51bGwpeyQoZG9jdW1lbnQuYm9keSkudW5iaW5kKCdtb3VzZW1vdmUnLHVwZGF0ZSk7cmV0dXJuO31oZWxwZXIucGFyZW50LnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1yaWdodCIpLnJlbW92ZUNsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt2YXIgbGVmdD1oZWxwZXIucGFyZW50WzBdLm9mZnNldExlZnQ7dmFyIHRvcD1oZWxwZXIucGFyZW50WzBdLm9mZnNldFRvcDtpZihldmVudCl7bGVmdD1ldmVudC5wYWdlWCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O3RvcD1ldmVudC5wYWdlWStzZXR0aW5ncyhjdXJyZW50KS50b3A7dmFyIHJpZ2h0PSdhdXRvJztpZihzZXR0aW5ncyhjdXJyZW50KS5wb3NpdGlvbkxlZnQpe3JpZ2h0PSQod2luZG93KS53aWR0aCgpLWxlZnQ7bGVmdD0nYXV0byc7fWhlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQscmlnaHQ6cmlnaHQsdG9wOnRvcH0pO312YXIgdj12aWV3cG9ydCgpLGg9aGVscGVyLnBhcmVudFswXTtpZih2Lngrdi5jeDxoLm9mZnNldExlZnQraC5vZmZzZXRXaWR0aCl7bGVmdC09aC5vZmZzZXRXaWR0aCsyMCtzZXR0aW5ncyhjdXJyZW50KS5sZWZ0O2hlbHBlci5wYXJlbnQuY3NzKHtsZWZ0OmxlZnQrJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1yaWdodCIpO31pZih2Lnkrdi5jeTxoLm9mZnNldFRvcCtoLm9mZnNldEhlaWdodCl7dG9wLT1oLm9mZnNldEhlaWdodCsyMCtzZXR0aW5ncyhjdXJyZW50KS50b3A7aGVscGVyLnBhcmVudC5jc3Moe3RvcDp0b3ArJ3B4J30pLmFkZENsYXNzKCJ2aWV3cG9ydC1ib3R0b20iKTt9fWZ1bmN0aW9uIHZpZXdwb3J0KCl7cmV0dXJue3g6JCh3aW5kb3cpLnNjcm9sbExlZnQoKSx5OiQod2luZG93KS5zY3JvbGxUb3AoKSxjeDokKHdpbmRvdykud2lkdGgoKSxjeTokKHdpbmRvdykuaGVpZ2h0KCl9O31mdW5jdGlvbiBoaWRlKGV2ZW50KXtpZigkLnRvb2x0aXAuYmxvY2tlZClyZXR1cm47aWYodElEKWNsZWFyVGltZW91dCh0SUQpO2N1cnJlbnQ9bnVsbDt2YXIgdHNldHRpbmdzPXNldHRpbmdzKHRoaXMpO2Z1bmN0aW9uIGNvbXBsZXRlKCl7aGVscGVyLnBhcmVudC5yZW1vdmVDbGFzcyh0c2V0dGluZ3MuZXh0cmFDbGFzcykuaGlkZSgpLmNzcygib3BhY2l0eSIsIiIpO31pZigoIUlFfHwhJC5mbi5iZ2lmcmFtZSkmJnRzZXR0aW5ncy5mYWRlKXtpZihoZWxwZXIucGFyZW50LmlzKCc6YW5pbWF0ZWQnKSloZWxwZXIucGFyZW50LnN0b3AoKS5mYWRlVG8odHNldHRpbmdzLmZhZGUsMCxjb21wbGV0ZSk7ZWxzZQ0KaGVscGVyLnBhcmVudC5zdG9wKCkuZmFkZU91dCh0c2V0dGluZ3MuZmFkZSxjb21wbGV0ZSk7fWVsc2UNCmNvbXBsZXRlKCk7aWYoc2V0dGluZ3ModGhpcykuZml4UE5HKWhlbHBlci5wYXJlbnQudW5maXhQTkcoKTt9fSkoalF1ZXJ5KTsNCg==
###PACKDATA,FILE_END,/pluginbuddy/js/tooltip.js,importbuddy/pluginbuddy/js/tooltip.js
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
R0lGODlhCwALAJECAAAAAP///////wAAACH5BAEAAAIALAAAAAALAAsAAAIflINoG+AeGFgGxEaXxVns2X2dh4CZJXBadDxQlihGAQA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/circle.gif,importbuddy/pluginbuddy/images/minicolors/circle.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png

###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/gradient.png,importbuddy/pluginbuddy/images/minicolors/gradient.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/index.php,importbuddy/pluginbuddy/images/minicolors/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/index.php,importbuddy/pluginbuddy/images/minicolors/index.php
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
R0lGODlhGgADAIAAAP///wAAACH/C1hNUCBEYXRhWE1QPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IE1hY2ludG9zaCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGODM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGOTM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjdBQzk3MkY2MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjdBQzk3MkY3MzRBRTExRTA4NTRDRkRFMTEwOTI0OTNEIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b19PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5uLe2tbSzsrGwr66trKuqqainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359fHt6eXh3dnV0c3JxcG9ubWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JBQD8+PTw7Ojk4NzY1NDMyMTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYFBAMCAQAAIfkEAAAAAAAsAAAAABoAAwAAAguEj6ka7Q+jW7SeAgA7
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/line.gif,importbuddy/pluginbuddy/images/minicolors/line.gif
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
iVBORw0KGgoAAAANSUhEUgAAABQAAACWCAIAAABRkz+JAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6N0FDOTcyRjQzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N0FDOTcyRjUzNEFFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3QUM5NzJGMjM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3QUM5NzJGMzM0QUUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PnzKFbcAAAcCSURBVHjanFnbcttGDMVZsbVlp0knb52+9/8/qh/QNrElpxVR7B3YxVJOlExCUQviDhyA+POPTyfsoPhh5vQ/If2h8k3+ZwDyI1DvMN0obL/TG/FO4yeeH79WDuX5jI3oM5Eizg/XXPoT0s3yiHhSiD8RdiJ7VDMRAk3WDwgxPsbntOfpT4A6ytOBSPyh02F4Bso/XAQlsBKMROxnpR4XQqBf98PGAUlnPCuelJ5dlWxHy7W1f+RcxKbRYN1CnPmoi0YcnpNVtbawMmZzotu1yiI6nwufrsygKo0/1YeK2E/Fk01zLIIEKk7i+UgsnENXj6y2TYD8dO153pO1u2F1GLFRfn4chHN4jJyZfJvn82GMrejRfU86y5cw8KtWoEoZJoOFSPyYxA7KKzacMNm/PEKIQ+JcMtGm1BCVQYlTXaV0DiqMoNO4Kd8sL38j53OUGZOd5q/mgrOrHovCQw3pF9kWqnx1P2fOzbxBx7YNDMM/i00PFE69vmk7B1W6eIoEZM4xPK2EONSZtM6ROPQIYZtcNpN6egrxjoeA0PUE+R8MD+JdxL4SnZrx29Nh8pobZ1XCpFxvV24alxLG7JVh2xR2TsQX5mxr1rnIo4V6gUg/7Yl+e0vcYMXT9bt5qpTAeiBzppZT3d5syrFWuNklchbiQKqKsAoSnmtYfVrjHKDsVLU31rYtIN+JnK8SH6oVS6seUwAqtZUeSeydA3oCsS0n3RA89psktliLVVx7tV6naTNNJH7JOu+JGDVOJptn5NH9nM6In9HhhxtVbJu0+myvPEVfrWI8N3wYg2+vka+yBdPywlxHI0fOcEsfe+GhwljkE86mqvmfhRTR2rpyur1q1L8aL3LOMTCgoHaTFLYZjm1fvdTV4anTbbDJ9pJShBXu0dczpOipImJ/mTm44TFFiNzfvmTc5QIXT2BWyCNxttk3aq57Loy/t3+AG4MNFLZgCE7PyYVeSi8XWi6JBbJAnXqesnXKFqHrFEJsI5K1HdAh5bb/PIbuUPxYFT1YYLzRWSaPZVCvYrxE2P7AujzpMJ5doNM+5jOfTa43AGzEHqo/crETsH6e4DIvEtuYJpbFRLwqBvNXOzgoziuz0CR2Mxg9dujoVxMeG1W1mOj8dFB+Dr2WdIYD6t/ncSHmOg554q3URmxWSWd4R/nenUQMAxB5crXr9ogrkMQO/P1Gi929+hmr4WmN6XbtZ1fIVdhy9vND0tnpRuoazjiXxU6uCjhqbq44RmxMYvNhbHc/BzoCB3PO7UXnWkiPbcvT5uLGifNJKTYHKRaRc2s6Y3Iv1onNzWDbjU78HYnVXRWnmwuxVboBxgPJ9zIaXYvcDVoMVb/VXtbLE+F8U8T8vkq/94SuxDxhgWGfZLZN+XTWmcIIh2CjmedFQiZma7DWFIfg5EkXbpxbfDLTMsVG7YX4rSwElmpzx2Lm1yh2gq7jqA4zJ7ECNax3Brjk8m8GRj1wr4BWNZgqoHrJxDCzZQM1BbsUg2HcoQxzvoYsbZhkqsRubHgDtJopIucXszpyNpZeryl7Enrtk/fdZISecTkZbJZ2XtjMw3tssSI2T6WTbW3BVJXr6vKrOT3X6gmKtDMSJC+qP9u5j21U98QsAF90/qrmiaGAkGvlirGRxd4XOyWL1sdVSdy4/p22zPeqD6vZvngriNh/xRE1DNMC+z2K9U3Jh9d1u8HhaLuXTdhBJByF3OZnLN9DRmrltd7buR2rSrR9JvrXzhg4RLA5lITnT0L8m3mXcK+/q6lL6Ldftf3ttMt2eczzOPhx2gS4WB9ebmy/2CjsxKqQs9qf9HxHJmbP1RMUNGVqT2I/z4CCj2CFKiRCPHHGEMU+AkzjYAS9YewtZpBFH7kApbno/KG998ilXr8DodFCw/i2naFEdper3tI5d5HtadoEz0M62x1khdvCua370d8sEdaDluZ8bpl1dyJxrJ0LyQF2XCwjo9hPKJt8fwFl/dz3T3G4oe2xLdPt3hUDUICt3HvaPp651j+owNIYZGqxGYVEsWUmO7UcgvfGyEZbfg3BCesng3FZrPtZ5cVMAvpZZ4wjRu5k/oatqnXLnE/wqgyc6UafiTqHb/FNxLuAPtunyJiANwU9ecL1q75TZoyrwa3LKXg25y0Tz6t1WkyUA2dcCWG9pFg0fOQdYBsxlmK7snSd1Vu2OyOwT+zisKPXoWnjiuuPLVky54tX7vhwos5QVYhlSkC4h0DceHN0dlcy3uSPovOcMjjcUzWDGZ158dp5seraCg5zXYL1VgzN2uEQOy3addq4XhbrBdDxkisW/TZi3EFArs64eGF8sPBAx82JM99bXS72H0nnY6S53rwkzu+pG16vT+HJP5RVWLmK3pEkQnz9zzZ3OCUacBwhvep/AQYA/fsCsjFZHQIAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/rainbow.png,importbuddy/pluginbuddy/images/minicolors/rainbow.png
###PACKDATA,FILE_START,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBNYWNpbnRvc2giIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6RjU3RTU1MzIzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6RjU3RTU1MzMzNERFMTFFMDg1NENGREUxMTA5MjQ5M0QiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEQxNkIyMTM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEQxNkIyMjM0REUxMUUwODU0Q0ZERTExMDkyNDkzRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PiDK9P0AAAHySURBVHjarJVBasJAFIYnyVgXtrorusgdXOrWZaHgFbooegv1EoI7j+AtXLsXFFy0FFRs0LYxmXT+YV6YxIgpzcDzJcN73/z5M06s4XD4zBhrsGLHGxdCNEaj0aRI6mAw6AFs4SaKokKglmUxMHkYhgqKaDabvf9AF4vFBBwwAbbkCgpcqVTYfD7/kjWnjD6BB9MZEeocyLhrt9suOBhgJhRXq1WmodsrMBNo5gfZ65KdpFhBsVqtVmO6MLwBEkYdwkZvAhwEgUXgUqmEeV/Gzw1Q+l71EhhMpRhQBOcc8986TAgWg/dHfU3zaiPIuEev4XFSsQYfNSTUC3xq38WVzQCZPnoTivGTUnzScE9nkWOnCVMxgdNWAPiht1HekQZnWrHNAeXaArIiurDifD7Hih3HYTmgzng8floul/XEpOwlxWAmFGtwwlN5+qkwX9ZqtarLg2aCt28OWADGtZcnTGhGVn4C4vt+5iEUW0GKbduOwSmVMRj1qKOe2WzGNpsNc12XdbtdNa9q0las12uRBaWBfxjqqEeeiGy326lMh5lS7HmeTYcQlEyn09dbe4sUI6C01WqpTHNg8v1+b5PH/X4/95cE/tIu6HQ68TUymPxwODh4tHK5/KevCHr0LrqYB9OSwBf5aI9FfvOk6vdfAQYA4jTPF9eEdoEAAAAASUVORK5CYII=
###PACKDATA,FILE_END,/pluginbuddy/images/minicolors/trigger.png,importbuddy/pluginbuddy/images/minicolors/trigger.png
###PACKDATA,FILE_START,/controllers/pages/server_info/_cron.php,importbuddy/controllers/pages/server_info/_cron.php
PD9waHANCi8vIE9VVFBVVDogJGNyb25zIHBvcHVsYXRlZA0KDQppZiAoICEgaXNzZXQoICRjcm9uICkgKSB7DQoJJGNyb24gPSBnZXRfb3B0aW9uKCdjcm9uJyk7DQp9DQppZiAoICEgaXNzZXQoICRjcm9uX3dhcm5pbmdzICkgKSB7DQoJJGNyb25fd2FybmluZ3MgPSBhcnJheSgpOw0KfQ0KDQovLyBMb29wIHRocm91Z2ggZWFjaCBjcm9uIHRpbWUgdG8gY3JlYXRlICRjcm9ucyBhcnJheSBmb3IgZGlzcGxheWluZyBsYXRlci4NCiRjcm9ucyA9IGFycmF5KCk7DQpmb3JlYWNoICggKGFycmF5KSAkY3JvbiBhcyAkdGltZSA9PiAkY3Jvbl9pdGVtICkgew0KCWlmICggaXNfbnVtZXJpYyggJHRpbWUgKSApIHsNCgkJLy8gTG9vcCB0aHJvdWdoIGVhY2ggc2NoZWR1bGUgZm9yIHRoaXMgdGltZQ0KCQlmb3JlYWNoICggKGFycmF5KSAkY3Jvbl9pdGVtIGFzICRob29rX25hbWUgPT4gJGV2ZW50ICkgew0KCQkJZm9yZWFjaCAoIChhcnJheSkgJGV2ZW50IGFzICRpdGVtX25hbWUgPT4gJGl0ZW0gKSB7DQoJCQkJDQoJCQkJLy8gRGV0ZXJtaW5lIHBlcmlvZC4NCgkJCQlpZiAoICFlbXB0eSggJGl0ZW1bJ3NjaGVkdWxlJ10gKSApIHsgLy8gUmVjdXJyaW5nIHNjaGVkdWxlLg0KCQkJCQkkcGVyaW9kID0gJyc7DQoJCQkJCWlmICggZmFsc2UgIT09ICggJHByZXR0eUludGVydmFsID0gYmFja3VwYnVkZHlfY29yZTo6cHJldHR5Q3JvbkludGVydmFsKCAkaXRlbVsnaW50ZXJ2YWwnXSApICkgKSB7DQoJCQkJCQkkcGVyaW9kIC49ICc8c3BhbiB0aXRsZT0iSW50ZXJ2YWwgdGFnOiBgJyAuICRwcmV0dHlJbnRlcnZhbFswXSAuICdgLiI+JyAuICRwcmV0dHlJbnRlcnZhbFsxXSAuICc8L3NwYW4+JzsNCgkJCQkJfSBlbHNlIHsNCgkJCQkJCSRwZXJpb2QgLj0gJzxzcGFuIHRpdGxlPSJJbnRlcnZhbCB0YWc6IGAnIC4gJGl0ZW1bJ3NjaGVkdWxlJ10gLiAnYC4iPicgLiAkaXRlbVsnc2NoZWR1bGUnXSAuICc8L3NwYW4+JzsNCgkJCQkJfQ0KCQkJCX0gZWxzZSB7IC8vIE9uZS10aW1lIG9ubHkgY3Jvbi4NCgkJCQkJJHBlcmlvZCA9IF9fKCdvbmUgdGltZSBvbmx5JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7DQoJCQkJfQ0KCQkJCQ0KCQkJCS8vIERldGVybWluZSBpbnRlcnZhbC4NCgkJCQlpZiAoICEgZW1wdHkoICRpdGVtWydpbnRlcnZhbCddICkgKSB7DQoJCQkJCSRpbnRlcnZhbCA9ICRpdGVtWydpbnRlcnZhbCddIC4gJyBzZWNvbmRzJzsNCgkJCQl9IGVsc2Ugew0KCQkJCQkkaW50ZXJ2YWwgPSBfXygnb25lIHRpbWUgb25seScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOw0KCQkJCX0NCgkJCQkNCgkJCQkvLyBEZXRlcm1pbmUgYXJndW1lbnRzLg0KCQkJCWlmICggIWVtcHR5KCAkaXRlbVsnYXJncyddICkgKSB7DQoJCQkJCS8vJGFyZ3VtZW50cyA9IGltcGxvZGUoICcsJywgJGl0ZW1bJ2FyZ3MnXSApOw0KCQkJCQkkYXJndW1lbnRzID0gJyc7DQoJCQkJCWZvcmVhY2goICRpdGVtWydhcmdzJ10gYXMgJGFyZ3MgKSB7DQoJCQkJCQkkYXJndW1lbnRzX2lubmVyID0gYXJyYXkoKTsNCgkJCQkJCSRpc19hcnJheSA9IGZhbHNlOw0KCQkJCQkJaWYgKCAhIGlzX2FycmF5KCAkYXJncyApICkgew0KCQkJCQkJCSRhcmd1bWVudHNfaW5uZXJbXSA9ICRhcmdzOw0KCQkJCQkJfSBlbHNlIHsNCgkJCQkJCQkkaXNfYXJyYXkgPSB0cnVlOw0KCQkJCQkJCWZvcmVhY2goICRhcmdzIGFzICRhcmcgKSB7DQoJCQkJCQkJCWlmICggaXNfYXJyYXkoICRhcmcgKSApIHsNCgkJCQkJCQkJCSRhcmd1bWVudHNfaW5uZXJbXSA9IHByaW50X3IoICRhcmcsIHRydWUgKTsNCgkJCQkJCQkJfSBlbHNlIHsNCgkJCQkJCQkJCSRhcmd1bWVudHNfaW5uZXJbXSA9ICRhcmc7DQoJCQkJCQkJCX0NCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCQlpZiAoIHRydWUgPT09ICRpc19hcnJheSApIHsNCgkJCQkJCQkkYXJndW1lbnRzX2lubmVyID0gJ0FycmF5KCAnIC4gaW1wbG9kZSggJywgJywgJGFyZ3VtZW50c19pbm5lciApIC4gJyApJzsNCgkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJJGFyZ3VtZW50c19pbm5lciA9IGltcGxvZGUoICcsICcsICRhcmd1bWVudHNfaW5uZXIgKTsNCgkJCQkJCX0NCgkJCQkJCSRhcmd1bWVudHMgLj0gJzx0ZXh0YXJlYSB3cmFwPSJvZmYiPicgLiAkYXJndW1lbnRzX2lubmVyIC4gJzwvdGV4dGFyZWE+JzsNCgkJCQkJCS8qDQoJCQkJCQlpZiAoIGlzX2FycmF5KCAkYXJnICkgKSB7DQoJCQkJCQkJJGFyZ3VtZW50cyAuPSAgJ1snIC4gcHJpbnRfciggJGFyZywgdHJ1ZSApIC4gJ10nOy8vcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPm11bHRpX2ltcGxvZGUoICRhcmcgLCAnOyAnICkNCgkJCQkJCX0gZWxzZSB7DQoJCQkJCQkJJGFyZ3VtZW50cyAuPSAkYXJnOw0KCQkJCQkJfQ0KCQkJCQkJKi8NCgkJCQkJfQ0KCQkJCX0gZWxzZSB7DQoJCQkJCSRhcmd1bWVudHMgPSBfXygnbm9uZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOw0KCQkJCX0NCgkJCQkNCgkJCQkvLyBJZiBydW4gdGltZSBpcyBpbiB0aGUgcGFzdCwgbm90ZSB0aGlzLg0KCQkJCSRwYXN0X3RpbWUgPSAnJzsNCgkJCQlpZiAoICR0aW1lIDwgdGltZSgpICkgew0KCQkJCQkkd2FybmluZyA9ICdXQVJOSU5HOiBOZXh0IHJ1biB0aW1lIGhhcyBwYXNzZWQuIEl0IHNob3VsZCBoYXZlIHJ1biAnIC4gcGJfYmFja3VwYnVkZHk6OiRmb3JtYXQtPnRpbWVfYWdvKCAkdGltZSApIC4gJyBhZ28uIENyb24gcHJvYmxlbT8nOw0KCQkJCQkkbXNnID0gJ1NvbWV0aGluZyBtYXkgYmUgd3Jvbmcgd2l0aCB5b3VyIFdvcmRQcmVzcyBjcm9uIHN1Y2ggYXMgYSBtYWxmdW5jdGlvbmluZyBjYWNoaW5nIHBsdWdpbiBvciB3ZWJob3N0IHByb2JsZW1zLic7DQoJCQkJCWlmICggaXNzZXQoIHBiX2JhY2t1cGJ1ZGR5OjokdWkgKSAmJiBpc19vYmplY3QoIHBiX2JhY2t1cGJ1ZGR5OjokdWkgKSApIHsNCgkJCQkJCSR0aXAgPSBwYl9iYWNrdXBidWRkeTo6JHVpLT50aXAoICRtc2csICcnLCBmYWxzZSApOw0KCQkJCQl9IGVsc2Ugew0KCQkJCQkJJHRpcCA9ICcoJyAuICRtc2cgLiAnKSc7DQoJCQkJCX0NCgkJCQkJJHBhc3RfdGltZSA9ICc8YnI+PHNwYW4gc3R5bGU9ImNvbG9yOiByZWQ7Ij4gKiogJyAuICR3YXJuaW5nIC4gJyAqKiAnIC4gJHRpcCAuICc8L3NwYW4+JzsNCgkJCQkJJGNyb25fd2FybmluZ3NbXSA9ICR3YXJuaW5nOw0KCQkJCX0NCgkJCQkNCgkJCQkvLyBQb3B1bGF0ZSBjcm9ucyBhcnJheSBmb3IgZGlzcGxheWluZyBsYXRlci4NCgkJCQkkY3JvbnNbICR0aW1lIC4gJ3wnIC4gJGhvb2tfbmFtZSAuICd8JyAuICRpdGVtX25hbWVdID0gYXJyYXkoDQoJCQkJCSc8c3BhbiB0aXRsZT1cJ0tleTogJyAuICRpdGVtX25hbWUgLiAnXCc+JyAuICRob29rX25hbWUgLiAnPC9zcGFuPicsDQoJCQkJCXBiX2JhY2t1cGJ1ZGR5OjokZm9ybWF0LT5kYXRlKCBwYl9iYWNrdXBidWRkeTo6JGZvcm1hdC0+bG9jYWxpemVfdGltZSggJHRpbWUgKSApIC4gJzxicj48c3BhbiBjbGFzcz0iZGVzY3JpcHRpb24iPiBUaW1lc3RhbXA6ICcgLiAkdGltZSAuICc8L3NwYW4+JyAuICRwYXN0X3RpbWUsDQoJCQkJCSRwZXJpb2QsDQoJCQkJCSRpbnRlcnZhbCwNCgkJCQkJJGFyZ3VtZW50cywNCgkJCQkpOw0KCQkJCQ0KCQkJfSAvLyBFbmQgZm9yZWFjaC4NCgkJCXVuc2V0KCAkaXRlbSApOw0KCQkJdW5zZXQoICRpdGVtX25hbWUgKTsNCgkJfSAvLyBFbmQgZm9yZWFjaC4NCgkJdW5zZXQoICRldmVudCApOw0KCQl1bnNldCggJGhvb2tfbmFtZSApOw0KCX0gLy8gRW5kIGlmIGlzX251bWVyaWMuDQp9IC8vIEVuZCBmb3JlYWNoLg0KdW5zZXQoICRjcm9uX2l0ZW0gKTsNCnVuc2V0KCAkdGltZSApOw==
###PACKDATA,FILE_END,/controllers/pages/server_info/_cron.php,importbuddy/controllers/pages/server_info/_cron.php
###PACKDATA,FILE_START,/controllers/pages/server_info/_remote_sends.php,importbuddy/controllers/pages/server_info/_remote_sends.php

###PACKDATA,FILE_END,/controllers/pages/server_info/_remote_sends.php,importbuddy/controllers/pages/server_info/_remote_sends.php
###PACKDATA,FILE_START,/controllers/pages/server_info/_server_tests.php,importbuddy/controllers/pages/server_info/_server_tests.php

###PACKDATA,FILE_END,/controllers/pages/server_info/_server_tests.php,importbuddy/controllers/pages/server_info/_server_tests.php
###PACKDATA,FILE_START,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php

###PACKDATA,FILE_END,/controllers/pages/server_info/cron.php,importbuddy/controllers/pages/server_info/cron.php
###PACKDATA,FILE_START,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php

###PACKDATA,FILE_END,/controllers/pages/server_info/database.php,importbuddy/controllers/pages/server_info/database.php
###PACKDATA,FILE_START,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
PD9waHANCi8vIFNpbGVuY2UgaXMgZ29sZGVuLg0KPz4=
###PACKDATA,FILE_END,/controllers/pages/server_info/index.php,importbuddy/controllers/pages/server_info/index.php
###PACKDATA,FILE_START,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
PGJyPjw/cGhwDQokdGVzdHMgPSBhcnJheSgpOw0KDQokdXBsb2Fkc19kaXJzID0gd3BfdXBsb2FkX2RpcigpOw0KJGRpcmVjdG9yaWVzID0gYXJyYXkoDQoJQUJTUEFUSCAuICcnLA0KCUFCU1BBVEggLiAnd3AtaW5jbHVkZXMvJywNCglBQlNQQVRIIC4gJ3dwLWFkbWluLycsDQoJV1BfQ09OVEVOVF9ESVIgLiAnL3RoZW1lcy8nLA0KCVdQX1BMVUdJTl9ESVIgLiAnLycsDQoJV1BfQ09OVEVOVF9ESVIgLiAnLycsDQoJLy9BQlNQQVRIIC4gJ3dwLWNvbnRlbnQvJywNCglydHJpbSggJHVwbG9hZHNfZGlyc1snYmFzZWRpciddLCAnXFwvJyApIC4gJy8nLA0KCUFCU1BBVEggLiAnd3AtaW5jbHVkZXMvJywNCgliYWNrdXBidWRkeV9jb3JlOjpnZXRCYWNrdXBEaXJlY3RvcnkoKSwNCgliYWNrdXBidWRkeV9jb3JlOjpnZXRMb2dEaXJlY3RvcnkoKSwNCik7DQppZiAoIEBmaWxlX2V4aXN0cyggYmFja3VwYnVkZHlfY29yZTo6Z2V0VGVtcERpcmVjdG9yeSgpICkgKSB7IC8vIFRoaXMgZGlyIGlzIHVzdWFsbHkgdHJhbnNpZW50IHNvIG1heSBub3QgZXhpc3QuDQoJJGRpcmVjdG9yaWVzW10gPSBiYWNrdXBidWRkeV9jb3JlOjpnZXRUZW1wRGlyZWN0b3J5KCk7DQp9DQoNCg0KZm9yZWFjaCggJGRpcmVjdG9yaWVzIGFzICRkaXJlY3RvcnkgKSB7DQoJDQoJJG1vZGVfb2N0YWxfZm91ciA9ICc8aT4nIC4gX18oICdVbmtub3duJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9pPic7DQoJJG93bmVyID0gJzxpPicgLiBfXyggJ1Vua25vd24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2k+JzsNCgkNCglpZiAoICEgZmlsZV9leGlzdHMoICRkaXJlY3RvcnkgKSApIHsNCgkJJG1vZGVfb2N0YWxfZm91ciA9ICdEaXJlY3RvcnkgZG9lc1wndCBleGlzdCc7DQoJCSRvd25lciA9ICduL2EnOw0KCX0NCgkkc3RhdHMgPSBwbHVnaW5idWRkeV9zdGF0OjpzdGF0KCAkZGlyZWN0b3J5ICk7DQoJaWYgKCBmYWxzZSAhPT0gJHN0YXRzICkgew0KCQkkbW9kZV9vY3RhbF9mb3VyID0gJHN0YXRzWydtb2RlX29jdGFsX2ZvdXInXTsNCgkJJG93bmVyID0gJHN0YXRzWyd1aWQnXSAuICc6JyAuICRzdGF0c1snZ2lkJ107DQoJfQ0KCSR0aGlzX3Rlc3QgPSBhcnJheSgNCgkJCQkJJ3RpdGxlJwkJCT0+CQknLycgLiBzdHJfcmVwbGFjZSggQUJTUEFUSCwgJycsICRkaXJlY3RvcnkgKSwNCgkJCQkJJ3N1Z2dlc3Rpb24nCT0+CQknPD0gNzU1JywNCgkJCQkJJ3ZhbHVlJwkJCT0+CQkkbW9kZV9vY3RhbF9mb3VyLA0KCQkJCQknb3duZXInCQkJPT4JCSRvd25lciwNCgkJCQkpOw0KCWlmICggZmFsc2UgPT09ICRzdGF0cyB8fCAkbW9kZV9vY3RhbF9mb3VyID4gNzU1ICkgew0KCQkkdGhpc190ZXN0WydzdGF0dXMnXSA9IF9fKCdXQVJOSU5HJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7DQoJfSBlbHNlIHsNCgkJJHRoaXNfdGVzdFsnc3RhdHVzJ10gPSBfXygnT0snLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsNCgl9DQoJYXJyYXlfcHVzaCggJHRlc3RzLCAkdGhpc190ZXN0ICk7DQoJDQp9IC8vIGVuZCBmb3JlYWNoLg0KDQoNCj8+DQoNCjx0YWJsZSBjbGFzcz0id2lkZWZhdCI+DQoJPHRoZWFkPg0KCQk8dHIgY2xhc3M9InRoZWFkIj4NCgkJCTw/cGhwIA0KCQkJCWVjaG8gJzx0aD4nLCBfXygnUmVsYXRpdmUgUGF0aCcsJ2l0LWwxMG4tYmFja3VwYnVkZHknICksJzwvdGg+JywNCgkJCQkJJzx0aD4nLCBfXygnU3VnZ2VzdGlvbicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLA0KCQkJCQknPHRoPicsIF9fKCdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLA0KCQkJCQknPHRoPicsIF9fKCdPd25lciAoVUlEOkdJRCknLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JywNCgkJCQkJLy8gJzx0aD4nLCBfXygnUmVzdWx0JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsDQoJCQkJCSAnPHRoIHN0eWxlPSJ3aWR0aDogNjBweDsiPicsIF9fKCdTdGF0dXMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JzsNCgkJCT8+DQoJCTwvdHI+DQoJPC90aGVhZD4NCgk8dGZvb3Q+DQoJCTx0ciBjbGFzcz0idGhlYWQiPg0KCQkJPD9waHAgDQoJCQkJZWNobyAnPHRoPicsIF9fKCdSZWxhdGl2ZSBQYXRoJywnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwnPC90aD4nLA0KCQkJCQknPHRoPicsIF9fKCdTdWdnZXN0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsDQoJCQkJCSc8dGg+JywgX18oJ1ZhbHVlJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPicsDQoJCQkJCSc8dGg+JywgX18oJ093bmVyIChVSUQ6R0lEKScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCAnPC90aD4nLA0KCQkJCQkvLyAnPHRoPicsIF9fKCdSZXN1bHQnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwgJzwvdGg+JywNCgkJCQkJJzx0aCBzdHlsZT0id2lkdGg6IDYwcHg7Ij4nLCBfXygnU3RhdHVzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksICc8L3RoPic7DQoJCQk/Pg0KCQk8L3RyPg0KCTwvdGZvb3Q+DQoJPHRib2R5Pg0KCQk8P3BocA0KCQlmb3JlYWNoKCAkdGVzdHMgYXMgJHRoaXNfdGVzdCApIHsNCgkJCWVjaG8gJzx0ciBjbGFzcz0iZW50cnktcm93IGFsdGVybmF0ZSI+JzsNCgkJCWVjaG8gJwk8dGQ+JyAuICR0aGlzX3Rlc3RbJ3RpdGxlJ10gLiAnPC90ZD4nOw0KCQkJZWNobyAnCTx0ZD4nIC4gJHRoaXNfdGVzdFsnc3VnZ2VzdGlvbiddIC4gJzwvdGQ+JzsNCgkJCWVjaG8gJwk8dGQ+JyAuICR0aGlzX3Rlc3RbJ3ZhbHVlJ10gLiAnPC90ZD4nOw0KCQkJZWNobyAnCTx0ZD4nIC4gJHRoaXNfdGVzdFsnb3duZXInXSAuICc8L3RkPic7DQoJCQkvL2VjaG8gJwk8dGQ+JyAuICR0aGlzX3Rlc3RbJ3N0YXR1cyddIC4gJzwvdGQ+JzsNCgkJCWVjaG8gJwk8dGQ+JzsNCgkJCWlmICggJHRoaXNfdGVzdFsnc3RhdHVzJ10gPT0gX18oJ09LJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKSB7DQoJCQkJLy9lY2hvICc8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjMjJFRTVCOyBib3JkZXI6IDFweCBzb2xpZCAjRTJFMkUyOyI+Jm5ic3A7Jm5ic3A7Jm5ic3A7PC9kaXY+JzsNCgkJCQllY2hvICc8c3BhbiBjbGFzcz0icGJfbGFiZWwgcGJfbGFiZWwtc3VjY2VzcyI+UGFzczwvc3Bhbj4nOw0KCQkJfSBlbHNlaWYgKCAkdGhpc190ZXN0WydzdGF0dXMnXSA9PSBfXygnRkFJTCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICkgew0KCQkJCS8vZWNobyAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0NGMzMzMzsgYm9yZGVyOiAxcHggc29saWQgI0UyRTJFMjsiPiZuYnNwOyZuYnNwOyZuYnNwOzwvZGl2Pic7DQoJCQkJZWNobyAnPHNwYW4gY2xhc3M9InBiX2xhYmVsIHBiX2xhYmVsLWltcG9ydGFudCI+RmFpbDwvc3Bhbj4nOw0KCQkJfSBlbHNlaWYgKCAkdGhpc190ZXN0WydzdGF0dXMnXSA9PSBfXygnV0FSTklORycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApICkgew0KCQkJCS8vZWNobyAnPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0ZFRkY3RjsgYm9yZGVyOiAxcHggc29saWQgI0UyRTJFMjsiPiZuYnNwOyZuYnNwOyZuYnNwOzwvZGl2Pic7DQoJCQkJZWNobyAnPHNwYW4gY2xhc3M9InBiX2xhYmVsIHBiX2xhYmVsLXdhcm5pbmciPldhcm5pbmc8L3NwYW4+JzsNCgkJCX0gZWxzZSB7DQoJCQkJZWNobyAndW5rbm93bic7DQoJCQl9DQoJCQllY2hvICcJPC90ZD4nOw0KCQkJZWNobyAnPC90cj4nOw0KCQl9DQoJCT8+DQoJPC90Ym9keT4NCjwvdGFibGU+DQoNCjxicj48YnI+
###PACKDATA,FILE_END,/controllers/pages/server_info/permissions.php,importbuddy/controllers/pages/server_info/permissions.php
###PACKDATA,FILE_START,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php
PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KCWpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7DQoJCQ0KCQlqUXVlcnkoICcucGJfYmFja3VwYnVkZHlfcmVtb3Rlc2VuZF9hYm9ydCcgKS5jbGljayggZnVuY3Rpb24oKXsNCgkJCWpRdWVyeS5hamF4KHsNCgkJCQl0eXBlOiAnUE9TVCcsDQoJCQkJdXJsOiBqUXVlcnkodGhpcykuYXR0ciggJ2hyZWYnICksDQoJCQkJc3VjY2VzczogZnVuY3Rpb24oZGF0YSl7DQoJCQkJCWRhdGEgPSBqUXVlcnkudHJpbSggZGF0YSApOw0KCQkJCQlpZiAoICcxJyA9PSBkYXRhICkgew0KCQkJCQkJYWxlcnQoICdSZW1vdGUgdHJhbnNmZXIgYWJvcnRlZC4gVGhpcyBtYXkgdGFrZSBhIG1vbWVudCB0byB0YWtlIGVmZmVjdC4nICk7DQoJCQkJCX0gZWxzZSB7DQoJCQkJCQlhbGVydCggJ0Vycm9yICM4NTQ0ODk0OS4gVW5leHBlY3RlZCBzZXJ2ZXIgcmVzcG9uc2UuIERldGFpbHM6IGAnICsgZGF0YSArICdgLicgKTsNCgkJCQkJfQ0KCQkJCX0NCgkJCX0pOw0KCQkJcmV0dXJuIGZhbHNlOw0KCQl9KTsNCgl9KTsNCjwvc2NyaXB0Pg0KPD9waHANCg0KcmVxdWlyZV9vbmNlKCBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3BhdGgoKSAuICcvY2xhc3Nlcy9ob3VzZWtlZXBpbmcucGhwJyApOw0KYmFja3VwYnVkZHlfaG91c2VrZWVwaW5nOjp0cmltX3JlbW90ZV9zZW5kX3N0YXRzKCk7DQoNCg0KaW5jbHVkZSggJ19yZW1vdGVfc2VuZHMucGhwJyApOyAvLyBTZXRzICRzZW5kcy4NCg0KDQppZiAoIGNvdW50KCAkc2VuZHMgKSA9PSAwICkgew0KCWVjaG8gJzxicj48c3BhbiBjbGFzcz0iZGVzY3JpcHRpb24iPicgLiBfXyggJ1RoZXJlIGhhdmUgYmVlbiBubyByZWNlbnQgZmlsZSB0cmFuc2ZlcnMuJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9zcGFuPjxicj4nOw0KfSBlbHNlIHsNCgkkc2VuZHMgPSBhcnJheV9zbGljZSggJHNlbmRzLCAwLCBiYWNrdXBidWRkeV9jb25zdGFudHM6OlJFQ0VOVF9TRU5EU19NQVhfTElTVElOR19DT1VOVCApOyAvLyBPbmx5IGRpc3BsYXkgbW9zdCByZWNlbnQgWCBzZW5kcyB0byBrZWVwIHBhZ2UgZnJvbSBiZWluZyBib2dnZWQgZG93bi4NCglwYl9iYWNrdXBidWRkeTo6JHVpLT5saXN0X3RhYmxlKA0KCQkkc2VuZHMsDQoJCWFycmF5KA0KCQkJJ2FjdGlvbicJCT0+CXBiX2JhY2t1cGJ1ZGR5OjpwYWdlX3VybCgpLA0KCQkJJ2NvbHVtbnMnCQk9PglhcnJheSgNCgkJCQlfXyggJ1NlbnQgRmlsZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLA0KCQkJCV9fKCAnRGVzdGluYXRpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQlfXyggJ1RyaWdnZXInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQlfXyggJ1RyYW5zZmVyIEluZm9ybWF0aW9uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIDxpbWcgc3JjPSInIC4gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKSAuICcvaW1hZ2VzL3NvcnRfZG93bi5wbmciIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogMHB4OyIgdGl0bGU9IlNvcnRlZCBtb3N0IHJlY2VudCBzdGFydGVkIGZpcnN0Ij4nLA0KCQkJCV9fKCAnU3RhdHVzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIDxzcGFuIGNsYXNzPSJkZXNjcmlwdGlvbiI+KGhvdmVyIGZvciBvcHRpb25zKTwvc3Bhbj4nLA0KCQkJCSksDQoJCQknY3NzJwkJCT0+CQknd2lkdGg6IDEwMCU7JywNCgkJKQ0KCSk7DQoJZWNobyAnPGRpdiBjbGFzcz0iYWxpZ25yaWdodCBhY3Rpb25zIj4nOw0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPm5vdGUoICdIb3ZlciBvdmVyIGl0ZW1zIGFib3ZlIGZvciBhZGRpdGlvbmFsIG9wdGlvbnMuJyApOw0KCWVjaG8gJzwvZGl2Pic7DQp9DQoNCj8+PGJyPg==
###PACKDATA,FILE_END,/controllers/pages/server_info/remote_sends.php,importbuddy/controllers/pages/server_info/remote_sends.php
###PACKDATA,FILE_START,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php

###PACKDATA,FILE_END,/controllers/pages/server_info/server.php,importbuddy/controllers/pages/server_info/server.php
###PACKDATA,FILE_START,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
PD9waHANCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2ljaWNsZS5qcycgKTsNCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3NjcmlwdCggJ2ljaWNsZV9zZXR1cC5qcycgKTsNCnBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3N0eWxlKCAnaml0X2Jhc2UuY3NzJyApOw0KcGJfYmFja3VwYnVkZHk6OmxvYWRfc3R5bGUoICdqaXRfaWNpY2xlLmNzcycgKTsNCj8+DQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQoJalF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsNCgkJalF1ZXJ5KCcjcGJfaWNpY2xlbGF1bmNoJykuY2xpY2soZnVuY3Rpb24oZSkgew0KCQkJalF1ZXJ5KCcjcGJfaW5mb3Zpc19jb250YWluZXInKS5zbGlkZVRvZ2dsZSgpOw0KCQkJalF1ZXJ5LnBvc3QoICc8P3BocCBlY2hvIHBiX2JhY2t1cGJ1ZGR5OjphamF4X3VybCggJ2ljaWNsZScgKTsgPz4nLCANCgkJCQlmdW5jdGlvbiggZGF0YSApIHsNCgkJCQkJalF1ZXJ5KCcjaW5mb3ZpcycpLmh0bWwoJycpOw0KCQkJCQlpY2ljbGVfaW5pdCggZGF0YSApOw0KCQkJCX0NCgkJCSk7DQoJCX0pOw0KCQkNCgkJalF1ZXJ5KCAnLnBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2J1dHRvbicgKS5jbGljayggZnVuY3Rpb24oKSB7DQoJCQlqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8gPiAucGJfYmFja3VwYnVkZHlfbG9hZGluZycgKS5zaG93KCk7DQoJCQlqUXVlcnkucG9zdCggJzw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OmFqYXhfdXJsKCAnc2l0ZV9zaXplX2xpc3RpbmcnICk7ID8+JnByb2ZpbGU9JyArIGpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9maWxlbGlzdGluZ3Byb2ZpbGUnICkudmFsKCksIA0KCQkJCWZ1bmN0aW9uKCBkYXRhICkgew0KCQkJCQlqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfY29udGVudCcgKS5odG1sKCBkYXRhICk7DQoJCQkJCWpRdWVyeSggJyNwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19pbnRybyA+IC5wYl9iYWNrdXBidWRkeV9sb2FkaW5nJyApLmhpZGUoKTsNCgkJCQkJLy9qUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8nICkuc2xpZGVVcCgpOw0KCQkJCQlqUXVlcnkoICcjcGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfY29udGVudCcgKS5zbGlkZURvd24oKTsNCgkJCQl9DQoJCQkpOw0KCQkJalF1ZXJ5KCAncGJfYmFja3VwYnVkZHlfbG9hZGluZycgKS5oaWRlKCk7DQoJCX0gKTsNCgkJDQoJfSk7DQo8L3NjcmlwdD4NCg0KDQo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KCSNwYl9iYWNrdXBidWRkeV9zZXJ2ZXJpbmZvX2V4Y2x1c2lvbnM6Oi13ZWJraXQtc2Nyb2xsYmFyIHsNCgkJLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOw0KCQl3aWR0aDogMTFweDsNCgkJaGVpZ2h0OiAxMXB4Ow0KCX0NCgkNCgkNCgkjcGJfYmFja3VwYnVkZHlfc2VydmVyaW5mb19leGNsdXNpb25zOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7DQoJCWJvcmRlci1yYWRpdXM6IDhweDsNCgkJYm9yZGVyOiAycHggc29saWQgd2hpdGU7IC8qIHNob3VsZCBtYXRjaCBiYWNrZ3JvdW5kLCBjYW4ndCBiZSB0cmFuc3BhcmVudCAqLw0KCQliYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIC41KTsNCgl94oCLDQo8L3N0eWxlPg0KDQoNCg0KPGJyPg0KPD9waHANCmVjaG8gJzxoMyBjbGFzcz0icGJfaHRpdGxlIj4nIC4gX18oJ0RpcmVjdG9yeSBTaXplIExpc3RpbmcnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSAuICc8L2gzPic7DQplY2hvICc8YSBuYW1lPSJwYl9iYWNrdXBidWRkeV9kaXJfc2l6ZV9saXN0aW5nIj4mbmJzcDs8L2E+JzsNCg0KZWNobyAnPGRpdiBpZD0icGJfYmFja3VwYnVkZHlfc2l0ZV9zaXplX2xpc3RpbmdfaW50cm8iPic7DQplY2hvIF9fKCdEaXNwbGF5IGEgY29tcHJlaGVuc2l2ZSBsaXN0aW5nIG9mIGRpcmVjdG9yaWVzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBzaXplIG9mIGFsbCBjb250ZW50cyB3aXRoaW4sIGluY2x1ZGluZyBzdWJkaXJlY3Rvcmllcy4gIFRoaXMgaXMgdXNlZnVsIGZvciBmaW5kaW5nIHdoZXJlIHNwYWNlIGlzIGJlaW5nIHVzZWQuIE5vdGUgdGhhdCB0aGlzIGlzIGEgQ1BVIGludGVuc2l2ZSBwcm9jZXNzIGFuZCBtYXkgdGFrZSBhIHdoaWxlIHRvIGxvYWQgYW5kIGV2ZW4gdGltZSBvdXQgb24gc29tZSBzZXJ2ZXJzLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOw0KZWNobyAnPGJyIC8+PGJyIC8+JzsNCg0KDQplY2hvICc8Yj5CYWNrdXAgcHJvZmlsZSBmb3IgY2FsY3VsYXRpbmcgZXhjbHVzaW9uczo8L2I+ICc7DQplY2hvICc8c2VsZWN0IGlkPSJwYl9iYWNrdXBidWRkeV9maWxlbGlzdGluZ3Byb2ZpbGUiPic7DQpmb3JlYWNoKCBwYl9iYWNrdXBidWRkeTo6JG9wdGlvbnNbJ3Byb2ZpbGVzJ10gYXMgJHRoaXNfcHJvZmlsZV9pZCA9PiAkcHJvZmlsZSApIHsNCglpZiAoICdkYicgPT0gJHByb2ZpbGVbJ3R5cGUnXSApIHsNCgkJY29udGludWU7DQoJfQ0KCT8+DQoJPG9wdGlvbiB2YWx1ZT0iPD9waHAgZWNobyAkdGhpc19wcm9maWxlX2lkOyA/PiIgPD9waHAgaWYgKCAkcHJvZmlsZV9pZCA9PSAkdGhpc19wcm9maWxlX2lkICkgeyBlY2hvICdzZWxlY3RlZCc7IH0gPz4+PD9waHAgZWNobyBodG1sZW50aXRpZXMoICRwcm9maWxlWyd0aXRsZSddICk7ID8+ICg8P3BocCBlY2hvICRwcm9maWxlWyd0eXBlJ107ID8+KTwvYT4NCgk8P3BocA0KfQ0KZWNobyAnPC9zZWxlY3Q+PGJyPic7DQoNCg0KZWNobyAnPGJyPjxhIGNsYXNzPSJwYl9iYWNrdXBidWRkeV9zaXRlX3NpemVfbGlzdGluZ19idXR0b24gYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiBzdHlsZT0ibWFyZ2luLXRvcDogM3B4OyI+JywgX18oJ0Rpc3BsYXkgRGlyZWN0b3J5IFNpemUgTGlzdGluZycsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLCc8L2E+ICc7DQplY2hvICc8c3BhbiBjbGFzcz0icGJfYmFja3VwYnVkZHlfbG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7IG1hcmdpbi1sZWZ0OiAxMHB4OyI+PGltZyBzcmM9IicgLiBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpIC4gJy9pbWFnZXMvbG9hZGluZy5naWYiIGFsdD0iJyAuIF9fKCdMb2FkaW5nLi4uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIiB0aXRsZT0iJyAuIF9fKCdMb2FkaW5nLi4uJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnIiB3aWR0aD0iMTYiIGhlaWdodD0iMTYiIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogLTNweDsiIC8+PC9zcGFuPic7DQplY2hvICc8L2Rpdj48YnI+JzsNCmVjaG8gJzxkaXYgaWQ9InBiX2JhY2t1cGJ1ZGR5X3NpdGVfc2l6ZV9saXN0aW5nX2NvbnRlbnQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9kaXY+JzsNCmVjaG8gJzxicj48YnI+JzsNCj8+DQoNCg0KDQo8P3BocCBlY2hvICc8aDMgY2xhc3M9InBiX2h0aXRsZSI+JyAuIF9fKCAnSW50ZXJhY3RpdmUgR3JhcGhpY2FsIERpcmVjdG9yeSBTaXplIE1hcCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApIC4gJzwvaDM+Jzs/Pg0KPGJyPg0KPD9waHAgX2UoJ0Rpc3BsYXlzIGFuIGludGVyYWN0aXZlIGdyYXBoaWNhbCByZXByZXNlbnRhdGlvbiBvZiBkaXJlY3RvcmllcyBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgc2l6ZSBvZiBhbGwgY29udGVudHMgd2l0aGluLCBpbmNsdWRpbmcgc3ViZGlyZWN0b3JpZXMuDQpUaGlzIGlzIHVzZWZ1bCBmb3IgZmluZGluZyB3aGVyZSBzcGFjZSBpcyBiZWluZyB1c2VkLiBEaXJlY3RvcnkgYm94ZXMgYXJlIHNjYWxlZCBiYXNlZCBvbiBzaXplLiBDbGljayBvbiBhIGRpcmVjdG9yeSBib3ggdG8gbW92ZSBhcm91bmQuIE5vdGUgdGhhdCB0aGlzDQppcyBhIENQVSBpbnRlbnNpdmUgcHJvY2VzcyBhbmQgbWF5IHRha2UgYSB3aGlsZSB0byBsb2FkIGFuZCBldmVuIHRpbWUgb3V0IG9uIHNvbWUgc2VydmVycy4gU2xvd2VyIGNvbXB1dGVycyBtYXkgaGF2ZSB0cm91YmxlIG5hdmlnYXRpbmcgdGhlIGludGVyYWN0aXZlIG1hcC4nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTsNCj8+DQo8YnI+DQo8cD48YSBpZD0icGJfaWNpY2xlbGF1bmNoIiBjbGFzcz0iYnV0dG9uIGJ1dHRvbi1wcmltYXJ5IiBzdHlsZT0ibWFyZ2luLXRvcDogM3B4OyI+PD9waHAgX2UoJ0Rpc3BsYXkgSW50ZXJhY3RpdmUgR3JhcGhpY2FsIERpcmVjdG9yeSBTaXplIE1hcCcsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOz8+PC9hPjwvcD4NCg0KDQo8bGluayB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpOyA/Pi9jc3Mvaml0X2Jhc2UuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+DQo8bGluayB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iPD9waHAgZWNobyBwYl9iYWNrdXBidWRkeTo6cGx1Z2luX3VybCgpOyA/Pi9jc3Mvaml0X2ljaWNsZS5jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz4NCg0KDQo8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyIgaWQ9InBiX2luZm92aXNfY29udGFpbmVyIj4NCgk8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kOiAjMUExQTFBOyI+DQoJCTxkaXYgaWQ9ImluZm92aXMiPg0KCQkJPGJyIC8+PGJyIC8+DQoJCQk8ZGl2IHN0eWxlPSJtYXJnaW46IDMwcHg7Ij4NCgkJCQk8aDQgc3R5bGU9ImNvbG9yOiAjRkZGRkZGOyI+PGltZyBzcmM9Ijw/cGhwIGVjaG8gcGJfYmFja3VwYnVkZHk6OnBsdWdpbl91cmwoKTsgPz4vaW1hZ2VzL2xvYWRpbmdfbGFyZ2VfZGFya2JnLmdpZiIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiAtOXB4OyIgLz4gPD9waHAgX2UoJ0xvYWRpbmcgLi4uIFBsZWFzZSB3YWl0IC4uLicsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApOz8+PC9oND4NCgkJCTwvZGl2Pg0KCQk8L2Rpdj4NCgk8L2Rpdj4NCgkNCgk8bGFiZWwgZm9yPSJzLW9yaWVudGF0aW9uIj48P3BocCBfZSgnT3JpZW50YXRpb24nLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/PjogPC9sYWJlbD4NCgk8c2VsZWN0IG5hbWU9InMtb3JpZW50YXRpb24iIGlkPSJzLW9yaWVudGF0aW9uIj4NCgkJPG9wdGlvbiB2YWx1ZT0iaCIgc2VsZWN0ZWQ+PD9waHAgX2UoJ2hvcml6b250YWwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/Pjwvb3B0aW9uPg0KCQk8b3B0aW9uIHZhbHVlPSJ2Ij48P3BocCBfZSgndmVydGljYWwnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKTs/Pjwvb3B0aW9uPg0KCTwvc2VsZWN0Pg0KCQ0KCTxsYWJlbCBmb3I9ImktbGV2ZWxzLXRvLXNob3ciPjw/cGhwIF9lKCdNYXggbGV2ZWxzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Pz46IDwvbGFiZWw+DQoJPHNlbGVjdCAgaWQ9ImktbGV2ZWxzLXRvLXNob3ciIG5hbWU9ImktbGV2ZWxzLXRvLXNob3ciIHN0eWxlPSJ3aWR0aDogNTBweCI+DQoJCTxvcHRpb24+YWxsPC9vcHRpb24+DQoJCTxvcHRpb24+MTwvb3B0aW9uPg0KCQk8b3B0aW9uPjI8L29wdGlvbj4NCgkJPG9wdGlvbiBzZWxlY3RlZD0ic2VsZWN0ZWQiPjM8L29wdGlvbj4NCgkJPG9wdGlvbj40PC9vcHRpb24+DQoJCTxvcHRpb24+NTwvb3B0aW9uPg0KCTwvc2VsZWN0Pg0KDQoJPGEgaWQ9InVwZGF0ZSIgY2xhc3M9InRoZW1lIGJ1dHRvbiB3aGl0ZSI+PD9waHAgX2UoJ0dvIFVwJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICk7Pz48L2E+DQo8L2Rpdj4NCjxicj48YnI+DQoNCg0KPD9waHANCiRkaXJfYXJyYXkgPSBhcnJheSgpOw0KJGljaWNsZV9hcnJheSA9IGFycmF5KCk7DQokdGltZV9zdGFydCA9IG1pY3JvdGltZSh0cnVlKTsNCg0KLy9lY2hvICc8cHJlPicgLiAkdGhpcy0+YnVpbGRfaWNpY2xlKCBBQlNQQVRILCBBQlNQQVRILCAnJyApIC4gJzwvcHJlPic7DQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQo/Pg0K
###PACKDATA,FILE_END,/controllers/pages/server_info/site_size.php,importbuddy/controllers/pages/server_info/site_size.php
###PACKDATA,FILE_START,/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
PD9waHANCmlmICggIWRlZmluZWQoICdQQl9JTVBPUlRCVUREWScgKSApIHsgLy8gTk9UIElOIElNUE9SVEJVRERZOg0KDQoJd3BfZW5xdWV1ZV9zY3JpcHQoICd0aGlja2JveCcgKTsNCgl3cF9wcmludF9zY3JpcHRzKCAndGhpY2tib3gnICk7DQoJd3BfcHJpbnRfc3R5bGVzKCAndGhpY2tib3gnICk7DQoJPz4NCgk8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KCSNiYWNrdXBidWRkeS1tZXRhLWxpbmstd3JhcCBhLnNob3ctc2V0dGluZ3Mgew0KCQlmbG9hdDogcmlnaHQ7DQoJCW1hcmdpbjogMCAwIDAgNnB4Ow0KCX0NCgkjc2NyZWVuLW1ldGEtbGlua3MgI2JhY2t1cGJ1ZGR5LW1ldGEtbGluay13cmFwIGEgew0KCQliYWNrZ3JvdW5kOiBub25lOw0KCX0NCgkjc2NyZWVuLW1ldGEtbGlua3MgI2JhY2t1cGJ1ZGR5LW1ldGEtbGluay13cmFwIGE6YWZ0ZXIgew0KCQljb250ZW50OiAnJzsNCgkJbWFyZ2luLXJpZ2h0OiA1cHg7DQoJfQ0KCTwvc3R5bGU+DQoNCgk8P3BocA0KDQoJcGJfYmFja3VwYnVkZHk6OmxvYWRfc2NyaXB0KCAnYWRtaW4uanMnICk7DQoJDQoJDQoJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+dGl0bGUoIF9fKCAnU2VydmVyIFRvb2xzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgKTsNCgliYWNrdXBidWRkeV9jb3JlOjp2ZXJzaW9uc19jb25maXJtKCk7DQoJDQoJJGRlZmF1bHRfdGFiID0gMDsNCglpZiAoIGlzX251bWVyaWMoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAndGFiJyApICkgKSB7DQoJCSRkZWZhdWx0X3RhYiA9IHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAndGFiJyApOw0KCX0NCgkNCglwYl9iYWNrdXBidWRkeTo6JHVpLT5zdGFydF90YWJzKA0KCQknZ2V0dGluZ19zdGFydGVkJywNCgkJYXJyYXkoDQoJCQlhcnJheSgNCgkJCQkndGl0bGUnCQk9PgkJX18oICdTZXJ2ZXInLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQknc2x1ZycJCT0+CQknc2VydmVyJywNCgkJCSksDQoJCQlhcnJheSgNCgkJCQkndGl0bGUnCQk9PgkJX18oICdEYXRhYmFzZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLA0KCQkJCSdzbHVnJwkJPT4JCSdkYXRhYmFzZScsDQoJCQkpLA0KCQkJYXJyYXkoDQoJCQkJJ3RpdGxlJwkJPT4JCV9fKCAnU2l0ZSBTaXplIE1hcHMnLCAnaXQtbDEwbi1iYWNrdXBidWRkeScgKSwNCgkJCQknc2x1ZycJCT0+CQknZmlsZXMnLA0KCQkJKSwNCgkJCWFycmF5KA0KCQkJCSd0aXRsZScJCT0+CQlfXyggJ1dvcmRQcmVzcyBTY2hlZHVsZXMgKENyb24pJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJJ3NsdWcnCQk9PgkJJ2Nyb24nLA0KCQkJKSwNCgkJKSwNCgkJJ3dpZHRoOiAxMDAlOycsDQoJCXRydWUsDQoJCSRkZWZhdWx0X3RhYg0KCSk7DQoJDQoJDQoJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnc2VydmVyJyApOw0KCQkNCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vc2VydmVyLnBocCcgKTsNCgkJDQoJCQ0KCQlyZXF1aXJlX29uY2UoICdzZXJ2ZXJfaW5mby9wZXJtaXNzaW9ucy5waHAnICk7DQoJCQ0KCQkNCgkJJHdwX3VwbG9hZF9kaXIgPSB3cF91cGxvYWRfZGlyKCk7DQoJCSR3cF9zZXR0aW5ncyA9IGFycmF5KCk7DQoJCQ0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2RpclsncGF0aCddICkgKSB7DQoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnVXBsb2FkIEZpbGUgUGF0aCcsICR3cF91cGxvYWRfZGlyWydwYXRoJ10sICd3cF91cGxvYWRfZGlyKCknICk7DQoJCX0NCgkJaWYgKCBpc3NldCggJHdwX3VwbG9hZF9kaXJbJ3VybCddICkgKSB7DQoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnVXBsb2FkIFVSTCcsICR3cF91cGxvYWRfZGlyWyd1cmwnXSwgJ3dwX3VwbG9hZF9kaXIoKScgKTsNCgkJfQ0KCQlpZiAoIGlzc2V0KCAkd3BfdXBsb2FkX2Rpclsnc3ViZGlyJ10gKSApIHsNCgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdVcGxvYWQgU3ViZGlyZWN0b3J5JywgJHdwX3VwbG9hZF9kaXJbJ3N1YmRpciddLCAnd3BfdXBsb2FkX2RpcigpJyk7DQoJCX0NCgkJaWYgKCBpc3NldCggJHdwX3VwbG9hZF9kaXJbJ2Jhc2V1cmwnXSApICkgew0KCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBCYXNlIFVSTCcsICR3cF91cGxvYWRfZGlyWydiYXNldXJsJ10sICd3cF91cGxvYWRfZGlyKCknICk7DQoJCX0NCgkJaWYgKCBpc3NldCggJHdwX3VwbG9hZF9kaXJbJ2Jhc2VkaXInXSApICkgew0KCQkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1VwbG9hZCBCYXNlIERpcmVjdG9yeScsICR3cF91cGxvYWRfZGlyWydiYXNlZGlyJ10sICd3cF91cGxvYWRfZGlyKCknICk7DQoJCX0NCgkJJHdwX3NldHRpbmdzW10gPSBhcnJheSggJ1NpdGUgVVJMJywgc2l0ZV91cmwoKSwgJ3NpdGVfdXJsKCknICk7DQoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdIb21lIFVSTCcsIGhvbWVfdXJsKCksICdob21lX3VybCgpJyApOw0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnV29yZFByZXNzIFJvb3QgUGF0aCcsIEFCU1BBVEgsICdBQlNQQVRIJyApOw0KCQkNCgkJLy8gTXVsdGlzaXRlIGV4dHJhczoNCgkJJHdwX3NldHRpbmdzX211bHRpc2l0ZSA9IGFycmF5KCk7DQoJCWlmICggaXNfbXVsdGlzaXRlKCkgKSB7DQoJCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnTmV0d29yayBTaXRlIFVSTCcsIG5ldHdvcmtfc2l0ZV91cmwoKSwgJ25ldHdvcmtfc2l0ZV91cmwoKScgKTsNCgkJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdOZXR3b3JrIEhvbWUgVVJMJywgbmV0d29ya19ob21lX3VybCgpLCAnbmV0d29ya19ob21lX3VybCgpJyApOw0KCQl9DQoJCQ0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgbG9jYWwgc3RvcmFnZScsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldEJhY2t1cERpcmVjdG9yeSgpLCAnQmFja3VwQnVkZHkgU2V0dGluZ3MnICk7DQoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdCYWNrdXBCdWRkeSB0ZW1wb3JhcnkgZmlsZXMnLCBiYWNrdXBidWRkeV9jb3JlOjpnZXRUZW1wRGlyZWN0b3J5KCksICdBQlNQQVRIICsgSGFyZGNvZGVkIGxvY2F0aW9uJyApOw0KCQkkd3Bfc2V0dGluZ3NbXSA9IGFycmF5KCAnQmFja3VwQnVkZHkgbG9ncycsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldExvZ0RpcmVjdG9yeSgpLCAnVXBsb2FkIEJhc2UgKyBCYWNrdXBCdWRkeScgKTsNCgkJDQoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdUaGVtZXMgcm9vdCcsIGJhY2t1cGJ1ZGR5X2NvcmU6OmdldF90aGVtZXNfcm9vdCgpLCAnYmFja3VwYnVkZHlfY29yZTo6Z2V0X3RoZW1lc19yb290KCknICk7DQoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdQbHVnaW5zIHJvb3QnLCBiYWNrdXBidWRkeV9jb3JlOjpnZXRfcGx1Z2luc19yb290KCksICdiYWNrdXBidWRkeV9jb3JlOjpnZXRfcGx1Z2luc19yb290KCknICk7DQoJCSR3cF9zZXR0aW5nc1tdID0gYXJyYXkoICdNZWRpYSByb290JywgYmFja3VwYnVkZHlfY29yZTo6Z2V0X21lZGlhX3Jvb3QoKSwgJ2JhY2t1cGJ1ZGR5X2NvcmU6OmdldF9tZWRpYV9yb290KCknICk7DQoJCQ0KCQkvLyBEaXNwbGF5IFdQIHNldHRpbmdzLi4NCgkJcGJfYmFja3VwYnVkZHk6OiR1aS0+bGlzdF90YWJsZSgNCgkJCSR3cF9zZXR0aW5ncywNCgkJCWFycmF5KA0KCQkJCSdhY3Rpb24nCQkJCQk9PglwYl9iYWNrdXBidWRkeTo6cGFnZV91cmwoKSwNCgkJCQknY29sdW1ucycJCQkJCT0+CWFycmF5KA0KCQkJCQkJCQkJCQkJCV9fKCAnVVJMcyAmIFBhdGhzJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJCQkJCQkJCQkJX18oICdWYWx1ZScsICdpdC1sMTBuLWJhY2t1cGJ1ZGR5JyApLA0KCQkJCQkJCQkJCQkJCV9fKCAnT2J0YWluZWQgdmlhJywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICksDQoJCQkJCQkJCQkJCQkpLA0KCQkJCSdjc3MnCQkJCQkJPT4JCSd3aWR0aDogMTAwJTsnLA0KCQkJKQ0KCQkpOw0KCQkNCgkJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+ZW5kX3RhYigpOw0KCQ0KCQ0KCQ0KCS8vIFRoaXMgcGFnZSBjYW4gdGFrZSBhIGJpdCB0byBydW4uDQoJLy8gUnVucyBBRlRFUiBzZXJ2ZXIgaW5mb3JtYXRpb24gaXMgZGlzcGxheWVkIHNvIHdlIGNhbiB2aWV3IHRoZSBkZWZhdWx0IGxpbWl0cyBmb3IgdGhlIHNlcnZlci4NCglwYl9iYWNrdXBidWRkeTo6c2V0X2dyZWVkeV9zY3JpcHRfbGltaXRzKCk7DQoJDQoJDQoJDQoJcGJfYmFja3VwYnVkZHk6OiR1aS0+c3RhcnRfdGFiKCAnZGF0YWJhc2UnICk7DQoJCQ0KCQlyZXF1aXJlX29uY2UoICdzZXJ2ZXJfaW5mby9kYXRhYmFzZS5waHAnICk7DQoJCWVjaG8gJzxicj48YnI+PGEgbmFtZT0iZGF0YWJhc2VfcmVwbGFjZSI+PC9hPic7DQoJCWVjaG8gJzxkaXYgY2xhc3M9InBiX2h0aXRsZSI+JyAuICdBZHZhbmNlZDogJyAuIF9fKCAnRGF0YWJhc2UgTWFzcyBUZXh0IFJlcGxhY2VtZW50JywgJ2l0LWwxMG4tYmFja3VwYnVkZHknICkgLiAnPC9kaXY+PGJyPic7DQoJCXBiX2JhY2t1cGJ1ZGR5Ojpsb2FkX3ZpZXcoICdfc2VydmVyX3Rvb2xzLWRhdGFiYXNlX3JlcGxhY2UnICk7DQoJCQ0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWIoKTsNCgkNCgkNCgkNCglwYl9iYWNrdXBidWRkeTo6JHVpLT5zdGFydF90YWIoICdmaWxlcycgKTsNCgkJDQoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3NpdGVfc2l6ZS5waHAnICk7DQoJCQ0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWIoKTsNCgkNCgkNCgkNCglwYl9iYWNrdXBidWRkeTo6JHVpLT5zdGFydF90YWIoICdjcm9uJyApOw0KCQkNCgkJcmVxdWlyZV9vbmNlKCAnc2VydmVyX2luZm8vY3Jvbi5waHAnICk7DQoJCQ0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWIoKTsNCgkNCgkNCgllY2hvICc8YnIgc3R5bGU9ImNsZWFyOiBib3RoOyI+PGJyPjxicj4nOw0KCXBiX2JhY2t1cGJ1ZGR5OjokdWktPmVuZF90YWJzKCk7DQoJDQoJDQoJDQoJLy8gSGFuZGxlcyB0aGlja2JveCBhdXRvLXJlc2l6aW5nLiBLZWVwIGF0IGJvdHRvbSBvZiBwYWdlIHRvIGF2b2lkIGlzc3Vlcy4NCglpZiAoICF3cF9zY3JpcHRfaXMoICdtZWRpYS11cGxvYWQnICkgKSB7DQoJCXdwX2VucXVldWVfc2NyaXB0KCAnbWVkaWEtdXBsb2FkJyApOw0KCQl3cF9wcmludF9zY3JpcHRzKCAnbWVkaWEtdXBsb2FkJyApOw0KCX0NCgkNCn0gZWxzZSB7IC8vIElOU0lERSBJTVBPUlRCVUREWToNCglpZiAoIHBiX2JhY2t1cGJ1ZGR5OjpfR0VUKCAnc2tpcF9zZXJ2ZXJpbmZvJyApID09ICcnICkgeyAvLyBHaXZlIGEgd29ya2Fyb3VuZCB0byBza2lwIHRoaXMuDQoJCXJlcXVpcmVfb25jZSggJ3NlcnZlcl9pbmZvL3NlcnZlci5waHAnICk7DQoJfSBlbHNlIHsNCgkJZWNobyAne1NraXBwaW5nIFNlcnZlciBJbmZvLiBzZWN0aW9uIGJhc2VkIG9uIHF1ZXJ5c3RyaW5nLn0nOw0KCX0NCn0NCj8+
###PACKDATA,FILE_END,/controllers/pages/server_tools.php,importbuddy/controllers/pages/server_tools.php
###PACKDATA,FILE_START,/destinations/stash2/class.itx_helper2.php,importbuddy/lib/stash2/class.itx_helper2.php
PD9waHANCnJlcXVpcmVfb25jZSggZGlybmFtZSggX19GSUxFX18gKSAuICcvY2xhc3MuaXRjcmVkLnBocCcgKTsNCg0KY2xhc3MgSVRYQVBJX0hlbHBlcjIgew0KCQ0KCXByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIF9waHBhc3NfaGFzaF9wYXNzd29yZCggJHBhc3N3b3JkICkgew0KCQlpZiAoICEgY2xhc3NfZXhpc3RzKCAnUGFzc3dvcmRIYXNoJyApICkgew0KCQkJcmVxdWlyZV9vbmNlKCBkaXJuYW1lKCBfX0ZJTEVfXyApIC4gJy9jbGFzcy1waHBhc3MucGhwJyk7DQoJCX0NCgkJDQoJCSRoYXNoZXIgPSBuZXcgUGFzc3dvcmRIYXNoKDgsIHRydWUpOw0KCQkkaGFzaCA9ICRoYXNoZXItPkhhc2hQYXNzd29yZCgkcGFzc3dvcmQpOw0KCQkNCgkJcmV0dXJuICRoYXNoOw0KCQkNCgl9DQoJDQoJLy8gV0FTOiBnZXRfd29yZHByZXNzX3BocGFzcygpLg0KCXB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gZ2V0X2FjY2Vzc190b2tlbigkdXNlciwgJHBhc3MsICRzaXRlLCAkd3ApIHsNCgkJaWYgKCAhIGNsYXNzX2V4aXN0cyggJ1Bhc3N3b3JkSGFzaCcgKSApIHsNCgkJCXJlcXVpcmVfb25jZSggZGlybmFtZSggX19GSUxFX18gKSAuICcvY2xhc3MtcGhwYXNzLnBocCcpOw0KCQl9DQoJCQ0KCQkkc291cmNlX3N0cmluZyA9ICRwYXNzIC4gJHVzZXIgLiBzdHJfcmVwbGFjZSggJ3d3dy4nLCAnJywgJHNpdGUgKSAuICR3cDsNCgkJJHNhbHRlZF9zdHJpbmcyID0gc3Vic3RyKCAkc291cmNlX3N0cmluZywgMCwgbWF4KCBzdHJsZW4oICRwYXNzICksIDUxMiApICk7ICAgICAvLyAgbmV3IGF1dGggd2l0aCBoYXNoZWQgcGFzc3dvcmRzDQoJCQ0KCQlyZXR1cm4gc2VsZjo6X3BocGFzc19oYXNoX3Bhc3N3b3JkKCAkc2FsdGVkX3N0cmluZzIgKTsNCgl9DQoJDQp9IC8vIEVuZCBjbGFzcy4=
###PACKDATA,FILE_END,/destinations/stash2/class.itx_helper2.php,importbuddy/lib/stash2/class.itx_helper2.php
###PACKDATA,FILE_START,/destinations/stash2/class.itcred.php,importbuddy/lib/stash2/class.itcred.php
PD9waHANCg0KICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICANCiAgICBjbGFzcyBpVGhlbWVzX0NyZWRlbnRpYWxzDQogICAgew0KICAgIA0KICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIA0KICAgICAgICBwcm90ZWN0ZWQgJGhhc2ggICAgICAgICAgICAgPSAnc2hhMjU2JzsgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgDQogICAgICAgIHByb3RlY3RlZCAkc2FsdF9wYWRkaW5nICAgICA9ICd3ZEhWd1UmSGNZY1dubGxvJWtUVVVueHBTY3k0JUlDTTI5JzsNCiAgICAgICAgDQogICAgICAgIHByb3RlY3RlZCAkaXRlcmF0aW9uX2NvdW50ICA9IDEzMTA3MjsNCiAgICAgICAgDQogICAgICAgIHByb3RlY3RlZCAka2V5X2xlbmd0aCAgICAgICA9IDY0Ow0KICAgICAgICAgICAgICAgDQogICAgICAgIHByb3RlY3RlZCAkcGFzc3dvcmQ7DQogICAgICAgIA0KICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgIA0KICAgICAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJHVzZXJuYW1lLCAkcGFzc3dvcmQsICRvcHRpb25zID0gYXJyYXkoKSkNCiAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgDQogICAgICAgICAgICAkdGhpcy0+dXNlcm5hbWUgPSAkdXNlcm5hbWU7DQogICAgICAgICAgICANCiAgICAgICAgICAgICR0aGlzLT5wYXNzd29yZCA9ICRwYXNzd29yZDsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZighZW1wdHkoJG9wdGlvbnNbJ2hhc2gnXSkpDQogICAgICAgICAgICAgICAgJHRoaXMtPmhhc2ggICAgICAgICAgICAgPSBzdHJ0b2xvd2VyKHRyaW0oJG9wdGlvbnNbJ2hhc2gnXSkpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZighZW1wdHkoJG9wdGlvbnNbJ2l0ZXJhdGlvbnMnXSkpDQogICAgICAgICAgICAgICAgJHRoaXMtPml0ZXJhdGlvbl9jb3VudCAgPSBpbnR2YWwoJG9wdGlvbnNbJ2l0ZXJhdGlvbnMnXSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYoIWVtcHR5KCRvcHRpb25zWydzYWx0J10pKQ0KICAgICAgICAgICAgICAgICR0aGlzLT5zYWx0X3BhZGRpbmcgICAgID0gJG9wdGlvbnNbJ3NhbHQnXTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYoIWVtcHR5KCRvcHRpb25zWydrZXlfbGVuZ3RoJ10pKQ0KICAgICAgICAgICAgICAgICR0aGlzLT5rZXlfbGVuZ3RoICAgICAgID0gaW50dmFsKCRvcHRpb25zWydrZXlfbGVuZ3RoJ10pOw0KICAgICAgICANCiAgICAgICAgfSAgICAgICAgICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgIA0KICAgICAgICANCiAgICAgICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBnZXRfcGFzc3dvcmRfaGFzaCgkdXNlcm5hbWUsICRwYXNzd29yZCwgJG9wdGlvbnMgPSBhcnJheSgpKQ0KICAgICAgICB7DQogICAgICAgICAgICAkaGFzaGVyID0gbmV3IGlUaGVtZXNfQ3JlZGVudGlhbHMoJHVzZXJuYW1lLCAkcGFzc3dvcmQsICRvcHRpb25zKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuICRoYXNoZXItPmdldF9wYmtkZjIoKTsNCiAgICAgICAgICAgIA0KICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgDQogICAgICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRfc2FsdCgpDQogICAgICAgIHsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHN0cnRvbG93ZXIodHJpbSgkdGhpcy0+dXNlcm5hbWUpKSAuICR0aGlzLT5zYWx0X3BhZGRpbmc7ICAgICAgICAgICAgDQogICAgICAgICAgICANCiAgICAgICAgfSAgICAgICAgICAgICAgICANCiAgICAgICAgDQogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgDQogICAgICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRfcGJrZGYyKCkNCiAgICAgICAgew0KICAgICAgICAgICAgDQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnBia2RmMigkdGhpcy0+aGFzaCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cGFzc3dvcmQsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmdldF9zYWx0KCksIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPml0ZXJhdGlvbl9jb3VudCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+a2V5X2xlbmd0aCAvIDIsIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UpOw0KICAgICAgICAgICAgDQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgICAgIA0KICAgICAgICANCiAgICAgICAgLyoNCiAgICAgICAgICogUEJLREYyIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIGFzIGRlZmluZWQgYnkgUlNBJ3MgUEtDUyAjNTogaHR0cHM6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzI4OTgudHh0DQogICAgICAgICAqICRhbGdvcml0aG0gLSBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLiBSZWNvbW1lbmRlZDogU0hBMjU2DQogICAgICAgICAqICRwYXNzd29yZCAtIFRoZSBwYXNzd29yZC4NCiAgICAgICAgICogJHNhbHQgLSBBIHNhbHQgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHBhc3N3b3JkLg0KICAgICAgICAgKiAkY291bnQgLSBJdGVyYXRpb24gY291bnQuIEhpZ2hlciBpcyBiZXR0ZXIsIGJ1dCBzbG93ZXIuIFJlY29tbWVuZGVkOiBBdCBsZWFzdCAxMDAwLg0KICAgICAgICAgKiAka2V5X2xlbmd0aCAtIFRoZSBsZW5ndGggb2YgdGhlIGRlcml2ZWQga2V5IGluIGJ5dGVzLg0KICAgICAgICAgKiAkcmF3X291dHB1dCAtIElmIHRydWUsIHRoZSBrZXkgaXMgcmV0dXJuZWQgaW4gcmF3IGJpbmFyeSBmb3JtYXQuIEhleCBlbmNvZGVkIG90aGVyd2lzZS4NCiAgICAgICAgICogUmV0dXJuczogQSAka2V5X2xlbmd0aC1ieXRlIGtleSBkZXJpdmVkIGZyb20gdGhlIHBhc3N3b3JkIGFuZCBzYWx0Lg0KICAgICAgICAgKg0KICAgICAgICAgKiBUZXN0IHZlY3RvcnMgY2FuIGJlIGZvdW5kIGhlcmU6IGh0dHBzOi8vd3d3LmlldGYub3JnL3JmYy9yZmM2MDcwLnR4dA0KICAgICAgICAgKg0KICAgICAgICAgKiBUaGlzIGltcGxlbWVudGF0aW9uIG9mIFBCS0RGMiB3YXMgb3JpZ2luYWxseSBjcmVhdGVkIGJ5IGh0dHBzOi8vZGVmdXNlLmNhDQogICAgICAgICAqIFdpdGggaW1wcm92ZW1lbnRzIGJ5IGh0dHA6Ly93d3cudmFyaWF0aW9ucy1vZi1zaGFkb3cuY29tDQogICAgICAgICAqLw0KICAgICAgICBwdWJsaWMgZnVuY3Rpb24gcGJrZGYyKCRhbGdvcml0aG0sICRwYXNzd29yZCwgJHNhbHQsICRjb3VudCwgJGtleV9sZW5ndGgsICRyYXdfb3V0cHV0ID0gZmFsc2UpDQogICAgICAgIHsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgJGFsZ29yaXRobSA9IHN0cnRvbG93ZXIoJGFsZ29yaXRobSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKCFpbl9hcnJheSgkYWxnb3JpdGhtLCBoYXNoX2FsZ29zKCksIHRydWUpKQ0KICAgICAgICAgICAgICAgIHRyaWdnZXJfZXJyb3IoJ1BCS0RGMiBFUlJPUjogSW52YWxpZCBoYXNoIGFsZ29yaXRobS4nLCBFX1VTRVJfRVJST1IpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZigkY291bnQgPD0gMCB8fCAka2V5X2xlbmd0aCA8PSAwKQ0KICAgICAgICAgICAgICAgIHRyaWdnZXJfZXJyb3IoJ1BCS0RGMiBFUlJPUjogSW52YWxpZCBwYXJhbWV0ZXJzLicsIEVfVVNFUl9FUlJPUik7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICANCiAgICAgICAgICAgICRoYXNoX2xlbmd0aCA9IHN0cmxlbihoYXNoKCRhbGdvcml0aG0sICcnLCB0cnVlKSk7DQogICAgICAgICAgICAkYmxvY2tfY291bnQgPSBjZWlsKCRrZXlfbGVuZ3RoIC8gJGhhc2hfbGVuZ3RoKTsNCiAgICAgICAgDQogICAgICAgICAgICAkb3V0cHV0ID0gJyc7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvcigkaSA9IDE7ICRpIDw9ICRibG9ja19jb3VudDsgJGkrKykgDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgLy8gJGkgZW5jb2RlZCBhcyA0IGJ5dGVzLCBiaWcgZW5kaWFuLg0KICAgICAgICAgICAgICAgICRsYXN0ID0gJHNhbHQgLiBwYWNrKCJOIiwgJGkpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIC8vIGZpcnN0IGl0ZXJhdGlvbg0KICAgICAgICAgICAgICAgICRsYXN0ID0gJHhvcnN1bSA9IGhhc2hfaG1hYygkYWxnb3JpdGhtLCAkbGFzdCwgJHBhc3N3b3JkLCB0cnVlKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAvLyBwZXJmb3JtIHRoZSBvdGhlciAkY291bnQgLSAxIGl0ZXJhdGlvbnMNCiAgICAgICAgICAgICAgICBmb3IgKCRqID0gMTsgJGogPCAkY291bnQ7ICRqKyspIA0KICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgJHhvcnN1bSBePSAoJGxhc3QgPSBoYXNoX2htYWMoJGFsZ29yaXRobSwgJGxhc3QsICRwYXNzd29yZCwgdHJ1ZSkpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAkb3V0cHV0IC49ICR4b3JzdW07DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9DQogICAgICAgIA0KICAgICAgICAgICAgaWYoJHJhd19vdXRwdXQpDQogICAgICAgICAgICAgICAgcmV0dXJuIHN1YnN0cigkb3V0cHV0LCAwLCAka2V5X2xlbmd0aCk7DQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgcmV0dXJuIGJpbjJoZXgoc3Vic3RyKCRvdXRwdXQsIDAsICRrZXlfbGVuZ3RoKSk7DQogICAgICAgICAgICAgICAgDQogICAgICAgIH0NCg0KICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgIH0NCiAgICANCiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgDQo=
###PACKDATA,FILE_END,/destinations/stash2/class.itcred.php,importbuddy/lib/stash2/class.itcred.php
###PACKDATA,FILE_START,/destinations/stash2/class-phpass.php,importbuddy/lib/stash2/class-phpass.php
PD9waHANCi8qKg0KICogUG9ydGFibGUgUEhQIHBhc3N3b3JkIGhhc2hpbmcgZnJhbWV3b3JrLg0KICogQHBhY2thZ2UgcGhwYXNzDQogKiBAc2luY2UgMi41LjANCiAqIEB2ZXJzaW9uIDAuMyAvIFdvcmRQcmVzcw0KICogQGxpbmsgaHR0cDovL3d3dy5vcGVud2FsbC5jb20vcGhwYXNzLw0KICovDQoNCiMNCiMgV3JpdHRlbiBieSBTb2xhciBEZXNpZ25lciA8c29sYXIgYXQgb3BlbndhbGwuY29tPiBpbiAyMDA0LTIwMDYgYW5kIHBsYWNlZCBpbg0KIyB0aGUgcHVibGljIGRvbWFpbi4gIFJldmlzZWQgaW4gc3Vic2VxdWVudCB5ZWFycywgc3RpbGwgcHVibGljIGRvbWFpbi4NCiMNCiMgVGhlcmUncyBhYnNvbHV0ZWx5IG5vIHdhcnJhbnR5Lg0KIw0KIyBQbGVhc2UgYmUgc3VyZSB0byB1cGRhdGUgdGhlIFZlcnNpb24gbGluZSBpZiB5b3UgZWRpdCB0aGlzIGZpbGUgaW4gYW55IHdheS4NCiMgSXQgaXMgc3VnZ2VzdGVkIHRoYXQgeW91IGxlYXZlIHRoZSBtYWluIHZlcnNpb24gbnVtYmVyIGludGFjdCwgYnV0IGluZGljYXRlDQojIHlvdXIgcHJvamVjdCBuYW1lIChhZnRlciB0aGUgc2xhc2gpIGFuZCBhZGQgeW91ciBvd24gcmV2aXNpb24gaW5mb3JtYXRpb24uDQojDQojIFBsZWFzZSBkbyBub3QgY2hhbmdlIHRoZSAicHJpdmF0ZSIgcGFzc3dvcmQgaGFzaGluZyBtZXRob2QgaW1wbGVtZW50ZWQgaW4NCiMgaGVyZSwgdGhlcmVieSBtYWtpbmcgeW91ciBoYXNoZXMgaW5jb21wYXRpYmxlLiAgSG93ZXZlciwgaWYgeW91IG11c3QsIHBsZWFzZQ0KIyBjaGFuZ2UgdGhlIGhhc2ggdHlwZSBpZGVudGlmaWVyICh0aGUgIiRQJCIpIHRvIHNvbWV0aGluZyBkaWZmZXJlbnQuDQojDQojIE9idmlvdXNseSwgc2luY2UgdGhpcyBjb2RlIGlzIGluIHRoZSBwdWJsaWMgZG9tYWluLCB0aGUgYWJvdmUgYXJlIG5vdA0KIyByZXF1aXJlbWVudHMgKHRoZXJlIGNhbiBiZSBub25lKSwgYnV0IG1lcmVseSBzdWdnZXN0aW9ucy4NCiMNCg0KLyoqDQogKiBQb3J0YWJsZSBQSFAgcGFzc3dvcmQgaGFzaGluZyBmcmFtZXdvcmsuDQogKg0KICogQHBhY2thZ2UgcGhwYXNzDQogKiBAdmVyc2lvbiAwLjMgLyBXb3JkUHJlc3MNCiAqIEBsaW5rIGh0dHA6Ly93d3cub3BlbndhbGwuY29tL3BocGFzcy8NCiAqIEBzaW5jZSAyLjUuMA0KICovDQpjbGFzcyBQYXNzd29yZEhhc2ggew0KCXZhciAkaXRvYTY0Ow0KCXZhciAkaXRlcmF0aW9uX2NvdW50X2xvZzI7DQoJdmFyICRwb3J0YWJsZV9oYXNoZXM7DQoJdmFyICRyYW5kb21fc3RhdGU7DQoNCgkvKioNCgkgKiBQSFA1IGNvbnN0cnVjdG9yLg0KCSAqLw0KCWZ1bmN0aW9uIF9fY29uc3RydWN0KCAkaXRlcmF0aW9uX2NvdW50X2xvZzIsICRwb3J0YWJsZV9oYXNoZXMgKQ0KCXsNCgkJJHRoaXMtPml0b2E2NCA9ICcuLzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6JzsNCg0KCQlpZiAoJGl0ZXJhdGlvbl9jb3VudF9sb2cyIDwgNCB8fCAkaXRlcmF0aW9uX2NvdW50X2xvZzIgPiAzMSkNCgkJCSRpdGVyYXRpb25fY291bnRfbG9nMiA9IDg7DQoJCSR0aGlzLT5pdGVyYXRpb25fY291bnRfbG9nMiA9ICRpdGVyYXRpb25fY291bnRfbG9nMjsNCg0KCQkkdGhpcy0+cG9ydGFibGVfaGFzaGVzID0gJHBvcnRhYmxlX2hhc2hlczsNCg0KCQkkdGhpcy0+cmFuZG9tX3N0YXRlID0gbWljcm90aW1lKCkgLiB1bmlxaWQocmFuZCgpLCBUUlVFKTsgLy8gcmVtb3ZlZCBnZXRteXBpZCgpIGZvciBjb21wYXRpYmlsaXR5IHJlYXNvbnMNCgl9DQoNCgkvKioNCgkgKiBQSFA0IGNvbnN0cnVjdG9yLg0KCSAqLw0KCXB1YmxpYyBmdW5jdGlvbiBQYXNzd29yZEhhc2goICRpdGVyYXRpb25fY291bnRfbG9nMiwgJHBvcnRhYmxlX2hhc2hlcyApIHsNCgkJc2VsZjo6X19jb25zdHJ1Y3QoICRpdGVyYXRpb25fY291bnRfbG9nMiwgJHBvcnRhYmxlX2hhc2hlcyApOw0KCX0NCg0KCWZ1bmN0aW9uIGdldF9yYW5kb21fYnl0ZXMoJGNvdW50KQ0KCXsNCgkJJG91dHB1dCA9ICcnOw0KCQlpZiAoIEBpc19yZWFkYWJsZSgnL2Rldi91cmFuZG9tJykgJiYNCgkJICAgICgkZmggPSBAZm9wZW4oJy9kZXYvdXJhbmRvbScsICdyYicpKSkgew0KCQkJJG91dHB1dCA9IGZyZWFkKCRmaCwgJGNvdW50KTsNCgkJCWZjbG9zZSgkZmgpOw0KCQl9DQoNCgkJaWYgKHN0cmxlbigkb3V0cHV0KSA8ICRjb3VudCkgew0KCQkJJG91dHB1dCA9ICcnOw0KCQkJZm9yICgkaSA9IDA7ICRpIDwgJGNvdW50OyAkaSArPSAxNikgew0KCQkJCSR0aGlzLT5yYW5kb21fc3RhdGUgPQ0KCQkJCSAgICBtZDUobWljcm90aW1lKCkgLiAkdGhpcy0+cmFuZG9tX3N0YXRlKTsNCgkJCQkkb3V0cHV0IC49DQoJCQkJICAgIHBhY2soJ0gqJywgbWQ1KCR0aGlzLT5yYW5kb21fc3RhdGUpKTsNCgkJCX0NCgkJCSRvdXRwdXQgPSBzdWJzdHIoJG91dHB1dCwgMCwgJGNvdW50KTsNCgkJfQ0KDQoJCXJldHVybiAkb3V0cHV0Ow0KCX0NCg0KCWZ1bmN0aW9uIGVuY29kZTY0KCRpbnB1dCwgJGNvdW50KQ0KCXsNCgkJJG91dHB1dCA9ICcnOw0KCQkkaSA9IDA7DQoJCWRvIHsNCgkJCSR2YWx1ZSA9IG9yZCgkaW5wdXRbJGkrK10pOw0KCQkJJG91dHB1dCAuPSAkdGhpcy0+aXRvYTY0WyR2YWx1ZSAmIDB4M2ZdOw0KCQkJaWYgKCRpIDwgJGNvdW50KQ0KCQkJCSR2YWx1ZSB8PSBvcmQoJGlucHV0WyRpXSkgPDwgODsNCgkJCSRvdXRwdXQgLj0gJHRoaXMtPml0b2E2NFsoJHZhbHVlID4+IDYpICYgMHgzZl07DQoJCQlpZiAoJGkrKyA+PSAkY291bnQpDQoJCQkJYnJlYWs7DQoJCQlpZiAoJGkgPCAkY291bnQpDQoJCQkJJHZhbHVlIHw9IG9yZCgkaW5wdXRbJGldKSA8PCAxNjsNCgkJCSRvdXRwdXQgLj0gJHRoaXMtPml0b2E2NFsoJHZhbHVlID4+IDEyKSAmIDB4M2ZdOw0KCQkJaWYgKCRpKysgPj0gJGNvdW50KQ0KCQkJCWJyZWFrOw0KCQkJJG91dHB1dCAuPSAkdGhpcy0+aXRvYTY0WygkdmFsdWUgPj4gMTgpICYgMHgzZl07DQoJCX0gd2hpbGUgKCRpIDwgJGNvdW50KTsNCg0KCQlyZXR1cm4gJG91dHB1dDsNCgl9DQoNCglmdW5jdGlvbiBnZW5zYWx0X3ByaXZhdGUoJGlucHV0KQ0KCXsNCgkJJG91dHB1dCA9ICckUCQnOw0KCQkkb3V0cHV0IC49ICR0aGlzLT5pdG9hNjRbbWluKCR0aGlzLT5pdGVyYXRpb25fY291bnRfbG9nMiArDQoJCQkoKFBIUF9WRVJTSU9OID49ICc1JykgPyA1IDogMyksIDMwKV07DQoJCSRvdXRwdXQgLj0gJHRoaXMtPmVuY29kZTY0KCRpbnB1dCwgNik7DQoNCgkJcmV0dXJuICRvdXRwdXQ7DQoJfQ0KDQoJZnVuY3Rpb24gY3J5cHRfcHJpdmF0ZSgkcGFzc3dvcmQsICRzZXR0aW5nKQ0KCXsNCgkJJG91dHB1dCA9ICcqMCc7DQoJCWlmIChzdWJzdHIoJHNldHRpbmcsIDAsIDIpID09ICRvdXRwdXQpDQoJCQkkb3V0cHV0ID0gJyoxJzsNCg0KCQkkaWQgPSBzdWJzdHIoJHNldHRpbmcsIDAsIDMpOw0KCQkjIFdlIHVzZSAiJFAkIiwgcGhwQkIzIHVzZXMgIiRIJCIgZm9yIHRoZSBzYW1lIHRoaW5nDQoJCWlmICgkaWQgIT0gJyRQJCcgJiYgJGlkICE9ICckSCQnKQ0KCQkJcmV0dXJuICRvdXRwdXQ7DQoNCgkJJGNvdW50X2xvZzIgPSBzdHJwb3MoJHRoaXMtPml0b2E2NCwgJHNldHRpbmdbM10pOw0KCQlpZiAoJGNvdW50X2xvZzIgPCA3IHx8ICRjb3VudF9sb2cyID4gMzApDQoJCQlyZXR1cm4gJG91dHB1dDsNCg0KCQkkY291bnQgPSAxIDw8ICRjb3VudF9sb2cyOw0KDQoJCSRzYWx0ID0gc3Vic3RyKCRzZXR0aW5nLCA0LCA4KTsNCgkJaWYgKHN0cmxlbigkc2FsdCkgIT0gOCkNCgkJCXJldHVybiAkb3V0cHV0Ow0KDQoJCSMgV2UncmUga2luZCBvZiBmb3JjZWQgdG8gdXNlIE1ENSBoZXJlIHNpbmNlIGl0J3MgdGhlIG9ubHkNCgkJIyBjcnlwdG9ncmFwaGljIHByaW1pdGl2ZSBhdmFpbGFibGUgaW4gYWxsIHZlcnNpb25zIG9mIFBIUA0KCQkjIGN1cnJlbnRseSBpbiB1c2UuICBUbyBpbXBsZW1lbnQgb3VyIG93biBsb3ctbGV2ZWwgY3J5cHRvDQoJCSMgaW4gUEhQIHdvdWxkIHJlc3VsdCBpbiBtdWNoIHdvcnNlIHBlcmZvcm1hbmNlIGFuZA0KCQkjIGNvbnNlcXVlbnRseSBpbiBsb3dlciBpdGVyYXRpb24gY291bnRzIGFuZCBoYXNoZXMgdGhhdCBhcmUNCgkJIyBxdWlja2VyIHRvIGNyYWNrIChieSBub24tUEhQIGNvZGUpLg0KCQlpZiAoUEhQX1ZFUlNJT04gPj0gJzUnKSB7DQoJCQkkaGFzaCA9IG1kNSgkc2FsdCAuICRwYXNzd29yZCwgVFJVRSk7DQoJCQlkbyB7DQoJCQkJJGhhc2ggPSBtZDUoJGhhc2ggLiAkcGFzc3dvcmQsIFRSVUUpOw0KCQkJfSB3aGlsZSAoLS0kY291bnQpOw0KCQl9IGVsc2Ugew0KCQkJJGhhc2ggPSBwYWNrKCdIKicsIG1kNSgkc2FsdCAuICRwYXNzd29yZCkpOw0KCQkJZG8gew0KCQkJCSRoYXNoID0gcGFjaygnSConLCBtZDUoJGhhc2ggLiAkcGFzc3dvcmQpKTsNCgkJCX0gd2hpbGUgKC0tJGNvdW50KTsNCgkJfQ0KDQoJCSRvdXRwdXQgPSBzdWJzdHIoJHNldHRpbmcsIDAsIDEyKTsNCgkJJG91dHB1dCAuPSAkdGhpcy0+ZW5jb2RlNjQoJGhhc2gsIDE2KTsNCg0KCQlyZXR1cm4gJG91dHB1dDsNCgl9DQoNCglmdW5jdGlvbiBnZW5zYWx0X2V4dGVuZGVkKCRpbnB1dCkNCgl7DQoJCSRjb3VudF9sb2cyID0gbWluKCR0aGlzLT5pdGVyYXRpb25fY291bnRfbG9nMiArIDgsIDI0KTsNCgkJIyBUaGlzIHNob3VsZCBiZSBvZGQgdG8gbm90IHJldmVhbCB3ZWFrIERFUyBrZXlzLCBhbmQgdGhlDQoJCSMgbWF4aW11bSB2YWxpZCB2YWx1ZSBpcyAoMioqMjQgLSAxKSB3aGljaCBpcyBvZGQgYW55d2F5Lg0KCQkkY291bnQgPSAoMSA8PCAkY291bnRfbG9nMikgLSAxOw0KDQoJCSRvdXRwdXQgPSAnXyc7DQoJCSRvdXRwdXQgLj0gJHRoaXMtPml0b2E2NFskY291bnQgJiAweDNmXTsNCgkJJG91dHB1dCAuPSAkdGhpcy0+aXRvYTY0WygkY291bnQgPj4gNikgJiAweDNmXTsNCgkJJG91dHB1dCAuPSAkdGhpcy0+aXRvYTY0WygkY291bnQgPj4gMTIpICYgMHgzZl07DQoJCSRvdXRwdXQgLj0gJHRoaXMtPml0b2E2NFsoJGNvdW50ID4+IDE4KSAmIDB4M2ZdOw0KDQoJCSRvdXRwdXQgLj0gJHRoaXMtPmVuY29kZTY0KCRpbnB1dCwgMyk7DQoNCgkJcmV0dXJuICRvdXRwdXQ7DQoJfQ0KDQoJZnVuY3Rpb24gZ2Vuc2FsdF9ibG93ZmlzaCgkaW5wdXQpDQoJew0KCQkjIFRoaXMgb25lIG5lZWRzIHRvIHVzZSBhIGRpZmZlcmVudCBvcmRlciBvZiBjaGFyYWN0ZXJzIGFuZCBhDQoJCSMgZGlmZmVyZW50IGVuY29kaW5nIHNjaGVtZSBmcm9tIHRoZSBvbmUgaW4gZW5jb2RlNjQoKSBhYm92ZS4NCgkJIyBXZSBjYXJlIGJlY2F1c2UgdGhlIGxhc3QgY2hhcmFjdGVyIGluIG91ciBlbmNvZGVkIHN0cmluZyB3aWxsDQoJCSMgb25seSByZXByZXNlbnQgMiBiaXRzLiAgV2hpbGUgdHdvIGtub3duIGltcGxlbWVudGF0aW9ucyBvZg0KCQkjIGJjcnlwdCB3aWxsIGhhcHBpbHkgYWNjZXB0IGFuZCBjb3JyZWN0IGEgc2FsdCBzdHJpbmcgd2hpY2gNCgkJIyBoYXMgdGhlIDQgdW51c2VkIGJpdHMgc2V0IHRvIG5vbi16ZXJvLCB3ZSBkbyBub3Qgd2FudCB0byB0YWtlDQoJCSMgY2hhbmNlcyBhbmQgd2UgYWxzbyBkbyBub3Qgd2FudCB0byB3YXN0ZSBhbiBhZGRpdGlvbmFsIGJ5dGUNCgkJIyBvZiBlbnRyb3B5Lg0KCQkkaXRvYTY0ID0gJy4vQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknOw0KDQoJCSRvdXRwdXQgPSAnJDJhJCc7DQoJCSRvdXRwdXQgLj0gY2hyKG9yZCgnMCcpICsgJHRoaXMtPml0ZXJhdGlvbl9jb3VudF9sb2cyIC8gMTApOw0KCQkkb3V0cHV0IC49IGNocihvcmQoJzAnKSArICR0aGlzLT5pdGVyYXRpb25fY291bnRfbG9nMiAlIDEwKTsNCgkJJG91dHB1dCAuPSAnJCc7DQoNCgkJJGkgPSAwOw0KCQlkbyB7DQoJCQkkYzEgPSBvcmQoJGlucHV0WyRpKytdKTsNCgkJCSRvdXRwdXQgLj0gJGl0b2E2NFskYzEgPj4gMl07DQoJCQkkYzEgPSAoJGMxICYgMHgwMykgPDwgNDsNCgkJCWlmICgkaSA+PSAxNikgew0KCQkJCSRvdXRwdXQgLj0gJGl0b2E2NFskYzFdOw0KCQkJCWJyZWFrOw0KCQkJfQ0KDQoJCQkkYzIgPSBvcmQoJGlucHV0WyRpKytdKTsNCgkJCSRjMSB8PSAkYzIgPj4gNDsNCgkJCSRvdXRwdXQgLj0gJGl0b2E2NFskYzFdOw0KCQkJJGMxID0gKCRjMiAmIDB4MGYpIDw8IDI7DQoNCgkJCSRjMiA9IG9yZCgkaW5wdXRbJGkrK10pOw0KCQkJJGMxIHw9ICRjMiA+PiA2Ow0KCQkJJG91dHB1dCAuPSAkaXRvYTY0WyRjMV07DQoJCQkkb3V0cHV0IC49ICRpdG9hNjRbJGMyICYgMHgzZl07DQoJCX0gd2hpbGUgKDEpOw0KDQoJCXJldHVybiAkb3V0cHV0Ow0KCX0NCg0KCWZ1bmN0aW9uIEhhc2hQYXNzd29yZCgkcGFzc3dvcmQpDQoJew0KCQlpZiAoIHN0cmxlbiggJHBhc3N3b3JkICkgPiA0MDk2ICkgew0KCQkJcmV0dXJuICcqJzsNCgkJfQ0KDQoJCSRyYW5kb20gPSAnJzsNCg0KCQlpZiAoQ1JZUFRfQkxPV0ZJU0ggPT0gMSAmJiAhJHRoaXMtPnBvcnRhYmxlX2hhc2hlcykgew0KCQkJJHJhbmRvbSA9ICR0aGlzLT5nZXRfcmFuZG9tX2J5dGVzKDE2KTsNCgkJCSRoYXNoID0NCgkJCSAgICBjcnlwdCgkcGFzc3dvcmQsICR0aGlzLT5nZW5zYWx0X2Jsb3dmaXNoKCRyYW5kb20pKTsNCgkJCWlmIChzdHJsZW4oJGhhc2gpID09IDYwKQ0KCQkJCXJldHVybiAkaGFzaDsNCgkJfQ0KDQoJCWlmIChDUllQVF9FWFRfREVTID09IDEgJiYgISR0aGlzLT5wb3J0YWJsZV9oYXNoZXMpIHsNCgkJCWlmIChzdHJsZW4oJHJhbmRvbSkgPCAzKQ0KCQkJCSRyYW5kb20gPSAkdGhpcy0+Z2V0X3JhbmRvbV9ieXRlcygzKTsNCgkJCSRoYXNoID0NCgkJCSAgICBjcnlwdCgkcGFzc3dvcmQsICR0aGlzLT5nZW5zYWx0X2V4dGVuZGVkKCRyYW5kb20pKTsNCgkJCWlmIChzdHJsZW4oJGhhc2gpID09IDIwKQ0KCQkJCXJldHVybiAkaGFzaDsNCgkJfQ0KDQoJCWlmIChzdHJsZW4oJHJhbmRvbSkgPCA2KQ0KCQkJJHJhbmRvbSA9ICR0aGlzLT5nZXRfcmFuZG9tX2J5dGVzKDYpOw0KCQkkaGFzaCA9DQoJCSAgICAkdGhpcy0+Y3J5cHRfcHJpdmF0ZSgkcGFzc3dvcmQsDQoJCSAgICAkdGhpcy0+Z2Vuc2FsdF9wcml2YXRlKCRyYW5kb20pKTsNCgkJaWYgKHN0cmxlbigkaGFzaCkgPT0gMzQpDQoJCQlyZXR1cm4gJGhhc2g7DQoNCgkJIyBSZXR1cm5pbmcgJyonIG9uIGVycm9yIGlzIHNhZmUgaGVyZSwgYnV0IHdvdWxkIF9ub3RfIGJlIHNhZmUNCgkJIyBpbiBhIGNyeXB0KDMpLWxpa2UgZnVuY3Rpb24gdXNlZCBfYm90aF8gZm9yIGdlbmVyYXRpbmcgbmV3DQoJCSMgaGFzaGVzIGFuZCBmb3IgdmFsaWRhdGluZyBwYXNzd29yZHMgYWdhaW5zdCBleGlzdGluZyBoYXNoZXMuDQoJCXJldHVybiAnKic7DQoJfQ0KDQoJZnVuY3Rpb24gQ2hlY2tQYXNzd29yZCgkcGFzc3dvcmQsICRzdG9yZWRfaGFzaCkNCgl7DQoJCWlmICggc3RybGVuKCAkcGFzc3dvcmQgKSA+IDQwOTYgKSB7DQoJCQlyZXR1cm4gZmFsc2U7DQoJCX0NCg0KCQkkaGFzaCA9ICR0aGlzLT5jcnlwdF9wcml2YXRlKCRwYXNzd29yZCwgJHN0b3JlZF9oYXNoKTsNCgkJaWYgKCRoYXNoWzBdID09ICcqJykNCgkJCSRoYXNoID0gY3J5cHQoJHBhc3N3b3JkLCAkc3RvcmVkX2hhc2gpOw0KDQoJCXJldHVybiAkaGFzaCA9PT0gJHN0b3JlZF9oYXNoOw0KCX0NCn0=
###PACKDATA,FILE_END,/destinations/stash2/class-phpass.php,importbuddy/lib/stash2/class-phpass.php
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
Q29weXJpZ2h0IChjKSAyMDA2LTIwMTAgUnlhbiBQYXJtYW4sIEZvbGVlbyBJbmMuLCBhbmQgY29udHJpYnV0b3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLg0KDQpSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmUNCnBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0Og0KDQoJKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZg0KCSAgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLg0KDQoJKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdA0KCSAgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMNCgkgIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4NCg0KCSogTmVpdGhlciB0aGUgbmFtZSBvZiBSeWFuIFBhcm1hbiwgRm9sZWVvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvDQoJICBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuDQoJICBwZXJtaXNzaW9uLg0KDQpUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTICJBUyBJUyIgQU5EIEFOWSBFWFBSRVNTDQpPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWQ0KQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUlMNCkFORCBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUg0KQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUg0KU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkNClRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SDQpPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFDQpQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS4NCg==
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/LICENSE,importbuddy/lib/requestcore/LICENSE
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
IyBSZXF1ZXN0Q29yZQ0KDQpSZXF1ZXN0Q29yZSBpcyBhIGxpZ2h0d2VpZ2h0IGNVUkwtYmFzZWQgSFRUUCByZXF1ZXN0L3Jlc3BvbnNlIGNsYXNzIHRoYXQgbGV2ZXJhZ2VzIE11bHRpQ3VybCBmb3IgcGFyYWxsZWwgcmVxdWVzdHMuDQoNCiMjIyBQRUFSIEhUVFBfUmVxdWVzdD8NCg0KUmVxdWVzdENvcmUgd2FzIHdyaXR0ZW4gYXMgYSByZXBsYWNlbWVudCBmb3IgW1BFQVIgSFRUUF9SZXF1ZXN0XShodHRwOi8vcGVhci5waHAubmV0L2h0dHBfcmVxdWVzdC8pLiBXaGlsZSBQRUFSIEhUVFBfUmVxdWVzdCBpcyBmdWxsLWZlYXR1cmVkIGFuZCBoZWF2eSwgUmVxdWVzdENvcmUgZmVhdHVyZXMgb25seSB0aGUgZXNzZW50aWFscyBhbmQgaXMgdmVyeSBsaWdodHdlaWdodC4gSXQgYWxzbyBsZXZlcmFnZXMgdGhlIGJhdGNoIHJlcXVlc3Qgc3VwcG9ydCBpbiBjVVJMJ3MgYGN1cmxfbXVsdGlfZXhlYygpYCB0byBlbmFibGUgbXVsdGktdGhyZWFkZWQgcmVxdWVzdHMgdGhhdCBmaXJlIGluIHBhcmFsbGVsLg0KDQojIyMgUmVmZXJlbmNlIGFuZCBEb3dubG9hZA0KDQpZb3UgY2FuIGZpbmQgdGhlIGNsYXNzIHJlZmVyZW5jZSBhdCA8aHR0cDovL3NreXp5eC5naXRodWIuY29tL3JlcXVlc3Rjb3JlLz4uIFlvdSBjYW4gZ2V0IHRoZSBjb2RlIGZyb20gPGh0dHA6Ly9naXRodWIuY29tL3NreXp5eC9yZXF1ZXN0Y29yZT4uDQoNCiMjIyBMaWNlbnNlIGFuZCBDb3B5cmlnaHQNCg0KVGhpcyBjb2RlIGlzIENvcHlyaWdodCAoYykgMjAwOC0yMDEwLCBSeWFuIFBhcm1hbi4gSG93ZXZlciwgSSdtIGxpY2Vuc2luZyB0aGlzIGNvZGUgZm9yIG90aGVycyB0byB1c2UgdW5kZXIgdGhlIFtTaW1wbGlmaWVkIEJTRCBsaWNlbnNlXShodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL2JzZC1saWNlbnNlLnBocCkuDQo=
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/README.md,importbuddy/lib/requestcore/README.md
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem
IyMNCiMjIGNhLWJ1bmRsZS5jcnQgLS0gQnVuZGxlIG9mIENBIFJvb3QgQ2VydGlmaWNhdGVzDQojIw0KIyMgQ2VydGlmaWNhdGUgZGF0YSBmcm9tIE1vemlsbGEgYXMgb2Y6IFdlZCBKYW4gMTggMDA6MDQ6MTYgMjAxMg0KIyMNCiMjIFRoaXMgaXMgYSBidW5kbGUgb2YgWC41MDkgY2VydGlmaWNhdGVzIG9mIHB1YmxpYyBDZXJ0aWZpY2F0ZSBBdXRob3JpdGllcw0KIyMgKENBKS4gVGhlc2Ugd2VyZSBhdXRvbWF0aWNhbGx5IGV4dHJhY3RlZCBmcm9tIE1vemlsbGEncyByb290IGNlcnRpZmljYXRlcw0KIyMgZmlsZSAoY2VydGRhdGEudHh0KS4gIFRoaXMgZmlsZSBjYW4gYmUgZm91bmQgaW4gdGhlIG1vemlsbGEgc291cmNlIHRyZWU6DQojIyBodHRwOi8vbXhyLm1vemlsbGEub3JnL21vemlsbGEvc291cmNlL3NlY3VyaXR5L25zcy9saWIvY2tmdy9idWlsdGlucy9jZXJ0ZGF0YS50eHQ/cmF3PTENCiMjDQojIyBJdCBjb250YWlucyB0aGUgY2VydGlmaWNhdGVzIGluIFBFTSBmb3JtYXQgYW5kIHRoZXJlZm9yZQ0KIyMgY2FuIGJlIGRpcmVjdGx5IHVzZWQgd2l0aCBjdXJsIC8gbGliY3VybCAvIHBocF9jdXJsLCBvciB3aXRoDQojIyBhbiBBcGFjaGUrbW9kX3NzbCB3ZWJzZXJ2ZXIgZm9yIFNTTCBjbGllbnQgYXV0aGVudGljYXRpb24uDQojIyBKdXN0IGNvbmZpZ3VyZSB0aGlzIGZpbGUgYXMgdGhlIFNTTENBQ2VydGlmaWNhdGVGaWxlLg0KIyMNCg0KIyAqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqDQojIFZlcnNpb246IE1QTCAxLjEvR1BMIDIuMC9MR1BMIDIuMQ0KIw0KIyBUaGUgY29udGVudHMgb2YgdGhpcyBmaWxlIGFyZSBzdWJqZWN0IHRvIHRoZSBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlIFZlcnNpb24NCiMgMS4xICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoDQojIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiMgaHR0cDovL3d3dy5tb3ppbGxhLm9yZy9NUEwvDQojDQojIFNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgYmFzaXMsDQojIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZQ0KIyBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyByaWdodHMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZQ0KIyBMaWNlbnNlLg0KIw0KIyBUaGUgT3JpZ2luYWwgQ29kZSBpcyB0aGUgTmV0c2NhcGUgc2VjdXJpdHkgbGlicmFyaWVzLg0KIw0KIyBUaGUgSW5pdGlhbCBEZXZlbG9wZXIgb2YgdGhlIE9yaWdpbmFsIENvZGUgaXMNCiMgTmV0c2NhcGUgQ29tbXVuaWNhdGlvbnMgQ29ycG9yYXRpb24uDQojIFBvcnRpb25zIGNyZWF0ZWQgYnkgdGhlIEluaXRpYWwgRGV2ZWxvcGVyIGFyZSBDb3B5cmlnaHQgKEMpIDE5OTQtMjAwMA0KIyB0aGUgSW5pdGlhbCBEZXZlbG9wZXIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuDQojDQojIENvbnRyaWJ1dG9yKHMpOg0KIw0KIyBBbHRlcm5hdGl2ZWx5LCB0aGUgY29udGVudHMgb2YgdGhpcyBmaWxlIG1heSBiZSB1c2VkIHVuZGVyIHRoZSB0ZXJtcyBvZg0KIyBlaXRoZXIgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIFZlcnNpb24gMiBvciBsYXRlciAodGhlICJHUEwiKSwgb3INCiMgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBWZXJzaW9uIDIuMSBvciBsYXRlciAodGhlICJMR1BMIiksDQojIGluIHdoaWNoIGNhc2UgdGhlIHByb3Zpc2lvbnMgb2YgdGhlIEdQTCBvciB0aGUgTEdQTCBhcmUgYXBwbGljYWJsZSBpbnN0ZWFkDQojIG9mIHRob3NlIGFib3ZlLiBJZiB5b3Ugd2lzaCB0byBhbGxvdyB1c2Ugb2YgeW91ciB2ZXJzaW9uIG9mIHRoaXMgZmlsZSBvbmx5DQojIHVuZGVyIHRoZSB0ZXJtcyBvZiBlaXRoZXIgdGhlIEdQTCBvciB0aGUgTEdQTCwgYW5kIG5vdCB0byBhbGxvdyBvdGhlcnMgdG8NCiMgdXNlIHlvdXIgdmVyc2lvbiBvZiB0aGlzIGZpbGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNUEwsIGluZGljYXRlIHlvdXINCiMgZGVjaXNpb24gYnkgZGVsZXRpbmcgdGhlIHByb3Zpc2lvbnMgYWJvdmUgYW5kIHJlcGxhY2UgdGhlbSB3aXRoIHRoZSBub3RpY2UNCiMgYW5kIG90aGVyIHByb3Zpc2lvbnMgcmVxdWlyZWQgYnkgdGhlIEdQTCBvciB0aGUgTEdQTC4gSWYgeW91IGRvIG5vdCBkZWxldGUNCiMgdGhlIHByb3Zpc2lvbnMgYWJvdmUsIGEgcmVjaXBpZW50IG1heSB1c2UgeW91ciB2ZXJzaW9uIG9mIHRoaXMgZmlsZSB1bmRlcg0KIyB0aGUgdGVybXMgb2YgYW55IG9uZSBvZiB0aGUgTVBMLCB0aGUgR1BMIG9yIHRoZSBMR1BMLg0KIw0KIyAqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKg0KIyBAKCMpICRSQ1NmaWxlOiBjZXJ0ZGF0YS50eHQsdiAkICRSZXZpc2lvbjogMS44MSAkICREYXRlOiAyMDEyLzAxLzE3IDIyOjAyOjM3ICQNCg0KR1RFIEN5YmVyVHJ1c3QgR2xvYmFsIFJvb3QNCj09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUNXakNDQWNNQ0FnR2xNQTBHQ1NxR1NJYjNEUUVCQkFVQU1IVXhDekFKQmdOVkJBWVRBbFZUTVJnd0ZnWURWUVFLRXc5SFZFVWcNClEyOXljRzl5WVhScGIyNHhKekFsQmdOVkJBc1RIa2RVUlNCRGVXSmxjbFJ5ZFhOMElGTnZiSFYwYVc5dWN5d2dTVzVqTGpFak1DRUcNCkExVUVBeE1hUjFSRklFTjVZbVZ5VkhKMWMzUWdSMnh2WW1Gc0lGSnZiM1F3SGhjTk9UZ3dPREV6TURBeU9UQXdXaGNOTVRnd09ERXoNCk1qTTFPVEF3V2pCMU1Rc3dDUVlEVlFRR0V3SlZVekVZTUJZR0ExVUVDaE1QUjFSRklFTnZjbkJ2Y21GMGFXOXVNU2N3SlFZRFZRUUwNCkV4NUhWRVVnUTNsaVpYSlVjblZ6ZENCVGIyeDFkR2x2Ym5Nc0lFbHVZeTR4SXpBaEJnTlZCQU1UR2tkVVJTQkRlV0psY2xSeWRYTjANCklFZHNiMkpoYkNCU2IyOTBNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUFBNEdOQURDQmlRS0JnUUNWRDZDMjhGQ2M2SHJIaU0zZEZ3NHUNCnNKVFFHejBPOXBUQWlwVEhCc2lRbDhpNFpCcDZmbXc4VStFM0tITmdmN0tYVXdlZlUvbHRXSlRTcjQxdGlHZUE1dTJ5bGM5eU1jcWwNCkhISzZYQUxuWkVMbitha3Mxam9OckkxQ3FpUUJPZWFjUHdHRlZ3MVloMFg0MDRXcWsya21oWEJJZ0Q4U0ZjZDV0QjhGTHp0aW1RSUQNCkFRQUJNQTBHQ1NxR1NJYjNEUUVCQkFVQUE0R0JBRzNyR3ducFh0bFIyMmNpWWFRcVBFaDM0NkI4cHQ1em9oUURoVDM3cXc0d3hZTVcNCk00RVRDSjU3TkU3ZlFNaDAxN2w5M1BSMlZYMmJZMVFZNmZEcTgxeXgyWXRDSHJuQWxVNjYrdFhpZlBWb1liK083QVdYWDF1dzE2T0YNCk5NUWtwdzBQbFpQdnk1VFluaCtkWElWdHg2cXVUeDhpdGMyVnJicW56UG1yQzNwLw0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpUaGF3dGUgU2VydmVyIENBDQo9PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURFekNDQW55Z0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRUUZBRENCeERFTE1Ba0dBMVVFQmhNQ1drRXhGVEFUQmdOVkJBZ1QNCkRGZGxjM1JsY200Z1EyRndaVEVTTUJBR0ExVUVCeE1KUTJGd1pTQlViM2R1TVIwd0d3WURWUVFLRXhSVWFHRjNkR1VnUTI5dWMzVnMNCmRHbHVaeUJqWXpFb01DWUdBMVVFQ3hNZlEyVnlkR2xtYVdOaGRHbHZiaUJUWlhKMmFXTmxjeUJFYVhacGMybHZiakVaTUJjR0ExVUUNCkF4TVFWR2hoZDNSbElGTmxjblpsY2lCRFFURW1NQ1FHQ1NxR1NJYjNEUUVKQVJZWGMyVnlkbVZ5TFdObGNuUnpRSFJvWVhkMFpTNWoNCmIyMHdIaGNOT1RZd09EQXhNREF3TURBd1doY05NakF4TWpNeE1qTTFPVFU1V2pDQnhERUxNQWtHQTFVRUJoTUNXa0V4RlRBVEJnTlYNCkJBZ1RERmRsYzNSbGNtNGdRMkZ3WlRFU01CQUdBMVVFQnhNSlEyRndaU0JVYjNkdU1SMHdHd1lEVlFRS0V4UlVhR0YzZEdVZ1EyOXUNCmMzVnNkR2x1WnlCall6RW9NQ1lHQTFVRUN4TWZRMlZ5ZEdsbWFXTmhkR2x2YmlCVFpYSjJhV05sY3lCRWFYWnBjMmx2YmpFWk1CY0cNCkExVUVBeE1RVkdoaGQzUmxJRk5sY25abGNpQkRRVEVtTUNRR0NTcUdTSWIzRFFFSkFSWVhjMlZ5ZG1WeUxXTmxjblJ6UUhSb1lYZDANClpTNWpiMjB3Z1o4d0RRWUpLb1pJaHZjTkFRRUJCUUFEZ1kwQU1JR0pBb0dCQU5Pa1VHN0kvMVpyNXM5ZHR1b01hSFZIb3FyQzJvUWwNCi9LajBSMUhhaGJVZ2RKU0dIZzkxeWVrSVlmVUdiVEJ1RlJrQzZWTEFZdHRObVo3aWFneEVPTTMrdnVOa0NYREYvckZyS2JZdlNjZzcNCjFDY0VKUkNYTCtlUWJjQW9RcG5YVEVQZXcvVWhiVlNmWGNOWTRjRGsyVnV3dU55MGU5ODJPc0sxWmlJUzFvY05BZ01CQUFHakV6QVINCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUVCUUFEZ1lFQUIvcE1hVno3bGN4RzdvV0RUU0V3anNyWnFHOUoNCkd1YmFVZU5nY0d5RVlSR2hHc2hJUGxsRGZVK1ZQYUdMdHd0aW1IcDFpdDJJVGs2ZVFOdW96REowdVc4Tnh1T3pSQXZaaW0rYUtadVoNCkdDZzcwZU5BS0pwYVBOVzE1eUFiaThxa3E0M3BVZG5pVEN4WnFkcTVzblViOWtMeTc4ZnlHUG1KdktQL2lpTXVjRWM9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClRoYXd0ZSBQcmVtaXVtIFNlcnZlciBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURKekNDQXBDZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRUUZBRENCempFTE1Ba0dBMVVFQmhNQ1drRXhGVEFUQmdOVkJBZ1QNCkRGZGxjM1JsY200Z1EyRndaVEVTTUJBR0ExVUVCeE1KUTJGd1pTQlViM2R1TVIwd0d3WURWUVFLRXhSVWFHRjNkR1VnUTI5dWMzVnMNCmRHbHVaeUJqWXpFb01DWUdBMVVFQ3hNZlEyVnlkR2xtYVdOaGRHbHZiaUJUWlhKMmFXTmxjeUJFYVhacGMybHZiakVoTUI4R0ExVUUNCkF4TVlWR2hoZDNSbElGQnlaVzFwZFcwZ1UyVnlkbVZ5SUVOQk1TZ3dKZ1lKS29aSWh2Y05BUWtCRmhsd2NtVnRhWFZ0TFhObGNuWmwNCmNrQjBhR0YzZEdVdVkyOXRNQjRYRFRrMk1EZ3dNVEF3TURBd01Gb1hEVEl3TVRJek1USXpOVGsxT1Zvd2djNHhDekFKQmdOVkJBWVQNCkFscEJNUlV3RXdZRFZRUUlFd3hYWlhOMFpYSnVJRU5oY0dVeEVqQVFCZ05WQkFjVENVTmhjR1VnVkc5M2JqRWRNQnNHQTFVRUNoTVUNClZHaGhkM1JsSUVOdmJuTjFiSFJwYm1jZ1kyTXhLREFtQmdOVkJBc1RIME5sY25ScFptbGpZWFJwYjI0Z1UyVnlkbWxqWlhNZ1JHbDINCmFYTnBiMjR4SVRBZkJnTlZCQU1UR0ZSb1lYZDBaU0JRY21WdGFYVnRJRk5sY25abGNpQkRRVEVvTUNZR0NTcUdTSWIzRFFFSkFSWVoNCmNISmxiV2wxYlMxelpYSjJaWEpBZEdoaGQzUmxMbU52YlRDQm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDZ1lFQTBqWTINCmFvdlh3bHVlMm9GQllvODQ3a2tFVmRiUTd4d2JsUlpIN3hoSU5UcFM5Q3RxQm84N0wrcFc0NitHalo0WDk1NjBaWFVDVGUvTENhSWgNClVkaWIwR2ZRdWcyU0JoUnoxSlBMbHlvQW5GeE9ETHo2RlZMODhrUnUyaEZLYmdpZkx5M2orYW82aG5PMlJsTll5SWtGdllNUnVITS8NCnFnZU45RUpONTBDZEhEY0NBd0VBQWFNVE1CRXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUVFGQUFPQmdRQW0NClNDd1d3bGo2NkJaMERLcXFYMVEvOHRmSmVHQmVYbTQzWXlKM05uNnlGOFEwdWZVSWhmekpBVGovVGI3eUZrSkQ1N3RhUnZ2QnhoRWYNCjhVcXdLRWJKdzhSQ2ZiejZxMWx1MWJkUmlCSGpwSVVaYTRKTXBBd1NyZW1rcmoveHcwbGxtb3pGeUQ0bHQ1U1p1NUl5Y1Fmd2hsN3QNClVDZW1EYVlqK2J2THBnY1VRZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkVxdWlmYXggU2VjdXJlIENBDQo9PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlESURDQ0FvbWdBd0lCQWdJRU5kNzB6ekFOQmdrcWhraUc5dzBCQVFVRkFEQk9NUXN3Q1FZRFZRUUdFd0pWVXpFUU1BNEdBMVVFDQpDaE1IUlhGMWFXWmhlREV0TUNzR0ExVUVDeE1rUlhGMWFXWmhlQ0JUWldOMWNtVWdRMlZ5ZEdsbWFXTmhkR1VnUVhWMGFHOXlhWFI1DQpNQjRYRFRrNE1EZ3lNakUyTkRFMU1Wb1hEVEU0TURneU1qRTJOREUxTVZvd1RqRUxNQWtHQTFVRUJoTUNWVk14RURBT0JnTlZCQW9UDQpCMFZ4ZFdsbVlYZ3hMVEFyQmdOVkJBc1RKRVZ4ZFdsbVlYZ2dVMlZqZFhKbElFTmxjblJwWm1sallYUmxJRUYxZEdodmNtbDBlVENCDQpuekFOQmdrcWhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUF3VjJ4V0djSVl1NmdtaTBmQ0cyUkZHaVlDaDcrMmdSdkU0UmlJY1BSDQpmTTZmQmVDNEFmQk9OT3ppaXBVRVpLenhhMU5mQmJQTFo0Qy9RZ0tPL3QwQkNlemhBQlJQL1B2d0ROMUR1bHNyNFIrQWNKa1ZWNU1XDQo4UStYYXJmQ2FDTWN6RTFaTUt4UkhqdXZLOWJ1WTBWN3hkbGZVTkxqVUE4NmlPZS9GUDNneDdrQ0F3RUFBYU9DQVFrd2dnRUZNSEFHDQpBMVVkSHdScE1HY3daYUJqb0dHa1h6QmRNUXN3Q1FZRFZRUUdFd0pWVXpFUU1BNEdBMVVFQ2hNSFJYRjFhV1poZURFdE1Dc0dBMVVFDQpDeE1rUlhGMWFXWmhlQ0JUWldOMWNtVWdRMlZ5ZEdsbWFXTmhkR1VnUVhWMGFHOXlhWFI1TVEwd0N3WURWUVFERXdSRFVrd3hNQm9HDQpBMVVkRUFRVE1CR0JEekl3TVRnd09ESXlNVFkwTVRVeFdqQUxCZ05WSFE4RUJBTUNBUVl3SHdZRFZSMGpCQmd3Rm9BVVNPWm8rU3ZTDQpzcFhYUjlnaklCQlBNNWlRbjlRd0hRWURWUjBPQkJZRUZFam1hUGtyMHJLVjEwZllJeUFRVHpPWWtKL1VNQXdHQTFVZEV3UUZNQU1CDQpBZjh3R2dZSktvWklodlo5QjBFQUJBMHdDeHNGVmpNdU1HTURBZ2JBTUEwR0NTcUdTSWIzRFFFQkJRVUFBNEdCQUZqT0tlcjg5OTYxDQp6Z0s1RjdXRjBibmo0SlhNSlRFTkFLYVNibisya21PZVVKWFJtbS9rRWQ1amhXNlk3cWovV3NqVFZiSm1jVmZld0NIclBTcW5JMGtCDQpCSVpDZS96dWY2SVdVclZuWjlOQTJ6c21XTElvZHoydUZIZGgxdm9xWmllZ0RmcW5jMXpxY1BHVUlXVkVYL3I4N3lsb3FhS0hlZTk1DQo3MCtzQjNjNA0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4gR2xvYmFsIENBIDENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlES1RDQ0FwS2dBd0lCQWdJRU5uQVZsakFOQmdrcWhraUc5dzBCQVFVRkFEQkdNUXN3Q1FZRFZRUUdFd0pWVXpFa01DSUdBMVVFDQpDaE1iUkdsbmFYUmhiQ0JUYVdkdVlYUjFjbVVnVkhKMWMzUWdRMjh1TVJFd0R3WURWUVFMRXdoRVUxUkRRU0JGTVRBZUZ3MDVPREV5DQpNVEF4T0RFd01qTmFGdzB4T0RFeU1UQXhPRFF3TWpOYU1FWXhDekFKQmdOVkJBWVRBbFZUTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzDQpJRk5wWjI1aGRIVnlaU0JVY25WemRDQkRieTR4RVRBUEJnTlZCQXNUQ0VSVFZFTkJJRVV4TUlHZE1BMEdDU3FHU0liM0RRRUJBUVVBDQpBNEdMQURDQmh3S0JnUUNnYklHcHp6UWVKTjMraGlqTTNvTXYrVjdVUXRMb2RHQm1FNWdHSEtsUkVtbHZNVlc1U1hJQUNIN1RwV0pFDQpOeVNaajltRFNJK1piWlVUdTBNN0xrbE9pRGZCdTFoLy91RzkrTHRoemZOSHdKbW04Zk9SNkhoOEFNdGh5VVFuY1dsVlNuNUpUZTJpDQpvNzRDVEFES0FxanVBUUl4WkE5U0xSTjBkamExZXJRdGNRSUJBNk9DQVNRd2dnRWdNQkVHQ1dDR1NBR0crRUlCQVFRRUF3SUFCekJvDQpCZ05WSFI4RVlUQmZNRjJnVzZCWnBGY3dWVEVMTUFrR0ExVUVCaE1DVlZNeEpEQWlCZ05WQkFvVEcwUnBaMmwwWVd3Z1UybG5ibUYwDQpkWEpsSUZSeWRYTjBJRU52TGpFUk1BOEdBMVVFQ3hNSVJGTlVRMEVnUlRFeERUQUxCZ05WQkFNVEJFTlNUREV3S3dZRFZSMFFCQ1F3DQpJb0FQTVRrNU9ERXlNVEF4T0RFd01qTmFnUTh5TURFNE1USXhNREU0TVRBeU0xb3dDd1lEVlIwUEJBUURBZ0VHTUI4R0ExVWRJd1FZDQpNQmFBRkdwNWZwRnBSaGdUQ2dKM3BWbGJZSmdsRHFMNE1CMEdBMVVkRGdRV0JCUnFlWDZSYVVZWUV3b0NkNlZaVzJDWUpRNmkrREFNDQpCZ05WSFJNRUJUQURBUUgvTUJrR0NTcUdTSWIyZlFkQkFBUU1NQW9iQkZZMExqQURBZ1NRTUEwR0NTcUdTSWIzRFFFQkJRVUFBNEdCDQpBQ0lTMkhvZDNJRUd0Z2xsc29mSUgxNjBMK25FSHZJOHdic0VrQkZLZzA1K2s3bE5Rc2VTSnFCY05KbzRjdmo5YXhZK0lPNkNpekVxDQpremFGSTRpS1BBTm8wOGtKRDAzOGJLVGFLSEtURG9tQXNIMytnRzlsYlJnemw0dkNhNG51WUQzSW0rOS9LekppYzVQTFBPTjc0blo0DQpSYnloa3dTN2hwODZXME42dzRwbA0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4gR2xvYmFsIENBIDMNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlES1RDQ0FwS2dBd0lCQWdJRU5tN1R6akFOQmdrcWhraUc5dzBCQVFVRkFEQkdNUXN3Q1FZRFZRUUdFd0pWVXpFa01DSUdBMVVFDQpDaE1iUkdsbmFYUmhiQ0JUYVdkdVlYUjFjbVVnVkhKMWMzUWdRMjh1TVJFd0R3WURWUVFMRXdoRVUxUkRRU0JGTWpBZUZ3MDVPREV5DQpNRGt4T1RFM01qWmFGdzB4T0RFeU1Ea3hPVFEzTWpaYU1FWXhDekFKQmdOVkJBWVRBbFZUTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzDQpJRk5wWjI1aGRIVnlaU0JVY25WemRDQkRieTR4RVRBUEJnTlZCQXNUQ0VSVFZFTkJJRVV5TUlHZE1BMEdDU3FHU0liM0RRRUJBUVVBDQpBNEdMQURDQmh3S0JnUUMvazQ4WGt1OHpFeGpyRUg5T0ZyLy9CbzhxaGJ4ZStTU21KSWkyQTdmQncxOERXOUZ2cm41QzZtWWp1R09EDQpWdnNvTGVFNGk3VHVxQUhoemh5MmlDb2lSb1g3bjZkd3FVY1VQODdlWmZDb2NmZFBKbXlNdk1hMTc5NUpKLzlJS24zb1RRUE14N0pTDQp4aGN4RXp1MVRkdkl4UGJERHlRcTJneWQ1NUZiZ00yVW5RSUJBNk9DQVNRd2dnRWdNQkVHQ1dDR1NBR0crRUlCQVFRRUF3SUFCekJvDQpCZ05WSFI4RVlUQmZNRjJnVzZCWnBGY3dWVEVMTUFrR0ExVUVCaE1DVlZNeEpEQWlCZ05WQkFvVEcwUnBaMmwwWVd3Z1UybG5ibUYwDQpkWEpsSUZSeWRYTjBJRU52TGpFUk1BOEdBMVVFQ3hNSVJGTlVRMEVnUlRJeERUQUxCZ05WQkFNVEJFTlNUREV3S3dZRFZSMFFCQ1F3DQpJb0FQTVRrNU9ERXlNRGt4T1RFM01qWmFnUTh5TURFNE1USXdPVEU1TVRjeU5sb3dDd1lEVlIwUEJBUURBZ0VHTUI4R0ExVWRJd1FZDQpNQmFBRkI2Q1RTaGxnRHpKUVc2c05TNWF5OTd1K0RsYk1CMEdBMVVkRGdRV0JCUWVnazBvWllBOHlVRnVyRFV1V3N2ZTd2ZzVXekFNDQpCZ05WSFJNRUJUQURBUUgvTUJrR0NTcUdTSWIyZlFkQkFBUU1NQW9iQkZZMExqQURBZ1NRTUEwR0NTcUdTSWIzRFFFQkJRVUFBNEdCDQpBRWVOZzYxaTh0dXdua1VpQmJtaTFnTU9PSExubnZ4NzVwTzJtcVdpbE1nMEhaSFJ4ZGYwQ2lVUFBYaUJuZyt4WjhTUVRHUGRYcWZpDQp1cC8xOTAybE1YdWNLUzFNL21RKzdMWlQvdXFiN1lMYmRIVkxCM2x1SHRnWmczUGU5VDdRdGQ3blMyaDlReTRxSU9GK29IaEVuZ2oxDQptUG5IZnhzYjFnWWdBbGlodzZJRA0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpWZXJpc2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUNQRENDQWFVQ0VIQzY1QjBRMlNrMHRqaktld1BNdXI4d0RRWUpLb1pJaHZjTkFRRUNCUUF3WHpFTE1Ba0dBMVVFQmhNQ1ZWTXgNCkZ6QVZCZ05WQkFvVERsWmxjbWxUYVdkdUxDQkpibU11TVRjd05RWURWUVFMRXk1RGJHRnpjeUF6SUZCMVlteHBZeUJRY21sdFlYSjUNCklFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TUI0WERUazJNREV5T1RBd01EQXdNRm9YRFRJNE1EZ3dNVEl6TlRrMU9Wb3cNClh6RUxNQWtHQTFVRUJoTUNWVk14RnpBVkJnTlZCQW9URGxabGNtbFRhV2R1TENCSmJtTXVNVGN3TlFZRFZRUUxFeTVEYkdGemN5QXoNCklGQjFZbXhwWXlCUWNtbHRZWEo1SUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUENCkE0R05BRENCaVFLQmdRREpYRm1lOGh1S0FSUzBFTjhFUU52alY2OXFSVUNQaEF3TDBUUFoyUkhQN2dKWUh5WDNLcWhFQmFyc0F4OTQNCmY1NlR1Wm9BcWlOOTFxeUZvbU5GeDNJbnpQUk14blZ4MGpudlQwTHdkZDhLa01hT0lHK1lEL2lzSTE5d0tUYWt5WWJuc1pvZ3kxT2wNCmhlYzl2bjJhL2lSRk05eDJGZTBQb25Ga1RHVXVnV2hGcHdJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQWdVQUE0R0JBTHRNRWl2UExDWUENClR4UVQzYWI3L0FvUmhJenpLQnhua2k5OHRzWDYzL0RvbGJ3ZGoyd3NxRkhNYzlpa3dGUHdUdFltd0hZQlY0R1NYaUh4MGJILzU5QWgNCldNMXBGK05FSEp3WlJEbUpYTnljQUE5V2pRS1o3YUtRUlV6a3V4Q2tQZkF5QXc3eHp2am95VkdNNW1LZjVwL0FmYmR5bk1rMk9tdWYNClRxai9aQTFrDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClZlcmlzaWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURBakNDQW1zQ0VIM1ovZ2ZQcUI2M0VIbG4rNmVKTk1Zd0RRWUpLb1pJaHZjTkFRRUZCUUF3Z2NFeEN6QUpCZ05WQkFZVEFsVlQNCk1SY3dGUVlEVlFRS0V3NVdaWEpwVTJsbmJpd2dTVzVqTGpFOE1Eb0dBMVVFQ3hNelEyeGhjM01nTXlCUWRXSnNhV01nVUhKcGJXRnkNCmVTQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVNBdElFY3lNVG93T0FZRFZRUUxFekVvWXlrZ01UazVPQ0JXWlhKcFUybG4NCmJpd2dTVzVqTGlBdElFWnZjaUJoZFhSb2IzSnBlbVZrSUhWelpTQnZibXg1TVI4d0hRWURWUVFMRXhaV1pYSnBVMmxuYmlCVWNuVnoNCmRDQk9aWFIzYjNKck1CNFhEVGs0TURVeE9EQXdNREF3TUZvWERUSTRNRGd3TVRJek5UazFPVm93Z2NFeEN6QUpCZ05WQkFZVEFsVlQNCk1SY3dGUVlEVlFRS0V3NVdaWEpwVTJsbmJpd2dTVzVqTGpFOE1Eb0dBMVVFQ3hNelEyeGhjM01nTXlCUWRXSnNhV01nVUhKcGJXRnkNCmVTQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVNBdElFY3lNVG93T0FZRFZRUUxFekVvWXlrZ01UazVPQ0JXWlhKcFUybG4NCmJpd2dTVzVqTGlBdElFWnZjaUJoZFhSb2IzSnBlbVZrSUhWelpTQnZibXg1TVI4d0hRWURWUVFMRXhaV1pYSnBVMmxuYmlCVWNuVnoNCmRDQk9aWFIzYjNKck1JR2ZNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0R05BRENCaVFLQmdRRE1YdEVSWFZ4cDBLdlR1V3BNbVI5Wm1EQ08NCkZvVWdSbTFIUDlTRklJVGhiYlA0cE8wTThSY1BPL21uK1NYWHdjK0VZL0o4WTgraVIvTEdXek9PWkVBRWFNR0F1V1FjUlhmSDJHNzENCmxTazhVT2cwMTNnZnFMcHRRNUdWajBWWFhuN0YrOHFrQk92cWx6ZFVNRys3QVVjeU04M2NWNXRrYVdING14MGNpVTljWndJREFRQUINCk1BMEdDU3FHU0liM0RRRUJCUVVBQTRHQkFGRk56YjVjeTVnWm5CV3lBVGw0TGswUFozQndtY1lRV3BTa1UwMVViU3V2RFYxQWkyVFQNCjErN2VWbUdTWDZiRUhSQmhOdE1zSnp6b0tRbTVFV1IwekxWem54eElxYnhoQWU3aUY2WU00MEFJT3c3bjYwUnpLcHJ4YVpMdmNSVEQNCk9heHhwNUVKYitSeEJyTzZXVmNtZVFEMitBMmlNekFvMUtwWW9KMmRhWkg5DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkdsb2JhbFNpZ24gUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURkVENDQWwyZ0F3SUJBZ0lMQkFBQUFBQUJGVXRhdzVRd0RRWUpLb1pJaHZjTkFRRUZCUUF3VnpFTE1Ba0dBMVVFQmhNQ1FrVXgNCkdUQVhCZ05WQkFvVEVFZHNiMkpoYkZOcFoyNGdibll0YzJFeEVEQU9CZ05WQkFzVEIxSnZiM1FnUTBFeEd6QVpCZ05WQkFNVEVrZHMNCmIySmhiRk5wWjI0Z1VtOXZkQ0JEUVRBZUZ3MDVPREE1TURFeE1qQXdNREJhRncweU9EQXhNamd4TWpBd01EQmFNRmN4Q3pBSkJnTlYNCkJBWVRBa0pGTVJrd0Z3WURWUVFLRXhCSGJHOWlZV3hUYVdkdUlHNTJMWE5oTVJBd0RnWURWUVFMRXdkU2IyOTBJRU5CTVJzd0dRWUQNClZRUURFeEpIYkc5aVlXeFRhV2R1SUZKdmIzUWdRMEV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRGENCkR1YVpqYzZqNDArS2Z2dnhpNE1sYStwSUgvRXFzTG1WRVFTOThHUFI0bWRtenh6ZHp4dElLKzZOaVk2YXJ5bUFaYXZweHkwU3k2c2MNClRIQUhvVDBLTU0wVmpVLzQzZFNNVUJVYzcxRHV4QzczL09sUzhwRjk0RzNWTlRDT1hrTno4a0hwMVdyanNvazZWams0YndZOGlHbGINCktrM0ZwMVM0YkluTW0vazh5dVg5aWZVU1BKSjRsdGJjZEc2VFJHSFJqY2RHc25VT2h1Z1ppdFZ0Yk5WNEZwV2k2Y2dLT092eUpCTlANCmMxU1RFNFU2Rzd3ZU5MV0xCWXk1ZDR1eDJ4OGdrYXNKVTI2UXpuczNkTGx3UjVFaVVXTVdlYTZ4cmtFbUNNZ1pLOUZHcWtqV1pDclgNCmd6VC9MQ3JCYkJsRFNnZUY1OU44OWlGbzcrcnlVcDkvazVEUEFnTUJBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lCQmpBUEJnTlYNCkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlJnZTJZYVJRMlh5b2xRTDMwRXpUU28vL3o5U3pBTkJna3Foa2lHOXcwQkFRVUYNCkFBT0NBUUVBMW5QbmZFOTIwSTIvN0xxaXZqVEZLREsxZlB4c25Dd3J2UW1lVTc5clhxb1JTTGJsQ0tPenlqMWhUZE5HQ2JNK3c2RGoNClkxVWI4cnJ2clRuaFE3azRvK1l2aWlZNzc2QlFWdm5HQ3YwNHpjUUxjRkdVbDVnRTM4TmZsTlVWeVJSQm5NUmRkV1FWRGY5Vk1PeUcNCmovOE43eXk1WTBiMnF2emZ2R245TGhKSVpKcmdsZkNtN3ltUEFiRVZ0UXdkcGY1cExHa2tlQjZ6cHh4eFl1N0t5SmVzRjEyS3d2aEgNCmhtNHF4Rll4bGRCbmlZVXIrV3ltWFVhZERLcUM1SmxSM1hDMzIxWTlZZVJxNFZ6Vzl2NDkza0hNQjY1alVyOVRVL1FyNmNmOXR2ZUMNClg0WFNRUmpiZ2JNRUhNVWZwSUJ2RlNESjNneUlDaDNXWmxYaS9FakpLU1pwNEE9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMg0KPT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRHVqQ0NBcUtnQXdJQkFnSUxCQUFBQUFBQkQ0WW01ZzB3RFFZSktvWklodmNOQVFFRkJRQXdUREVnTUI0R0ExVUVDeE1YUjJ4dg0KWW1Gc1UybG5iaUJTYjI5MElFTkJJQzBnVWpJeEV6QVJCZ05WQkFvVENrZHNiMkpoYkZOcFoyNHhFekFSQmdOVkJBTVRDa2RzYjJKaA0KYkZOcFoyNHdIaGNOTURZeE1qRTFNRGd3TURBd1doY05NakV4TWpFMU1EZ3dNREF3V2pCTU1TQXdIZ1lEVlFRTEV4ZEhiRzlpWVd4VA0KYVdkdUlGSnZiM1FnUTBFZ0xTQlNNakVUTUJFR0ExVUVDaE1LUjJ4dlltRnNVMmxuYmpFVE1CRUdBMVVFQXhNS1IyeHZZbUZzVTJsbg0KYmpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2JQSkE2K0xtOG9tVVZDeEtzK0lWU2JDOU4vaEhENg0KRXJQTHY0ZGZ4bitHMDdJd1hOYjlyZkY3M09YNFlKWUpraEQxMEZQZSszdCtjNGlzVW9oN1NxYktTYVplcUtlTVdoRzhlb0xydm96cA0KczZ5V0pRZVhTcGtxQnkrMEhuZS9pZysxQW53YmxyakZ1VG9zdk5ZU3VldFpmZUxRQm9aZlhrbHF0VGxlaURUc3ZIZ01DSmlFYktqTg0KUzdTZ2ZReDVUZkM0TGNzaHl0VnNXMzNob0NtRW9mblRsRW5MSkdLUklMemRDOVhaelBucUp3b3JjNUhHblJ1c3lNdm80S0QwTDVDTA0KVGZ1d05odjJHWHFGNEczeVlST0lYSi9na3dwUmw0cGF6cStyMWZlcUNhcGd2ZHpaWDk5eXFXQVRYZ0FCeVVyNlA2VHFCd01oQW82Qw0KeWdQQ200OENBd0VBQWFPQm5EQ0JtVEFPQmdOVkhROEJBZjhFQkFNQ0FRWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RQ0KRmdRVW0rSUhWMmNjSHNCcUJ0NVp0Sm90Mzl3WmhpNHdOZ1lEVlIwZkJDOHdMVEFyb0NtZ0o0WWxhSFIwY0RvdkwyTnliQzVuYkc5aQ0KWVd4emFXZHVMbTVsZEM5eWIyOTBMWEl5TG1OeWJEQWZCZ05WSFNNRUdEQVdnQlNiNGdkWFp4d2V3R29HM2xtMG1pM2YzQm1HTGpBTg0KQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBbVlGVGh4eG9sNGFSN09CS3VFUUxxNEdzSjAvV3diZ2NRM2l6REpyODZpdzhibUViVFVzcA0KOVo4RkhTYkJ1T21EQUdKRnRxa0lrN21wTTBzWW1zTDRoNGhPMjkxeE5CckJWTnBHUCtEVEtxdHRWQ0wxT21MTklHKzZLWW5YM1pIdQ0KMDF5aVBxRmJRZlhmNVdSRExlblZPYXZTb3QrM2k5REFnQmtjUmNBdGpPajRMYVIwVmtuRkJiVlBGZDV1UkhnNWg2aCt1L041R0pHNw0KOUcrZHdmQ01OWXhkQWZ2RGJibnZSRzE1UmpGK0N2NnBnc0gvNzZ0dUlNUlF5VitkVFpzWGpBemxBY21nUVdwelUvcWxVTFJ1SlEvNw0KVEJqMC9WTFpqbW14NkJFUDNvalkreDFKOTZyZWxjOGdlTUpnRXRzbFFJeHEvSDVDT0VCa0V2ZWVnZUdUTGc9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpWYWxpQ2VydCBDbGFzcyAxIFZBDQo9PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUM1ekNDQWxBQ0FRRXdEUVlKS29aSWh2Y05BUUVGQlFBd2dic3hKREFpQmdOVkJBY1RHMVpoYkdsRFpYSjBJRlpoYkdsa1lYUnANCmIyNGdUbVYwZDI5eWF6RVhNQlVHQTFVRUNoTU9WbUZzYVVObGNuUXNJRWx1WXk0eE5UQXpCZ05WQkFzVExGWmhiR2xEWlhKMElFTnMNCllYTnpJREVnVUc5c2FXTjVJRlpoYkdsa1lYUnBiMjRnUVhWMGFHOXlhWFI1TVNFd0h3WURWUVFERXhob2RIUndPaTh2ZDNkM0xuWmgNCmJHbGpaWEowTG1OdmJTOHhJREFlQmdrcWhraUc5dzBCQ1FFV0VXbHVabTlBZG1Gc2FXTmxjblF1WTI5dE1CNFhEVGs1TURZeU5USXkNCk1qTTBPRm9YRFRFNU1EWXlOVEl5TWpNME9Gb3dnYnN4SkRBaUJnTlZCQWNURzFaaGJHbERaWEowSUZaaGJHbGtZWFJwYjI0Z1RtVjANCmQyOXlhekVYTUJVR0ExVUVDaE1PVm1Gc2FVTmxjblFzSUVsdVl5NHhOVEF6QmdOVkJBc1RMRlpoYkdsRFpYSjBJRU5zWVhOeklERWcNClVHOXNhV041SUZaaGJHbGtZWFJwYjI0Z1FYVjBhRzl5YVhSNU1TRXdId1lEVlFRREV4aG9kSFJ3T2k4dmQzZDNMblpoYkdsalpYSjANCkxtTnZiUzh4SURBZUJna3Foa2lHOXcwQkNRRVdFV2x1Wm05QWRtRnNhV05sY25RdVkyOXRNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUENCkE0R05BRENCaVFLQmdRRFlXWUo2aWJpV3VxWXZhRzlZTHFkVUhBWnU5T3FOU0x3eGxCZnc4MDY4c3JnMWtuYXcwS1dsQWRjQUF4SWkNCkdRajQveEVqbTg0SDliOXBHaWIrVHVuUmY1MHNRQjFaYUc2bStGaXduUnFQMHoveDNCa0dnYWdPNERyZHlGTkZDUWJtRDNERCtrQ20NCkR1SldCUThZVGZ3Z2d0RnpWWFNOZG5LZ0haMGR3TjAvY1FJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0R0JBRkJvUFVuMExCd0cNCmxOK1ZZSCtXZXhmK1QzR3RaTWpkZDlMdldWWG9QK2lPQlNvaDhnZlN0YWRTL3B5eHR1SmJkeGRBNm5MV0k4c29nVExEQUhrWTdGa1gNCmljbkdhaDV4eWYyM2RLVWxSV25GU0tzWjRVV0tKV3NaN3VXN0V2Vi85NmFOVWNQd25YUzNxVDZncGYrMlNRTVQyaUxNN1hHQ0s1blANCk9yZjFMWExJDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClZhbGlDZXJ0IENsYXNzIDIgVkENCj09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJQzV6Q0NBbEFDQVFFd0RRWUpLb1pJaHZjTkFRRUZCUUF3Z2JzeEpEQWlCZ05WQkFjVEcxWmhiR2xEWlhKMElGWmhiR2xrWVhScA0KYjI0Z1RtVjBkMjl5YXpFWE1CVUdBMVVFQ2hNT1ZtRnNhVU5sY25Rc0lFbHVZeTR4TlRBekJnTlZCQXNUTEZaaGJHbERaWEowSUVOcw0KWVhOeklESWdVRzlzYVdONUlGWmhiR2xrWVhScGIyNGdRWFYwYUc5eWFYUjVNU0V3SHdZRFZRUURFeGhvZEhSd09pOHZkM2QzTG5aaA0KYkdsalpYSjBMbU52YlM4eElEQWVCZ2txaGtpRzl3MEJDUUVXRVdsdVptOUFkbUZzYVdObGNuUXVZMjl0TUI0WERUazVNRFl5TmpBdw0KTVRrMU5Gb1hEVEU1TURZeU5qQXdNVGsxTkZvd2dic3hKREFpQmdOVkJBY1RHMVpoYkdsRFpYSjBJRlpoYkdsa1lYUnBiMjRnVG1WMA0KZDI5eWF6RVhNQlVHQTFVRUNoTU9WbUZzYVVObGNuUXNJRWx1WXk0eE5UQXpCZ05WQkFzVExGWmhiR2xEWlhKMElFTnNZWE56SURJZw0KVUc5c2FXTjVJRlpoYkdsa1lYUnBiMjRnUVhWMGFHOXlhWFI1TVNFd0h3WURWUVFERXhob2RIUndPaTh2ZDNkM0xuWmhiR2xqWlhKMA0KTG1OdmJTOHhJREFlQmdrcWhraUc5dzBCQ1FFV0VXbHVabTlBZG1Gc2FXTmxjblF1WTI5dE1JR2ZNQTBHQ1NxR1NJYjNEUUVCQVFVQQ0KQTRHTkFEQ0JpUUtCZ1FET09uSEs1YXZJV1pKVjE2dllkQTc1N3RuMlZVZFpaVWNPQlZYYzY1ZzJQRnhUWGRNd3p6anN2VUdKN1NWQw0KQ1NSckNsNnpmTjFTTFV6bTFOWjlXbG1wWmRSSkV5MGtUUnhRYjdYQmhWUTcvbkhrMDF4QytZRGdrUm9LV3prMlovTS9WWHdiUDdSZg0KWkhNMDQ3UVN2NGRrK05vUy96Y253Yk5EdSs5N2JpNXA5d0lEQVFBQk1BMEdDU3FHU0liM0RRRUJCUVVBQTRHQkFEdC9VRzl2VUpTWg0KU1dJNE9COUwrS1hJUHFlQ2dmWXJ4K2pGenVnNkVJTExHQUNPVGIyb1dIK2hlUUMxdSttTnIwSFpEelR1SVlFWm9ESkpLUFRFamxiVg0KVWpQOVVOVittV3dENU1sTS9NdHNxMmF6U2lHTTViVU1NajRRc3N4c29keWFtRXdDVy9QT3VaNmxjZzVLdHo4ODVoWm8rTDd0ZEV5OA0KVzlWaUgwUGQNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KUlNBIFJvb3QgQ2VydGlmaWNhdGUgMQ0KPT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlDNXpDQ0FsQUNBUUV3RFFZSktvWklodmNOQVFFRkJRQXdnYnN4SkRBaUJnTlZCQWNURzFaaGJHbERaWEowSUZaaGJHbGtZWFJwDQpiMjRnVG1WMGQyOXlhekVYTUJVR0ExVUVDaE1PVm1Gc2FVTmxjblFzSUVsdVl5NHhOVEF6QmdOVkJBc1RMRlpoYkdsRFpYSjBJRU5zDQpZWE56SURNZ1VHOXNhV041SUZaaGJHbGtZWFJwYjI0Z1FYVjBhRzl5YVhSNU1TRXdId1lEVlFRREV4aG9kSFJ3T2k4dmQzZDNMblpoDQpiR2xqWlhKMExtTnZiUzh4SURBZUJna3Foa2lHOXcwQkNRRVdFV2x1Wm05QWRtRnNhV05sY25RdVkyOXRNQjRYRFRrNU1EWXlOakF3DQpNakl6TTFvWERURTVNRFl5TmpBd01qSXpNMW93Z2JzeEpEQWlCZ05WQkFjVEcxWmhiR2xEWlhKMElGWmhiR2xrWVhScGIyNGdUbVYwDQpkMjl5YXpFWE1CVUdBMVVFQ2hNT1ZtRnNhVU5sY25Rc0lFbHVZeTR4TlRBekJnTlZCQXNUTEZaaGJHbERaWEowSUVOc1lYTnpJRE1nDQpVRzlzYVdONUlGWmhiR2xrWVhScGIyNGdRWFYwYUc5eWFYUjVNU0V3SHdZRFZRUURFeGhvZEhSd09pOHZkM2QzTG5aaGJHbGpaWEowDQpMbU52YlM4eElEQWVCZ2txaGtpRzl3MEJDUUVXRVdsdVptOUFkbUZzYVdObGNuUXVZMjl0TUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBDQpBNEdOQURDQmlRS0JnUURqbUZHV0hPalZzUWFCYWxmRGNuV1RxOCtlcHZ6ekZsTFdMVTJmTlVTb0xnUk5CMG1LT0NuMWR6Zm50NnRkDQozelp4RkptUDNNS1M4ZWRna3BmczJFamN2OEVDSU1Za3BDaE1NRnAyYmJGYzg5M2VuaEJ4b1lqSFc1dEJiY3F3dUk0VjdxMHpLODlIDQpCRngxY1FxWUpKZ3BwMGxacGQzNHQwTmlZZlBUNHRCVlB3SURBUUFCTUEwR0NTcUdTSWIzRFFFQkJRVUFBNEdCQUZhN0FsaUVad2dzDQozeC9iZTBrejlkTm5uZlMwQ2hDenljVXM0cEpxY1hnbjhuQ0RRdE0rejZsVTlQSFlraGFNMFFUTFM2dkpuMFd1UElxcHNIRXpYY2pGDQpWOSt2cURXemY0bUg2ZWdsa3JoL2hYcXUxcndlTjFncVo4bVJ6eXFCUHUzR09kL0FQaG1jR2N3VFRZSkJ0WXplNEQxZ0NDQVBSWDVyDQpvbitqakJYdQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpWZXJpc2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzMNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFR2pDQ0F3SUNFUUNiZmdaSm96NWl1ZFh1a0VoeEtlOVhNQTBHQ1NxR1NJYjNEUUVCQlFVQU1JSEtNUXN3Q1FZRFZRUUdFd0pWDQpVekVYTUJVR0ExVUVDaE1PVm1WeWFWTnBaMjRzSUVsdVl5NHhIekFkQmdOVkJBc1RGbFpsY21sVGFXZHVJRlJ5ZFhOMElFNWxkSGR2DQpjbXN4T2pBNEJnTlZCQXNUTVNoaktTQXhPVGs1SUZabGNtbFRhV2R1TENCSmJtTXVJQzBnUm05eUlHRjFkR2h2Y21sNlpXUWdkWE5sDQpJRzl1YkhreFJUQkRCZ05WQkFNVFBGWmxjbWxUYVdkdUlFTnNZWE56SURNZ1VIVmliR2xqSUZCeWFXMWhjbmtnUTJWeWRHbG1hV05oDQpkR2x2YmlCQmRYUm9iM0pwZEhrZ0xTQkhNekFlRncwNU9URXdNREV3TURBd01EQmFGdzB6TmpBM01UWXlNelU1TlRsYU1JSEtNUXN3DQpDUVlEVlFRR0V3SlZVekVYTUJVR0ExVUVDaE1PVm1WeWFWTnBaMjRzSUVsdVl5NHhIekFkQmdOVkJBc1RGbFpsY21sVGFXZHVJRlJ5DQpkWE4wSUU1bGRIZHZjbXN4T2pBNEJnTlZCQXNUTVNoaktTQXhPVGs1SUZabGNtbFRhV2R1TENCSmJtTXVJQzBnUm05eUlHRjFkR2h2DQpjbWw2WldRZ2RYTmxJRzl1YkhreFJUQkRCZ05WQkFNVFBGWmxjbWxUYVdkdUlFTnNZWE56SURNZ1VIVmliR2xqSUZCeWFXMWhjbmtnDQpRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrZ0xTQkhNekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DDQpnZ0VCQU11Nm5GTDhlQjhhSG04Yk4zTzkrTWxybEJJd1QvQTJSL1hRa1FyMUY4aWxZY0VXUUUzN2ltR1E1WFlnd1JFR2Zhc3NicWIxDQpFVUdPK2kydEttRlpwR2NtVE5Eb3ZGSmJjQ0FFV05GNnlhUnB2SU1YWkswRmk3elFXTTZOalBYcjhFSkpDNTJYSjJjeWJ1R3VreFVjDQpjTHdnVFM4WTNwS0k2R3lGVnhFYTZYN2pKaEZVb2tXV1ZZUEtNSW5vM05pajdTcUFQMzk1WlZjK0ZTQm1DQytWazcrcVJ5K29ScGZ3DQpFdUwrd2dvclVlWjI1cmRHdCtJTnBzeW93MHhaVllubTZGTmNIT3FkOEdJV0M2ZkpYd3p3M3NKMnpxLzNhdkw2UWFhaU14VEo1WHBqDQowNTVpTjlXRlpaNE81bE1rZEJ0ZUhSSlRXOGNzNTROSk94V3VpbWk1VjVjQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBDQpFUlNXd2F1U0NQYy9MOG15L3VSYW4yVGUyeUZQaHBrMGRqWlgzZEFWTDhXdGZ4VWZOMkp6UHRUblg4NFhBOXMxK2l2YnJtQUpYeDVmDQpqMjY3Q3ozcVdoTWVER0J2dGNDMUl5SXVCd3ZMcVhUTFI3c2R3ZGVsYTh3djBrTDlTZDJuaWM5VHV0b0FXaWkvZ3QvNHVoTWRVSWFDDQovWTR3anlsR3NCNDlOZG80WWhZWVNxM210bEZzM3E5aTZ3SFFIaVQrZW84U0doSm91UHRtbVJRVVJWeXU1NjVwRjRFcldqZkpYaXIwDQp4dUtoWEZTYnBsUUF6L0R4d2NlWU1CbzdOaGJibzI3cS9hMnl3dHJ2QWtjVGlzRHhzekd0VHh6aFQ1eXZEd3lkOTNnTjJQUTFWb0RhDQp0MjBYajUwZWdXVGgvc1ZGdXExcnVRcDZUazlMaE81TDhYM2RFUT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClZlcmlzaWduIENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMw0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVHakNDQXdJQ0VRRHNvS2VMYm5WcUFjL0VmTXd2bEY3WE1BMEdDU3FHU0liM0RRRUJCUVVBTUlIS01Rc3dDUVlEVlFRR0V3SlYNClV6RVhNQlVHQTFVRUNoTU9WbVZ5YVZOcFoyNHNJRWx1WXk0eEh6QWRCZ05WQkFzVEZsWmxjbWxUYVdkdUlGUnlkWE4wSUU1bGRIZHYNCmNtc3hPakE0QmdOVkJBc1RNU2hqS1NBeE9UazVJRlpsY21sVGFXZHVMQ0JKYm1NdUlDMGdSbTl5SUdGMWRHaHZjbWw2WldRZ2RYTmwNCklHOXViSGt4UlRCREJnTlZCQU1UUEZabGNtbFRhV2R1SUVOc1lYTnpJRFFnVUhWaWJHbGpJRkJ5YVcxaGNua2dRMlZ5ZEdsbWFXTmgNCmRHbHZiaUJCZFhSb2IzSnBkSGtnTFNCSE16QWVGdzA1T1RFd01ERXdNREF3TURCYUZ3MHpOakEzTVRZeU16VTVOVGxhTUlIS01Rc3cNCkNRWURWUVFHRXdKVlV6RVhNQlVHQTFVRUNoTU9WbVZ5YVZOcFoyNHNJRWx1WXk0eEh6QWRCZ05WQkFzVEZsWmxjbWxUYVdkdUlGUnkNCmRYTjBJRTVsZEhkdmNtc3hPakE0QmdOVkJBc1RNU2hqS1NBeE9UazVJRlpsY21sVGFXZHVMQ0JKYm1NdUlDMGdSbTl5SUdGMWRHaHYNCmNtbDZaV1FnZFhObElHOXViSGt4UlRCREJnTlZCQU1UUEZabGNtbFRhV2R1SUVOc1lYTnpJRFFnVUhWaWJHbGpJRkJ5YVcxaGNua2cNClEyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnBkSGtnTFNCSE16Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0MNCmdnRUJBSzNMcFJGcHhsbXI4WSsxR1E5V3pzeTFIeURrbmlZbFMrQnpaWWxaM3RDRDVQVVB0YnV0OFh6b0lmems2QXp1ZkVVaUdYYVMNCnRCTzNJRnNKK21HdXFQS2xqWVhDS3RiZVpqYlNtd0wwcUpKZ2ZKeHB0SThrSHRDR1V2WXluRUZZSGlLOXpVVmlsUWh1MEdiZFU2TE0NCjhCRGNWSE9MQktGR016TmNGMEM1bmszVDg3NVZnK2l4aVk1YWZKcVdJcEE3aUNYeTBsT0lBZ3dMZVBMbU54ZExNRVlINUlCdHB0aVcNCkx1Z3MrQkd6T0ExbXBwdnF5U05iMjQ3aTh4T09HbGt0cWdMdzdLU0hadHpCUC9YWXVmVHNnc2JTUFpVZDVjQlBoTW5abzBRb0JtclgNClJhendhMnJ2VGwvNEVZSWVPR00wWmxEVVBwTnorakREWnEzL2t5Mlg3d01DQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUENCmovb2xhMDliNUtST0oxV3JJaFZaUE1xMUN0UksyNnZkb1Y5VHhhQlhPY0xPUnl1K09zaFd2OExaSnhBNnNRVTh3SGN4dXpyVEJYdHQNCm1od3dqSURMazVNcWc2c0ZVWUlDQUJGbmEvT0lZVWRmQTVQVld3M2c4ZFNoTWpXRnNqcmJzSUtyMGNzS3ZFK01XOFZMQURzZktvS20NCmZqYUYzSDQ4WndDMTVEdFM0S2pyWFJYNXhtM3dyUjBPaGJlcG1uTVVXbHVQUVNqQTFlZ3RUYVJlemFyWjdjN2MyTlU4UWgwWHdSSmQNClJUakRPUFA4aFM2RFJraXkxeUJma2phUDUza1BtRjZaNlBEUXBMdjFVNzBxemxtd3IyNS9iTHZTSGdDd0llMzRRV0tDdWRpeXhMdEcNClVQTXh4WThCcUhUcjlYZ24ydWYzWmtQem5vTStJS3JETldDUnpnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRW50cnVzdC5uZXQgU2VjdXJlIFNlcnZlciBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFMkRDQ0JFR2dBd0lCQWdJRU4wclNRekFOQmdrcWhraUc5dzBCQVFVRkFEQ0J3ekVMTUFrR0ExVUVCaE1DVlZNeEZEQVNCZ05WDQpCQW9UQzBWdWRISjFjM1F1Ym1WME1Uc3dPUVlEVlFRTEV6SjNkM2N1Wlc1MGNuVnpkQzV1WlhRdlExQlRJR2x1WTI5eWNDNGdZbmtnDQpjbVZtTGlBb2JHbHRhWFJ6SUd4cFlXSXVLVEVsTUNNR0ExVUVDeE1jS0dNcElERTVPVGtnUlc1MGNuVnpkQzV1WlhRZ1RHbHRhWFJsDQpaREU2TURnR0ExVUVBeE14Ulc1MGNuVnpkQzV1WlhRZ1UyVmpkWEpsSUZObGNuWmxjaUJEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2DQpjbWwwZVRBZUZ3MDVPVEExTWpVeE5qQTVOREJhRncweE9UQTFNalV4TmpNNU5EQmFNSUhETVFzd0NRWURWUVFHRXdKVlV6RVVNQklHDQpBMVVFQ2hNTFJXNTBjblZ6ZEM1dVpYUXhPekE1QmdOVkJBc1RNbmQzZHk1bGJuUnlkWE4wTG01bGRDOURVRk1nYVc1amIzSndMaUJpDQplU0J5WldZdUlDaHNhVzFwZEhNZ2JHbGhZaTRwTVNVd0l3WURWUVFMRXh3b1l5a2dNVGs1T1NCRmJuUnlkWE4wTG01bGRDQk1hVzFwDQpkR1ZrTVRvd09BWURWUVFERXpGRmJuUnlkWE4wTG01bGRDQlRaV04xY21VZ1UyVnlkbVZ5SUVObGNuUnBabWxqWVhScGIyNGdRWFYwDQphRzl5YVhSNU1JR2RNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0R0xBRENCaHdLQmdRRE5LSU0wVkJ1Sjh3K3ZONUV4LzY4eFlNbW82TElRDQphTzJmNTVNMjhRcGt1MGYxQkJjL0kwZE54U2NaZ1NZTVZISU5pQzNaSDVvU243eXpjZE9BR1Q5SFpudU1OU2pTdVFyZkpOcWMxbEI1DQpnWHBhMHpmM3drcllLWkltWk5Ia21HdzZBSXIxTkp0bCtPM2pFUC85dUVsWTNLRGVnamxyZ2JFV0dXRzVWTGJtUXdJQkE2T0NBZGN3DQpnZ0hUTUJFR0NXQ0dTQUdHK0VJQkFRUUVBd0lBQnpDQ0FSa0dBMVVkSHdTQ0FSQXdnZ0VNTUlIZW9JSGJvSUhZcElIVk1JSFNNUXN3DQpDUVlEVlFRR0V3SlZVekVVTUJJR0ExVUVDaE1MUlc1MGNuVnpkQzV1WlhReE96QTVCZ05WQkFzVE1uZDNkeTVsYm5SeWRYTjBMbTVsDQpkQzlEVUZNZ2FXNWpiM0p3TGlCaWVTQnlaV1l1SUNoc2FXMXBkSE1nYkdsaFlpNHBNU1V3SXdZRFZRUUxFeHdvWXlrZ01UazVPU0JGDQpiblJ5ZFhOMExtNWxkQ0JNYVcxcGRHVmtNVG93T0FZRFZRUURFekZGYm5SeWRYTjBMbTVsZENCVFpXTjFjbVVnVTJWeWRtVnlJRU5sDQpjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVEwd0N3WURWUVFERXdSRFVrd3hNQ21nSjZBbGhpTm9kSFJ3T2k4dmQzZDNMbVZ1DQpkSEoxYzNRdWJtVjBMME5TVEM5dVpYUXhMbU55YkRBckJnTlZIUkFFSkRBaWdBOHhPVGs1TURVeU5URTJNRGswTUZxQkR6SXdNVGt3DQpOVEkxTVRZd09UUXdXakFMQmdOVkhROEVCQU1DQVFZd0h3WURWUjBqQkJnd0ZvQVU4QmRpRTFVOXMvOEtBR3Y3VUlTWDgrMWkwQm93DQpIUVlEVlIwT0JCWUVGUEFYWWhOVlBiUC9DZ0JyKzFDRWwvUHRZdEFhTUF3R0ExVWRFd1FGTUFNQkFmOHdHUVlKS29aSWh2WjlCMEVBDQpCQXd3Q2hzRVZqUXVNQU1DQkpBd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ1lFQWtOd3dBdnBrZE1LbkNxVjhJWTAwRjZqN1J3Ny9KWHlODQpFd3I3NUppMTc0ejR4UkFOOTVLKzhjUFYxWlZxQkxzc3ppWTJaY2d4eHVmdVArTlhkWVI2RWU5R1R4ajAwNWk3cUljeXVuTDJQT0k5DQpuOWNkMmNOZ1E0eFlEaUtXTDJLakxCKzZyUVh2cXpKNGg2QlVjeG0xWEFYNVVqNXRMVVVMOXdxVDZ1MEcrYkk9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkVudHJ1c3QubmV0IFByZW1pdW0gMjA0OCBTZWN1cmUgU2VydmVyIENBDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFWERDQ0EwU2dBd0lCQWdJRU9HTzVaakFOQmdrcWhraUc5dzBCQVFVRkFEQ0J0REVVTUJJR0ExVUVDaE1MUlc1MGNuVnpkQzV1DQpaWFF4UURBK0JnTlZCQXNVTjNkM2R5NWxiblJ5ZFhOMExtNWxkQzlEVUZOZk1qQTBPQ0JwYm1OdmNuQXVJR0o1SUhKbFppNGdLR3hwDQpiV2wwY3lCc2FXRmlMaWt4SlRBakJnTlZCQXNUSENoaktTQXhPVGs1SUVWdWRISjFjM1F1Ym1WMElFeHBiV2wwWldReE16QXhCZ05WDQpCQU1US2tWdWRISjFjM1F1Ym1WMElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUNneU1EUTRLVEFlRncwNU9URXlNalF4DQpOelV3TlRGYUZ3MHhPVEV5TWpReE9ESXdOVEZhTUlHME1SUXdFZ1lEVlFRS0V3dEZiblJ5ZFhOMExtNWxkREZBTUQ0R0ExVUVDeFEzDQpkM2QzTG1WdWRISjFjM1F1Ym1WMEwwTlFVMTh5TURRNElHbHVZMjl5Y0M0Z1lua2djbVZtTGlBb2JHbHRhWFJ6SUd4cFlXSXVLVEVsDQpNQ01HQTFVRUN4TWNLR01wSURFNU9Ua2dSVzUwY25WemRDNXVaWFFnVEdsdGFYUmxaREV6TURFR0ExVUVBeE1xUlc1MGNuVnpkQzV1DQpaWFFnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa2dLREl3TkRncE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBDQpNSUlCQ2dLQ0FRRUFyVTFMcVJLR3N1cWpJQWNWRm1RcUswdlJ2d3RLVFk3dGdIYWxaN2Q0UU1CelFzaG93TnRUSzkxZXVIYVlOWk9MDQpHcDE4RXpvT0gxdTNIcy9sSkJRZXNZR3BqWDI0ekd0TEEvRUNETnlycFVBa0FIOTBsS0dkQ0NtemlBdjFoM2VkVmMza3czN1hhbVNyDQpoUlNHbFZ1WE1sQnZQY2k2Wmd6ai9MMjRTY0YyaVVrWi9jQ292WW1qWnkvR243eHhHV0M0TGVrc3laQjJabnVVNHE5NDFtVlRYVHpXDQpuTExQS1FQNUw2UlFzdFJJemdVeVZZcjlzbVJNRHVTWUIzWGJmOSs1Q0ZWZ2hUQXArWHRJcEdtRzR6VS9Ib1pkZW5vVnZlOEFqaFVpDQpWQmNBa0NhVHZBNUphSkcvK0VmVG5aVkN3UTVOMzI4bXo4TVlJV0ptUTNEVzFjQUg0UUlEQVFBQm8zUXdjakFSQmdsZ2hrZ0JodmhDDQpBUUVFQkFNQ0FBY3dId1lEVlIwakJCZ3dGb0FVVmVTQjBSR0F2dGlKdVFpak1mbWhKQWtXdVhBd0hRWURWUjBPQkJZRUZGWGtnZEVSDQpnTDdZaWJrSW96SDVvU1FKRnJsd01CMEdDU3FHU0liMmZRZEJBQVFRTUE0YkNGWTFMakE2TkM0d0F3SUVrREFOQmdrcWhraUc5dzBCDQpBUVVGQUFPQ0FRRUFXVWVzSVlTS0Y4bWNpVk1ldW9DRkdzWThUajZ4bkxaOHhwSmRHR1FDNDlNR0NCRmhmR1BqSzUweEEzQjIwcU1vDQpvUFM3bW1OejdXM2xLdHZ0RktrcnhqWVIwQ3ZyQjR1bDJwNWNHWjFXRXZWVUtjZ0Y3YklTS28zMEF4di81NUlRaDdBNnRjT2RCVGNTDQpvOGYwRmJuVnBEa1dtMU02STVIeHFJS2lhb2hvd1hrQ0lyeXFwdGF1MzdBVVg3aUgwTjE4ZjN2L3J4elA1dHNIclY3YmhaM1FLdzB6DQoyd1RSNWtsQUV5dDIrejdwbklrUEZjNFlzSVY0SVU5clR3NzZObWZOQi9ML0NORGkzdG0vS3ErNGg0WWhQQVRLdDVSb2Y4ODg2WmpYDQpPUC9zd05sUThDNUxXSzVHYjlBdXcyRGFjbFZ5dlV4Rm5tRzZ2NFNCa2dQUjBtbDh4UT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkJhbHRpbW9yZSBDeWJlclRydXN0IFJvb3QNCj09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRGR6Q0NBbCtnQXdJQkFnSUVBZ0FBdVRBTkJna3Foa2lHOXcwQkFRVUZBREJhTVFzd0NRWURWUVFHRXdKSlJURVNNQkFHQTFVRQ0KQ2hNSlFtRnNkR2x0YjNKbE1STXdFUVlEVlFRTEV3cERlV0psY2xSeWRYTjBNU0l3SUFZRFZRUURFeGxDWVd4MGFXMXZjbVVnUTNsaQ0KWlhKVWNuVnpkQ0JTYjI5ME1CNFhEVEF3TURVeE1qRTRORFl3TUZvWERUSTFNRFV4TWpJek5Ua3dNRm93V2pFTE1Ba0dBMVVFQmhNQw0KU1VVeEVqQVFCZ05WQkFvVENVSmhiSFJwYlc5eVpURVRNQkVHQTFVRUN4TUtRM2xpWlhKVWNuVnpkREVpTUNBR0ExVUVBeE1aUW1Gcw0KZEdsdGIzSmxJRU41WW1WeVZISjFjM1FnVW05dmREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtNRQ0KdXlLcm1EMVg2Q1p5bXJWNTFDbmk0ZWlWZ0xHdzQxdU9LeW1hWk4raFhlMndDUVZ0MnlndXptS2lZdjYwaU5vUzZ6anJJWjNBUVNzQg0KVW51SWQ5TWNqOGU2dVlpMWFnbm5jK2dSUUtmUnpNcGlqUzNsand1bVVOS29VTU1vNnZXckpZZUttcFljcVdlNFB3elY5L2xTRXkvQw0KRzlWd2NQQ1B3QkxLQnN1YTRkbktNM3AzMXZqc3VmRm9SRUpJRTlMQXdxU3VYbUQrdHFZRi9MVGRCMWtDMUZrWW1HUDFwV1Bna0F4OQ0KWGJJR2V2T0Y2dXZVQTY1ZWhENWYveFh0YWJ6NU9UWnlkYzkzVWszenlaQXN1VDNseVNOVFB4OGttQ0ZjQjVrcHZjWTY3T2R1aGpwcg0KbDNSak03MW9HREh3ZUkxMnYveWVqbDBxaHFkTmtOd25HamtDQXdFQUFhTkZNRU13SFFZRFZSME9CQllFRk9XZFdUQ0NSMWpNclBvSQ0KVkRhR2V6cTFCRTN3TUJJR0ExVWRFd0VCL3dRSU1BWUJBZjhDQVFNd0RnWURWUjBQQVFIL0JBUURBZ0VHTUEwR0NTcUdTSWIzRFFFQg0KQlFVQUE0SUJBUUNGREYyTzVHOVJhRUlGb04yN1R5Y2xoQU85OTJUOUxkY3c0NlFRRit2YUtTbTJlVDkyOWhrVEk3Z1FDdmxZcE5SaA0KY0wwRVlXb1NpaGZWQ3IzRnZEQjgxdWtNSlkyR1FFL3N6S04rT01ZM0VVL3QzV2d4amt6U3N3RjA3cjUxWGdkSUduOXcveFpjaE1CNQ0KaGJnRi9YKytaUkdqRDhBQ3RQaFNOemtFMWFreGVoaS9vQ3IwRXBuM28wV0M0enhlOVoyZXRjaWVmQzdJcEo1T0NCUkxiZjF3YldzYQ0KWTcxazVoKzN6dkR5bnk2N0c3ZnlVSWh6a3NMaTR4YU5taklDcTQ0WTNla1FFZTUrTmF1UXJ6NHdsSHJRTXoyblpRLzEvSTZlWXM5SA0KUkN3Qlhic2R0VExTUjlJNEx0RCtnZHd5YWg2MTdqelYvT2VCSFJuREpFTHFZem1wDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkVxdWlmYXggU2VjdXJlIEdsb2JhbCBlQnVzaW5lc3MgQ0ENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJQ2tEQ0NBZm1nQXdJQkFnSUJBVEFOQmdrcWhraUc5dzBCQVFRRkFEQmFNUXN3Q1FZRFZRUUdFd0pWVXpFY01Cb0dBMVVFQ2hNVA0KUlhGMWFXWmhlQ0JUWldOMWNtVWdTVzVqTGpFdE1Dc0dBMVVFQXhNa1JYRjFhV1poZUNCVFpXTjFjbVVnUjJ4dlltRnNJR1ZDZFhOcA0KYm1WemN5QkRRUzB4TUI0WERUazVNRFl5TVRBME1EQXdNRm9YRFRJd01EWXlNVEEwTURBd01Gb3dXakVMTUFrR0ExVUVCaE1DVlZNeA0KSERBYUJnTlZCQW9URTBWeGRXbG1ZWGdnVTJWamRYSmxJRWx1WXk0eExUQXJCZ05WQkFNVEpFVnhkV2xtWVhnZ1UyVmpkWEpsSUVkcw0KYjJKaGJDQmxRblZ6YVc1bGMzTWdRMEV0TVRDQm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDZ1lFQXV1Y1hrQUpsc1RSVg0KUEVuQ1VkWGZwOUUzajlIbmdYTkJVbUNibmFFWEpuaXR4N0hvSnBReXRkNHpqVG92Mi9LYWVscHptS05jNmZ1S2N4dGM1OE8vZ0d6Tg0KcWZUV0s4RDMrWm1xWTZLeFJ3SVAxT1JST2hJOGJJcGFWSVJ3MjhIRmtNOXlSY3VvV2NETk01MC9vNWJyaFRNaEhENGVQbUJ1ZHB4bg0KaGNYSXcyRUNBd0VBQWFObU1HUXdFUVlKWUlaSUFZYjRRZ0VCQkFRREFnQUhNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdId1lEVlIwag0KQkJnd0ZvQVV2cWlnZEhKUWEwUzN5U1BZKzZqL3MxZHJhR3d3SFFZRFZSME9CQllFRkw2b29IUnlVR3RFdDhrajJQdW8vN05YYTJocw0KTUEwR0NTcUdTSWIzRFFFQkJBVUFBNEdCQUREaUFWR3F4K3BmMnJuUVpROHcxajdhRFJSSmJwR1RKeFF4NzhUM0xVWDQ3TWUvb2tFTg0KSTdTUytSa0FaNzBCcjgzZ2NmeGF6MlRFNEphWTBLTkE0Z0dLN3ljSDhXVUJpa1F0Qm1WMVVzQ0dFQ0FoWDJ4ckQyeXVDUnl2OHFJWQ0KTk1SMXBITWM4WTNjNzYzNXMzYTBrci9jbFJBZXZzdklPMXFFWUJsV2xLbFYNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRXF1aWZheCBTZWN1cmUgZUJ1c2luZXNzIENBIDENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUNnakNDQWV1Z0F3SUJBZ0lCQkRBTkJna3Foa2lHOXcwQkFRUUZBREJUTVFzd0NRWURWUVFHRXdKVlV6RWNNQm9HQTFVRUNoTVQNClJYRjFhV1poZUNCVFpXTjFjbVVnU1c1akxqRW1NQ1FHQTFVRUF4TWRSWEYxYVdaaGVDQlRaV04xY21VZ1pVSjFjMmx1WlhOeklFTkINCkxURXdIaGNOT1Rrd05qSXhNRFF3TURBd1doY05NakF3TmpJeE1EUXdNREF3V2pCVE1Rc3dDUVlEVlFRR0V3SlZVekVjTUJvR0ExVUUNCkNoTVRSWEYxYVdaaGVDQlRaV04xY21VZ1NXNWpMakVtTUNRR0ExVUVBeE1kUlhGMWFXWmhlQ0JUWldOMWNtVWdaVUoxYzJsdVpYTnoNCklFTkJMVEV3Z1o4d0RRWUpLb1pJaHZjTkFRRUJCUUFEZ1kwQU1JR0pBb0dCQU00dkdid1h0M2ZlazZsZldnMFhUelFhREpqMEl0bFoNCjFNUm9SdkMwTmNXRkF5REdyMFdsSVZGRlFlc1dXRFl5YitKUVltVDUvVkdjcWlUWjlKMkRLb2NLSWRNU09EUnNqUUJ1V3FEWlF1NGENCklaWDVVa3hWV3NVUE9FOUcrbTM0TGpYV0hYenI0dkN3ZFlESXFST3N2b2p2T202clh5bzRZZ0t3RW52K2o2WURBZ01CQUFHalpqQmsNCk1CRUdDV0NHU0FHRytFSUJBUVFFQXdJQUJ6QVBCZ05WSFJNQkFmOEVCVEFEQVFIL01COEdBMVVkSXdRWU1CYUFGRXA0TWxJUjIxa1cNCk5sN2Z3UlEyUUdwSGZFeWhNQjBHQTFVZERnUVdCQlJLZURKU0VkdFpGalplMzhFVU5rQnFSM3hNb1RBTkJna3Foa2lHOXcwQkFRUUYNCkFBT0JnUUIxVzZpYkF4SG02VlpNemZtcFRNQU5tdlBNWldubUpYYk1XYmZXVk1NZHpabXNHZDIwaGRYZ1BmeGlJS2VFUzFobDhlTDUNCmxTRS85ZFIrV0I1SGgxUStXS0cxdGZncTczSG52TVAyc1VsRzR0ZWdhK1ZXZXBvbm1IeEdZaFRueWZ4dUF4SjVnRGdkU0lLTi9CZisNCktwWXJ0V0ttcGoyOWY1Slp6Vm9xZ3JJM2VRPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRXF1aWZheCBTZWN1cmUgZUJ1c2luZXNzIENBIDINCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURJRENDQW9tZ0F3SUJBZ0lFTjNEUHRUQU5CZ2txaGtpRzl3MEJBUVVGQURCT01Rc3dDUVlEVlFRR0V3SlZVekVYTUJVR0ExVUUNCkNoTU9SWEYxYVdaaGVDQlRaV04xY21VeEpqQWtCZ05WQkFzVEhVVnhkV2xtWVhnZ1UyVmpkWEpsSUdWQ2RYTnBibVZ6Y3lCRFFTMHkNCk1CNFhEVGs1TURZeU16RXlNVFEwTlZvWERURTVNRFl5TXpFeU1UUTBOVm93VGpFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBb1QNCkRrVnhkV2xtWVhnZ1UyVmpkWEpsTVNZd0pBWURWUVFMRXgxRmNYVnBabUY0SUZObFkzVnlaU0JsUW5WemFXNWxjM01nUTBFdE1qQ0INCm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDZ1lFQTVEazVreDVTQmhzb052aXlveW5GN1k2eUViMys2K2UwZE1LUC93WG4NCjJaMEd2eExJUHc3eTF0RWtzaEhlMFhNSml0U3hMSmdKRFI1UVJyS0Rwa1dOWW1pN2hSc2djREtxUU0ybWxsL0VjVGMvQlBPM1FTUTUNCkJ4b2VMbUZZb0JJTDVhWGZ4YXZxTjNITUhNZzNPcm1YVXFlc3hXb2tsRTZjZTgvQWF0YmZJYjBDQXdFQUFhT0NBUWt3Z2dFRk1IQUcNCkExVWRId1JwTUdjd1phQmpvR0drWHpCZE1Rc3dDUVlEVlFRR0V3SlZVekVYTUJVR0ExVUVDaE1PUlhGMWFXWmhlQ0JUWldOMWNtVXgNCkpqQWtCZ05WQkFzVEhVVnhkV2xtWVhnZ1UyVmpkWEpsSUdWQ2RYTnBibVZ6Y3lCRFFTMHlNUTB3Q3dZRFZRUURFd1JEVWt3eE1Cb0cNCkExVWRFQVFUTUJHQkR6SXdNVGt3TmpJek1USXhORFExV2pBTEJnTlZIUThFQkFNQ0FRWXdId1lEVlIwakJCZ3dGb0FVVUo0TDZxOWUNCnVTQklwbEJxeS8zWUlIcW5nbll3SFFZRFZSME9CQllFRkZDZUMrcXZYcmtnU0taUWFzdjkyQ0I2cDRKMk1Bd0dBMVVkRXdRRk1BTUINCkFmOHdHZ1lKS29aSWh2WjlCMEVBQkEwd0N4c0ZWak11TUdNREFnYkFNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0R0JBQXlHZ3Ezb1RocjENCmpva240alZZUFNtMEI0ODJVSlcvYnNHZTY4U1Fzb1dvdTdkQzRBOEhPZC83bnBDeTBjRStVNThEUkxCK1MvUnY1SHdmNStLeDVMaWENCjc4Tzl6dDRMTWpUWjNpanRNMnZFMU5jOUVsaXJmUWt0eTNEMUU0cVVvU2VrMW5ERmJaUzF5WDJkb05MR0NFblpacHVtMC9RTDNNVW0NClYrR1JNT3JODQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkFkZFRydXN0IExvdy1WYWx1ZSBTZXJ2aWNlcyBSb290DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFR0RDQ0F3Q2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCbE1Rc3dDUVlEVlFRR0V3SlRSVEVVTUJJR0ExVUVDaE1MDQpRV1JrVkhKMWMzUWdRVUl4SFRBYkJnTlZCQXNURkVGa1pGUnlkWE4wSUZSVVVDQk9aWFIzYjNKck1TRXdId1lEVlFRREV4aEJaR1JVDQpjblZ6ZENCRGJHRnpjeUF4SUVOQklGSnZiM1F3SGhjTk1EQXdOVE13TVRBek9ETXhXaGNOTWpBd05UTXdNVEF6T0RNeFdqQmxNUXN3DQpDUVlEVlFRR0V3SlRSVEVVTUJJR0ExVUVDaE1MUVdSa1ZISjFjM1FnUVVJeEhUQWJCZ05WQkFzVEZFRmtaRlJ5ZFhOMElGUlVVQ0JPDQpaWFIzYjNKck1TRXdId1lEVlFRREV4aEJaR1JVY25WemRDQkRiR0Z6Y3lBeElFTkJJRkp2YjNRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCDQpBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ1dsdFFoU1dEaWEraEJCd3pleE9EY0V5UE53VFhIKzlaT0VRcG5YdlVHVzJ1bENEdGJLUlk2DQo1NGV5TkFiRnZBV2xBM3lDeXlrUXJ1R0lnYjNXbnRQK0xWYkJGYzdqSnAwVkxoRDdCbzh3Qk42bnRHTzAvN0djcmp5dmQ3Wld4YldyDQpvdWxwT2owT00za3lQM0NDa3BsaGJZMHdDSTl4UDZaSVZ4bjRKZHhMWmx5bGRJK1lyc2o1d0FZaTU2eHozNlV1KzFMY3NSVmxJUG8xDQpabW5lM3l6eGJyd3cyeXdrRXR2ck5UVm9rTXNBc0pjaFBYUWhJMlUwSzd0NFdhUFc0WFk1bXFSSmpveDByMjZrbXFQWm05STRYSnVpDQpHTXgxSTRTKzYrSk5NM0dPR3ZEQytNY2RvcTBEbHl6NHp5WEc5cmdrTWJGalhaSi9ZL0FseVZNdUg3OU5BZ01CQUFHamdkSXdnYzh3DQpIUVlEVlIwT0JCWUVGSld4dFBDVXRyM0gydEVSQ1NHK3dhOUovUkI3TUFzR0ExVWREd1FFQXdJQkJqQVBCZ05WSFJNQkFmOEVCVEFEDQpBUUgvTUlHUEJnTlZIU01FZ1ljd2dZU0FGSld4dFBDVXRyM0gydEVSQ1NHK3dhOUovUkI3b1dta1p6QmxNUXN3Q1FZRFZRUUdFd0pUDQpSVEVVTUJJR0ExVUVDaE1MUVdSa1ZISjFjM1FnUVVJeEhUQWJCZ05WQkFzVEZFRmtaRlJ5ZFhOMElGUlVVQ0JPWlhSM2IzSnJNU0V3DQpId1lEVlFRREV4aEJaR1JVY25WemRDQkRiR0Z6Y3lBeElFTkJJRkp2YjNTQ0FRRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBQ3h0DQpaQnNmelEzZHVRSDZsbU0wTWtoSG1hNlg3ZjF5RnFaelIxcjA2OTNwOWRiN1Jjd3BpVVJkdjBZNVBlanV2RTFVaGg0ZGJPTVhKMFBoDQppVllycVc5eVRra3o0M0o4S2lPYXZENy9LQ3J0by84Y0k3cERWd2xuVFV0aUJpMzQvMnlkWUI3WUhFdDl0VEV2MmRCOFhmamVhNE1ZDQplRGRYTCtnekIyZmZIc2RyS3BWMnJvOVhvL0QwVXJTcFV3alA0RS9UZWxPTC9ic2NWamJ5L3JLMjVYYTcxU0pscHovKzBXYXRDN3hyDQptWWJ2UDMzekdETEtlOGJqcTJSR2xmZ21hZGxWZzNzc2xnZi9XU3hFbzhibDZhbmNvV09BV2lGZUljOVRWUEM2YjRuYnFLcVZ6NHZqDQpjY3dlR3lCRUNNQjZ0a0Q5eE9RMTRSMFdITkM4SzQ3V2Nkaz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQWRkVHJ1c3QgRXh0ZXJuYWwgUm9vdA0KPT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFTmpDQ0F4NmdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCdk1Rc3dDUVlEVlFRR0V3SlRSVEVVTUJJR0ExVUVDaE1MDQpRV1JrVkhKMWMzUWdRVUl4SmpBa0JnTlZCQXNUSFVGa1pGUnlkWE4wSUVWNGRHVnlibUZzSUZSVVVDQk9aWFIzYjNKck1TSXdJQVlEDQpWUVFERXhsQlpHUlVjblZ6ZENCRmVIUmxjbTVoYkNCRFFTQlNiMjkwTUI0WERUQXdNRFV6TURFd05EZ3pPRm9YRFRJd01EVXpNREV3DQpORGd6T0Zvd2J6RUxNQWtHQTFVRUJoTUNVMFV4RkRBU0JnTlZCQW9UQzBGa1pGUnlkWE4wSUVGQ01TWXdKQVlEVlFRTEV4MUJaR1JVDQpjblZ6ZENCRmVIUmxjbTVoYkNCVVZGQWdUbVYwZDI5eWF6RWlNQ0FHQTFVRUF4TVpRV1JrVkhKMWMzUWdSWGgwWlhKdVlXd2dRMEVnDQpVbTl2ZERDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTGYzR2pQbThnQUVMVG5nVGx2dEg3eHNEODIxDQoraU8yenQ2YkVUT1hwQ2xNZlpPZnZVcThrKzBER3VPUHorVnRVRnJXbHltVVdvQ3dTWHJiTHBYOXVNcS9Oemd0SGo2UlFhMXdWc2Z3DQpUei9vTXA1MHlzaVFWT25HWHc5NG5acEFQQTZzWWFwZUZJK2VoNkZxVU56WG1rNnZCYk9tY1pTY2NiTlFZQXJIRTUwNEI0WUNxT21vDQphU1lZa0t0TXNFOGpxenBQaE5qZnpwL2hhVys3MTBMWGEwVGt4NjN1YlVGZmNscHhDRGV6ZVdXa1dhQ1VOL2NBTHczQ2tuTGEwRGh5DQoyeFNvUmNSZEtuMjN0TmJFN3F6TkUwUzN5U3ZkUXdBbCttRzVhV3BZSXhHM3B6T1BWblZaOWMwcDEwYTNDaXRsdHROQ2J4V3l1SHY3DQo3K2xkVTlVMFdpY0NBd0VBQWFPQjNEQ0IyVEFkQmdOVkhRNEVGZ1FVcmIyWWVqUzBKdmY2eENaVTd3Tzk0Q1RMVkJvd0N3WURWUjBQDQpCQVFEQWdFR01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d2daa0dBMVVkSXdTQmtUQ0Jqb0FVcmIyWWVqUzBKdmY2eENaVTd3Tzk0Q1RMDQpWQnFoYzZSeE1HOHhDekFKQmdOVkJBWVRBbE5GTVJRd0VnWURWUVFLRXd0QlpHUlVjblZ6ZENCQlFqRW1NQ1FHQTFVRUN4TWRRV1JrDQpWSEoxYzNRZ1JYaDBaWEp1WVd3Z1ZGUlFJRTVsZEhkdmNtc3hJakFnQmdOVkJBTVRHVUZrWkZSeWRYTjBJRVY0ZEdWeWJtRnNJRU5CDQpJRkp2YjNTQ0FRRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBTENiNElVbHd0WWo0ZytXQnBLZFFaaWMyWVI1Z2RrZVd4UUhJelpsDQpqN0RZZDd1c1FXeEhZSU5Sc1BreVBlZjg5aVlUeDRBV3BiOWEvSWZQZUhtSklacmlUQWNLaGpXODh0NVJ4TktXdDl4K1R1NXcvUnc1DQo2d3dDVVJRdGpyMFc0TUhmUm5YbkpLM3M5RUswaFpOd0VHZTZuUVkxU2hqVEszck1VVUtoZW1QUjVydWh4U3ZDTnI0VERlYTlZMzU1DQplNmNKRFVDcmF0MlBpc1AyOW93YVFnVlIxRVgxbjZkaUlXZ1ZJRU04bWVkOHZTVFlxWkVYYzRnL1Zoc3hPQmkwY1ErYXpjZ09ubzR1DQpHK0dNbUlQTEh6SHhSRXpHQkhOSmRtQVB4L2k5RjRCckx1bk1UQTVhbW5rUElBb3UxWjVqSmg1VmtwVFlnaGRhZTlDOHg0OU9oZ1E9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkFkZFRydXN0IFB1YmxpYyBTZXJ2aWNlcyBSb290DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFRlRDQ0F2MmdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCa01Rc3dDUVlEVlFRR0V3SlRSVEVVTUJJR0ExVUVDaE1MDQpRV1JrVkhKMWMzUWdRVUl4SFRBYkJnTlZCQXNURkVGa1pGUnlkWE4wSUZSVVVDQk9aWFIzYjNKck1TQXdIZ1lEVlFRREV4ZEJaR1JVDQpjblZ6ZENCUWRXSnNhV01nUTBFZ1VtOXZkREFlRncwd01EQTFNekF4TURReE5UQmFGdzB5TURBMU16QXhNRFF4TlRCYU1HUXhDekFKDQpCZ05WQkFZVEFsTkZNUlF3RWdZRFZRUUtFd3RCWkdSVWNuVnpkQ0JCUWpFZE1Cc0dBMVVFQ3hNVVFXUmtWSEoxYzNRZ1ZGUlFJRTVsDQpkSGR2Y21zeElEQWVCZ05WQkFNVEYwRmtaRlJ5ZFhOMElGQjFZbXhwWXlCRFFTQlNiMjkwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGDQpBQU9DQVE4QU1JSUJDZ0tDQVFFQTZSb3dqNE9JRk1FZzJEeWJqeHQrQTNTNzJtblRScVg0anNJTUVaQlJwUzltVkVCVjZ0c2ZTbGJ1DQpueU51OURuTG9ibHY4bjc1WFljbVlaNGMrT0xzcG9INEljVWt6QkVNUDlzbWNuckhBWmNIRi9uWEdDd3dmUTU2SG1JZXhrdkEvWDFpDQpkOU5FSGlmMlAwdEVzN2M0MlRrZllOVlJrbk1EdEFCcDQvTVVUdTdSM0FuUGR6UkdVTEQ0RWZMK09IbjNCem4rVVpLWEMxc0lYelNHDQpBYTJJbCt0bXpWN1IvOXg5OG9UYXVuZXQzSUFJeDZlSDFsV2ZsMnJveUJGa3V1Y1pLVDhSczNpUWhDQlNXeEh2ZU5DRDl0VklrTkF3DQpITStBK1dEK2VlU0k4dDBBNjVSRjYyV1VhVUM2d05XMHVMcDlCQkdvNnpFRmxwUk9XQ0dPbjlCZy9RSURBUUFCbzRIUk1JSE9NQjBHDQpBMVVkRGdRV0JCU0JQamZZa3JBZmQ1OWN0S3R6cXVmMk5HQXYrakFMQmdOVkhROEVCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXdBd0VCDQovekNCamdZRFZSMGpCSUdHTUlHRGdCU0JQamZZa3JBZmQ1OWN0S3R6cXVmMk5HQXYrcUZvcEdZd1pERUxNQWtHQTFVRUJoTUNVMFV4DQpGREFTQmdOVkJBb1RDMEZrWkZSeWRYTjBJRUZDTVIwd0d3WURWUVFMRXhSQlpHUlVjblZ6ZENCVVZGQWdUbVYwZDI5eWF6RWdNQjRHDQpBMVVFQXhNWFFXUmtWSEoxYzNRZ1VIVmliR2xqSUVOQklGSnZiM1NDQVFFd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFBUDNGVXI0DQpKTm9qVmhhVGR0MDJLTG11RzdqRDhXUzZJQmg0bFNrblZ3VzhmQ3IwdVZGVjJvY0MzZzhXRnpINHFua3VDUk83cjdJZ0dSTGxrL2xMDQorWVBvUk5XeVFTVy9pSFZ2L3hEOFNsVFFYL0Q2N3paemZSczJSY1loYmJRVnVFN1BuRnlsUFZvQWpnYmpQR3N5ZS9LZjhMYjkzL0FvDQpHRWp3eHJ6UXZ6U0Fsc0pLc1cyT3g1QkYzaTluckVVRW8zcmNWWkxKUjJiWUdvekg3WnhPbXVBU3U3VnFUSVRoNFNJTmh3Qmsvb3g5DQpZamxscHU5Q3RvQWxFbUVCcUNRVGNBQVJKbC82TlZERlNNd0dSK2duMkhDTlgyVG1vVVFtWGlMc2tzMy9RcHBFSVcxY3hlTWlIVjlIDQpFdWZPWDEzNjJLcXhNeTNaZHZKT09qTU1LN010a0FZPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpBZGRUcnVzdCBRdWFsaWZpZWQgQ2VydGlmaWNhdGVzIFJvb3QNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFSGpDQ0F3YWdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCbk1Rc3dDUVlEVlFRR0V3SlRSVEVVTUJJR0ExVUVDaE1MDQpRV1JrVkhKMWMzUWdRVUl4SFRBYkJnTlZCQXNURkVGa1pGUnlkWE4wSUZSVVVDQk9aWFIzYjNKck1TTXdJUVlEVlFRREV4cEJaR1JVDQpjblZ6ZENCUmRXRnNhV1pwWldRZ1EwRWdVbTl2ZERBZUZ3MHdNREExTXpBeE1EUTBOVEJhRncweU1EQTFNekF4TURRME5UQmFNR2N4DQpDekFKQmdOVkJBWVRBbE5GTVJRd0VnWURWUVFLRXd0QlpHUlVjblZ6ZENCQlFqRWRNQnNHQTFVRUN4TVVRV1JrVkhKMWMzUWdWRlJRDQpJRTVsZEhkdmNtc3hJekFoQmdOVkJBTVRHa0ZrWkZSeWRYTjBJRkYxWVd4cFptbGxaQ0JEUVNCU2IyOTBNSUlCSWpBTkJna3Foa2lHDQo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNUI2YS90d0pXb2VrbjBlK0VWK3ZoRFRiWWp4NWVMZnBNTFhzREJ3cXhCYi80T3h4DQo2NHIxRVc3dFR3MlIwaElZTFVrVkFjS2tJaFBIRVdUL0loS2F1WTVjTHdqUGNXcXpad0ZaOFYxRzg3QjRwZllPUW5yamZ4dk0wUEMzDQpLUDBxNnA2enNMa0VxdjMyeDdTeHVDcWcrMWp4R2FCdmNDVitQbWxLZnc4aTJPK3RDQkdhS1puaHFrUkZtaEplUHAxdFV2em5vRDFvDQpML0JMY0h3VE9LMjhGU1h4MXM2cm9zQXgxaStmNFA4VVdmeUVrOW1IZkV4VUUrdWYwUzBSK0JnNk90NGwyZmZUUU8ya0JoTEVPK0dSDQp3VlkxOEJUY1pUWUpicXVrQjhjMTBjSURNelpiZFNadFF2RVNhME52UzNHVStqUWQ3Uk51eW9CL21DOXN1V1hZNlFJREFRQUJvNEhVDQpNSUhSTUIwR0ExVWREZ1FXQkJRNWxZdGlpMXpKMUlDNldBK1hQeFVJUTh5WXB6QUxCZ05WSFE4RUJBTUNBUVl3RHdZRFZSMFRBUUgvDQpCQVV3QXdFQi96Q0JrUVlEVlIwakJJR0pNSUdHZ0JRNWxZdGlpMXpKMUlDNldBK1hQeFVJUTh5WXA2RnJwR2t3WnpFTE1Ba0dBMVVFDQpCaE1DVTBVeEZEQVNCZ05WQkFvVEMwRmtaRlJ5ZFhOMElFRkNNUjB3R3dZRFZRUUxFeFJCWkdSVWNuVnpkQ0JVVkZBZ1RtVjBkMjl5DQphekVqTUNFR0ExVUVBeE1hUVdSa1ZISjFjM1FnVVhWaGJHbG1hV1ZrSUVOQklGSnZiM1NDQVFFd0RRWUpLb1pJaHZjTkFRRUZCUUFEDQpnZ0VCQUJtcmRlcjRpMlZobFJPNmFRVHZoc29Ub01lcVQyUWJQeGoycUMwc1ZZOEZ0ekRxUW1vZHdDVlJMYWUvRExQdDd3aC9iRHhHDQpHdW9ZUTk5MnpQbG1ocHdzYVBYcEYvZ3hzeGpFMWtoOUkweG93WDY3QVJSdnhkbHUzcnNFUW1yNDlseDk1ZHI2aCtzTk5WSm4wSjZYDQpkZ1dUUDVYSEFlWnBWVGgvRUdHWnllTmZwc28rZ21OSXF1SUlTRDZxOHJLRllxYTBwOW05TjV4b3RTMVdmYkMzUDZDeEI5YnBUOXplDQpSWEV3TW44YkxnbjV2MUtoN3NLQVBnWmNMbFZBd1J2MWNFV3czRjM2OW5KYWQ5Smp6YzlZaVFCQ1l6OTVPZEJFc0lKdVFSbm8zZURCDQppRnJSSG5HVEh5UXdkT1VlcU40OEp6ZC9nNjZlZDgvd01MSC9TNW5veHFFPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpFbnRydXN0IFJvb3QgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFa1RDQ0EzbWdBd0lCQWdJRVJXdFFWREFOQmdrcWhraUc5dzBCQVFVRkFEQ0JzREVMTUFrR0ExVUVCaE1DVlZNeEZqQVVCZ05WDQpCQW9URFVWdWRISjFjM1FzSUVsdVl5NHhPVEEzQmdOVkJBc1RNSGQzZHk1bGJuUnlkWE4wTG01bGRDOURVRk1nYVhNZ2FXNWpiM0p3DQpiM0poZEdWa0lHSjVJSEpsWm1WeVpXNWpaVEVmTUIwR0ExVUVDeE1XS0dNcElESXdNRFlnUlc1MGNuVnpkQ3dnU1c1akxqRXRNQ3NHDQpBMVVFQXhNa1JXNTBjblZ6ZENCU2IyOTBJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNU1CNFhEVEEyTVRFeU56SXdNak0wDQpNbG9YRFRJMk1URXlOekl3TlRNME1sb3dnYkF4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEVlFRS0V3MUZiblJ5ZFhOMExDQkpibU11DQpNVGt3TndZRFZRUUxFekIzZDNjdVpXNTBjblZ6ZEM1dVpYUXZRMUJUSUdseklHbHVZMjl5Y0c5eVlYUmxaQ0JpZVNCeVpXWmxjbVZ1DQpZMlV4SHpBZEJnTlZCQXNURmloaktTQXlNREEySUVWdWRISjFjM1FzSUVsdVl5NHhMVEFyQmdOVkJBTVRKRVZ1ZEhKMWMzUWdVbTl2DQpkQ0JEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCDQpBTGFWdGtOQytzWnRLbTlJMzVSTU9WY0Y3c041RVVGb051M3MvcG9CajZFNEtQejNFRVptTGswZUdyRWFUc2JSd0pXSXNNbi9NWXN6DQpBOXUzZzNzK0lJUmU3YkpXS0tmNDRMbEFjVGZGeTBjT2x5cG93Q0tWWWhYYlI5bjEwQ3YvZ2t2SnJUN2VUTnVRZ0ZBL0NZcUVBT3d3DQpDajBZemZ2OUtsbWFJNVVYTEVXZUgyNURlVzBNWEpqK1NLZkZJMGRjWHYxdTV4NjA5bWhGMFlhRFc2S0tqYkhqS1lEK0pYR0lyYjY4DQpqNnhTbGt1cVVZM2tFekVaNkU1Tm45dXNzMnJWdkRsVWNjcDZlbitRM1gwZGdObUJ1MWttd2hIKzVwUGk5NERrWmZzME53NHBnSEJODQpyemlHTHA1L1Y2K2VGNjdySE1zb0lWKzJITmpub2dRaStkUGEyTXNDQXdFQUFhT0JzRENCclRBT0JnTlZIUThCQWY4RUJBTUNBUVl3DQpEd1lEVlIwVEFRSC9CQVV3QXdFQi96QXJCZ05WSFJBRUpEQWlnQTh5TURBMk1URXlOekl3TWpNME1scUJEekl3TWpZeE1USTNNakExDQpNelF5V2pBZkJnTlZIU01FR0RBV2dCUm9rT1JucEtaVGdNZUdacVR4OTB0RCs0UzliVEFkQmdOVkhRNEVGZ1FVYUpEa1o2U21VNERIDQpobWFrOGZkTFEvdUV2VzB3SFFZSktvWklodlo5QjBFQUJCQXdEaHNJVmpjdU1UbzBMakFEQWdTUU1BMEdDU3FHU0liM0RRRUJCUVVBDQpBNElCQVFDVDFEQ3cxd01nS3RENVkraVJEQVVncVY4WnludHlUdFN4MjlDVysxUmFHU3dNQ1BleXZJV29uWDl0TzFLekt0dm4xSVNNDQpZL1lQeXlZQmtWQnM5RjhVNHBOMHdCT2VNRHBRNDdSZ3hSendJa1NOY1Vlc3lCcko2WnVhQUdBVC8zQitYeEZOU1J1ekZWSjd5VlRhDQp2NTJWcjJ1YTJKN3A4ZVJEamVJUlJEcS9yNzJEUW5OU2k2cTdweW5QOVdRY0NrM1J2S3FzbnlyUS8zOS8ybjNxc2Uwd0pjR0UyalRTDQpXM2lEVnV5Y05zTW00aEgyWjBrZGtxdU0rK3YvZXU2RlNxZFFnUENuWEVxVUxsOEZtVHhTUWVETnRHUFBBVU82bklQY2oyQTc4MXEwDQp0SHV1Mmd1UU9IWHZnUjFtMHZkWGNEYXp2L3dvcjNFbGhWc1QvaDUvV3JROA0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpSU0EgU2VjdXJpdHkgMjA0OCB2Mw0KPT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRFlUQ0NBa21nQXdJQkFnSVFDZ0VCQVFBQUFud0FBQUFLQUFBQUFqQU5CZ2txaGtpRzl3MEJBUVVGQURBNk1Sa3dGd1lEVlFRSw0KRXhCU1UwRWdVMlZqZFhKcGRIa2dTVzVqTVIwd0d3WURWUVFMRXhSU1UwRWdVMlZqZFhKcGRIa2dNakEwT0NCV016QWVGdzB3TVRBeQ0KTWpJeU1ETTVNak5hRncweU5qQXlNakl5TURNNU1qTmFNRG94R1RBWEJnTlZCQW9URUZKVFFTQlRaV04xY21sMGVTQkpibU14SFRBYg0KQmdOVkJBc1RGRkpUUVNCVFpXTjFjbWwwZVNBeU1EUTRJRll6TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQw0KQVFFQXQ0OVZjZEtBM1h0cGVhZndHRkF5UEdKbjlncVZCOTNtRy9PZTJkSkJWR3V0bjN5K0djMzdScXRCYUI0WTZsWElMNUY0aVNqNw0KSnlsZy85K1BqRHZKU1p1MXBKVE9BZW8rdFdON2Z5YjlHZDNBSWIyRTBTMVBSc05PM05nM09Uc29yOHVkR3VvcnJ5R2x3U01pdUxnYg0KV2hPSFY0UFI4Q0RuNkU4alFyQUFwWDJKNmVsaGM1U1ljU2E4TFdyZzkwM3c4YllxT0RHQkRTbmhBTUZSRDB4UytBUmFxbjF5MDdpSA0KS3J0akVBTXFzNkZQRFZwZVJyYzlEdlYwN0ptZitUMGtnWWltM1dCVTZKVTJQY1lKazVxakVvQUFWWmtaUjczUXBYekR1dnNmOS9VUA0KK0t5NXRmUTNtQk1ZM29WYnR3eUNPNGR2bFRsWU1OcHVBV2dYSXN6QUN3SURBUUFCbzJNd1lUQVBCZ05WSFJNQkFmOEVCVEFEQVFILw0KTUE0R0ExVWREd0VCL3dRRUF3SUJCakFmQmdOVkhTTUVHREFXZ0JRSHcxRXdwS3JwUmE0MUpQci9KQ3d6MExHZGpEQWRCZ05WSFE0RQ0KRmdRVUI4TlJNS1NxNlVXdU5TVDYveVFzTTlDeG5Zd3dEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBRjgraG5adXVEVThUalljSG5tWQ0Kdi8zVkVoRjVVZzd1TVltODNYLzUwY1lWSWVpS0FWUU5PdnRVdWRaajFMR3FsazJpUWszVVV4K0xFTjUvWmI1Z0V5ZHhpS1J6NDRSag0KMGFSVjRWQ1Q1aHNPZWRCbnZFYkl2ejhYRFpYbXhwQnAzdWUwTDk2VmZkQVNQejArZjAwL0ZHajFFVkRWd2ZTUXBRZ2RNV0QvWUl3ag0KVkFxdi9xRnV4ZEY2S21oNHp4NkNDaUMwSDYzbGhiSnFhSFZPclNVM2xJVyt2YUhVNnJjTVN6eWQ2QklBOEYrc0RlR3NjR056OTM5NQ0KbnpJbFFuUUZnQ2kvdmNFa2xsZ1ZzUmNoNllsTDJ3ZUlaL1FWclhBK0wwMkZPOEszMi82WWFDT0o0WFFQM3ZURmhHTXBHOHpMQjhrQQ0KcEtuWHdpSlBaOWQzN0NBRllkND0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KR2VvVHJ1c3QgR2xvYmFsIENBDQo9PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRFZEQ0NBanlnQXdJQkFnSURBalJXTUEwR0NTcUdTSWIzRFFFQkJRVUFNRUl4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEVlFRSw0KRXcxSFpXOVVjblZ6ZENCSmJtTXVNUnN3R1FZRFZRUURFeEpIWlc5VWNuVnpkQ0JIYkc5aVlXd2dRMEV3SGhjTk1ESXdOVEl4TURRdw0KTURBd1doY05Nakl3TlRJeE1EUXdNREF3V2pCQ01Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OUjJWdlZISjFjM1FnU1c1ag0KTGpFYk1Ca0dBMVVFQXhNU1IyVnZWSEoxYzNRZ1IyeHZZbUZzSUVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQg0KQ2dLQ0FRRUEyc3dZWXpEOTlCY2pHbForVzk4OGJEamtjYmQ0a2RTOG9kaE0rS2hEdGdQcFRTRUhDSWphV0M5bU9TbTlCWGlMblRqbw0KQmJkcWZuR2s1c1JncHJEdmdPU0pLQStlSmRidGcvT3RwcEhIbU1sQ0dEVVVuYTJZUnBJdVQ4cnhoMFBCRnBWWExWRHZpUzJBZWxldA0KOHU1ZmE5SUFqYmtVK0JRVk5kbkFScU43Y3NpUnY4bFZLODNRbHo2Y0ptVE0zODZER1hIS1R1YlUxWHVwR2MxVjNzanMwbDQ0VStWYw0KVDR3dC9sQWpOdnhtNXN1T3BEa1pBTGVWQWptUkN3NytPQzdSSFFXYTlrMCtidzhISGE4c0hvOWdPZUw2TmxNVE9kUmVKaXZiUGFnVQ0KdlRMckdBTW9VZ1J4NWFzelBlRTR1d2MyaEdLY2Vlb1dNUFJmd0N2b2NXdmsrUUlEQVFBQm8xTXdVVEFQQmdOVkhSTUJBZjhFQlRBRA0KQVFIL01CMEdBMVVkRGdRV0JCVEFlcGhvalluN3F3VmtEQkY5cW4xbHVNck1UakFmQmdOVkhTTUVHREFXZ0JUQWVwaG9qWW43cXdWaw0KREJGOXFuMWx1TXJNVGpBTkJna3Foa2lHOXcwQkFRVUZBQU9DQVFFQU5lTXBhdVV2WFZTT0tWQ1VuNWthRk9TUGVDcGlsS0luWjU3UQ0KenhwZVIrbkJzcVRQM1VFYUJVNmJTKzVLYjFWU3N5U2hOd3JyWkhZcUxpenovVHQxa0wvNmNkakhQVGZTdFFXVllybW0zb2s5Tm5zNA0KZDBpWHJLWWdqeTZteVF6Q3NwbEZBTWZPRVZFaUl1Q2w2cllWU0FsazZsNVBkUGNGUHNlS1VnemJGYlM5Ylp2bHhyRlVhS25qYVpDMg0KbXFVUHVMay9JSDJ1U3JXNG5PUWR0cXZtbEtYQng0T3QyL1VuaHc0RWJOWC8zYUJkN1lkU3R5c1ZBcTQ1cG1wMDZkckU1N3hOTkI2cA0KWEUwelg1SUpMNGhtWFhlWHh4MTJFNm5WNWZFV0NSRTExYXpiSkhGd0xKaFdDOWtYdE5IalVTdGVkZWpWME54UE5PM0NCV2FBb2N2bQ0KTXc9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpHZW9UcnVzdCBHbG9iYWwgQ0EgMg0KPT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRFpqQ0NBazZnQXdJQkFnSUJBVEFOQmdrcWhraUc5dzBCQVFVRkFEQkVNUXN3Q1FZRFZRUUdFd0pWVXpFV01CUUdBMVVFQ2hNTg0KUjJWdlZISjFjM1FnU1c1akxqRWRNQnNHQTFVRUF4TVVSMlZ2VkhKMWMzUWdSMnh2WW1Gc0lFTkJJREl3SGhjTk1EUXdNekEwTURVdw0KTURBd1doY05NVGt3TXpBME1EVXdNREF3V2pCRU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OUjJWdlZISjFjM1FnU1c1ag0KTGpFZE1Cc0dBMVVFQXhNVVIyVnZWSEoxYzNRZ1IyeHZZbUZzSUVOQklESXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdw0KZ2dFS0FvSUJBUUR2UEUxQVBSRGZPMU1BNFdmK2xHQVZQb1dJOFlrTmtNZ29JNWtGNkNzZ25jYnpZRWJZd2JMVmpESFozQ0I1SklHLw0KTlRMOFkybmJzU3ByN2lGWThnanBlTXR2eS93V1VzaVJ4UDg5Yzk2eFBxZkNmV2JCOVg1U0pCcmkxV2VSMElJUTEzaExUeXRDT2Ixaw0KTFVDZ3NCRFRPRWhHaUtFTXV6b3pLbUtZK3dDZEUxbC9ienR5cXU2bUQ0YjVCV0hxWjM4TU41YUw1bWtXUnhIQ0oxa0RzNlpnd2lGQQ0KVnZxZ3gzMDZFK1BzVjhlejFxNmRpWUQzQWVjczlwWXJFdzE1TE5uQTVJWjdTNHdNY29LSyt4Zk5BR3c2RXp5d2hJZExGbm9wc2svYg0KSGRRTDgyWTN2ZGoyVjd0ZUpIcTRQSXU1K3BJYUdvU2UySFNQcWh0L1h2VCtSU0loQWdNQkFBR2pZekJoTUE4R0ExVWRFd0VCL3dRRg0KTUFNQkFmOHdIUVlEVlIwT0JCWUVGSEU0TnZJQ01WTkhLMjY2WlVhcEVCVllJQVVKTUI4R0ExVWRJd1FZTUJhQUZIRTROdklDTVZOSA0KSzI2NlpVYXBFQlZZSUFVSk1BNEdBMVVkRHdFQi93UUVBd0lCaGpBTkJna3Foa2lHOXcwQkFRVUZBQU9DQVFFQUEvZTFLNnRkRVB4Nw0Kc3JKZXJKc09mbE40V1Q1Q0JQNTFvNjJzZ1U3WEFvdGV4QzNJVW5iSExCLzhnVEtZMFV2R2twTXpOVEV2L05nZFJOM2dnWCtkNll2aA0KWkpGaUN6a0lqS3gwblZuWmVsbFNseEc1Rm50dlJkT1cyVEY5QWpZUG5EdHV6eXdOQTBaRjY2RDBmMGhFeGdoQXpONGJjTFVwcmJxTA0KT3pSbGRSdHhJUjBzRkFxd2xwVzQxdXJ5WmZzcHVrL3FrWk4wYWJieS8rRWEwQXpSZG9YTGlpVzlsMTRzYnhXWkp1ZTJLZjhpN01rQw0KeDFZQXpVbTVzMng3VXdRYTRxakpxaElGSThMTzU3c0VBc3pBUjZMa3hDa3ZXMFZYaVZIdVBPdFNDUDhITlI2Zk5XcEhTbGFZMFZxRg0KSDR6MUlyK3J6b1B6NGlJcHJuMkRRS2k2YkE9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpHZW9UcnVzdCBVbml2ZXJzYWwgQ0ENCj09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGYURDQ0ExQ2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCRk1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1ODQpSMlZ2VkhKMWMzUWdTVzVqTGpFZU1Cd0dBMVVFQXhNVlIyVnZWSEoxYzNRZ1ZXNXBkbVZ5YzJGc0lFTkJNQjRYRFRBME1ETXdOREExDQpNREF3TUZvWERUSTVNRE13TkRBMU1EQXdNRm93UlRFTE1Ba0dBMVVFQmhNQ1ZWTXhGakFVQmdOVkJBb1REVWRsYjFSeWRYTjBJRWx1DQpZeTR4SGpBY0JnTlZCQU1URlVkbGIxUnlkWE4wSUZWdWFYWmxjbk5oYkNCRFFUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQURnZ0lQDQpBRENDQWdvQ2dnSUJBS1lWVmFDanh1QWZqSjBoVU5mQnZpdGJ0YVNlb2RseVdMMEFHMHkvWWNrVUhVV0NxOFlkZ05ZOTZ4Q2NPcTl0DQpKUGk4Y1FHZUJ2VjhYeDdCRGxYS2c1cFpNSzRaeXpCSWxlMGlONDMwU3BweVpqNnRsY0RnRmdEZ0VCOHJNUTdYbEZUVFFqT2dOQjBlDQpSWGJkVDhvWU4reUZGWG9aQ1B6Vng1enc4cWt1RUttUzVqMVlQYWtXYUR3dmRTRVlmeWgzcGVGaEY3ZW02ZmdlbWR0emJ2UUtvaUZzDQo3dHFxaFpKbXIvWjZhNExhdWlJSU5RL1BRdkUxK21ydWZpc2x6RG9SNUcydmM3SjJIYTNRc25obkdxUTVIRkVMWjFhRC9UaGREYzdkDQo4THNybGgvZWV6SlMvUjI3dFFhaHNpRmVwZGFWYUgvd21aN2NSUWcrNTlJSkRUV1UzWUJPVTVmWHRRbEVJR1FXRndNQ1RGTU5hTjdWDQpxbkpOazIyQ0R0dWN2YyswODF4ZFZIcHBDWmJXMnhIQmpYV290TTg1eU00OHZDUjg1bUxLNGIxOXA3MVhaUXZrL2lYdHRta1EzQ2dhDQpScjBCSGRDWHRlR1lPOEEzWk5ZOWxPNEw0ZlVvcmd0V3YzR0xJeWxCam9iRlMxSjcySEdySDRvVnBqdURXdGRZQVZIR1RFSFpmOWhCDQpaM0tpS045Z2c2bWV5SHY4VTNOeVdmV1RlaGQyRHM3MzVWelpDMVUwb3FwYnRXcFU1eFBLVit5WGJmUmVCaTlGaTFqVUl4YVM1Qlp1DQpLR05aTU45UUFaeGppUnFmMnhlVWduQTN3eVNlbWtmV1dzcE9xR21KY2grUmJOdCtuaHV0eHg5ejNTeFBHV1g5ZjVOQUVDN1M4TzA4DQpuaTRvUG1rbU04VjdBZ01CQUFHall6QmhNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGTnE3THFxd0RMaUlKbEYwDQpYRzBEMDhEWWozcldNQjhHQTFVZEl3UVlNQmFBRk5xN0xxcXdETGlJSmxGMFhHMEQwOERZajNyV01BNEdBMVVkRHdFQi93UUVBd0lCDQpoakFOQmdrcWhraUc5dzBCQVFVRkFBT0NBZ0VBTVhqbXg3WGZ1SlJBeVhIRXFEWHNSaDNDaGZNb1dJYXdDL3lPc2ptUFJGV3JaSVJjDQphYW5RbWpnOCt1VWZOZVZFNDRCNWxHaWt1OFNmUGVFMHpUQkdpMVFybGFYdjl6K1poUDAxNXM4eHh0eHF2NmZYSXdqaG1GN0RXZ2gyDQpxYWF2ZHkrM1lMMUVSbXJ2bC85emxjR082SlA3L1RHMzdGY1JFVVdiTVBFYWlEbkJUenluQU5YSC9LdHRnQ0p3cFF6Z1hRUXBBdnZMDQpvSkhSZk5iRGZsRFZuVmkrUVRqcnVYVThGZG1ieVVxRFdjRGFVLzB6dXpZWW00VVBGZDN1TGF4Mms3blpBWTFJRUtqNzlUaUc4ZHNLDQp4cjJFb3lOQjN0WjNiNFhVaFJ4UTRLNVJpcnFOUG5iaXVjb244bCtmNzI1WkRRYllLeGVrMG54cnUxOFVHa2lQR2t6bnMwY2Nqa3hGDQpLeUR1U04vbjNRbU9HS2phUUkyU0poRlRZWE5kNjczbnhFMHBOMkhyckRrdFp5NFcxdlVBZzRXaHpIOTJ4SDNrdDB0bTd3TkZZR20yDQpERktXa29SZXBxTzFwRDRyMmN6WUcwZXE4a1RhVC9rRDZQQVV5ei96Zzk3UXdWVGp0K2dLTjAyTElGa0RNQm1oTE1pOUVSL2Zyc2xLDQp4Zk1uWm1hR3JHaVIvOW5tVXh3UGkxeHBaUW9teUI0MHcxMVJlOWVwbkFhaE50M1ZpWlM4MmVRdERGNEpiQWlYZktNOWZKUC9QNkVVDQpwOCsxWGV2YjJ4ekVkdCtJdWIxRkJaVWJydnhHYWt5dlNPUE9yZy9TZnV2bWJKeFBnV3A2Wkt5N1B0WG55M1l1eGFkSXdWeVFEOHZJDQpQL3JtTXVHTkcyK2s1bzdZK1NsSWlzNXovaXc9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkdlb1RydXN0IFVuaXZlcnNhbCBDQSAyDQo9PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGYkRDQ0ExU2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCSE1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1ODQpSMlZ2VkhKMWMzUWdTVzVqTGpFZ01CNEdBMVVFQXhNWFIyVnZWSEoxYzNRZ1ZXNXBkbVZ5YzJGc0lFTkJJREl3SGhjTk1EUXdNekEwDQpNRFV3TURBd1doY05Namt3TXpBME1EVXdNREF3V2pCSE1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OUjJWdlZISjFjM1FnDQpTVzVqTGpFZ01CNEdBMVVFQXhNWFIyVnZWSEoxYzNRZ1ZXNXBkbVZ5YzJGc0lFTkJJREl3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBDQpBNElDRHdBd2dnSUtBb0lDQVFDelZGTEJ5VDd5MmR5eFV4cFpLZWV4dzBVbzVkZlI3Y1hGUzZHcWRIdFhyMG9tL05qMVhxZHVHZHQwDQpERTgxV3pJTEFlUGI2M3AzTmVxcVd1RFc2S0ZYbFBDUW8zUldsRVF3QXg1Y1RpdUZKblNDZWd4Mm9HOU56a0V0b0JVR0ZGKzNRczE3DQpqMWhoTk53cUNQa3V3d0dtSWtRY1RBZUM1bHZPMEVwOEJOTVpjeWZ3cXBoL0xxOU82NGNlSkhkcVhiYm9XMFc2M01PaEJXOVdqbzhRDQpKcVZKd3k3WFFZY2k0RStHeW1DMTZxRmp3QUdYRUhtOUFEd1NiU3NWc2F4THNlNFl1VTZXM054Mi96dSt6MThEd1B3NzZMNUdHLy9hDQpRTUpTOS83ak92ZHFkelhRMm8zclhoaHFNY2NldWp3YktOWnJWTWFxVzllaUxCc1p6S0lDOXB0WnZUZHJoclZ0Z3JyWTZzbFd2S2syDQpXUDArR2ZQdERDYXBremo0VDhGZElnYlFsK3JocmNaVjRJRXJLSU02K3ZSN0lWRUF2bEk0enMxbWVhajBnVmJpMElNSlIxRmJVR3JQDQoyMGdhWFQ3M3kvWmw5Mnp4bGZnQ096Sldnamw2VzcwdmlSdS9vYlRvLzMrTmpOOEQ4V0JPV0JGTTY2TS9FQ3VEbWdGejJaUnRoQUFuDQpacXp3Y0VBSlFwS3RUNU1OWVFsUkpOaVMxUXVVWWJLSHN1My9talgvaFZUSzdVUkRyQnM4Rm10SVNnb2NRSWdma3NJTEFBWC84c2dDDQpTcVNxcWN5Wmxwd3ZXT0I5NGI2N0I5eGZCSEpjTVRURDdGOHQ0RDFra0NMbTBleTRMdDFacnRtaE43OVVOZHh6TWsrTUJCNHpzc2xHDQo4ZGhjeUZWUXlXaTlxTG8yQ1FJREFRQUJvMk13WVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSMjgxWGgrcVEyDQorL0NmWEdKeDdUejBSemdRS3pBZkJnTlZIU01FR0RBV2dCUjI4MVhoK3FRMisvQ2ZYR0p4N1R6MFJ6Z1FLekFPQmdOVkhROEJBZjhFDQpCQU1DQVlZd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dJQkFHYkJ4aVB6MmVBdWJsL296NjZ3c0NWTksvZzdXSnRBSkRkYXk2c1dTZit6DQpkWGt6b1M5dGNCYzBrZjVuZm8vc20rVmVncWxWSHkvYzFGRUhFdjZzRmo0c05jWmovTndRNncyanF0Qjh6TkhRTDFFdXhCUmEzdWdaDQo0VDdHektRcDV5NkVxZ1l3ZUhaVWN5aVlXVGpnQUExaTAwSjlJWit1UFRxTTFmcDNEUmdyRmc1Zk51SDhLclV3Sk0vZ1l3eDdXQnIrDQptYnBDRXJHUjlIeG80c2pvcnl6cXlYNnV1eW85RFJYY05KVzJHSFNvYWcvSHRQUVR4T1JiN1FyU3BKZE1LdTB2YkJLSlBmRW5jS3BxDQpBMUlobjBDb1oxRHk4MW9mMzk4ajl0eDRUdWFZVDFVNlUrUHY4dlNmeDN6WVdLOHBJcGU0NEwyUkxyQjI3RmNSeis4cFJQUHBoWHBnDQpZK1JkTTRrWDJUR3EydGJ6R0RWeXo0Y3JMMk1qaEYyRWpEOVhvSWo4bVpFb0ptbVoxSStYUkw2TzFVaXhwQ2dwOFJXMDRlV2UzZmlQDQpwbThtMXdrOE9od1JEcVpzTi9ldFJJY3NLTWZZZElLejBHOUtWN3MxS1NlZ2krZ2hwNGRrTmwzTTJCYXN4N0luUUpKVk9DaU5VVzdkDQpGR2RUYkhGY0pvUk5kVnEyZm1CV3FVMnQrNXNlbC9NTjJkS1hWSGZhUFJLMzRCN3ZDQWFzK1lXSDZhTGNyMzRZRW9QOVZoZEJMdFVwDQpnbjJaOURIMmNhblBMQUVucFFXNXFySklUaXJ2bjVOU1VaVThVbk9PVmt3WFFNQUpLT1NMYWtoVDIrek5WVlh4eHZqcG9peE1wdEVtDQpYMzZ2V2t6YUg2YnlIQ3grcmdJVzBsYlFMMWRUUitpUw0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpBbWVyaWNhIE9ubGluZSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IDENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEcERDQ0FveWdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCak1Rc3dDUVlEVlFRR0V3SlZVekVjTUJvR0ExVUVDaE1UDQpRVzFsY21sallTQlBibXhwYm1VZ1NXNWpMakUyTURRR0ExVUVBeE10UVcxbGNtbGpZU0JQYm14cGJtVWdVbTl2ZENCRFpYSjBhV1pwDQpZMkYwYVc5dUlFRjFkR2h2Y21sMGVTQXhNQjRYRFRBeU1EVXlPREEyTURBd01Gb1hEVE0zTVRFeE9USXdORE13TUZvd1l6RUxNQWtHDQpBMVVFQmhNQ1ZWTXhIREFhQmdOVkJBb1RFMEZ0WlhKcFkyRWdUMjVzYVc1bElFbHVZeTR4TmpBMEJnTlZCQU1UTFVGdFpYSnBZMkVnDQpUMjVzYVc1bElGSnZiM1FnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa2dNVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEDQpnZ0VQQURDQ0FRb0NnZ0VCQUtndjZLUnBCZ05IdytrcW1QOFpvbkNheGxDeWZxWGZhRTBiZkErMmwyaDlMYWFMbCtsa2hzbWo3NkNHDQp2MkJsbkV0VWlNSkl4VW81dnhUaldWWGxHYlIweUxRRk9Wd1dwZUtWQmVBU3JsbUxvak5vV0J5bTFCVzMySi9YM0hHcmZwcS9tNDR6DQpEeUw5SHk3bkJ6YnZZam5GM2N1NkpSUWozZ3pHUFR6T2dnam1aajdhVVRzV09xTUZmNkRjaDlXYy9IS3BvSDE0NUxjeFZSNWx1OVJoDQpzQ0ZnN1JBeWNzV1NKUjc0a0VvWWVFZmZmakEzUGxBYjJ4elRhNXFHVXdldzc2d0dlUGlFbWY0aGpVeUF0Z3lDOW1ad2VSclRUNlBQDQo4YzlHc0VzUFB0MklZcmlNcVFrb08zckhsK0VlNWZTZndNQ3VKS0RJb2RrUDFuc21nbWt5UGFjQ0F3RUFBYU5qTUdFd0R3WURWUjBUDQpBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVQUszWm8vWjU5bTUwcVg4elBZRVgxMHpQTTk0d0h3WURWUjBqQkJnd0ZvQVVBSzNaDQpvL1o1OW01MHFYOHpQWUVYMTB6UE05NHdEZ1lEVlIwUEFRSC9CQVFEQWdHR01BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQjhpdEVmDQpHRGVDNExpd28rMVdsY2hpWVp3Rm9zM0NZaVpoelJBVzE4eTBaVFRRRVlxdHFLa0ZadTkwODIxZm5abXY5b3Y3NjFLeUJaaWlieXJGDQpWTDBsdlYrdXlJYnFSaXpCczczQjZVbHdHQmFYQ0JPTUlPQWJManBIeXg3a0FEQ1ZXL1JGbzhBYXNBRk9xNzNBSTI1alA0Qkt4UWZ0DQozT0p2eDhGaThlTnkxZ1RJZEdjTCtvaXJvUUhJYi9BVXI5S1p6VkdUZnUwdU9NZTl6a1pRUFhMamVTV2RtNGdyRUNEZHBiZ3luNDNnDQpLZDhoZElhQzJ5K0NNTWJITllheitaWmZSdHNNUmYzelVNTnZ4c05JclVhbTRTZEhDaDBPbTdiQ2QzOWo4dUI5R3I3ODROL1h4NmRzDQpzUG11dWp6OWRMUVI2RmdOZ0x6VHFJQTZtZTExekVaNw0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpBbWVyaWNhIE9ubGluZSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IDINCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGcERDQ0E0eWdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCak1Rc3dDUVlEVlFRR0V3SlZVekVjTUJvR0ExVUVDaE1UDQpRVzFsY21sallTQlBibXhwYm1VZ1NXNWpMakUyTURRR0ExVUVBeE10UVcxbGNtbGpZU0JQYm14cGJtVWdVbTl2ZENCRFpYSjBhV1pwDQpZMkYwYVc5dUlFRjFkR2h2Y21sMGVTQXlNQjRYRFRBeU1EVXlPREEyTURBd01Gb1hEVE0zTURreU9URTBNRGd3TUZvd1l6RUxNQWtHDQpBMVVFQmhNQ1ZWTXhIREFhQmdOVkJBb1RFMEZ0WlhKcFkyRWdUMjVzYVc1bElFbHVZeTR4TmpBMEJnTlZCQU1UTFVGdFpYSnBZMkVnDQpUMjVzYVc1bElGSnZiM1FnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa2dNakNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEDQpnZ0lQQURDQ0Fnb0NnZ0lCQU14QlJSM3BQVTBROW95eFFjbmdYc3NOdDc5SGM5UHdWVTNkeGd6NnNXWUZhczE0dE53QzIwNkI4OWVuDQpmSEc4ZFdPZ1hlTUhERWpzSmNRRElQVC9EanNTLzV1TjRjYlZHN1J0SXVPeDIzOGhaSytHdkZjaUt0WkhnVmRFZ2xaVHZZWVVBUXY4DQpmM1NrV3E3eHVoRzFtMWhhZ0xRM2VBa3pmREpIQTF6RXBZTkk5RmRXYm9FMkp4aFA3SnNvd3RTMDEzd01QZ3dyMzhvRTE4YU82bGhPDQpxS1NsR0J4c1JaaWpRZEV0MHNkdGpSbnhyWG0zZ1QrOUJvSW5MUkJZQmJWNEJia3Yyd3hya0pCK0ZGazR1NVFrRStYUm5SVGYwNEpODQpSdkNBT1ZJeUQrT0VzbnBEOGw3ZVh6OGQzZU95RzZDaEtpTURiaTRCRllkY3BuVjF4NWRodnQ2RzNOUkkyNzBxdjBwVjJ1aDlVUHUwDQpnQmU0bEw4QlBlcmF1bnpnV0djWHVWamdpSVpHWjJ5ZEVFZFlNdEExZkhrcWtLSmFFQkVqTmEwdnpPUktXNmZJSi9LRDNsNjdYbmZuDQo2S1Z1WThJTlhXSFFqTkpzV2lFT3lpaWp6aXJwbGNkSXo1WnZIWklseU1iR3djRU1CYXdteE5KMTB1RXFaOEE5VzZXYTY4OTdHcWlkDQpGRVhsRDZDYVpkNHZLTDNPYjVSbWcwZ3AyT3BsaksrVDJXU2ZWVmNtdjIvTE56R1pvMkM3SEsySk5ESml1RU1oQm5JTW9WeHRSc1g2DQpLYzh3M29uY2NWdmR0amMrMzFEMXVBY2xKdVc4dGY0OEFyTzMrTDVEd1ljUmxKNGpiQmVLdUlvbkRGUkg4S216d0lDTW9DZnJIUm5qDQpCNDUzY01vcjlIMTI0SGhuQWdNQkFBR2pZekJoTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkUxRndXZzR1M09wDQphYUVnNSszMUlxRWpGTmVlTUI4R0ExVWRJd1FZTUJhQUZFMUZ3V2c0dTNPcGFhRWc1KzMxSXFFakZOZWVNQTRHQTFVZER3RUIvd1FFDQpBd0lCaGpBTkJna3Foa2lHOXcwQkFRVUZBQU9DQWdFQVoyc0d1VjlGT3lwTE03UG1HMnRaVGlMTXViZWtKY21ueFBCVWxndGs4N0ZZDQpUMTVSL0xLWGV5ZGx3dVhLNXcwTUpYdGk0L3FmdEllM1JVYXZnNldYU0l5bHZmRVdLNXQyTEhvMVlHd1JnSmZNcVpKUzVpdm1hZTJwDQorRFl0TEhlL1lValJZd3U1VzFMdEdMQkRRaUttc1hldTNtbkZ6Y2Njb2JHbEhCRDdHTDRhY04zQmtrdStLVnFkUHpXKzVYMVIrRlhnDQpKWFVqaHg1YzNMcWRzS3l6YWRzWGc4bjMzZ3k4Q055Um5xalExeFUzYzZVMXVQeCt4VVJBQnNQcitDS0FYRWZPQXVNUm4wVC8vWm95DQp6SDFrVVE3clZ5WjJPdU1lSWp6Q3BqYmRHZStuL0JMekpzQlpNWVZNbk5qUDM2VE16Q21ULzVSdGRsd1RDSmZ5N2FVTFRkM295V2dPDQpadE1BRGpNU1c3eVY1VEtRcUxQR2JJT3RkKzZMZm42eHFhdlQ0Zkcyd0xIcWlNRG4wNURwS0pLVWUyaDdseW9LWnkyRkFqZ1E1QU5oDQoxTm9sTnNjSVdDMmhwMUd2TUFwSjlhWnBod2N0UkVaMmppcmxtanZYR0tMOG5EZ1F6TVk3MHJVWE9tLzlyaVc5OVhKWlpMRjBLamhmDQpHRXpmejNFRVdqYlV2eStabk9qWnVyR1Y1Z0pMSWFGYjFjRlBqNjVwYlZQYkFaTzFYQjRZM1dSYXloZ29QbU1FRWYwY2pRQVB1RGZmDQpaNHFkWnFrQ2FwSC9FOG92WFlPOGg1TnMzQ1JSRmdRbFp2cXoyY0s2S2I2YVNEaUNtZlMvTzBveEdmbS9qaUV6Rk1wUFZGLzd6dnVQDQpjWC85WGhtZ0QwdVJ1TVJVdkFhd1JZOG1rYUtPL3FrPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpWaXNhIGVDb21tZXJjZSBSb290DQo9PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURvakNDQW9xZ0F3SUJBZ0lRRTRZMVRSMC9CdkxCK1dVRjFaQWNZakFOQmdrcWhraUc5dzBCQVFVRkFEQnJNUXN3Q1FZRFZRUUcNCkV3SlZVekVOTUFzR0ExVUVDaE1FVmtsVFFURXZNQzBHQTFVRUN4TW1WbWx6WVNCSmJuUmxjbTVoZEdsdmJtRnNJRk5sY25acFkyVWcNClFYTnpiMk5wWVhScGIyNHhIREFhQmdOVkJBTVRFMVpwYzJFZ1pVTnZiVzFsY21ObElGSnZiM1F3SGhjTk1ESXdOakkyTURJeE9ETTINCldoY05Nakl3TmpJME1EQXhOakV5V2pCck1Rc3dDUVlEVlFRR0V3SlZVekVOTUFzR0ExVUVDaE1FVmtsVFFURXZNQzBHQTFVRUN4TW0NClZtbHpZU0JKYm5SbGNtNWhkR2x2Ym1Gc0lGTmxjblpwWTJVZ1FYTnpiMk5wWVhScGIyNHhIREFhQmdOVkJBTVRFMVpwYzJFZ1pVTnYNCmJXMWxjbU5sSUZKdmIzUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDdlY5NVdIbTZoMm1DeGxDZkwNCkY5c0hQNENGVDhpY3R0RDBiMC9QbWRqaDI4SklYRHFzT1RQSEgycUxKajByTmZWSXNaSEJBazRFbHBGN3NEUHdzUlJPRVcrMVFLOGINClJhVks3MzYyclBLZ0gxZy9Fa1pnUEkyaDRIM1BWejR6SHZ0SDhhb1Zsd2RWWnFXMUxTN1lnRm15cHcyM1J1d2hZLzgxcTZVQ3p5cjANClRQNTc5WlJkaEUybzhtQ1AydzRsUEo5emNjK1UzMHJxMjk5eU9JenpscjN4Rjd6U3VqdEZXc2FuOXNZWGl3R2QvQm1vS29NV3VEcEkNCi9rNCtvS3NHR2VsVDg0QVRCKzB0dno4S1BGVWdPU3dzQUdsMGxVcThJTEtwZWVVWWlaR28zQnhONzd0K053dGQvam1saUZLTUFHenMNCkdIeEJ2ZmFMZFhlNllKMkU1LzR0QWdNQkFBR2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvQkFRREFnRUcNCk1CMEdBMVVkRGdRV0JCUVZPSU1QUHl3L2NETWV6VWIrQjR3ZzROZkR0ekFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBWC9GQmZYeGMNCkNMa3I0TldTUi9wblhLVVR3d01obXl0TWlVYlBXVTNKL3FWQXRtUE4zWEVvbFdjUnpDU3MwMFJzY2E0QklHc0RvbzhZdHlrNmZlVVcNCllGTjRQTUN2RllQM2oxSXpKTDFrazVmdWkvZmJHS2h0Y2JQM0xCZlFkQ1ZwOS81clBKUytUVXRCakU3aWM5RGprQ0p6UTgzejcrcHoNCnprV0tzS1pKLzB4OW5YR0l4SFlka0ZzZDd2M005Kzc5WUtXeGVoWngwUmJRZkJJOGJHbVgyNjVmT1pwd0x3VThHVVlFbVNBMjBHQnUNCllRYTdGa0tNY1BjdysrRGJacU1BQWIzbUxOcVJYNkJHaTAxcW5EMDkzUVZHL25hL29Bbzg1QURtSjdmL2hDM2V1aUlubGhCeDZ5THQNCjM5OHpuTS9qcmE2TzFJN21UMUd2RnBMZ1hQWUhEdz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkNlcnR1bSBSb290IENBDQo9PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlERERDQ0FmU2dBd0lCQWdJREFRQWdNQTBHQ1NxR1NJYjNEUUVCQlFVQU1ENHhDekFKQmdOVkJBWVRBbEJNTVJzd0dRWURWUVFLDQpFeEpWYm1sNlpYUnZJRk53TGlCNklHOHVieTR4RWpBUUJnTlZCQU1UQ1VObGNuUjFiU0JEUVRBZUZ3MHdNakEyTVRFeE1EUTJNemxhDQpGdzB5TnpBMk1URXhNRFEyTXpsYU1ENHhDekFKQmdOVkJBWVRBbEJNTVJzd0dRWURWUVFLRXhKVmJtbDZaWFJ2SUZOd0xpQjZJRzh1DQpieTR4RWpBUUJnTlZCQU1UQ1VObGNuUjFiU0JEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTTZ4DQp3UzdUVDN6TkpjNFlQay9FakcrQWFuUElXMUg0bTlMY3V3QmNzYUQ4ZFFQdWdmQ0k3aU5TNmVZVk00MnNMUW5GZHZrck9ZQ0o1SmRMDQprS1dvZVBoelEzdWtZYkRZV016aGJHWituUE1KWGxWamhOV283L094TGpCb3M4UTgyS3h1alpsYWtFNDAzRGFhajRHSVVMZHRsa0lKDQo4OWVWZ3cxQlM3QnFhL2o4RDM1aW4yZkU3U1pmRUNZUENFL3dwRmNvem8rNDdVWDJidTRsWGFwdU9iN2treS9aUjZCeTYvcW1XNi9LDQpVei9pRHNhV1ZoRnU5K2xtcVNiWWY1VlQ3UXFGaUxwUEthVkNqRjYyL0lVZ0FLcG9DNkVhaFFHY3hFWmpnb2kySXJIdS9xcEdXWDdQDQpOU3pWdHRwZDkwZ3pGRlMyNjlsdnpzMkkxcXNiMnBZN0hWa0NBd0VBQWFNVE1CRXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txDQpoa2lHOXcwQkFRVUZBQU9DQVFFQXVJM083K2NVdXMvdXNFU1NiTFE1UHFLRWJxMjRJWGZTMUhlQ2grWWdRWUh1NHZnUnQyUFJGemUrDQpHWFlrSEFRYVRPczlxbWR2TGRUTi9tVXhjTVVicGdJS3VtQjdiVmpDbWtuK1l6SUxhK002d0t5ck83RG8wd2xSakJDRHhqVGd4U3ZnDQpHclpnRkNkc01uZU12TEp5bU0vTnpEKzV5Q1JDRk5aWC9PWW1RNmtkNVlDUXpnTlVLRDczUDlQNFRlMXFDanFURTVzN0ZDTVRZNXcvDQowWWNuZWVWTVVlTUJyWVZkR2p1eDFYTVFwTlB5dkc1azlWcFdrS2pIRGt4MER5NXhPL2ZJUi9ScGJ4WHlFVjZESHB4OFVxNzlBdG9TDQpxRmxuR051OGNOMmJzV250Z002SlFFaHFEalhLS1dZVklaUXM2R0FxbTRWS1FQTnJpaVRzQmhZc2N3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ29tb2RvIEFBQSBTZXJ2aWNlcyByb290DQo9PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRU1qQ0NBeHFnQXdJQkFnSUJBVEFOQmdrcWhraUc5dzBCQVFVRkFEQjdNUXN3Q1FZRFZRUUdFd0pIUWpFYk1Ca0dBMVVFQ0F3Uw0KUjNKbFlYUmxjaUJOWVc1amFHVnpkR1Z5TVJBd0RnWURWUVFIREFkVFlXeG1iM0prTVJvd0dBWURWUVFLREJGRGIyMXZaRzhnUTBFZw0KVEdsdGFYUmxaREVoTUI4R0ExVUVBd3dZUVVGQklFTmxjblJwWm1sallYUmxJRk5sY25acFkyVnpNQjRYRFRBME1ERXdNVEF3TURBdw0KTUZvWERUSTRNVEl6TVRJek5UazFPVm93ZXpFTE1Ba0dBMVVFQmhNQ1IwSXhHekFaQmdOVkJBZ01Fa2R5WldGMFpYSWdUV0Z1WTJobA0KYzNSbGNqRVFNQTRHQTFVRUJ3d0hVMkZzWm05eVpERWFNQmdHQTFVRUNnd1JRMjl0YjJSdklFTkJJRXhwYldsMFpXUXhJVEFmQmdOVg0KQkFNTUdFRkJRU0JEWlhKMGFXWnBZMkYwWlNCVFpYSjJhV05sY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQw0KZ2dFQkFMNUFuZlJ1NGVwMmh4eE5SVVNPdmtiSWd3YWR3U3IrR0IrTzVBTDY4NnRkVUlvV01RdWFCdERGY0NMTlNTMVVZOHkyYm1oRw0KQzFQcXkwd2t3THh5VHVyeEZhNzBWSm9TQ3NONnNqTmc0dHFKVmZNaVdQUGUzTS92ZzRhaWpKUlBuMmp5bUpCR2hDZkhkci9qekRVcw0KaTE0SFpHV0N3RWl3cUpINVlaOTJJRkNva2NkbXRldDRZZ05XOElvYUUrb3hveDZnbWYwNDl2WW5NbGh2Qi9WcnVQc1VLNiszcXN6Vw0KWTE5empOb0ZtYWc0cU1zWGVEWlJyT21lOUhnNmpjOFAyVUxpbUF5ckw1OE9BZDd2bjVsSjhTM2ZySFJORzVpMVI4WGxLZEg1a0JqSA0KWXB5K2c4Y21lejZLSmNmQTNaM21OV2dRSUoyUDJON1N3NFNjRFY3b0w4a0NBd0VBQWFPQndEQ0J2VEFkQmdOVkhRNEVGZ1FVb0JFSw0KSXo2VzhRZnM0cThwNzRLbGY5QXdwTFF3RGdZRFZSMFBBUUgvQkFRREFnRUdNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdld1lEVlIwZg0KQkhRd2NqQTRvRGFnTklZeWFIUjBjRG92TDJOeWJDNWpiMjF2Wkc5allTNWpiMjB2UVVGQlEyVnlkR2xtYVdOaGRHVlRaWEoyYVdObA0KY3k1amNtd3dOcUEwb0RLR01HaDBkSEE2THk5amNtd3VZMjl0YjJSdkxtNWxkQzlCUVVGRFpYSjBhV1pwWTJGMFpWTmxjblpwWTJWeg0KTG1OeWJEQU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUFDRmI4QXZDYjZQK2srdFo3eGtTQXprL0V4ZllBV015bXRyd1VTV2dFZHVqbQ0KN2wzc0FnOWcxbzFRR0U4bVRnSGo1ckNsN3IrOGRGUkJ2LzM4RXJqSFQxcjBpV0FGZjJDM0JVcno5dkhDdjhTNWRJYTJMWDFyek5Meg0KUnQwdnh1QnF3OE0wQXl4OWx0MWF3ZzZuQ3BuQkJZdXJEQy96WERyUGJEZFZDWWZlVTBCc1dPLzh0cXRsYmdUMkc5dzg0Rm9WeHA3Wg0KOFZsSU1DRmxBMnpzNlNGejdKc0RvZUEzcmFBVkdJLzZ1Z0xPcHl5cEVCTXMxT1VJSnFzaWwyRDRrRjUwMUtLYVU3M3lxV2pnb203Qw0KMTJ5eG93K2V2K3RvNTFieXJ2TGpLemc2Q1lHMWE0WFh2aTN0UHhxM3NtUGk5V0lzZ3RScUFFRlE4VG1EbjVYcE5wYVliZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkNvbW9kbyBTZWN1cmUgU2VydmljZXMgcm9vdA0KPT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVQekNDQXllZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRVUZBREIrTVFzd0NRWURWUVFHRXdKSFFqRWJNQmtHQTFVRUNBd1MNClIzSmxZWFJsY2lCTllXNWphR1Z6ZEdWeU1SQXdEZ1lEVlFRSERBZFRZV3htYjNKa01Sb3dHQVlEVlFRS0RCRkRiMjF2Wkc4Z1EwRWcNClRHbHRhWFJsWkRFa01DSUdBMVVFQXd3YlUyVmpkWEpsSUVObGNuUnBabWxqWVhSbElGTmxjblpwWTJWek1CNFhEVEEwTURFd01UQXcNCk1EQXdNRm9YRFRJNE1USXpNVEl6TlRrMU9Wb3dmakVMTUFrR0ExVUVCaE1DUjBJeEd6QVpCZ05WQkFnTUVrZHlaV0YwWlhJZ1RXRnUNClkyaGxjM1JsY2pFUU1BNEdBMVVFQnd3SFUyRnNabTl5WkRFYU1CZ0dBMVVFQ2d3UlEyOXRiMlJ2SUVOQklFeHBiV2wwWldReEpEQWkNCkJnTlZCQU1NRzFObFkzVnlaU0JEWlhKMGFXWnBZMkYwWlNCVFpYSjJhV05sY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVANCkFEQ0NBUW9DZ2dFQkFNQnhNNEtLMEhEcmM0ZUNRTlVkNU12SkRrS1ErZDQwdWFHNkVmUWxoZlBNY20zeWU1ZHJzd2Z4ZHlTUlh5V1ANCjluUTk1SURDK0R3Tjg3OUE2dmZJVXRGeWIrL0lxMEc0Ymk0WEtwVnBETTNTSHBSN0xaUWRxblhYczVqTHJMeGtVMEM4ajZ5c05zdGMNCnJidmQ0SlFYN05GYzBML3ZwWlhKa01Xd3JQc2JROTk2Q0YyM3VQSkFHeXNubmxET1htV0NpSXhlMDA0TWV1b0lrYlkycWl0QysrckMNCm96bmwyeVk0cllzSzdobGp4eHdrM3dONDJ1YnF3VWNhQ3d0R0NkMEMvTjdMaDEvWE1HTm9vYTdjTXFHNnZ2NUVxMmkycFJjVi9iM1YNCnA2ZWE1RVF6NllpTy9PMVI2NU54VHEwQjUwU09xeTNMcVA0QlNVand3TjNIYU5pUy9qMENBd0VBQWFPQnh6Q0J4REFkQmdOVkhRNEUNCkZnUVVQTmlUaU1MQWdnbk1BWmtHa3lEcG5uQUpZMDh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHcNCmdZRUdBMVVkSHdSNk1IZ3dPNkE1b0RlR05XaDBkSEE2THk5amNtd3VZMjl0YjJSdlkyRXVZMjl0TDFObFkzVnlaVU5sY25ScFptbGoNCllYUmxVMlZ5ZG1salpYTXVZM0pzTURtZ042QTFoak5vZEhSd09pOHZZM0pzTG1OdmJXOWtieTV1WlhRdlUyVmpkWEpsUTJWeWRHbG0NCmFXTmhkR1ZUWlhKMmFXTmxjeTVqY213d0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFJY0JiU01kZmxzWGZjRmhNcytQNS9PS2xGbG0NCjRKNG9xRjdUdC9RMDVxbzVzcGNXeFlKdk1xVHBqT2V2L2UvQzZMbExxcVAwNXRxTlpTSDd1b0RySmlpRkd2NDVqTjViQkFTMFZQbWoNClo1NUIrZ2xTekFWSXFNay9JUVFlemtoci9JWG93bnV2ZjdmTStGODYvVFhHRGUrWDNFeXJFZUZyeXpIUmJQdElnS3ZjbkRlNElSUkwNCkRYRTk3SU16YnRGdU1oYnNtTWNXaTFtbU5Lc0ZWeTJUOTZvVHk5SVQ0cmN1TzgxclVCY0phRDYxSmxmdXR1QzIzYmtwZ0hsOWo2UHcNCnBDaWtGY1NGOUNmVWE3L2xYT1JsQW5aVXRPTTNaaVRUR1dISVVoRGxpemVhdWFuNUhiL3FtWkpobHY4QnphRmZEYnh4dkE2c0N4MUgNClJSM0I3SHpzL1NrPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpDb21vZG8gVHJ1c3RlZCBTZXJ2aWNlcyByb290DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVRekNDQXl1Z0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRVUZBREIvTVFzd0NRWURWUVFHRXdKSFFqRWJNQmtHQTFVRUNBd1MNClIzSmxZWFJsY2lCTllXNWphR1Z6ZEdWeU1SQXdEZ1lEVlFRSERBZFRZV3htYjNKa01Sb3dHQVlEVlFRS0RCRkRiMjF2Wkc4Z1EwRWcNClRHbHRhWFJsWkRFbE1DTUdBMVVFQXd3Y1ZISjFjM1JsWkNCRFpYSjBhV1pwWTJGMFpTQlRaWEoyYVdObGN6QWVGdzB3TkRBeE1ERXcNCk1EQXdNREJhRncweU9ERXlNekV5TXpVNU5UbGFNSDh4Q3pBSkJnTlZCQVlUQWtkQ01Sc3dHUVlEVlFRSURCSkhjbVZoZEdWeUlFMWgNCmJtTm9aWE4wWlhJeEVEQU9CZ05WQkFjTUIxTmhiR1p2Y21ReEdqQVlCZ05WQkFvTUVVTnZiVzlrYnlCRFFTQk1hVzFwZEdWa01TVXcNCkl3WURWUVFEREJ4VWNuVnpkR1ZrSUVObGNuUnBabWxqWVhSbElGTmxjblpwWTJWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0MNCkFROEFNSUlCQ2dLQ0FRRUEzM0Z2TmxoVFd2STJWRmVBeEhRSUlPMFlmeW9kNWpXYUhpV3NuT1dXZm5KU29CVkMyMW5kWkhvYTBMaDcNCjNUa1Z2RlZJeE8wNkFPb3hFYnJ5Y1hRYVo3alBNOHlvTWErajQ5ZC92ek10VEdvODdJdkRrdEpUZHlSMG5BZHVjUHk5QzF0MnVsL3kNCi85YzNTMHBnZVBmdytzcHd0T3BacXFQT1NDK3B3N0lMZmhkeUZneW1Cd3diT00vSllyYy9vSk9saDBIeXQzQkFkOWkrRkh6anFNQjYNCmp1bGphdEVQbXNiUzlJczZGQVJXMU8yNHpHNzErK0lzV0wxL1Qyc3I5MkFrV0NUT0p1ODBrVHJWNDRIUXN2QUVBdGRidHo2U3JHc1MNCml2bmtCYkE3a1VsY3N1dFQ2dmlmUjRidXY1WEF3QWFmMGx0ZUVSdjB4d1ExS2RKVlhPVHQ2d0lEQVFBQm80SEpNSUhHTUIwR0ExVWQNCkRnUVdCQlRGZTFpOTdkb2xhZEwzV1Jhb3N6TEFleWRiOURBT0JnTlZIUThCQWY4RUJBTUNBUVl3RHdZRFZSMFRBUUgvQkFVd0F3RUINCi96Q0Jnd1lEVlIwZkJId3dlakE4b0RxZ09JWTJhSFIwY0RvdkwyTnliQzVqYjIxdlpHOWpZUzVqYjIwdlZISjFjM1JsWkVObGNuUnANClptbGpZWFJsVTJWeWRtbGpaWE11WTNKc01EcWdPS0EyaGpSb2RIUndPaTh2WTNKc0xtTnZiVzlrYnk1dVpYUXZWSEoxYzNSbFpFTmwNCmNuUnBabWxqWVhSbFUyVnlkbWxqWlhNdVkzSnNNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUURJazRFN2liU3Z1SVFTVEkzUzhOdHcNCnVsZUdGVFFRdVM5L0hyQ29pV0NoaXNKM0RGQkttd0NMMkl2MFFlTFFnNHBLSEJRR3NLTm9CWEF4TUtkVG13N3BTcUJZYVdjT3JwMzINCnBTeEJ2endHYStSWnpHMFE4Wlp2SDkvMEJBS2tuMFUreU5qNk5rWkVVRCtDbDVFZktOc1lFWXdxNUdXRFZ4SVNqQmMvbERiK1hiREENCkJIY1R1UFFWMVQ4NHpKUTZWZENzbVBXNkFGL2doaG1CZUM4b3dIN1R6RUlLOWE1UW9ORSt4cUZ4N0QrZ0lJeG1Pb20wanRUWXNVMGwNClIrNHZpTWkxNFFWRndMNFVjZDU2L1k1N2ZVMElscVVTYy9BdHlqY25kQkluVE11MmwrblpyZ2h0V2psQTNRVkhkV3BhSWJPakdNOU8NCjl5NVh0NWh3WHNqRWVMQmkNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KUXVvVmFkaXMgUm9vdCBDQQ0KPT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGMERDQ0JMaWdBd0lCQWdJRU9yWlFpekFOQmdrcWhraUc5dzBCQVFVRkFEQi9NUXN3Q1FZRFZRUUdFd0pDVFRFWk1CY0dBMVVFDQpDaE1RVVhWdlZtRmthWE1nVEdsdGFYUmxaREVsTUNNR0ExVUVDeE1jVW05dmRDQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwDQplVEV1TUN3R0ExVUVBeE1sVVhWdlZtRmthWE1nVW05dmRDQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRBZUZ3MHdNVEF6DQpNVGt4T0RNek16TmFGdzB5TVRBek1UY3hPRE16TXpOYU1IOHhDekFKQmdOVkJBWVRBa0pOTVJrd0Z3WURWUVFLRXhCUmRXOVdZV1JwDQpjeUJNYVcxcGRHVmtNU1V3SXdZRFZRUUxFeHhTYjI5MElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVM0d0xBWURWUVFEDQpFeVZSZFc5V1lXUnBjeUJTYjI5MElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGDQpBQU9DQVE4QU1JSUJDZ0tDQVFFQXYyRzFsVk82Vi96NjhtY0xPaHJmRVlCa2xiVFJ2TTE2ei9ZcGxpNGtWRUFrT1BjYWhkeFlUTXVrDQpKMEtYMEorRGlzUGtCZ05iQUtWUkhuQUVkT0xCMURxcjE2MDdCeGdGanYyRHJPcG0yUmdiYUlyMVZ4cVl1dlh0ZGoxODJkNlVhanRMDQpGOEhWajcxbE9EcVYwRDFWTms3ZmVWY3hLaDdZV1dWSldDQ1lmcXRmZnAvcDFrM3NnM1NweDJ6WTdpbEtoU29HRlBsVTV0UGFaUWVMDQpZemNTMTlEc3czc2dRVVNqN2N1Z0YrRnhaYzRkWmpIM2RnRVp5SDBEV0xhVlNSMm1FaWJveGd4MjRPTm15K3BkcGlidTVjeGZ2V2VuDQpBU2NPb3NwVXhiRjZsUjF4SGtvcGlnUGNha1hCcEJsZWJ6Yk53Nkt3dC81Y09PSlN2UGhFUSthUXV3SURBUUFCbzRJQ1VqQ0NBazR3DQpQUVlJS3dZQkJRVUhBUUVFTVRBdk1DMEdDQ3NHQVFVRkJ6QUJoaUZvZEhSd2N6b3ZMMjlqYzNBdWNYVnZkbUZrYVhOdlptWnphRzl5DQpaUzVqYjIwd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pDQ0FSb0dBMVVkSUFTQ0FSRXdnZ0VOTUlJQkNRWUpLd1lCQkFHK1dBQUJNSUg3DQpNSUhVQmdnckJnRUZCUWNDQWpDQnh4cUJ4RkpsYkdsaGJtTmxJRzl1SUhSb1pTQlJkVzlXWVdScGN5QlNiMjkwSUVObGNuUnBabWxqDQpZWFJsSUdKNUlHRnVlU0J3WVhKMGVTQmhjM04xYldWeklHRmpZMlZ3ZEdGdVkyVWdiMllnZEdobElIUm9aVzRnWVhCd2JHbGpZV0pzDQpaU0J6ZEdGdVpHRnlaQ0IwWlhKdGN5QmhibVFnWTI5dVpHbDBhVzl1Y3lCdlppQjFjMlVzSUdObGNuUnBabWxqWVhScGIyNGdjSEpoDQpZM1JwWTJWekxDQmhibVFnZEdobElGRjFiMVpoWkdseklFTmxjblJwWm1sallYUmxJRkJ2YkdsamVTNHdJZ1lJS3dZQkJRVUhBZ0VXDQpGbWgwZEhBNkx5OTNkM2N1Y1hWdmRtRmthWE11WW0wd0hRWURWUjBPQkJZRUZJdExiZTNUS2JrR0dldzVPYW53bDRScXkrL2ZNSUd1DQpCZ05WSFNNRWdhWXdnYU9BRkl0TGJlM1RLYmtHR2V3NU9hbndsNFJxeSsvZm9ZR0VwSUdCTUg4eEN6QUpCZ05WQkFZVEFrSk5NUmt3DQpGd1lEVlFRS0V4QlJkVzlXWVdScGN5Qk1hVzFwZEdWa01TVXdJd1lEVlFRTEV4eFNiMjkwSUVObGNuUnBabWxqWVhScGIyNGdRWFYwDQphRzl5YVhSNU1TNHdMQVlEVlFRREV5VlJkVzlXWVdScGN5QlNiMjkwSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVnZ1E2DQp0bENMTUE0R0ExVWREd0VCL3dRRUF3SUJCakFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBaXRRVXRmNzBtcEtuR2RTa2ZuSVlqOWxvDQpmRklrM1dkdk9YckVxbDQ5NGxpd1RYQ1loR0hvRytOcEdBN08rMGRRb0U3LzhDUWZ2YkxPOVNmODdDOVRxbk43QXoxMGJ1WVdudXVsDQpMc1MvVmlkUUsySzZ2a3NjUEZWY1FSMGt2b0lnUjEzVlJINTZGbWpmZlUxUmNIaFhIVE1lL1FLWm5Bek5DZ1ZQeDd1T3BIWDZTbTJ4DQpnSTRKVnJtY0dtRCtYY0hYZXR3UmVORFdYY0czMWEweW1RTTZpc3hVSlRreGdYc1RJbEc2Um15aHU1NzZCR3hKSm5TUDBuUHJ6RENpDQo1dXBaSW9mNGwvVU8vZXJNa3FRV3hGSVk2aUhPc2ZIbWhJSGx1cW1HS1BKRFdsMFNuYXdlMmFqbENtcW5mNkNIS2MveWlVM1U3TVhpDQo1bnJRTmlPS1NuUTIrUT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClF1b1ZhZGlzIFJvb3QgQ0EgMg0KPT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUZ0ekNDQTUrZ0F3SUJBZ0lDQlFrd0RRWUpLb1pJaHZjTkFRRUZCUUF3UlRFTE1Ba0dBMVVFQmhNQ1FrMHhHVEFYQmdOVkJBb1QNCkVGRjFiMVpoWkdseklFeHBiV2wwWldReEd6QVpCZ05WQkFNVEVsRjFiMVpoWkdseklGSnZiM1FnUTBFZ01qQWVGdzB3TmpFeE1qUXgNCk9ESTNNREJhRncwek1URXhNalF4T0RJek16TmFNRVV4Q3pBSkJnTlZCQVlUQWtKTk1Sa3dGd1lEVlFRS0V4QlJkVzlXWVdScGN5Qk0NCmFXMXBkR1ZrTVJzd0dRWURWUVFERXhKUmRXOVdZV1JwY3lCU2IyOTBJRU5CSURJd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUMNCkR3QXdnZ0lLQW9JQ0FRQ2FHTXBMbEEwQUxhOERLWXJ3RDRISXJrd1poUjBJbjZzcFJJWHpMNEd0TWg2UVJyK2poaVlhSHY1K0hCZzYNClhKeGdGeW82ZElNek1IMWhWQkhMN2F2ZzV0S2lmdlZyYnhpM0Nnc3QvZWsrN3dyR3N4RHAzTUpHRi9oZC9hVGEvNTVKV3B6bU0rWWsNCmx2Yy91bHNySEhvMXd0Wm4vcXRtVUl0dEtHQXI3OWRndzhlVHZJMDJrZk4vK05zUkU4U2NkM2JCcnJjQ2FvRjZxVVdENGdYbXVWYkINCmxEZVBTSEZqSXV3WFpRZVZpa3ZmajhaYUN1V3c0MTllYXhHckRQbUY2MFRwK0FSejh1bitYSmlNOVhPdmE3Uit6ZFJjQWl0TU9lR3kNCmxaVXRRb2ZYMWJPUVE3ZHNFL0hlM2ZiRStJay8wWFgxa3NPUjFZcUkwSkRzM0czZWljSmxjWmFMRFFQOW5MOWJGcXlTMityK2VYeXQNCjY2LzNGc3ZielNVcjVSLzdtcC9pVWN3NlV3eEk1ZzY5eWJSMkJsTG1FUk9GY21NREJPQUVOaXNnR1FMb2RLY2Z0c2xXWnZCMUpkeG4NCndRNWhZSWl6UHRHby9LUGFIYkRSc1NOVTMwUjJiZTFCMk1HeUlyWlRITjgxSGR5aGR5b3g1QzMxNWVYYnlPRC81WURYQzJPZy96T2gNCkQ3b3NGUlhxbDdQU29yVys4b3lXSGhxUEhXeWtZVGU1aG5NejE1ZVduaU45Z3FSTWdlS2gwYnBuWDVVSG95Y1I3aFlRZTd4RlNreXkNCkJOS3I3OVg5REZIT1VHb0lNZm1SMmd5UFpGd0R3enFMSUQ5dWpXYzlPdGIrZlZ1SXlWNzd6R0hjaXpOMzAwUXlOUWxpQkpJV0VOaWUNCkowZjdPeUhqK09zZFd3SURBUUFCbzRHd01JR3RNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdDd1lEVlIwUEJBUURBZ0VHTUIwR0ExVWQNCkRnUVdCQlFhaEdLOFNFd3pKUVRVN3REMkE4UVpSdEdVYXpCdUJnTlZIU01FWnpCbGdCUWFoR0s4U0V3ekpRVFU3dEQyQThRWlJ0R1UNCmE2RkpwRWN3UlRFTE1Ba0dBMVVFQmhNQ1FrMHhHVEFYQmdOVkJBb1RFRkYxYjFaaFpHbHpJRXhwYldsMFpXUXhHekFaQmdOVkJBTVQNCkVsRjFiMVpoWkdseklGSnZiM1FnUTBFZ01vSUNCUWt3RFFZSktvWklodmNOQVFFRkJRQURnZ0lCQUQ0S0ZrMmZCbHVvcm5GZEx3VXYNClorWVRSWVBFTnZiendDWU1EYlZIWkYzNHRITEpScVVER0NkVmlYaDlkdXFXTklBWElOem5nL2lOL0FlNDJsOU5MbWV5aFAzWlJQeDMNClVJSG1mTFRKRFF0eVUvaDJCd2RCUjVZTSsrQ0NKcE5WalA0aUgyQmxmRi9uSnJQM01wQ1lVTlEzY1ZYMmtpRjQ5NVY1K3ZndEpvZG0NClZqQjNwamQ0TTFJUVdLNC9ZWTd5YXJIdkdINUtXV1BLamFKVzFhY3Z2RllmenpuQjR2c0txQlVzZlUxNlk4WnNsMFE4MG0vRFNoY0sNCitKRFNWNklaVWFVdGwwSGFCMCtwVU5xUWpaUkc0VDd3bFAwUUFEajFPK2hBNGJSdVZob2d6RzlZamUwdVJZL1c2Wk0vNTdFczN6clcNCklvemNoTHNpYjlENDVNWTU2UVNJUE1PNjYxVjZiWUNaSlBWc0FmdjRsN0NVVyt2OTBtL3hkMmdOTldRanJMaFZvUVBSVFVJWjNQaDENCldWYWorYWhKZWZpdkRya1JvSHkzYXUwMDBMWW1ZamdhaHd6NDZQMHUwNUIvQjVFcUhkWitYSVdEbWJBNENEL3BYdmsxQitUSlltNVgNCmY2ZFFsZmU2eUp2bWpxSUJ4ZFptdjNsaDh6d2M0Ym1DWEYyZ3crbllTTDBab2hFVUdXNnloaHRvUGtnM0dvaTNYWlplbk1mdkoySUkNCjRwRVpYTkx4SWQyNkYwS0NsM0dCVXpHcG4vWjlZcjl5NGFPVEhjeUtKbG9KT05ETzF3MkFGclI0cFRxSFRJMktwZFZHbC9Jc0VMbTgNClZDTEFBVkJwUTU3MHN1OXQrT3phOGVPeDc5K1JqMVFxQ3lYQkpobkVVaEFGWmRXQ0VPckNNYzB1DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClF1b1ZhZGlzIFJvb3QgQ0EgMw0KPT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUduVENDQklXZ0F3SUJBZ0lDQmNZd0RRWUpLb1pJaHZjTkFRRUZCUUF3UlRFTE1Ba0dBMVVFQmhNQ1FrMHhHVEFYQmdOVkJBb1QNCkVGRjFiMVpoWkdseklFeHBiV2wwWldReEd6QVpCZ05WQkFNVEVsRjFiMVpoWkdseklGSnZiM1FnUTBFZ016QWVGdzB3TmpFeE1qUXgNCk9URXhNak5hRncwek1URXhNalF4T1RBMk5EUmFNRVV4Q3pBSkJnTlZCQVlUQWtKTk1Sa3dGd1lEVlFRS0V4QlJkVzlXWVdScGN5Qk0NCmFXMXBkR1ZrTVJzd0dRWURWUVFERXhKUmRXOVdZV1JwY3lCU2IyOTBJRU5CSURNd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUMNCkR3QXdnZ0lLQW9JQ0FRRE1WMElXVkp6bW1OUFRUZTcrN2NlZlF6bEtaYlBvRm9nMDJ3MVprWFRQa3JnRVFLMENTekdydkkyUmFOZ2cNCkRob0I0aHA3VGhkZDRvcTNQNWthemV0aHE4SmxwaCszdDcyM2ovejljSThMb0dlK0FhSlp6M0htRHlsMi83RldlVVVySDU1NlZPaWoNCktUVm9wQUZQRDZRdU4rOGJ2K09QRUtoeXExaFg1MVNHeU1uelc5b3MybDJPYmp5alB0cjdndVhkOGx5eUJUTnZpamJPMEJOTy83OUsNCkREUk1wc01odlZBRVZldXh1NTM3UlI1a0ZkNVZBWXdDZHJYTG9UOUNhYnd2dldoREZsYUpLamRoa2YybXJrN0F5eFJsbERkTGtnYnYNCkJOREluSWpiQzN1QnI3RTlLc1JsT25pMjd0eUFzZExUbVp3NjdtdGFhN09OdDlYT25NSytwVXN2RnJHZWFEc0diNjU5bi9qZTdNd3ANCnA1aWpKVU12Ny9GZkp1R0lUZmhlYnRmWkZHNFpNMm1uTzRTSms4UlRWUk9oVVhoQStMakpvdTU3dWxKQ2c1NFU3UVZTV2xsV3A1ZjgNCm5UOEtLZGpjVDVFT0U3emVsYVRmaTVtK3JKc3ppTysxZ2E4YnhpSlR5UGJIN3BjVXNNVjhlRkxJOE01dWQyQ0VwdWtxZGlEdFdBRVgNCk1KUHBHb3ZnYzJQWmFwS1VTVTYwclVxRnhLTWlNUHdKN1dnaWM2YUlERlVoV01YaE9wOHEzY3Joa09EWmM2dHNnTGpvQzJTVG9KeU0NCkdmK3owZ3pza1NhSGlyT2k0WENQTEFybHpXMW9VZXZhUHdWL2l6TG1FMXhyL2w5QTRpTEl0TFJrVDlhNmZVZytxR2tNMTd1R2NjbHoNCnVEODduU1ZMMnY5QTZ3SURBUUFCbzRJQmxUQ0NBWkV3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekNCNFFZRFZSMGdCSUhaTUlIV01JSFQNCkJna3JCZ0VFQWI1WUFBTXdnY1V3Z1pNR0NDc0dBUVVGQndJQ01JR0dHb0dEUVc1NUlIVnpaU0J2WmlCMGFHbHpJRU5sY25ScFptbGoNCllYUmxJR052Ym5OMGFYUjFkR1Z6SUdGalkyVndkR0Z1WTJVZ2IyWWdkR2hsSUZGMWIxWmhaR2x6SUZKdmIzUWdRMEVnTXlCRFpYSjANCmFXWnBZMkYwWlNCUWIyeHBZM2tnTHlCRFpYSjBhV1pwWTJGMGFXOXVJRkJ5WVdOMGFXTmxJRk4wWVhSbGJXVnVkQzR3TFFZSUt3WUINCkJRVUhBZ0VXSVdoMGRIQTZMeTkzZDNjdWNYVnZkbUZrYVhObmJHOWlZV3d1WTI5dEwyTndjekFMQmdOVkhROEVCQU1DQVFZd0hRWUQNClZSME9CQllFRlBMQUUrQ0NRejc3N2k5bk1wWTFYTnU0eXdMUU1HNEdBMVVkSXdSbk1HV0FGUExBRStDQ1F6Nzc3aTluTXBZMVhOdTQNCnl3TFFvVW1rUnpCRk1Rc3dDUVlEVlFRR0V3SkNUVEVaTUJjR0ExVUVDaE1RVVhWdlZtRmthWE1nVEdsdGFYUmxaREViTUJrR0ExVUUNCkF4TVNVWFZ2Vm1Ga2FYTWdVbTl2ZENCRFFTQXpnZ0lGeGpBTkJna3Foa2lHOXcwQkFRVUZBQU9DQWdFQVQ2MmdMRXo2d1BKdjkyWlYNCnF5TTA3dWNwMnNOYnRyQ0QyZERRNGlINzgyQ25PMTFnVXllaW0vWUlJaXJudjZCeTVad2thakd4a0hvbjI0UVJpU2VtZDFvNDE3K3MNCmh2enVYWU84QnNiUmQyc1BiU1F2UzNwc3B3ZVd5dU9FbjYySWl4MnJGbzFiWmhmWkZ2U0xnTkxkK0xKMncvdzRFNm9NM2tKcEsyN3oNClBPdUFKOXYxcGtRTm4xcFZXUXZWRFZKSXhhNmY4aStBeGVveVVEVVNseTdCNGYveEk0aFJPSi95WmxaMjV3OVJsNlZTREUxSlVaVTINClBiK2lTd3dRSFlhWlRLcnpjaEdUNU9yMm05cW9YYWROdDU0Q3JuTUF5Tm9qQStqNTZobDBZZ0NVeXlJZ3ZwU25XYldDYXI2WmVYcXANCjhrb2tVdmQwL2JwTzVxZ2RBbTZ4RFlCRXdhN1RJemRmdTRWOEs1SXU2SDZsaTkyWjRiOG5ieTFkcW51SC9ncmRTL3lPOVNia2JuQkMNCmJqUHNNWjU3azhIa3lXa2FQY0JyVGlKdDdxdFlUY2JRUWNFcjZrOFNoMTdyUmRoczlaZ0MwNkRZVllvR21SbWlvSGZSTUo2c3pIWHUNCmcvV3dZam5QYkZmaVROS1JDdzUxS0J1YXYvMGFRL0hLZC9zN2oyRzRhU2dXUWdSZWNDb2NJZGlQNGIwald5MTBRSkxaWXhrTmM5MXANCnZHSkh2T0IwSzdMcmZiNUJHN1hBUnNXaElzdGZUc0Vva3Q0WXV0VXFLTHNSaXhlVG1KbGdsRndqejFvbmwxNExCUWFUTng0N2FUYnINCnFaNWhIWTh5Mm80TTFuUStld2trMmdGM1I4UTd6VFNNbWZYSzRTVmhNN0paRytKdTF6ZFh0ZzJwRXRvPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpTZWN1cml0eSBDb21tdW5pY2F0aW9uIFJvb3QgQ0ENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEV2pDQ0FrS2dBd0lCQWdJQkFEQU5CZ2txaGtpRzl3MEJBUVVGQURCUU1Rc3dDUVlEVlFRR0V3SktVREVZTUJZR0ExVUVDaE1QDQpVMFZEVDAwZ1ZISjFjM1F1Ym1WME1TY3dKUVlEVlFRTEV4NVRaV04xY21sMGVTQkRiMjF0ZFc1cFkyRjBhVzl1SUZKdmIzUkRRVEV3DQpIaGNOTURNd09UTXdNRFF5TURRNVdoY05Nak13T1RNd01EUXlNRFE1V2pCUU1Rc3dDUVlEVlFRR0V3SktVREVZTUJZR0ExVUVDaE1QDQpVMFZEVDAwZ1ZISjFjM1F1Ym1WME1TY3dKUVlEVlFRTEV4NVRaV04xY21sMGVTQkRiMjF0ZFc1cFkyRjBhVzl1SUZKdmIzUkRRVEV3DQpnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDenMvNS8wMjJ4N3haOFY2VU1iWGFLTDB1L1pQdE03b3J3DQo4eWw4OWYvdUt1RHA2YnBiWkNLYW1tOHNPaVpwVVFXWkp0elZIR3B4eHBwOUhwM2RmR3pHakdkblNqNzRjYkFaSjZrSkRLYVZ2MHVNDQpEUHBWbUR2WTZDS2hTM0U0ZWF5WGttbXppWDdxSVdnR21CU1doOUpoTnJ4dEoxYWVWKzdBd0ZiOU1zK2syWTdDSTllTnFQUFlKYXlYDQo1SEE0OUxZNnRKMDdseVpEbzZHOFNWbHlUQ013aHdGWTlrNitIR2hXWnEvTlFWM0lzMDBxVlVhckg5b2U0a0E5MjgxOXVaS0FuRGZkDQpESlprbmR3aTkyU0wzMkhlRlpSU0ZhQjlVc2xMcUNISnhySHR5OE9WWU5FUDhLdHcrTi9MVFg3czF2cXIyYjEvVlBLbDZYbjYyZFoyDQpKQ2h6QWdNQkFBR2pQekE5TUIwR0ExVWREZ1FXQkJTZ2MwbVphTnlGVzJYam15Z3ZWNSs5TTd3SFNEQUxCZ05WSFE4RUJBTUNBUVl3DQpEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUFhRUNwcUx2a1QxMTVzd1cxRjdOZ0UrdkdrbDNnDQowZE5xL3Z1K20yMi94d1Z0V1NERUhQQzMyb1JZQW1QNlNCYnZUNlVMOTBxWThqK2VHNjFIYTJQT0NFZnJVajk0bks5TnJ2alZUOCthDQptQ29RUVRsU3hOM1ptdzd2a3dHdXNpN0thRUlrUW15d3N6byt6ZW5hU01RVnkrbjVCdytTVUVtSzNUR1hYOG5wTjZvN1dXV1hsRExKDQpzNTgrT21KWXhVbXRZZzV4cFRLcUw4YUpka05BRXhOblBhSlVKUkRMOFRyeTJmcmJTVmE3cHY2blFUWEQ0SWhoeVlqSDN6WVFJcGhaDQo2ckJLKzFZV2MyNnNUZmNpb1UrdEhYb3RSU2ZsTU1GZTh0b1R5eVZDVVpWSEE0eHNJY3gwUXUxVC96T0xqdzlYQVJZdno2YnV5WEFpDQpGTDM5dm13TEF3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KU29uZXJhIENsYXNzIDIgUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlESURDQ0FnaWdBd0lCQWdJQkhUQU5CZ2txaGtpRzl3MEJBUVVGQURBNU1Rc3dDUVlEVlFRR0V3SkdTVEVQTUEwR0ExVUVDaE1HDQpVMjl1WlhKaE1Sa3dGd1lEVlFRREV4QlRiMjVsY21FZ1EyeGhjM015SUVOQk1CNFhEVEF4TURRd05qQTNNamswTUZvWERUSXhNRFF3DQpOakEzTWprME1Gb3dPVEVMTUFrR0ExVUVCaE1DUmtreER6QU5CZ05WQkFvVEJsTnZibVZ5WVRFWk1CY0dBMVVFQXhNUVUyOXVaWEpoDQpJRU5zWVhOek1pQkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFKQVhTaldkeXZBTmxzZEUraFkzDQovRWk5dlgrQUxUVTc0VytvWjZtL0F4eE5qRzh5UjlWQmFLUVRCTUUxREpxRVEveGNIZitKcytnWEdNMlJYL3VKNCtxL1RsMThHeWJUDQpkWG50NW9UalYrV3RLY1QwT2lqbnBYdUVObW16L1Y1MnZhTXRtZE9RVGlNb2ZSaGo4VlE3SnAxMlc1ZENzdit1OEU3czNUbVZUb01HDQpmK2RKUU1qRkFiSlVXbVlkUGZ6NTZUd0tub0c0Y1BBQmkrUWpWSHpJcnZpUUhnQ1djdFJVejJFanZPcjduUUtWMGJhNWNUcHBDRDhQDQp0T0ZDeDRqMVA1aW9wN29jNEhGeDcxaFhnVkI2WEd0MFJnNkRBNWpEanFodThuWXliaWVEd25QejNCam90SlBxZFVSckJHQWdjVmVIDQpuZk8rb0pBalBZb2s0ZG9oMjhNQ0F3RUFBYU16TURFd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBUkJnTlZIUTRFQ2dRSVNxQ3FXSVRUDQpYand3Q3dZRFZSMFBCQVFEQWdFR01BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQmF6b2Y1Rm5JVlYwc2QyWnZub2lZdzdKTm4zOVl0DQowalN2OXppbHpxc1d1YXN2ZkRYTHJOQVB0RXdyL0lEdmE0eVJYeloyOTl1ekd4bnE5TElSL1dGeFJMOG9zem9kdjdORDZKKy8zREVJDQpjYkNkamRZMFJ6S1F4bVVrOTZCS2ZBUnpqemx2RjR4eXRiMUx5SHI0ZTRQREtFNmNDZXBuUDdKbkJCdkRGTnI0NTBra2tkQWRhdnBoDQpPZTlyNXlGMUJnZllFclFoSUhCQ2NZSGFQSm8ydnFaYkRXcHNtaCtSZS9uNTcwSzZUazZlekF5TmxOelpSWnhlN0VKUVk2NzBYY1N4DQpFdHpLTzZndW5SUmFCWFczN05kajRybzF0Z1FJa2VqYW5aejJaclVZckFxbVZDWTBNOUlid2RSL0dqcU9DNm95YnR2OFR5V2YyVExIDQpsbHB3ck45TQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpTdGFhdCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRHVqQ0NBcUtnQXdJQkFnSUVBSmlXaWpBTkJna3Foa2lHOXcwQkFRVUZBREJWTVFzd0NRWURWUVFHRXdKT1RERWVNQndHQTFVRQ0KQ2hNVlUzUmhZWFFnWkdWeUlFNWxaR1Z5YkdGdVpHVnVNU1l3SkFZRFZRUURFeDFUZEdGaGRDQmtaWElnVG1Wa1pYSnNZVzVrWlc0Zw0KVW05dmRDQkRRVEFlRncwd01qRXlNVGN3T1RJek5EbGFGdzB4TlRFeU1UWXdPVEUxTXpoYU1GVXhDekFKQmdOVkJBWVRBazVNTVI0dw0KSEFZRFZRUUtFeFZUZEdGaGRDQmtaWElnVG1Wa1pYSnNZVzVrWlc0eEpqQWtCZ05WQkFNVEhWTjBZV0YwSUdSbGNpQk9aV1JsY214aA0KYm1SbGJpQlNiMjkwSUVOQk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBbU5LMVVSRjZnYVlVbUhGdA0KdnN6bkV4dldKdzU2czJvWUhMWmhXdFZoQ2IvZWtCUEhaKzdkODlyRkRCS2VOVlUrTENlSVFHdjMzTjBpWWZYQ3h3NzE5dFYyVTAyUA0Kakx3WWRqZUZuZWpLU2NmU1Q1Z1RDYUkrSW9pY2Y5YnlFR1cwN2w4WTFSZmorTVg5NHAyaTcxTU9oWGVpRCtFd1IrNEE1ek45UkdjYQ0KQzFIb2k2Q2VVSmhvTkZJZkxtMEI4bUJGOGpIcnFURm9LYnQ2UVo3R0dYK1V0RkU1QTMreTNxY3ltN1JIam0rMFNxN2xyN0hjc0J0aA0KdkpseTN1U0p0M29tWGRvelNWdFNuQTcxaXEzRHVEM29CbXJDMVNvTGJIdUV2VllGeTRabGt1eEVLN0NPdWR4d0MwYmFyYnhqaURuNg0KMjJyK0kvcTg1RWowWnl0cUVSQWhTUUlEQVFBQm80R1JNSUdPTUF3R0ExVWRFd1FGTUFNQkFmOHdUd1lEVlIwZ0JFZ3dSakJFQmdSVg0KSFNBQU1Ed3dPZ1lJS3dZQkJRVUhBZ0VXTG1oMGRIQTZMeTkzZDNjdWNHdHBiM1psY21obGFXUXVibXd2Y0c5c2FXTnBaWE12Y205dg0KZEMxd2IyeHBZM2t3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZERnUVdCQlNvZmV1OFk2UjBFM1FBN0piZzB6VEJMTDlzK0RBTg0KQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBQllTSFZYUTJZY0c3MGRUR0ZhZ1R0SitrL3J2dUZiUXZCZ3dwOHFpU3BHRU4vS3RjQ0Z0Ug0KRXl0TndpcGh5UGdKV1B3dEFySTVmWmxtZ2I5dVhKVkZJR3ptZWFmUjJCd3AvTUlnSjFISThYeGROR2RwaFJFd3hnRFMxL1BUZkxidw0KTVZjb0VvSno2VE12cGxXMEM1R1VSNXo2dTNwQ011aXVmaTNJdkt3VXY5a1AyVnY4d2ZsNmxlRjlmcGI4Y2JEQ1RNamZSVFRKemczeQ0KbkdRSTBEdkRLY1d5N1pBRXdiRXBrY1V3YjhHcGNqUE0vbDBXRnl3UmFlZCsvc1dEQ04rODNDSTZMaUJwSXpsV1lHZVFpeTUyT2ZzUg0KaUpmMmZMMUx1Q0FXWndXTjRqdkJjaitVbFRmSFhibWUySk9oRjQvL0RHWVZ3U1I4TW53REhUdWhXRVV5a3c9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpUREMgSW50ZXJuZXQgUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRUt6Q0NBeE9nQXdJQkFnSUVPc3lsVERBTkJna3Foa2lHOXcwQkFRVUZBREJETVFzd0NRWURWUVFHRXdKRVN6RVZNQk1HQTFVRQ0KQ2hNTVZFUkRJRWx1ZEdWeWJtVjBNUjB3R3dZRFZRUUxFeFJVUkVNZ1NXNTBaWEp1WlhRZ1VtOXZkQ0JEUVRBZUZ3MHdNVEEwTURVeA0KTmpNek1UZGFGdzB5TVRBME1EVXhOekF6TVRkYU1FTXhDekFKQmdOVkJBWVRBa1JMTVJVd0V3WURWUVFLRXd4VVJFTWdTVzUwWlhKdQ0KWlhReEhUQWJCZ05WQkFzVEZGUkVReUJKYm5SbGNtNWxkQ0JTYjI5MElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQ0KTUlJQkNnS0NBUUVBeExoQXZKSFZZeC9YbWFDTERFQWVkTGRJblVhTUFyTGdKRi93R1JPbk40TnJYY2VPK1lRd3pobzcrdnZPaTIwag0KeHNOdVpwK0pwZC9nUWxCbitoOXNIdlRRQmRhL3l0Wk81R2hnYkVhcUhGMWo0UWVHRG1VQXB5Nm1jY2E4dVlHb09uMGEwdm5SckV2TA0Kem5XdjNIdjZnWFBVL0xxOVFZalVkTFA1WGpnNlBFT28wcFZPZDIwVERKMlBlQUczV2lBZkF6YzE0aXpiU3lzc2VMbEoyOFRReDV5Yw0KNUlvZ0NTRVdWbWIvQmV4YjQvRFBxeVFrWHNOL2NIb1N4TksxRUtDMkllR05lR2xWUkduMXlwWWNOSVVYSlhmaTlpOG5tSGo5ZVFZNg0Kb3RaYVE4SC83QVE3N2hQdjAxaGEvNUxyN0s3YThqY0RSMEcybDhrdENrRWl1N3ZtcHdJREFRQUJvNElCSlRDQ0FTRXdFUVlKWUlaSQ0KQVliNFFnRUJCQVFEQWdBSE1HVUdBMVVkSHdSZU1Gd3dXcUJZb0Zha1ZEQlNNUXN3Q1FZRFZRUUdFd0pFU3pFVk1CTUdBMVVFQ2hNTQ0KVkVSRElFbHVkR1Z5Ym1WME1SMHdHd1lEVlFRTEV4UlVSRU1nU1c1MFpYSnVaWFFnVW05dmRDQkRRVEVOTUFzR0ExVUVBeE1FUTFKTQ0KTVRBckJnTlZIUkFFSkRBaWdBOHlNREF4TURRd05URTJNek14TjFxQkR6SXdNakV3TkRBMU1UY3dNekUzV2pBTEJnTlZIUThFQkFNQw0KQVFZd0h3WURWUjBqQkJnd0ZvQVViR1FCeC8yRmJhekkycDVRQ0lVSXRUeFdxRkF3SFFZRFZSME9CQllFRkd4a0FjZjloVzJzeU5xZQ0KVUFpRkNMVThWcWhRTUF3R0ExVWRFd1FGTUFNQkFmOHdIUVlKS29aSWh2WjlCMEVBQkJBd0Roc0lWalV1TURvMExqQURBZ1NRTUEwRw0KQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUUJPUTh6UjNSMFFHd1ovdDZUNjA5bE4reU9mSTFSYjVvc3ZCQ2lMdFNkdGlhSHNtR25jNTQwbQ0KZ3dWNWRPeTB1YU9Yd1RVQS9SWGFPWUU2bFRHUTNwZnBocWlaZHd6bFdxQ0UveElXckc2NGpjTjdrc0tzTHRCOUtPeTI4MkE0YVc4Kw0KMkFSVlBwN01WZEs2L3J0SEJOY0syUllLTkNuMVdCUFZUOCtQVmt1ekh1N1RtSG5hQ0I0TWI3ajRGaWZ2d204OTlxTkxQZzdrYld6Yg0KTzBFU203ME5SeU4vUEVyUXI4Q3Y5dThidFJYRTY0UEVDVjkwaTlrUis4SldzVHo0Y01vMGpVTkFFNHo5bVFOVWVjWXU2b2FoOWpyVQ0KQ2J6MHZHYk1QVmpRVjBrSzdpWGlRZTRUK1pzNE5ORUE5WDdubEIzOGFRTml1SmtGQlQxcmVCSzlzRzlsDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClREQyBPQ0VTIFJvb3QgQ0ENCj09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRkdUQ0NCQUdnQXdJQkFnSUVQa2k5eERBTkJna3Foa2lHOXcwQkFRVUZBREF4TVFzd0NRWURWUVFHRXdKRVN6RU1NQW9HQTFVRQ0KQ2hNRFZFUkRNUlF3RWdZRFZRUURFd3RVUkVNZ1QwTkZVeUJEUVRBZUZ3MHdNekF5TVRFd09ETTVNekJhRncwek56QXlNVEV3T1RBNQ0KTXpCYU1ERXhDekFKQmdOVkJBWVRBa1JMTVF3d0NnWURWUVFLRXdOVVJFTXhGREFTQmdOVkJBTVRDMVJFUXlCUFEwVlRJRU5CTUlJQg0KSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXJHTDJZU0N5ejhER2hkZmplZWJNN2ZJNWtxU1hMbVNqaEZ1SA0KbkV6OXBQUEVYeUc5VmhEcjJ5NWg3Sk5wNDZQTXZabkRCZndHdU1vMkhQNlFqa2xNeEZhYUwxYTh6M3NNOFc5SHBnMURUZUxwSFRrMA0KelkwczJSS1krZVBod1VwOGhqakVxY1JoaU5KZXJ4b21UZFhrb0NKSGhObGt0eG1XL093WjVMS1hKazVLVE11UEpJdFVHQnhJWVh2Vg0KaUdqYVhiWHF6Um93d1lDRGRsQ3FUOUhVM1Rqdzd4YjA0UXhRQnIvcSszcEpvU2dySFBiOEZUS2pkR3FQcWNOaUtYRXg1VHVrWUJkZQ0KZE9iYUUrM3BIeDhiMGJKb2M4WVFOSFZHRUJEamtBQjJRTXVMdDBNSklmK3JUcFBHV09tbGd0dDN4RHFac1hLVlNRVHd0eXY2ZTFtTw0KM1FJREFRQUJvNElDTnpDQ0FqTXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd2dld0dBMVVkSUFTQg0KNURDQjRUQ0IzZ1lJS29GUWdTa0JBUUV3Z2RFd0x3WUlLd1lCQlFVSEFnRVdJMmgwZEhBNkx5OTNkM2N1WTJWeWRHbG1hV3RoZEM1aw0KYXk5eVpYQnZjMmwwYjNKNU1JR2RCZ2dyQmdFRkJRY0NBakNCa0RBS0ZnTlVSRU13QXdJQkFScUJnVU5sY25ScFptbHJZWFJsY2lCbQ0KY21FZ1pHVnVibVVnUTBFZ2RXUnpkR1ZrWlhNZ2RXNWtaWElnVDBsRUlERXVNaTR5TURndU1UWTVMakV1TVM0eExpQkRaWEowYVdacA0KWTJGMFpYTWdabkp2YlNCMGFHbHpJRU5CSUdGeVpTQnBjM04xWldRZ2RXNWtaWElnVDBsRUlERXVNaTR5TURndU1UWTVMakV1TVM0eA0KTGpBUkJnbGdoa2dCaHZoQ0FRRUVCQU1DQUFjd2dZRUdBMVVkSHdSNk1IZ3dTS0JHb0VTa1FqQkFNUXN3Q1FZRFZRUUdFd0pFU3pFTQ0KTUFvR0ExVUVDaE1EVkVSRE1SUXdFZ1lEVlFRREV3dFVSRU1nVDBORlV5QkRRVEVOTUFzR0ExVUVBeE1FUTFKTU1UQXNvQ3FnS0lZbQ0KYUhSMGNEb3ZMMk55YkM1dlkyVnpMbU5sY25ScFptbHJZWFF1WkdzdmIyTmxjeTVqY213d0t3WURWUjBRQkNRd0lvQVBNakF3TXpBeQ0KTVRFd09ETTVNekJhZ1E4eU1ETTNNREl4TVRBNU1Ea3pNRm93SHdZRFZSMGpCQmd3Rm9BVVlMV0Y3RlprZmhJWkoyY2RVQlZMYzY0Nw0KK1JJd0hRWURWUjBPQkJZRUZHQzFoZXhXWkg0U0dTZG5IVkFWUzNPdU8va1NNQjBHQ1NxR1NJYjJmUWRCQUFRUU1BNGJDRlkyTGpBNg0KTkM0d0F3SUVrREFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBQ3JvbUprYlRjNmdKODJzTE1KbjlpdUZYZWhIVHVKVFhDUkJ1bzdFNA0KQTlHMjhrTkJLV0tuY3RqN2ZBWG1NWEFuVkJoT2lueE81ZEhLakhpSXp4dlRrSXZtSS9nTERqTkRmWnppQ2htUHlRRStkRjEweVlzYw0KQStVWXlBRk1QOHVYQlYyWWNhYVliN1o4dlRkL3Z1R1RKVzF2OEFxdEZ4amhBN3dIS2NpdEp1ajRZZkQ5SVFsK21vNnBhSDFJWW5LOQ0KQU9vQm1iZ0dnbEdCVHZIMXRKRlV1U042QUpxZlhZM2dQR1M1R2hLU0tzZUNSSEk1M09JOHh0aFY5UlZPeUFVTzI4YlFZcWJzRmJTMQ0KQW9MYnJJeWlnZkNibVRIMUlDQ29pR0VLQjUrVS9ORFhHOHd1Ri9NRUozWm42MVNEL2FTUWZnWTlCS05ETGRyOEMyTHFMMTlpVXc9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpVVE4gREFUQUNvcnAgU0dDIFJvb3QgQ0ENCj09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFWGpDQ0EwYWdBd0lCQWdJUVJMNE1pMUFBSWJRUjB5cG9CcW10YVRBTkJna3Foa2lHOXcwQkFRVUZBRENCa3pFTE1Ba0dBMVVFDQpCaE1DVlZNeEN6QUpCZ05WQkFnVEFsVlVNUmN3RlFZRFZRUUhFdzVUWVd4MElFeGhhMlVnUTJsMGVURWVNQndHQTFVRUNoTVZWR2hsDQpJRlZUUlZKVVVsVlRWQ0JPWlhSM2IzSnJNU0V3SHdZRFZRUUxFeGhvZEhSd09pOHZkM2QzTG5WelpYSjBjblZ6ZEM1amIyMHhHekFaDQpCZ05WQkFNVEVsVlVUaUF0SUVSQlZFRkRiM0p3SUZOSFF6QWVGdzA1T1RBMk1qUXhPRFUzTWpGYUZ3MHhPVEEyTWpReE9UQTJNekJhDQpNSUdUTVFzd0NRWURWUVFHRXdKVlV6RUxNQWtHQTFVRUNCTUNWVlF4RnpBVkJnTlZCQWNURGxOaGJIUWdUR0ZyWlNCRGFYUjVNUjR3DQpIQVlEVlFRS0V4VlVhR1VnVlZORlVsUlNWVk5VSUU1bGRIZHZjbXN4SVRBZkJnTlZCQXNUR0doMGRIQTZMeTkzZDNjdWRYTmxjblJ5DQpkWE4wTG1OdmJURWJNQmtHQTFVRUF4TVNWVlJPSUMwZ1JFRlVRVU52Y25BZ1UwZERNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DDQpBUThBTUlJQkNnS0NBUUVBMys1WUVLSXJibFhFanI4dVJnbm40QWdQTGl0NkU1UWJ2ZmEyZ0k1bEJaTUFIcnl2NGcrT0dRMFNSK3lzDQpyYVA2TG5ENDNtNzdWa0lWbmk1Yzd5UGVJYmtGZGljWkQwL1d3NXkwdnBRWlkvS21FUXJyVTBpY3Z2SXBPeGJvR3FCTXBzbjBHRmxvDQp3SER5VXdEQVhsQ0NwVlp2TnZsSzRFU0dvRTFPMWtkdVNVckxaOWVteEFXNWpoNzAvUC9ONXpiZ25BVnNzak1pRmRDMDRNd1h3TExBDQo5UDR5UHlrcWxYdlk4cWRPRDFSOG9RMkFzd2tEd2Y5YzNWNmFQcnl1dkVlS2FxNXh5aCt4S3JoZlFnVUw3RVl3MFhJTHl1bFdiZlh2DQozM2krWWJxeXBhNEVUTHlvckdrVmw3M3Y2N1NNdnpYNDFNUFJLQTVjT3A5d0dETWdkOFNpcndJREFRQUJvNEdyTUlHb01Bc0dBMVVkDQpEd1FFQXdJQnhqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUlRNdEd6ejMvNjRQR2dYWVZPa3RLZVJSMjBUekE5DQpCZ05WSFI4RU5qQTBNREtnTUtBdWhpeG9kSFJ3T2k4dlkzSnNMblZ6WlhKMGNuVnpkQzVqYjIwdlZWUk9MVVJCVkVGRGIzSndVMGREDQpMbU55YkRBcUJnTlZIU1VFSXpBaEJnZ3JCZ0VGQlFjREFRWUtLd1lCQkFHQ053b0RBd1lKWUlaSUFZYjRRZ1FCTUEwR0NTcUdTSWIzDQpEUUVCQlFVQUE0SUJBUUFuTlpjQWlvc292Y1l6TUI0cC9PTDMxWmpVUUx0Z3lyK3JGeXdKTm45UStrSGNycFk2Q2lNK2lWbkpvd2Z0DQpHemV0L0h5K1VVbGEzam9LVkFnV1JjS1pzWWZOakdqZ2FRUHB4RTZZc2p1TUZyTU9vQXlZVUp1VHFYQUp5Q3lqajk4QzVPQnhPdkcwDQpJM0tncWdIZjM1ZytGRkNnTVNhOUtPbGFNQ1oxK1h0Z0hJM3p6VkFtYlFRbm10L1ZEVVZIS1dzczVuYlpxU2w5TXQzSk5qeTlyalh4DQpFWjRkdTVBL0VrZE9qdGQrRDJKekhWSW1PQndZU2Ywd2RKckU1U0l2Mk1DTjdaRjZUQUNQY245ZDJ0MGJpMFZyNTkxcGw2akZWa3dQDQpEUGFmZXBFMzlwZUM0TjF4YWY5MlAyQk5QTS8zbWZuR1YvVEpWVGw0dWl4NXlhYUlLL1FJDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClVUTiBVU0VSRmlyc3QgSGFyZHdhcmUgUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVkRENDQTF5Z0F3SUJBZ0lRUkw0TWkxQUFKTFFSMHpZcS9tVUsvVEFOQmdrcWhraUc5dzBCQVFVRkFEQ0JsekVMTUFrR0ExVUUNCkJoTUNWVk14Q3pBSkJnTlZCQWdUQWxWVU1SY3dGUVlEVlFRSEV3NVRZV3gwSUV4aGEyVWdRMmwwZVRFZU1Cd0dBMVVFQ2hNVlZHaGwNCklGVlRSVkpVVWxWVFZDQk9aWFIzYjNKck1TRXdId1lEVlFRTEV4aG9kSFJ3T2k4dmQzZDNMblZ6WlhKMGNuVnpkQzVqYjIweEh6QWQNCkJnTlZCQU1URmxWVVRpMVZVMFZTUm1seWMzUXRTR0Z5WkhkaGNtVXdIaGNOT1Rrd056QTVNVGd4TURReVdoY05NVGt3TnpBNU1UZ3gNCk9USXlXakNCbHpFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBbFZVTVJjd0ZRWURWUVFIRXc1VFlXeDBJRXhoYTJVZ1EybDANCmVURWVNQndHQTFVRUNoTVZWR2hsSUZWVFJWSlVVbFZUVkNCT1pYUjNiM0pyTVNFd0h3WURWUVFMRXhob2RIUndPaTh2ZDNkM0xuVnoNClpYSjBjblZ6ZEM1amIyMHhIekFkQmdOVkJBTVRGbFZVVGkxVlUwVlNSbWx5YzNRdFNHRnlaSGRoY21Vd2dnRWlNQTBHQ1NxR1NJYjMNCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3g5OE00UDdTb2Y4ODVnbEZuMEcyZjB2OVk4K2VmSyt3TmlWU1p1VGlaRnZmZ0lYbEkNCndydGhkQktXSFR4cWN0VThFR2M2T2UwckU4MW02NVVKTTZSc2w3SG94dXpCZFhtY1JsNk5xOUJxL2JrcVZSY1FWTE1aOEpyMjhiRmQNCnRxZHQrK0J4RjJ1aWlQc0EzLzRhTVhjTW1nRjZzVExqS3dFSE9HN0RwVjRqdkVXYmUxREJ5VENQMitVcmV0TmIrek5BSHFEVm1CZTgNCmk0ZkRpZE5kb0k2eXFxcjJqbW1JQnNYNmlTSHpDSjFwTGdrem15a05SZytNekVrMHNHbFJ2ZmtHeldpdFpreThQcXhodlFxSURzamYNClBlNThCRXlkQ2w1cmtkYnV4KzBvamF0Tmg0bHowRzZrMEI0V2l4VGhka1FEZjJPczVNMUpuTVdTOUtzeW9VaGJBZ01CQUFHamdia3cNCmdiWXdDd1lEVlIwUEJBUURBZ0hHTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRktGeVh5WWJLSmhEbFYwSE45V0YNCmxwMUwwc05GTUVRR0ExVWRId1E5TURzd09hQTNvRFdHTTJoMGRIQTZMeTlqY213dWRYTmxjblJ5ZFhOMExtTnZiUzlWVkU0dFZWTkYNClVrWnBjbk4wTFVoaGNtUjNZWEpsTG1OeWJEQXhCZ05WSFNVRUtqQW9CZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd1VHQ0NzR0FRVUYNCkJ3TUdCZ2dyQmdFRkJRY0RCekFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBUnhrUDNuVEdtWmV2L0swb1huV082eTFuN2s1N0s5Y00NCi8vYmV5MVdpQ3VGTVZHV1RZR3VmRXB5dFhvTXM2MXF1d09RdDlBQmpIYmpBYlBMUFNidE5rMjhHcGdvaXNrbGlDRTcveU1nVXNvZ1cNClhlY0I1QktWNVVVMHM0dHB2YyswaFk5MVVaNTlPamc2RkVnU3h2dW5PeHFORFlKQUIrZ0VDSkNoaWNzWlVOL0tIQUc4SFFRWmV4QjINCmx6dnVrSkRLeEE0ZkZtNTE3elA0MDI5YkhwYmo0SFIzZEh1S29tNHQzWGJXT1RDQzhLdWNVdklxeDY5SlhuN0hhT1dDZ2NocUova24NCmlDclZXRkNWSC9BN0hGZTdmUlE1WWl1YXlaU1NLcU1pRFArSkpuMWZJeXRIMXhVZHFXcWVVUTBxVVo2QitkUTdYbkFTZnhBeW5CNjcNCm5maG1xQT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkNhbWVyZmlybWEgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdA0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUV2VENDQTZXZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRVUZBREIvTVFzd0NRWURWUVFHRXdKRlZURW5NQ1VHQTFVRUNoTWUNClFVTWdRMkZ0WlhKbWFYSnRZU0JUUVNCRFNVWWdRVGd5TnpRek1qZzNNU013SVFZRFZRUUxFeHBvZEhSd09pOHZkM2QzTG1Ob1lXMWkNClpYSnphV2R1TG05eVp6RWlNQ0FHQTFVRUF4TVpRMmhoYldKbGNuTWdiMllnUTI5dGJXVnlZMlVnVW05dmREQWVGdzB3TXpBNU16QXgNCk5qRXpORE5hRncwek56QTVNekF4TmpFek5EUmFNSDh4Q3pBSkJnTlZCQVlUQWtWVk1TY3dKUVlEVlFRS0V4NUJReUJEWVcxbGNtWnANCmNtMWhJRk5CSUVOSlJpQkJPREkzTkRNeU9EY3hJekFoQmdOVkJBc1RHbWgwZEhBNkx5OTNkM2N1WTJoaGJXSmxjbk5wWjI0dWIzSm4NCk1TSXdJQVlEVlFRREV4bERhR0Z0WW1WeWN5QnZaaUJEYjIxdFpYSmpaU0JTYjI5ME1JSUJJREFOQmdrcWhraUc5dzBCQVFFRkFBT0MNCkFRMEFNSUlCQ0FLQ0FRRUF0elpWNWFWZEdERGcyb2xVa2Z6SXgxTDRMMURaNzdGMWMyVkhmUnRidW5YRi9LR0lKUG92N2NvSVNqbFUNCnhGRjZ0ZHBnNmpnOGdiTEw4YnZaa1NNL1NBRndkYWtGS3EwZmNmUEpWRDBkQm1wQVByTU1oZTVjRzNuQ1lzUzRObzQxWFFFTUl3UkgNCk5hcWJZRTZnWmozTEpncWNRS0gwWFppL2NhdWxBR2dxN1lONkQ2SVV0ZFFpczRDd1BBeGFVV2t0V0JpUDdabWU4YTdpbGViMlI2alcNCkRBK3dXRmpidzJZM25wdVJWRE0zMHBRY2Frakp5ZktsMnFVTUkvY2pEcHd5VlY1eG5JUUZVWm90L2VaT0tqUmEzc3BBTjJjTVZDRlYNCmQ5b0tETXlYcm9EY2xEWks5RDdPTmhNZVUrU3NUam9GN051dWNwdzRpOUE1TzRrS1BuZitkUUlCQTZPQ0FVUXdnZ0ZBTUJJR0ExVWQNCkV3RUIvd1FJTUFZQkFmOENBUXd3UEFZRFZSMGZCRFV3TXpBeG9DK2dMWVlyYUhSMGNEb3ZMMk55YkM1amFHRnRZbVZ5YzJsbmJpNXYNCmNtY3ZZMmhoYldKbGNuTnliMjkwTG1OeWJEQWRCZ05WSFE0RUZnUVU0NVQxc1UzcDI2RXBXMWVMVFhZR2R1SFJvb293RGdZRFZSMFANCkFRSC9CQVFEQWdFR01CRUdDV0NHU0FHRytFSUJBUVFFQXdJQUJ6QW5CZ05WSFJFRUlEQWVnUnhqYUdGdFltVnljM0p2YjNSQVkyaGgNCmJXSmxjbk5wWjI0dWIzSm5NQ2NHQTFVZEVnUWdNQjZCSEdOb1lXMWlaWEp6Y205dmRFQmphR0Z0WW1WeWMybG5iaTV2Y21jd1dBWUQNClZSMGdCRkV3VHpCTkJnc3JCZ0VFQVlHSExnb0RBVEErTUR3R0NDc0dBUVVGQndJQkZqQm9kSFJ3T2k4dlkzQnpMbU5vWVcxaVpYSnoNCmFXZHVMbTl5Wnk5amNITXZZMmhoYldKbGNuTnliMjkwTG1oMGJXd3dEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBQXhCbDhJYWhzQWkNCmZKLzdrUE1hMFFPeDd4UDVJVjhFbk5ySnBZMG5iSmFIa2I1QmtBRnlrK2NlZlYvMmljWmRwMEFKUGF4SlJVWGNMbzB3YUxJSnV2dkQNCkw4eTZDOTgvZDN0R2ZUb1NKSTZXanp3RkNtL1NsQ2dkYlF6QUxvZ2kxZGpQSFJQSDhFalgxd1duejhkSG5qczhOTWlBVDlRVXUvd04NClVQZjZzK3hDWDZuZGJjajBkYzk3d1hJbXNRRWNYQ3o5ZWs2MEFjVUZWN25uUEtvRjJZanBCMFpCenU5QmdhNVkzNE9pcnNyWGR4L24NCkFEeWRiNDdrTWdrZFRYZzBlRFE4bEpzbTdVOXh4aGw2dlNBaVNGcitTMzBEdCtkWXZzWXlUblFlYU4yb2FGdXpQdTVpZmRtQTZBcDENCmVyZnV0R1dhSVpEZ3F0Q1l2RGkxY3p5TCtOdz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ2FtZXJmaXJtYSBHbG9iYWwgQ2hhbWJlcnNpZ24gUm9vdA0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFeFRDQ0E2MmdBd0lCQWdJQkFEQU5CZ2txaGtpRzl3MEJBUVVGQURCOU1Rc3dDUVlEVlFRR0V3SkZWVEVuTUNVR0ExVUVDaE1lDQpRVU1nUTJGdFpYSm1hWEp0WVNCVFFTQkRTVVlnUVRneU56UXpNamczTVNNd0lRWURWUVFMRXhwb2RIUndPaTh2ZDNkM0xtTm9ZVzFpDQpaWEp6YVdkdUxtOXlaekVnTUI0R0ExVUVBeE1YUjJ4dlltRnNJRU5vWVcxaVpYSnphV2R1SUZKdmIzUXdIaGNOTURNd09UTXdNVFl4DQpOREU0V2hjTk16Y3dPVE13TVRZeE5ERTRXakI5TVFzd0NRWURWUVFHRXdKRlZURW5NQ1VHQTFVRUNoTWVRVU1nUTJGdFpYSm1hWEp0DQpZU0JUUVNCRFNVWWdRVGd5TnpRek1qZzNNU013SVFZRFZRUUxFeHBvZEhSd09pOHZkM2QzTG1Ob1lXMWlaWEp6YVdkdUxtOXlaekVnDQpNQjRHQTFVRUF4TVhSMnh2WW1Gc0lFTm9ZVzFpWlhKemFXZHVJRkp2YjNRd2dnRWdNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEUUF3DQpnZ0VJQW9JQkFRQ2ljS0xRbjBLdVd4ZkgySDNQRklQOFQ4bWh0eE92aXRlZVBnUUtrb3RnVnZxME1pK0lUYUZnQ1BTM0NVNmdTUzlKDQoxdFBmblpkYW41UUVjT3cvV2RtM3pHYUxtRklvQ1FMZnhTK0VqWHFYZDcvc1FKMGxjcXUxUHpLWSs3ZTMvSEtFNVRXSCtWWDZveDhPDQpieTRvM1dtZzJVSVF4dmkxUk1MUVEzL2J2T1NpUEdwVmVBcDNxZGpxR1RLM0wvNWNQeHZ1c1pqc3lxMTZhVVhqbGc5Vjl1YnRkZXBsDQo2REpXazBhSnFDV0taUWJ1YTc5NUI5RHh0Ni90TEUyU3U4Q29YNmRuZlFUeUZRaHdySkxXZlFUU00vdE10Z3NMK3hySnhJMERxWDVjDQo4bENyRXFXaHowaFFwZS9TeUJvVCtyQi9zWUljZDJvUFg5d0xsWS92UTM3bVJRa2xBZ0VEbzRJQlVEQ0NBVXd3RWdZRFZSMFRBUUgvDQpCQWd3QmdFQi93SUJEREEvQmdOVkhSOEVPREEyTURTZ01xQXdoaTVvZEhSd09pOHZZM0pzTG1Ob1lXMWlaWEp6YVdkdUxtOXlaeTlqDQphR0Z0WW1WeWMybG5ibkp2YjNRdVkzSnNNQjBHQTFVZERnUVdCQlJEbkRhZnNKNHdUY2JPWDYwUXErVURwZnFwRkRBT0JnTlZIUThCDQpBZjhFQkFNQ0FRWXdFUVlKWUlaSUFZYjRRZ0VCQkFRREFnQUhNQ29HQTFVZEVRUWpNQ0dCSDJOb1lXMWlaWEp6YVdkdWNtOXZkRUJqDQphR0Z0WW1WeWMybG5iaTV2Y21jd0tnWURWUjBTQkNNd0lZRWZZMmhoYldKbGNuTnBaMjV5YjI5MFFHTm9ZVzFpWlhKemFXZHVMbTl5DQpaekJiQmdOVkhTQUVWREJTTUZBR0N5c0dBUVFCZ1ljdUNnRUJNRUV3UHdZSUt3WUJCUVVIQWdFV00yaDBkSEE2THk5amNITXVZMmhoDQpiV0psY25OcFoyNHViM0puTDJOd2N5OWphR0Z0WW1WeWMybG5ibkp2YjNRdWFIUnRiREFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBDQpQRHR3a2ZrRVZDZVI0ZTN0L21oL1lWM2xRV1ZQTXZFWUJaUnFITjRmY05zK2V6SUNOTFVNYktHS2ZLWDBqLy9VMkswWDFTMEUwVDlZDQpnT0tCV1lpK3dPTkdreVQra0wwbW9qQXQ2SmNtVnpXSmRKWVk5aFhpcnlRWlZnSUNzcm9QRk9yR2ltYkJoa1ZWaTc2U3ZweWtCTWRKDQpQSjdvS1hxSjEvNnYvMmoxcFJlUXZheVp6S1dHVndsblJ0dldGc0pHOGVTcFVQV1AwWklWMDE4K3hnQkpPbTVZc3RIUkp3MGx5REw0DQpJQkhOZlRJelNKUlVUTjNjZWNRd24rdU91RlcxMTRoY3hXb2tQYkxUQlFOUnhnZnZ6QlJ5ZEQxdWNzNFlLSXhLb0hmbENTdEZSRWVzDQp0MmQvQVlvRldwTytvY0gvK09jT1o2UkhTWFpkZFpBYTlTYVA4QT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCk5ldExvY2sgTm90YXJ5IChDbGFzcyBBKSBSb290DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlHZlRDQ0JXV2dBd0lCQWdJQ0FRTXdEUVlKS29aSWh2Y05BUUVFQlFBd2dhOHhDekFKQmdOVkJBWVRBa2hWTVJBd0RnWURWUVFJDQpFd2RJZFc1bllYSjVNUkV3RHdZRFZRUUhFd2hDZFdSaGNHVnpkREVuTUNVR0ExVUVDaE1lVG1WMFRHOWpheUJJWVd4dmVtRjBZbWw2DQpkRzl1YzJGbmFTQkxablF1TVJvd0dBWURWUVFMRXhGVVlXNTFjMmwwZG1GdWVXdHBZV1J2YXpFMk1EUUdBMVVFQXhNdFRtVjBURzlqDQpheUJMYjNwcVpXZDVlbTlwSUNoRGJHRnpjeUJCS1NCVVlXNTFjMmwwZG1GdWVXdHBZV1J2TUI0WERUazVNREl5TkRJek1UUTBOMW9YDQpEVEU1TURJeE9USXpNVFEwTjFvd2dhOHhDekFKQmdOVkJBWVRBa2hWTVJBd0RnWURWUVFJRXdkSWRXNW5ZWEo1TVJFd0R3WURWUVFIDQpFd2hDZFdSaGNHVnpkREVuTUNVR0ExVUVDaE1lVG1WMFRHOWpheUJJWVd4dmVtRjBZbWw2ZEc5dWMyRm5hU0JMWm5RdU1Sb3dHQVlEDQpWUVFMRXhGVVlXNTFjMmwwZG1GdWVXdHBZV1J2YXpFMk1EUUdBMVVFQXhNdFRtVjBURzlqYXlCTGIzcHFaV2Q1ZW05cElDaERiR0Z6DQpjeUJCS1NCVVlXNTFjMmwwZG1GdWVXdHBZV1J2TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF2SFNNDQpEN3RNOURjZXFRV0MyT2JoYkhEcWVMVnUwVGhFRGFpRHpsM1MxdFdCeGRSTDUxdVVjQ2JiTzUxcVRHTDNjZk5rMW1FN1BldHpvemZaDQp6K3FNa2p2Tjl3ZmNablNYOUVVaTNmUmM0TDl0ODc1bE0rUVZPci9ibUpCVk9NVHRwbFZqQzdCNEJQVGpic0UvanZ4UmVCK1Nub1BDDQovdG13cWNtOFdnRC9xYWlZZFB2MkxENFZPUTIyQkZXb0RwZ2dRck94SmExK21tOWRVN0dyRFB6cjRQTjZzNml6LzBiMlk2TFlPcGg3DQp0cXlGLzdBbFQzUmo1eE1IcFFxUEJmZkFaRzkrcHllQWx0N1VMb1pneDJzclhuTjdGK2VSUDJRTTJFc2lOQ3ViTXZKSUg1K2hDb1I2DQo0c0t0bHoyTzFjSDVWcU5RNmNhMCtwaWk3cFhtS2dPTTN3SURBUUFCbzRJQ256Q0NBcHN3RGdZRFZSMFBBUUgvQkFRREFnQUdNQklHDQpBMVVkRXdFQi93UUlNQVlCQWY4Q0FRUXdFUVlKWUlaSUFZYjRRZ0VCQkFRREFnQUhNSUlDWUFZSllJWklBWWI0UWdFTkJJSUNVUmFDDQpBazFHU1VkWlJVeEZUU0VnUlhwbGJpQjBZVzUxYzJsMGRtRnVlU0JoSUU1bGRFeHZZMnNnUzJaMExpQkJiSFJoYkdGdWIzTWdVM3B2DQpiR2RoYkhSaGRHRnphU0JHWld4MFpYUmxiR1ZwWW1WdUlHeGxhWEowSUdWc2FtRnlZWE52YXlCaGJHRndhbUZ1SUd0bGMzcDFiSFF1DQpJRUVnYUdsMFpXeGxjMmwwWlhNZ1ptOXNlV0Z0WVhSaGRDQmhJRTVsZEV4dlkyc2dTMlowTGlCMFpYSnRaV3RtWld4bGJHOXpjMlZuDQpMV0pwZW5SdmMybDBZWE5oSUhabFpHa3VJRUVnWkdsbmFYUmhiR2x6SUdGc1lXbHlZWE1nWld4bWIyZGhaR0Z6WVc1aGF5Qm1aV3gwDQpaWFJsYkdVZ1lYb2daV3h2YVhKMElHVnNiR1Z1YjNKNlpYTnBJR1ZzYW1GeVlYTWdiV1ZuZEdWMFpXeGxMaUJCZWlCbGJHcGhjbUZ6DQpJR3hsYVhKaGMyRWdiV1ZuZEdGc1lXeG9ZWFJ2SUdFZ1RtVjBURzlqYXlCTFpuUXVJRWx1ZEdWeWJtVjBJR2h2Ym14aGNHcGhiaUJoDQpJR2gwZEhCek9pOHZkM2QzTG01bGRHeHZZMnN1Ym1WMEwyUnZZM01nWTJsdFpXNGdkbUZuZVNCclpYSm9aWFJ2SUdGNklHVnNiR1Z1DQpiM0o2WlhOQWJtVjBiRzlqYXk1dVpYUWdaUzF0WVdsc0lHTnBiV1Z1TGlCSlRWQlBVbFJCVGxRaElGUm9aU0JwYzNOMVlXNWpaU0JoDQpibVFnZEdobElIVnpaU0J2WmlCMGFHbHpJR05sY25ScFptbGpZWFJsSUdseklITjFZbXBsWTNRZ2RHOGdkR2hsSUU1bGRFeHZZMnNnDQpRMUJUSUdGMllXbHNZV0pzWlNCaGRDQm9kSFJ3Y3pvdkwzZDNkeTV1WlhSc2IyTnJMbTVsZEM5a2IyTnpJRzl5SUdKNUlHVXRiV0ZwDQpiQ0JoZENCamNITkFibVYwYkc5amF5NXVaWFF1TUEwR0NTcUdTSWIzRFFFQkJBVUFBNElCQVFCSUpFYjN1bFp2K3Nnb0EwQk81VEU1DQpheVpyVTMvYjM5L3pjVDBtd0JRT3htZDdJNmdNYzkwQnU4YktiamM1VmRYSGpGWWdEaWdLRHRJcXBMQkpVc1k0Qi82K0NnbU0wWmpQDQp5dG9VTWFGUDBqbjhEeEVzUThQZHE1UEhWVDVIZkJnYUFOenplOWp5ZjFKc0lQUUxYMmxTOU83NHNpbGc2K05KTVNFTjFyVVFRZUpCDQpDV3ppR3BwV1MzY0M5cUNibWllSDZGVXBjY0tRbjBWNEd1RVZaRDNRRHRpZ2RwK3V4ZEF1NnRZUFZ1eGtmMXFiRkZnQkozNFRVTWRyDQpLdVpvUEw5Y29Bb2I0UTU2NmVLQXcrbnA5djFzRVo3UTVTZ25LMVF5UWhTQ2RlWks4Q3RtZFdPTW92c0VQb01PbXpid0dPUW1JTU9NDQo4Q2dIclR3WFpvaTEvYmFJDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCk5ldExvY2sgQnVzaW5lc3MgKENsYXNzIEIpIFJvb3QNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRlN6Q0NCTFNnQXdJQkFnSUJhVEFOQmdrcWhraUc5dzBCQVFRRkFEQ0JtVEVMTUFrR0ExVUVCaE1DU0ZVeEVUQVBCZ05WQkFjVA0KQ0VKMVpHRndaWE4wTVNjd0pRWURWUVFLRXg1T1pYUk1iMk5ySUVoaGJHOTZZWFJpYVhwMGIyNXpZV2RwSUV0bWRDNHhHakFZQmdOVg0KQkFzVEVWUmhiblZ6YVhSMllXNTVhMmxoWkc5ck1USXdNQVlEVlFRREV5bE9aWFJNYjJOcklGVjZiR1YwYVNBb1EyeGhjM01nUWlrZw0KVkdGdWRYTnBkSFpoYm5scmFXRmtiekFlRncwNU9UQXlNalV4TkRFd01qSmFGdzB4T1RBeU1qQXhOREV3TWpKYU1JR1pNUXN3Q1FZRA0KVlFRR0V3SklWVEVSTUE4R0ExVUVCeE1JUW5Wa1lYQmxjM1F4SnpBbEJnTlZCQW9USGs1bGRFeHZZMnNnU0dGc2IzcGhkR0pwZW5Sdg0KYm5OaFoya2dTMlowTGpFYU1CZ0dBMVVFQ3hNUlZHRnVkWE5wZEhaaGJubHJhV0ZrYjJzeE1qQXdCZ05WQkFNVEtVNWxkRXh2WTJzZw0KVlhwc1pYUnBJQ2hEYkdGemN5QkNLU0JVWVc1MWMybDBkbUZ1ZVd0cFlXUnZNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUFBNEdOQURDQg0KaVFLQmdRQ3g2Z1RzSUtBandvODRZTS9IUnJQVkcvNzd1Wm1lQk53Y2Y0eEtnWmp1cE5US2loZTVJbitEQ25WTW04QnAyR1E1bysyUw0Kby8xYlhIUWF3RWZLT21sMm1ycmlSQmY4VEtQVi9yaVhpSytJQTRrZnBQSUVQc2dIQytiNXN5OTZZaFFKUmhUS1pQV0xnTFZpcU5ocg0KMW5HVExiTy9DVlJZN1FicnFIdmNRN0doYVFJREFRQUJvNElDbnpDQ0Fwc3dFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJCREFPQmdOVg0KSFE4QkFmOEVCQU1DQUFZd0VRWUpZSVpJQVliNFFnRUJCQVFEQWdBSE1JSUNZQVlKWUlaSUFZYjRRZ0VOQklJQ1VSYUNBazFHU1VkWg0KUlV4RlRTRWdSWHBsYmlCMFlXNTFjMmwwZG1GdWVTQmhJRTVsZEV4dlkyc2dTMlowTGlCQmJIUmhiR0Z1YjNNZ1UzcHZiR2RoYkhSaA0KZEdGemFTQkdaV3gwWlhSbGJHVnBZbVZ1SUd4bGFYSjBJR1ZzYW1GeVlYTnZheUJoYkdGd2FtRnVJR3RsYzNwMWJIUXVJRUVnYUdsMA0KWld4bGMybDBaWE1nWm05c2VXRnRZWFJoZENCaElFNWxkRXh2WTJzZ1MyWjBMaUIwWlhKdFpXdG1aV3hsYkc5emMyVm5MV0pwZW5Sdg0KYzJsMFlYTmhJSFpsWkdrdUlFRWdaR2xuYVhSaGJHbHpJR0ZzWVdseVlYTWdaV3htYjJkaFpHRnpZVzVoYXlCbVpXeDBaWFJsYkdVZw0KWVhvZ1pXeHZhWEowSUdWc2JHVnViM0o2WlhOcElHVnNhbUZ5WVhNZ2JXVm5kR1YwWld4bExpQkJlaUJsYkdwaGNtRnpJR3hsYVhKaA0KYzJFZ2JXVm5kR0ZzWVd4b1lYUnZJR0VnVG1WMFRHOWpheUJMWm5RdUlFbHVkR1Z5Ym1WMElHaHZibXhoY0dwaGJpQmhJR2gwZEhCeg0KT2k4dmQzZDNMbTVsZEd4dlkyc3VibVYwTDJSdlkzTWdZMmx0Wlc0Z2RtRm5lU0JyWlhKb1pYUnZJR0Y2SUdWc2JHVnViM0o2WlhOQQ0KYm1WMGJHOWpheTV1WlhRZ1pTMXRZV2xzSUdOcGJXVnVMaUJKVFZCUFVsUkJUbFFoSUZSb1pTQnBjM04xWVc1alpTQmhibVFnZEdobA0KSUhWelpTQnZaaUIwYUdseklHTmxjblJwWm1sallYUmxJR2x6SUhOMVltcGxZM1FnZEc4Z2RHaGxJRTVsZEV4dlkyc2dRMUJUSUdGMg0KWVdsc1lXSnNaU0JoZENCb2RIUndjem92TDNkM2R5NXVaWFJzYjJOckxtNWxkQzlrYjJOeklHOXlJR0o1SUdVdGJXRnBiQ0JoZENCag0KY0hOQWJtVjBiRzlqYXk1dVpYUXVNQTBHQ1NxR1NJYjNEUUVCQkFVQUE0R0JBQVRicm93WHIvZ09rREZPelQ0SndHMDZzUGd6VEVkTQ0KNDNXSUVKZXNzRGdWa2NZcGxzd2h3RzA4cFhUUDJJS2xPY05sNDBKd3V5S1E0MzNiTlhiaG9MWGFuM0J1a3hvd09SMHcyeTdqZkxLUg0Kc3RFM0tmcTUxaGRjUjAvakhUanJuOVY3bGFnb25oVkswZEhRS3dDWG9PS1NOaXRqckZnQmF6TXBVSWFEOFFGSQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpOZXRMb2NrIEV4cHJlc3MgKENsYXNzIEMpIFJvb3QNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGVHpDQ0JMaWdBd0lCQWdJQmFEQU5CZ2txaGtpRzl3MEJBUVFGQURDQm16RUxNQWtHQTFVRUJoTUNTRlV4RVRBUEJnTlZCQWNUDQpDRUoxWkdGd1pYTjBNU2N3SlFZRFZRUUtFeDVPWlhSTWIyTnJJRWhoYkc5NllYUmlhWHAwYjI1ellXZHBJRXRtZEM0eEdqQVlCZ05WDQpCQXNURVZSaGJuVnphWFIyWVc1NWEybGhaRzlyTVRRd01nWURWUVFERXl0T1pYUk1iMk5ySUVWNGNISmxjM042SUNoRGJHRnpjeUJEDQpLU0JVWVc1MWMybDBkbUZ1ZVd0cFlXUnZNQjRYRFRrNU1ESXlOVEUwTURneE1Wb1hEVEU1TURJeU1ERTBNRGd4TVZvd2dac3hDekFKDQpCZ05WQkFZVEFraFZNUkV3RHdZRFZRUUhFd2hDZFdSaGNHVnpkREVuTUNVR0ExVUVDaE1lVG1WMFRHOWpheUJJWVd4dmVtRjBZbWw2DQpkRzl1YzJGbmFTQkxablF1TVJvd0dBWURWUVFMRXhGVVlXNTFjMmwwZG1GdWVXdHBZV1J2YXpFME1ESUdBMVVFQXhNclRtVjBURzlqDQpheUJGZUhCeVpYTnplaUFvUTJ4aGMzTWdReWtnVkdGdWRYTnBkSFpoYm5scmFXRmtiekNCbnpBTkJna3Foa2lHOXcwQkFRRUZBQU9CDQpqUUF3Z1lrQ2dZRUE2K3l3YkdHS0l5V3ZZQ0RqMlovOGt3dmJYWTJ3b2JOQU9vTE8vWFhnZURJRGhscUdsWkh0VS9xZFFQem02TjNaDQpXM29EdlYzek93ekRVWG1iclZXZzZkQURFSzhLdWhSQzJWSW1FU0xIMGlETWdxU2FxZjY0Z1hhZGFyZlNOblUrc1lZSjltNXRmazYzDQpldXl1Y1lUMkJETUlKVExyZEt3V1JNYmtRSk1kZjYwQ0F3RUFBYU9DQXA4d2dnS2JNQklHQTFVZEV3RUIvd1FJTUFZQkFmOENBUVF3DQpEZ1lEVlIwUEFRSC9CQVFEQWdBR01CRUdDV0NHU0FHRytFSUJBUVFFQXdJQUJ6Q0NBbUFHQ1dDR1NBR0crRUlCRFFTQ0FsRVdnZ0pODQpSa2xIV1VWTVJVMGhJRVY2Wlc0Z2RHRnVkWE5wZEhaaGJua2dZU0JPWlhSTWIyTnJJRXRtZEM0Z1FXeDBZV3hoYm05eklGTjZiMnhuDQpZV3gwWVhSaGMya2dSbVZzZEdWMFpXeGxhV0psYmlCc1pXbHlkQ0JsYkdwaGNtRnpiMnNnWVd4aGNHcGhiaUJyWlhONmRXeDBMaUJCDQpJR2hwZEdWc1pYTnBkR1Z6SUdadmJIbGhiV0YwWVhRZ1lTQk9aWFJNYjJOcklFdG1kQzRnZEdWeWJXVnJabVZzWld4dmMzTmxaeTFpDQphWHAwYjNOcGRHRnpZU0IyWldScExpQkJJR1JwWjJsMFlXeHBjeUJoYkdGcGNtRnpJR1ZzWm05bllXUmhjMkZ1WVdzZ1ptVnNkR1YwDQpaV3hsSUdGNklHVnNiMmx5ZENCbGJHeGxibTl5ZW1WemFTQmxiR3BoY21GeklHMWxaM1JsZEdWc1pTNGdRWG9nWld4cVlYSmhjeUJzDQpaV2x5WVhOaElHMWxaM1JoYkdGc2FHRjBieUJoSUU1bGRFeHZZMnNnUzJaMExpQkpiblJsY201bGRDQm9iMjVzWVhCcVlXNGdZU0JvDQpkSFJ3Y3pvdkwzZDNkeTV1WlhSc2IyTnJMbTVsZEM5a2IyTnpJR05wYldWdUlIWmhaM2tnYTJWeWFHVjBieUJoZWlCbGJHeGxibTl5DQplbVZ6UUc1bGRHeHZZMnN1Ym1WMElHVXRiV0ZwYkNCamFXMWxiaTRnU1UxUVQxSlVRVTVVSVNCVWFHVWdhWE56ZFdGdVkyVWdZVzVrDQpJSFJvWlNCMWMyVWdiMllnZEdocGN5QmpaWEowYVdacFkyRjBaU0JwY3lCemRXSnFaV04wSUhSdklIUm9aU0JPWlhSTWIyTnJJRU5RDQpVeUJoZG1GcGJHRmliR1VnWVhRZ2FIUjBjSE02THk5M2QzY3VibVYwYkc5amF5NXVaWFF2Wkc5amN5QnZjaUJpZVNCbExXMWhhV3dnDQpZWFFnWTNCelFHNWxkR3h2WTJzdWJtVjBMakFOQmdrcWhraUc5dzBCQVFRRkFBT0JnUUFRclgvWERES0FDdGlHOFhtWXRhM1V6Yk0yDQp4SlpJd1Z6Tm10a0ZMcCsrVU92MEpoUVFMZFJtRi9pZXdTZjk4ZTNrZTB1Z2JMV3JtbGR3cHUyZ3BPMHU5ZjM4dmY1Tk53Z012T09XDQpneUwxU1J0L1N5dTBWTUdBZkpsT0hkQ003dENzNVpMNmRWYitaS0FUajdpNEZwMWhCV2VBeU5EWXBRY0NOSmdFalRNRTFBPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KWFJhbXAgR2xvYmFsIENBIFJvb3QNCj09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVNRENDQXhpZ0F3SUJBZ0lRVUpSczdCanExWnhOMVpmdmRZK2dyVEFOQmdrcWhraUc5dzBCQVFVRkFEQ0JnakVMTUFrR0ExVUUNCkJoTUNWVk14SGpBY0JnTlZCQXNURlhkM2R5NTRjbUZ0Y0hObFkzVnlhWFI1TG1OdmJURWtNQ0lHQTFVRUNoTWJXRkpoYlhBZ1UyVmoNCmRYSnBkSGtnVTJWeWRtbGpaWE1nU1c1ak1TMHdLd1lEVlFRREV5UllVbUZ0Y0NCSGJHOWlZV3dnUTJWeWRHbG1hV05oZEdsdmJpQkINCmRYUm9iM0pwZEhrd0hoY05NRFF4TVRBeE1UY3hOREEwV2hjTk16VXdNVEF4TURVek56RTVXakNCZ2pFTE1Ba0dBMVVFQmhNQ1ZWTXgNCkhqQWNCZ05WQkFzVEZYZDNkeTU0Y21GdGNITmxZM1Z5YVhSNUxtTnZiVEVrTUNJR0ExVUVDaE1iV0ZKaGJYQWdVMlZqZFhKcGRIa2cNClUyVnlkbWxqWlhNZ1NXNWpNUzB3S3dZRFZRUURFeVJZVW1GdGNDQkhiRzlpWVd3Z1EyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnANCmRIa3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDWUpCNjlGYlM2MzhlTXBTZTJPQXRwODdaT3FDd3UNCklSMWNSTjhoWFg0amRQNWVmclJLdDZhdEg2N2dCaGJpbTF2WlozUnJYWUNQS1oyR0c5bWNEWmh0ZGhBb1dPUmxzSDlLbUhtZjRNTXgNCmZvQXJ0WXpBUURzUmh0RExvb1kyWUtUVk1JSnQyVzdRRHhJRU01ZGZUMkZhOE9UNWthdm5IVHU4Nk0vMGF5MDBmT0pJWVJ5TzgyRkUNCnpHK2dTcW1Vc0UzYTU2azBlbkk0cUVITVBKUVJmZXZJcG95M2hzdktNenZaUFRlTCszbytoaXpuYzljS1Y2eGtteG5yOUE4RUNJcXMNCkF4Y1paUFJhSlNLTk5DeXk5bWdkRW0zVGloNFUyc1NQcHVJamhkVjZEYjFxNE9uczdCZTdRaHRucWlYdFJZTWgvTUhKZk5WaVB2cnkNCnhTM1QvZFJsQWdNQkFBR2pnWjh3Z1p3d0V3WUpLd1lCQkFHQ054UUNCQVllQkFCREFFRXdDd1lEVlIwUEJBUURBZ0dHTUE4R0ExVWQNCkV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGTVpQb2owR1k0UUpuTTVpNUFTc2pWeTE2YlliTURZR0ExVWRId1F2TUMwd0s2QXANCm9DZUdKV2gwZEhBNkx5OWpjbXd1ZUhKaGJYQnpaV04xY21sMGVTNWpiMjB2V0VkRFFTNWpjbXd3RUFZSkt3WUJCQUdDTnhVQkJBTUMNCkFRRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBSkVWT1FNQkcyZjdTaHo1Q21CYm9kcE5sMkw1SkZNbjE0SmtUcEF1dzBrYks1cmMNCi9LaDRaelh4SGZBUnZiZEk0eEQyRGQ4LzBzbTJxbFdrU0xvQzI5NVpMaFZiTzUwV2ZVZlhOK3BmVFhZU05yc2YxNkdCQkVZZ295eHQNCnFaNEJmajhwemdDVDMvM0prbk9KaVdTZTV5dmtISkVzMHJuT2ZjNXZNWm5UNXI3U0hwRHdDUlI1WENPclRkTGFJUjlObVhtZDRjOG4NCm54Q2JISWdOc0lwa1FURzREbXlRSktTYlhIR1B1cnQrSEJ2YmFvQVBJYnpwMjZhM1FQU3lpNm14NU8rYUd0QTlhWm51cUNpajRUeXoNCjhMSVJuTTk4UU9iZDUwTjlvdGc2dGFtTjhqU1p4TlFRNFFiOUNZUVFPKzdFVFBUc0ozeEN3blI4Z29vSnliUURKYnc9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkdvIERhZGR5IENsYXNzIDIgQ0ENCj09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRUFEQ0NBdWlnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFVRkFEQmpNUXN3Q1FZRFZRUUdFd0pWVXpFaE1COEdBMVVFQ2hNWQ0KVkdobElFZHZJRVJoWkdSNUlFZHliM1Z3TENCSmJtTXVNVEV3THdZRFZRUUxFeWhIYnlCRVlXUmtlU0JEYkdGemN5QXlJRU5sY25ScA0KWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TUI0WERUQTBNRFl5T1RFM01EWXlNRm9YRFRNME1EWXlPVEUzTURZeU1Gb3dZekVMTUFrRw0KQTFVRUJoTUNWVk14SVRBZkJnTlZCQW9UR0ZSb1pTQkhieUJFWVdSa2VTQkhjbTkxY0N3Z1NXNWpMakV4TUM4R0ExVUVDeE1vUjI4Zw0KUkdGa1pIa2dRMnhoYzNNZ01pQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRDQ0FTQXdEUVlKS29aSWh2Y05BUUVCQlFBRA0KZ2dFTkFEQ0NBUWdDZ2dFQkFONmQxK3BYR0VtaFcrdlhYMGlHNnI3ZC8rVHZaeHowWldpelYzR2dYbmU3N1p0SjZYQ0FQVllZWXdodg0KMnZMTTBEOS9BbFFpVkJEWXNvSFV3SFU5UzMvSGQ4TStlS3NhQTdVZ2F5OXFLN0hGaUg3RXV4Nnd3ZGhGSjIrcU4xajNoeWJYMkMzMg0KcVJlM0gzSTJUcVlYUDJXWWt0c3FibDJpL29qZ0M5NS81WTBWNGV2TE90WGlFcUlUTGRpT3IxOFNQYUFJQlFpMlhLVmxPQVJGbVI2ag0KWUdCMHhVR2xjbUliWXNVZmIxOGFRcjRDVVdXb3JpTVlhdng0QTZsTmY0REQrcXRhL0tGQXBNb1pGdjZ5eU85ZWN3M3VkNzJhOW5tWQ0KdkxFSFo2SVZEZDJnV01aRWV3bytZaWhmdWtFSFUxalBFWDQ0ZE1YNC83VnBrSStFZE9xWEc2OENBUU9qZ2NBd2diMHdIUVlEVlIwTw0KQkJZRUZOTEVzTktSMUV3UmNiTmh5ejJoL3Qyb2F0VGpNSUdOQmdOVkhTTUVnWVV3Z1lLQUZOTEVzTktSMUV3UmNiTmh5ejJoL3Qybw0KYXRUam9XZWtaVEJqTVFzd0NRWURWUVFHRXdKVlV6RWhNQjhHQTFVRUNoTVlWR2hsSUVkdklFUmhaR1I1SUVkeWIzVndMQ0JKYm1NdQ0KTVRFd0x3WURWUVFMRXloSGJ5QkVZV1JrZVNCRGJHRnpjeUF5SUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVnZ0VBTUF3Rw0KQTFVZEV3UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFESkw4N0xLUHBIOEVzYWhCNHlPZDZBekJoUmNrQjRZOXdpbQ0KUFFvWitZZUFFVzVwNUpZWE1QODBrV055T083TUhBR2pIWlFvcERIMmVzUlUxL2JsTVZnRG9zek9ZdHVVUlhPMXYwWEpKTFhWZ2dLdA0KSTNscGpiaTJUYzdQVE1vekkrZ2NpS3FkaTBGdUZza2c1WW1lelR2YWNQZCttU1lnRkZRbHEyNXpoZWFiSVowS2JJSU9xUGpDRFBvUQ0KSG15Vzc0Y054QTloaTYzdWd5dVYrSTZTaEhJNTZ5RHFnKzJEelpkdUNMenJUaWEyY3l2azAvWk0vaVp4NG1FUmRFci9WeHFIRDNWSQ0KTHM5UmFSZWdBaEpobGRYUlFMSVFUTzdFckJCRHBxV2VDdFdWWXBvTno0aUN4VElNNUN1ZlJlWU5ueWljc2JrcVdsZXROdyt2SFgvYg0Kdlo4PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpTdGFyZmllbGQgQ2xhc3MgMiBDQQ0KPT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRUR6Q0NBdmVnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFVRkFEQm9NUXN3Q1FZRFZRUUdFd0pWVXpFbE1DTUdBMVVFQ2hNYw0KVTNSaGNtWnBaV3hrSUZSbFkyaHViMnh2WjJsbGN5d2dTVzVqTGpFeU1EQUdBMVVFQ3hNcFUzUmhjbVpwWld4a0lFTnNZWE56SURJZw0KUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3dIaGNOTURRd05qSTVNVGN6T1RFMldoY05NelF3TmpJNU1UY3pPVEUyV2pCbw0KTVFzd0NRWURWUVFHRXdKVlV6RWxNQ01HQTFVRUNoTWNVM1JoY21acFpXeGtJRlJsWTJodWIyeHZaMmxsY3l3Z1NXNWpMakV5TURBRw0KQTFVRUN4TXBVM1JoY21acFpXeGtJRU5zWVhOeklESWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrd2dnRWdNQTBHQ1NxRw0KU0liM0RRRUJBUVVBQTRJQkRRQXdnZ0VJQW9JQkFRQzNNc2orNlhHbUJJV3REQkZrMzg1Tjc4Z0RHSWMvb2F2N1BLYWY4TU9oMnRUWQ0KYml0VGtQc2twRDZFOEo3b1gremxKMFQxS0tZL2U5N2dLdkRJcjFNdm5zb0ZBWk1lajJZY09hZE4rbHEyY3dRbFp1dDNmK2RaeGtxWg0KSlJSVTZ5Ykg4MzhaMVRCd2o2K3dSaXIvcmVzcDdkZWZxZ1NIbzlUNWlhVTBYOXREa1lJMjJXWThzYmk1Z3YyY09qNFF5RHZ2Qm1WbQ0KZXBzWkdEMy9jVkU4TUM1ZnZqMTNjN0pkQm16REkxYWFLNFVta2h5bkFyUGtQdzJ2Q0htQ3VEWTk2cHpUTmJPOGFjcjF6SjNvL1dTTg0KRjRBemJsNUtYWm5KSG9lMG5SckExVzRUTlNOZTM1dGZQZS9XOTNiQzZqNjdlQTBjUW1kckJOajQxdHB2aS9KRW9BR3JBZ0VEbzRIRg0KTUlIQ01CMEdBMVVkRGdRV0JCUy9YN2ZSenQwZmh2UmJWYXpjMXhEQ0RxbUk1ekNCa2dZRFZSMGpCSUdLTUlHSGdCUy9YN2ZSenQwZg0KaHZSYlZhemMxeERDRHFtSTU2RnNwR293YURFTE1Ba0dBMVVFQmhNQ1ZWTXhKVEFqQmdOVkJBb1RIRk4wWVhKbWFXVnNaQ0JVWldObw0KYm05c2IyZHBaWE1zSUVsdVl5NHhNakF3QmdOVkJBc1RLVk4wWVhKbWFXVnNaQ0JEYkdGemN5QXlJRU5sY25ScFptbGpZWFJwYjI0Zw0KUVhWMGFHOXlhWFI1Z2dFQU1Bd0dBMVVkRXdRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFRkJRQURnZ0VCQUFXZFA0aWQwY2thVmFHcw0KYWZQeldkcWJBWWNhVDFlcG9Ya0pLdHYzTDdJZXpNZGVhdGlEaDZHWDcwazFQbmNHUVZoaXY0NVl1QXBuUCt5ejNTRm1IOGxVK25MTQ0KUFV4QTJJR3ZkNTZEZXJ1aXgvVTBGNDdaRVVEMC9Dd3FUUlYvcDJKZExpWFRBQXNnR2gxbytSZTQ5TDJMN1NoWjNVMFdpeGVEeUxKbA0KeHkxNnBhcThVNFp0M1Zla3l2Z2dRUXRvOFBUN2RMNVdYWHA1OWZrZGhlTXRsYjcxY1pCRHpJMGZtZ0FLaHlucFZTSllBQ1BxNHhKRA0KS1Z0SENOMk1RV3BsQnFqbElhcEJ0SlVobGJsOTBUU3JFOWF0dk56aVBUbk52VDUxY0tFWVdRUEpJclNQbk5WZUt0ZWx0dFFLYmZpMw0KUUJGR21oOTVEbUsvRDVmczRDOGZGNVE9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlIeVRDQ0JiR2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCOU1Rc3dDUVlEVlFRR0V3SkpUREVXTUJRR0ExVUVDaE1ODQpVM1JoY25SRGIyMGdUSFJrTGpFck1Da0dBMVVFQ3hNaVUyVmpkWEpsSUVScFoybDBZV3dnUTJWeWRHbG1hV05oZEdVZ1UybG5ibWx1DQpaekVwTUNjR0ExVUVBeE1nVTNSaGNuUkRiMjBnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa3dIaGNOTURZd09URTNNVGswDQpOak0yV2hjTk16WXdPVEUzTVRrME5qTTJXakI5TVFzd0NRWURWUVFHRXdKSlRERVdNQlFHQTFVRUNoTU5VM1JoY25SRGIyMGdUSFJrDQpMakVyTUNrR0ExVUVDeE1pVTJWamRYSmxJRVJwWjJsMFlXd2dRMlZ5ZEdsbWFXTmhkR1VnVTJsbmJtbHVaekVwTUNjR0ExVUVBeE1nDQpVM1JoY25SRGIyMGdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3DQpnZ0lLQW9JQ0FRREJpTnNKdkd4R2ZIaWZsWHUxTTVEeWNtTFd3VFlnSWlSZXp1bDM4a01Lb2daa3BNeU9Odmc0NWlQd2JtMnhQTjF5DQpvNFVjb2RNOXRETXIweSt2L3Vxd1FWbG50c1FHZlFxZWRJWFdlVXlBTjNyZk9RVlNXZmYwRzBaRHBOS0ZoZExEY2ZOMVlqUzZMSXAvDQpIby91N1RUUUVjZVd6Vkk5dWpQVzNVM2VDenRLUzUvQ0ppLzZ0UlljY2pWM3lqeGQ1c3JoSm9zYU5uWmNBZHQwRkNYKzdiV2dpQS9kDQplTW90SHdlWE1BRXRjbm42UnRZVEtxaTVwcXVEU1IzbDh1L2Q1QUdPR0FxUFkxTVdoV0twRGhrNnpMVm1wc0pyZEFma0srRjJQclJ0DQoyUFpFNFhOaUh6dkV2cUJUVmlWc1VRbjNxcXZLdjNiOWJadnpuZHUvUFdhOERGYXFyNWhJbFRwTDM2ZFlVTms0ZGFsYjZrTU1BditaDQo2K2hzVFhCYktXV2MzYXBkeks4Qk1ld002OUtONk9xY2UrWnU5eWRtREJwSTEyNUM0ei9lSVQ1NzRRMXcrMk9xcUd3YVZMUmNKWHJKDQpvc21MRnFhN0xINFhYZ1ZOV0c0U0hRSHVFaEFOeGpKL0dQLzg5UHJOYnBIb05rbStHa2hwaThLV1RSb1NzbWtYd1FxUTF2cDVJa2kvDQp1bnRwK0hESCtubzMyTmdOMG5aUFYvK1F0K09SMHQzdndtQzNaenJkL3FxYzhOU0xmM0lpenNhZmw3YjRyNHFnRUtqWit4akd0clZjDQpVanlKdGhrcWN3RUtEd096RW1EeWVpK0IyNk51L3lZd2wvV0wzWWxYdHEwOXM2OHJ4YmQyQXZDbDFpdWFoaFFxY3Ziak00eGRDVXNUDQozN3VNZEJOU1N3SURBUUFCbzRJQ1VqQ0NBazR3REFZRFZSMFRCQVV3QXdFQi96QUxCZ05WSFE4RUJBTUNBYTR3SFFZRFZSME9CQllFDQpGRTRMN3hxa1FGdWxGMm1ITU1vMGFFUFFRYTd5TUdRR0ExVWRId1JkTUZzd0xLQXFvQ2lHSm1oMGRIQTZMeTlqWlhKMExuTjBZWEowDQpZMjl0TG05eVp5OXpabk5qWVMxamNtd3VZM0pzTUN1Z0thQW5oaVZvZEhSd09pOHZZM0pzTG5OMFlYSjBZMjl0TG05eVp5OXpabk5qDQpZUzFqY213dVkzSnNNSUlCWFFZRFZSMGdCSUlCVkRDQ0FWQXdnZ0ZNQmdzckJnRUVBWUcxTndFQkFUQ0NBVHN3THdZSUt3WUJCUVVIDQpBZ0VXSTJoMGRIQTZMeTlqWlhKMExuTjBZWEowWTI5dExtOXlaeTl3YjJ4cFkza3VjR1JtTURVR0NDc0dBUVVGQndJQkZpbG9kSFJ3DQpPaTh2WTJWeWRDNXpkR0Z5ZEdOdmJTNXZjbWN2YVc1MFpYSnRaV1JwWVhSbExuQmtaakNCMEFZSUt3WUJCUVVIQWdJd2djTXdKeFlnDQpVM1JoY25RZ1EyOXRiV1Z5WTJsaGJDQW9VM1JoY25SRGIyMHBJRXgwWkM0d0F3SUJBUnFCbDB4cGJXbDBaV1FnVEdsaFltbHNhWFI1DQpMQ0J5WldGa0lIUm9aU0J6WldOMGFXOXVJQ3BNWldkaGJDQk1hVzFwZEdGMGFXOXVjeW9nYjJZZ2RHaGxJRk4wWVhKMFEyOXRJRU5sDQpjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUZCdmJHbGplU0JoZG1GcGJHRmliR1VnWVhRZ2FIUjBjRG92TDJObGNuUXVjM1JoDQpjblJqYjIwdWIzSm5MM0J2YkdsamVTNXdaR1l3RVFZSllJWklBWWI0UWdFQkJBUURBZ0FITURnR0NXQ0dTQUdHK0VJQkRRUXJGaWxUDQpkR0Z5ZEVOdmJTQkdjbVZsSUZOVFRDQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRBTkJna3Foa2lHOXcwQkFRVUZBQU9DDQpBZ0VBRm15WjlHWU1OUFhRaFY1OUN1emFFRTQ0SEY3ZnBpVUZTNUV5d2VnNzhUM2RSQWxiQjBtS0tjdG1BcmV4bXZjbG1BazhqaHZoDQozVGFISzB1N2FOTTVaajJnSnNmeU9aRWRVYXVDZTM3Vnpscms0Z05YY0dtWENQbGVXS1lLMzR3R21rVVdGamdLWGxmMllzZDZBZ1htDQp2QjYxOHA3MHFTbUQrTElVNDI0b2gwVERrQnJlT0trOHJFTk5aRVhPM1NpcFhQSnpld1Q0RitpcnNmTXVYR1J1Y3pFNkVyaThzeEhrDQpmWStCVVpvN2pZbjBUWk5tZXp3RDdkT2FIWnJ6WlZEMW9OQjFueSt2OE9xQ1E1ajRhWnlKZWNSRGprWnk0MlEyRXEvM0pSNDRpWkIzDQpmc05yYXJuRHkwUkxySGlRaStmSExCNUxFVVRJTkZJbnpRcGRuNFhCaWRVYWVQS1ZFRk15M1lDRVpuWFp0V2dvKzJFdXZvU29PTUNaDQpFb2FsSG1ka3JRWXVMNmx3aGNlV0QzeUpaZldPUTFRT3E5MmxnRG1VWU1BMHlaWndMS01TOVI5SWU3MGNmbXUzblpEMElqdXUrUHdxDQp5dnFDVXFEdnIwdFZrK3ZCdGZBaWk2dzBUaVlpQktHSExIVkt0K1Y5RTllNERHVEFOdExKTDRZU2pDTUp3UnVDTzNOSm8ycFhoNVRsDQoxbmpGbVVOajQwM2dkeTNoWlpseWFRUWFSd25tRHdGV0pQc2Z2dzU1cVZndXVjUUpBWDZWdW0wQUJqNnk2a29RT2RqUUsvVy83SFcvDQpsd0xGQ1JzSTNGVTM0b0g3TjRSRFlpREs1MVpMWmVyK2JNRWtreVNoTk9zRi81b2lycHQ5UC9GbFVRcW1NR3F6OUlnY2dBMzhjb3JvDQpnMTQ9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClRhaXdhbiBHUkNBDQo9PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGY2pDQ0ExcWdBd0lCQWdJUUg1MVpXdGN2d2daRXBZQUlhZU5lOWpBTkJna3Foa2lHOXcwQkFRVUZBREEvTVFzd0NRWURWUVFHDQpFd0pVVnpFd01DNEdBMVVFQ2d3blIyOTJaWEp1YldWdWRDQlNiMjkwSUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNQjRYDQpEVEF5TVRJd05URXpNak16TTFvWERUTXlNVEl3TlRFek1qTXpNMW93UHpFTE1Ba0dBMVVFQmhNQ1ZGY3hNREF1QmdOVkJBb01KMGR2DQpkbVZ5Ym0xbGJuUWdVbTl2ZENCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEDQpnZ0lQQURDQ0Fnb0NnZ0lCQUpvbHVPek1vbldvZS9mT1cxbUt5ZEdHRWdoVTdKenk1MGIyaVBOODZhWGZURWMycEJzQkhIOGVWNHFODQp3OFhSSWVQYUpEOUlLL3VmTHFHVTV5d2NrOUcvR3dHSFU1bk9wL1VLSVhaMy82bTN4bk9VVDBiM0VFazMrcWhaU1YxcWdRZFc4b3I1DQpCdEQzY0NKTnRMZEJ1VEs0c2ZDeHc1dy9jUDFUM1lHcTJHTjQ5dGhUYnFHc2FvUWtjbFNHeHRLeXlod09lWUhXdFhCaUNBRXVUazhPDQoxUkd2cWEvbG1yL2N6SWR0SnVUSlY2TDdsdm5NNFQ5VGpHeE1mcHRUQ0F0c0YvdG55TUt0c2MyQXRKZmNkZ0VXRmVscTE2VGhlRWZPDQpodFg3TWZQNk1iNDBxaWo3Y0V3ZFNjZXZMSjF0WnFhMmpXUit0U0JxblR1QnRvOUFBR2RMaVlhNHpHWCtGVlBwQk1IV1h4MUUxd292DQpKNXBHZmFFTmRhMVVoaFhjU1R2eGxzNFBtNkRzbzNwZHZ0VXFkVUxsZTk2bHRxcXZLS3lza0t3NHQ5Vm9OU1o2M1BjNzgvMUZtOUc3DQpRM2h1Yi9GQ1ZHcVk4QTJ0bCtsU1h1blZhbkxlYXZjYllCVDBwZVMyY1dlcUgrcmlUY0ZDUVA1blJoYzRMMGMvY1p5dTVTSEtZUzF0DQpCNmlFZkMzdVVTWHhZNUNlL2VGWGlHdnZpaU50c2VhOVA2M1JQWllMaFkzTmF5ZTd0d1diN0x1UnFRb0hFZ0tYVGlDUThQOE5IdUpCDQpPOU5BT3VlTlhkcG01QUt3QjFLWVhBNk9NNXpDcHBYN1ZSbHVUSTZ1U3crOXdUaE5YbytFSFdiTnhXQ1d0RkphQlltT2xYcVl3WkU4DQpsU095RHZSNXRNbDh3VW9oQWdNQkFBR2phakJvTUIwR0ExVWREZ1FXQkJUTXpPL01LV0NrTzdHU3RqejZNbUtQckNVVk96QU1CZ05WDQpIUk1FQlRBREFRSC9NRGtHQkdjcUJ3QUVNVEF2TUMwQ0FRQXdDUVlGS3c0REFob0ZBREFIQmdWbktnTUFBQVFVQTV2d0loUC9sU2cyDQowOXlld0RMN01UcUtVV1V3RFFZSktvWklodmNOQVFFRkJRQURnZ0lCQUVDQVN2b215YzVlTU4xUGhuUjJXUFd1czRNemVLUjZkQmNaDQpUdWxTdGJuZ0NuUmlxbWpLZUtCTW1vNHNJeTdWYWhJa3Y5Um8wNHJRMkp5ZnRCOE0zamgrVnpqOGplSlBYZ3lmcXp2Uy8zV1h5NlRqDQpad2ovNWNBV3RVZ0JmZW41Q3Y4YjVXcHB2M2docU1Lbkk2bUdxM1pXNkE0TTloUGRLbWFLWkVrOUdoaUhrQVNmUWxLM1Q4ditSMEYyDQpOZS8vQUhZMlJUS2J4a2FGWGVJa3NCN2pTSmFZVjBlVVZYb1BRYkZFSlBQQi9ocHJ2NGo5d2FiYWsyQmVnVXFaSUp4SVpobTFBSGxVDQpEN2dzTDB1OHFWMWJZSCtNaDZYZ1VtTXF2dGc3aFVBVi9oNjJaVC9GUzlwK3RYbzFLYU11ZXBoZ0lxUDBmU2RPTGVxMGREenBENlF6DQpEeEFSdkJNQjF1VU8wNysxRXFMaFJTUEF6QWh1WWJlSnE0UGpKQjdtWFFmbkh5QSt6MmZJNTZ3d2JTZExhRzVMS2x3Q0NEVGIrSGJrDQpaNk1tbkQraU1zSkt4WUVZTVJCV3FvVHZMUXIvdUI5MzByK2xXS0JpNU5kTGtYV05pWUNZZm0zTFUwNWVyL2F5bDRXWHVkcFZCcmtrDQo3dGZHT0I1akd4STdsZUZZclBMZmhOVmZtUzhOVlZ2bU9Oc3VQM0xwU0lYTHV5a1RqeDQ0VmJuenNzUXdtU05PWGZKSW9SSU0zQktRDQpDWkJVa1FNOFIrWFZ5V1hndDB0OTdFZlRzd3Mrclo3UWRBQU82NzFScmNEZUxNRERhdjd2M0F1bitrYmZZTnVjcGxsUWRTTnBjNU95DQorZndDMDBmbWNjNFFBdTRuaklUL3JFVU5FMXlETXVBbHBZWXNmUFFTDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkZpcm1hcHJvZmVzaW9uYWwgUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVWekNDQXorZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRVUZBRENCblRFTE1Ba0dBMVVFQmhNQ1JWTXhJakFnQmdOVkJBY1QNCkdVTXZJRTExYm5SaGJtVnlJREkwTkNCQ1lYSmpaV3h2Ym1FeFFqQkFCZ05WQkFNVE9VRjFkRzl5YVdSaFpDQmtaU0JEWlhKMGFXWnANClkyRmphVzl1SUVacGNtMWhjSEp2Wm1WemFXOXVZV3dnUTBsR0lFRTJNall6TkRBMk9ERW1NQ1FHQ1NxR1NJYjNEUUVKQVJZWFkyRkENClptbHliV0Z3Y205bVpYTnBiMjVoYkM1amIyMHdIaGNOTURFeE1ESTBNakl3TURBd1doY05NVE14TURJME1qSXdNREF3V2pDQm5URUwNCk1Ba0dBMVVFQmhNQ1JWTXhJakFnQmdOVkJBY1RHVU12SUUxMWJuUmhibVZ5SURJME5DQkNZWEpqWld4dmJtRXhRakJBQmdOVkJBTVQNCk9VRjFkRzl5YVdSaFpDQmtaU0JEWlhKMGFXWnBZMkZqYVc5dUlFWnBjbTFoY0hKdlptVnphVzl1WVd3Z1EwbEdJRUUyTWpZek5EQTINCk9ERW1NQ1FHQ1NxR1NJYjNEUUVKQVJZWFkyRkFabWx5YldGd2NtOW1aWE5wYjI1aGJDNWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUINCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEbkl3TnZieU9sWG5qT2xTenRsQjV1Q3A0Qngrb3cwU3lkM1Rmb201aDVWdFA4YzkvUWl0NVYNCmoxSDVXdXJldFhERTdhVHQvNk1OYmc5a1VER3ZBU2RZcnY1c3Awb3ZGeTNUYzlVVEhJOVpwVFFzSFZRRVJjMW91S0RBQTZYUGhVSkgNCmxTaGJ6KytBYk9DUWw0b0JQQjN6aHhBd0praDkxL3pwblpGeC8wR2FxVUMxTjV3cElFOGZVdU9nZlJOdFZMY0szdWxxVGdlc3JCbGYNCjNINWlkUGF5QlFDNmhhRDlIVGh1eTFxN2hyeVVaek0xZ3l3Zkk4MzR5SkZ4ekplTDc2NFAzQ2tERzhBNTYzRHR3VzRPMkdjTGlhbTgNCk5lVHZ0alMwcGJiRUxhVyswTU9VSkVqYjM1YlRBTFZtR290bUJRL2RQei9MUDZwZW1rcjR0RXJ2bFRjYkFnTUJBQUdqZ1o4d2dad3cNCktnWURWUjBSQkNNd0lZWWZhSFIwY0RvdkwzZDNkeTVtYVhKdFlYQnliMlpsYzJsdmJtRnNMbU52YlRBU0JnTlZIUk1CQWY4RUNEQUcNCkFRSC9BZ0VCTUNzR0ExVWRFQVFrTUNLQUR6SXdNREV4TURJME1qSXdNREF3V29FUE1qQXhNekV3TWpReU1qQXdNREJhTUE0R0ExVWQNCkR3RUIvd1FFQXdJQkJqQWRCZ05WSFE0RUZnUVVNd3VnWnRIcTJzN2VZcE1FS0ZLMUZIODRhTGN3RFFZSktvWklodmNOQVFFRkJRQUQNCmdnRUJBRWR6L28wblZQRDExSGVjSjNsWFY3Y1ZWdXpIMkZpM0FRTDBNKzJUVUlpZWZFYXh2VDhVYi9HelIwaUxqSmNHMStwK28xd3ENCnUwMHZSK0w0T1FiSm5DNHhHZ040OUx3NHhpS0xNekh3RmdRRWZmbDI1RXZYd09hRDdGbk1QOTcvVDJ1M1ozNm1ob0V5SXdPZHlQZGYNCndVcGdwWktwc2FTZ1lNTjRoN01pOHlyclc2bnRCYXMzRDdIaTA1VjJZMVowakZoeUd6ZmxaS0crVFF5VG1BeVg5b2R0c3ovbnk0Q20NCjdZakhYMUJpQXVpWmRCYlE1clE1OFNmTHlFRFc0NFlRcVNNU2t1QnBRV09ucnlVTHdNV1N5eDZZbzFxNnhUTVBvSmNCM1gvZ2U5WUcNClZNK2g0azA0NjB0UXRjc205TXJhY0VwcW9lSjVxdUduTS9iOVNoLzIyV0E9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCldlbGxzIEZhcmdvIFJvb3QgQ0ENCj09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRDVUQ0NBczJnQXdJQkFnSUVPZVNYbmpBTkJna3Foa2lHOXcwQkFRVUZBRENCZ2pFTE1Ba0dBMVVFQmhNQ1ZWTXhGREFTQmdOVg0KQkFvVEMxZGxiR3h6SUVaaGNtZHZNU3d3S2dZRFZRUUxFeU5YWld4c2N5QkdZWEpuYnlCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodg0KY21sMGVURXZNQzBHQTFVRUF4TW1WMlZzYkhNZ1JtRnlaMjhnVW05dmRDQkRaWEowYVdacFkyRjBaU0JCZFhSb2IzSnBkSGt3SGhjTg0KTURBeE1ERXhNVFkwTVRJNFdoY05NakV3TVRFME1UWTBNVEk0V2pDQmdqRUxNQWtHQTFVRUJoTUNWVk14RkRBU0JnTlZCQW9UQzFkbA0KYkd4eklFWmhjbWR2TVN3d0tnWURWUVFMRXlOWFpXeHNjeUJHWVhKbmJ5QkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRFdg0KTUMwR0ExVUVBeE1tVjJWc2JITWdSbUZ5WjI4Z1VtOXZkQ0JEWlhKMGFXWnBZMkYwWlNCQmRYUm9iM0pwZEhrd2dnRWlNQTBHQ1NxRw0KU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFZxRE03SnZrMC84MmJmdVVFUjg0QTRuMTM1ekhDTGllbFRXaTVNYnFOUTFtWA0KeDNPcWZ6MWNRSjRGNWFIaWlkbE11RCtiK1F5MHlHSVpMRVd1a1I1emNVSEVTeFA5Y01JbHJDTDFkUXUzVStTbEs5M092Unc2ZXNQMw0KRTQ4bVZKd1dhMnV2KzlpV3NXQ2FTT0FsSWlSNU5NNE9KZ0FMVHF2OWk4NkMxeThJY0dqQnFBcjVkRThIcTZUNTRvTitKM04wUHJqNQ0KT0VMOHBhaGJTQ096NitNbHNvQ3VsdFFLbk1KNG1zWm9HSzQzWWpkZVVYV29XR1BBVWU1QWVINm9yeHFnNGJCNG5WQ01lK2V6L0k0ag0Kc050bEFIQ0VBUWdBRkc1VWhwcTZ6UGszRVBiZzNvUXRuYVNGTjlPSDR4WFF3UmVRZmhraGFoS3BkdjBTQXVsUElWNFhBZ01CQUFHag0KWVRCZk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d1RBWURWUjBnQkVVd1F6QkJCZ3RnaGtnQmh2dDdod2NCQ3pBeU1EQUdDQ3NHQVFVRg0KQndJQkZpUm9kSFJ3T2k4dmQzZDNMbmRsYkd4elptRnlaMjh1WTI5dEwyTmxjblJ3YjJ4cFkza3dEUVlKS29aSWh2Y05BUUVGQlFBRA0KZ2dFQkFOSW4zWndLZHl1N0l2SUN0VXBLa2ZuUkxiN2t1eHBvN3c2a0FPbnU1Ky91OXZubGRLVEMyRkpZeEhUN3ptdTFPeWw1R0Zydg0KbSswZmF6YnVTQ1VsRkxaV29oRG83cWQvMEQrajBNTmRKdTRIek1QQkpDR0hIdDhxRWxOdlFSYm43YTZVK294eStoTkg4RHgrcm4wUg0KT2hQczdmcHZjbVI3blgxL0p2MTYreVd0Nmo0cGYwempBRmN5c0xQcDdWTVgyWXV5RkE0dzZPWFZFOFprcjhRQTFkaFlKUHoxait6eA0KeDMybDJ3OG4wY2J5UUlqbUgvWmhxUFJDeUxrMzA2bStMRlo0d25LYldWMDFRSXJvVG1NYXR1a2dhbEhpenFTUTMzWndtVnh3UTAyMw0KdHFjWlpFNlN0OFdSUEg5SUZtVjdGdjNML1B2WjFkWlBJV1U3U245SG8vcz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KU3dpc3Njb20gUm9vdCBDQSAxDQo9PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRjJUQ0NBOEdnQXdJQkFnSVFYQXVGWEF2bldVSGZWOHcvZjUyb05qQU5CZ2txaGtpRzl3MEJBUVVGQURCa01Rc3dDUVlEVlFRRw0KRXdKamFERVJNQThHQTFVRUNoTUlVM2RwYzNOamIyMHhKVEFqQmdOVkJBc1RIRVJwWjJsMFlXd2dRMlZ5ZEdsbWFXTmhkR1VnVTJWeQ0KZG1salpYTXhHekFaQmdOVkJBTVRFbE4zYVhOelkyOXRJRkp2YjNRZ1EwRWdNVEFlRncwd05UQTRNVGd4TWpBMk1qQmFGdzB5TlRBNA0KTVRneU1qQTJNakJhTUdReEN6QUpCZ05WQkFZVEFtTm9NUkV3RHdZRFZRUUtFd2hUZDJsemMyTnZiVEVsTUNNR0ExVUVDeE1jUkdsbg0KYVhSaGJDQkRaWEowYVdacFkyRjBaU0JUWlhKMmFXTmxjekViTUJrR0ExVUVBeE1TVTNkcGMzTmpiMjBnVW05dmRDQkRRU0F4TUlJQw0KSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQTBMbXdxQXpadXo4aCtCdlZNNU9BRm1VZ2RiSTltMkJ0UnNpTQ0KTVc4WHcvcWFiRmJ0UE1XUlY4UE5xNVpKa0NvWlN4NmpiVmZkOFN0aUtIVkZYcXJXVy9vTEpkaWhGdmtjeEM3bWxTcG56TkFwYmp5Rg0KTkRoaFNiRUFuOVk2Y1Y5TmJjNWZ1YW5raVg5cVV2ckttL0xjcWZtZG1VYy9UaWxmdEthTlhYc0xtUkVEQS83bjI5dWoveDJselpBZQ0KQVI4MXNIOEEyNUJ2eG41NzBlNTZlcWVxREZkdnBHM0ZFenV3cGRudE1oeTBYbWVMVk54emgrWFRGM3htVUhKZDFCcFl3ZG5QMklrQw0KYjZkSnREWmQwS1RlQnl5MmRiY29rZGFYdmlqMW1CN3FXeWJKdmJDWGM5cXVrU2JyYU1INU9SWFdaMHNLYlUvTHo3RGtRbkdNVTNubg0KN3VIYkhhQnVIWXdhZHpWY0ZoNHJVeDgwaTlGcy9QSm5CM3IxcmUzV21xdWhzVXZoekRkZi9YL05UYTY0SDV4RCtTcFlWVU5GdkpiTg0KY0E3OHllTm11azZOTzRITEZXUjd1WlRvWFROU2hYRXVUNDZpQmhGUnllUExvVzR4Q0dRTXd0STg5VGJvMTlBT2VDTWdrY2trS21VcA0KV3lMM0ljNkRYcVR6M2t2VGFJOUdkVnlEQ1c0cGE4UndqUFdkMXlBdi8wYlNLempDTDNVY1BYN2FwZThlWUlWcFF0UE0rR1ArSGtNNQ0KaGFhMlkwRVFzM01ldk5QNnluMFdSK0tuMWRDamlnb0lsbUpXYmpUYjJRSzVNSFhqQk5Mbmo4S3dFVUFLck5WeEFtS0xNYjdkeGlOWQ0KTVVKRExYVDV4cDZtaWcvcC9yK0Q1a05YSkxydlJqU3ExeElCT08wQ0F3RUFBYU9CaGpDQmd6QU9CZ05WSFE4QkFmOEVCQU1DQVlZdw0KSFFZRFZSMGhCQll3RkRBU0JnZGdoWFFCVXdBQkJnZGdoWFFCVXdBQk1CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRY3dId1lEVlIwag0KQkJnd0ZvQVVBeVV2M20rQ0FUcGNMTndyb1dtMVo5U00wLzB3SFFZRFZSME9CQllFRkFNbEw5NXZnZ0U2WEN6Y0s2RnB0V2ZVak5QOQ0KTUEwR0NTcUdTSWIzRFFFQkJRVUFBNElDQVFBMUVNdnNwZ1FORFEvTndOdXJxUEtJbHd6Zmt5OU5mRUJXTVhycnBBOWd6WHJ6dnNNbg0KamdNK3BOMFM3MzRlZEFZOFB6SHlISHVSTVNHMDhOQnNsOVRwbDdJa1ZoNVd3elc5aUFVUFd4QWFaT0hIZ2pENU1xMmVVQ3puZUFYUQ0KTWJGYW1JcDFUcEJjYWhRcTRGSkhnbURtSHRxQnNmc1VDMXJ4bjlLVnVqN1FHOVlWSGFPK2h0WGJEOEJKWkxzdVVCbEwwaVQ0M1I0SA0KVnRBNG9KVndJSGFNMTkwZTNwOXh4Q1B2Z3hOY295UVZUU2xBUEdyRXFkaTNwa1NsRGZUZ25YY2VRSEFtL05yWk51UjU1TFUvdkp0bA0KdnJzUmxzL2J4aWc1T2dqT1IxdFRXc1daL2wycDNlOU0xTWFsclFMbWpBY1NIbThEMFcrZ28vTXB2UkxIVUtLd2Y0aXBtWGVhc2NDbA0KT1M1Y2ZHbmlMTERxTjJxazRWcmg5VkRsZysrbHV5cUk1NHpiL1cxZWx4bW9mbVoxYTNIcXY3SEhiNkQwanFUc05GRmJqQ1lEY0tGMw0KMVFFU1Z3QTEyeVBlRG9vb21mMnhFRzlML3pndFlFNHNuT3RudGExSjdrc2ZySy83RFpCYVptQndYYXJOZU5RazdzaEJvSk1Ca3B4cQ0KbnZ5NUpNV3pGWUordnE2VksrdXh3TnJqQVdBTFhtbXNoRlpodm5FWC9oMFRELzdHaDBYcC9qS2dHZzBUcEpSVmNhVVdpN3JLaWJDeQ0KeC95UDJGUzFrMktkenM5Wit6MFl6aXJMTlJXQ1hmOVVJbHR4VXZ1M3lmNWdtd0JCWlBDcUt1eTJRa1BPaVdhQnlJdWZPVlFESmRNVw0KTlk2RTBGLzZNQnIxbW16MERsUDVPbHZSSEE9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0ENCj09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEdHpDQ0FwK2dBd0lCQWdJUURPZmc1UmZZUnY2UDVXRDhHL0F3T1RBTkJna3Foa2lHOXcwQkFRVUZBREJsTVFzd0NRWURWUVFHDQpFd0pWVXpFVk1CTUdBMVVFQ2hNTVJHbG5hVU5sY25RZ1NXNWpNUmt3RndZRFZRUUxFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU1F3DQpJZ1lEVlFRREV4dEVhV2RwUTJWeWRDQkJjM04xY21Wa0lFbEVJRkp2YjNRZ1EwRXdIaGNOTURZeE1URXdNREF3TURBd1doY05NekV4DQpNVEV3TURBd01EQXdXakJsTVFzd0NRWURWUVFHRXdKVlV6RVZNQk1HQTFVRUNoTU1SR2xuYVVObGNuUWdTVzVqTVJrd0Z3WURWUVFMDQpFeEIzZDNjdVpHbG5hV05sY25RdVkyOXRNU1F3SWdZRFZRUURFeHRFYVdkcFEyVnlkQ0JCYzNOMWNtVmtJRWxFSUZKdmIzUWdRMEV3DQpnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDdERoWE81RU9BWExHSDg3ZGcrWEVTcGE3Y0pwU0lxdlRPDQo5U0E1S0ZoZ0RQaUEycWtWbFRKaFBMV3hLSVNLaXR5ZkNneURGM3FQa0t5SzUzbFRYREdFS3ZZUG1ESTJkc3plM1R5b291OXEreUh5DQpVbUhmbnlEWEgrS3gyZjRZWk5JU1cxLzVXQmcxdkVmTm9UYjVhMy9Vc0RnK3dSdkRqRFBaMkM4WS9pZ1BzNmVEMXNOdVJNQmhOWllXDQovbG1jaTNadDEvR2lTdzByL3d0eTJwNWcwSTZRTmNaNFZZY2dvYy9sYlFySVNYd3htRE5zSXVtSDBESmFvcm9UZ2hIdE9SZWRtVHB5DQpvZWI2cE5uVkZ6RjFyb1Y5SXE0L0FVYUc5aWg1eUxIYTVGY1h4SDRjRHJDMGtxWldzNzJ5bCsycXAvQzN4YWcvbFJiUS82R1c2d2hmDQpHSGRQQWdNQkFBR2pZekJoTUE0R0ExVWREd0VCL3dRRUF3SUJoakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlJGDQo2Nkt2OUpMTGdqRXRVWXVucHlHZDgyM0lEekFmQmdOVkhTTUVHREFXZ0JSRjY2S3Y5SkxMZ2pFdFVZdW5weUdkODIzSUR6QU5CZ2txDQpoa2lHOXcwQkFRVUZBQU9DQVFFQW9nNjgzK0x0OE9OeWMzcGtsTC8zY21iWU11UkNkV0t1aCt2eTFkbmVWck9mek00VUtMa05sMkJjDQpFa3hZNU5NOWcwbEZXSmMxYVJxb1IrcFd4bm1yRXRobmdZVGZmd2s4bE9hNEppd2d2VDJ6S0luM1gvOGk0cGVFSCtsbDc0ZmczOEZuDQpTYk5kNjdJSkt1c203WGkrZlQ4cjg3Y21OVzFmaVFHMlNWdWZBUVdicXowbHdjeTJmOEx4YjRiRyttUm82NEV0bE90Q3QvcU1IdDFpDQo4YjVRWjdkc3ZmUHhIMnNNTmdjV2Z6ZDhxVnR0ZXZFU1JtQ0QxeWNFdmt2T2w3N0RaeXBvRWQrQTV3d3pacjhURFJSdTgzOGZZeEFlDQorbzBiSlcxc2o2VzNZUUd4MHFNbW9SQnhuYTNpdy9uRG1WRzNLd2NJemk3bVVMS24rZ3BGTDZMdzhnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRGlnaUNlcnQgR2xvYmFsIFJvb3QgQ0ENCj09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURyekNDQXBlZ0F3SUJBZ0lRQ0R2Z1ZwQkNSckdoZFdySldaSEhTakFOQmdrcWhraUc5dzBCQVFVRkFEQmhNUXN3Q1FZRFZRUUcNCkV3SlZVekVWTUJNR0ExVUVDaE1NUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1TQXcNCkhnWURWUVFERXhkRWFXZHBRMlZ5ZENCSGJHOWlZV3dnVW05dmRDQkRRVEFlRncwd05qRXhNVEF3TURBd01EQmFGdzB6TVRFeE1UQXcNCk1EQXdNREJhTUdFeEN6QUpCZ05WQkFZVEFsVlRNUlV3RXdZRFZRUUtFd3hFYVdkcFEyVnlkQ0JKYm1NeEdUQVhCZ05WQkFzVEVIZDMNCmR5NWthV2RwWTJWeWRDNWpiMjB4SURBZUJnTlZCQU1URjBScFoybERaWEowSUVkc2IySmhiQ0JTYjI5MElFTkJNSUlCSWpBTkJna3ENCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNGp2aEVYTGVxS1RUbzFlcVVLS1BDM2VReWFLbDdoTE9sbHNCQ1NETUFaT24NClRqQzNVL2REeEdrQVY1M2lqU0xkaHdaQUFJRUp6czRiZzcvZnpUdHhSdUxXWnNjRnMzWW5Gbzk3bmg2VmZlNjNTS01JMnRhdmVndzUNCkJtVi9TbDBmdkJmNHE3N3VLTmQwZjNwNG1WbUZhRzVjSXpKTHYwN0E2RnB0NDNDL2R4Qy8vQUgyaGRtb1JCQllNcWwxR05YUm9yNUgNCjRpZHE5Sm96K0VrSVlJdlVYN1E2aEwraHFrcE1mVDdQVDE5c2RsNmdTemVSbnR3aTVtM09GQnFPYXN2K3piTVVaQmZIV3ltZU1yL3kNCjd2clRDMExVcTdkQk10b00xTy80Z2RXN2pWZy90UnZvU1NpaWNOb3hCTjMzc2hieVRBcE9CNmp0U2oxZXRYK2prTU92SndJREFRQUINCm8yTXdZVEFPQmdOVkhROEJBZjhFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVBOTVRTlZiUlRMdG0NCjhLUGlHeHZEbDdJOTBWVXdId1lEVlIwakJCZ3dGb0FVQTk1UU5WYlJUTHRtOEtQaUd4dkRsN0k5MFZVd0RRWUpLb1pJaHZjTkFRRUYNCkJRQURnZ0VCQU11Y042cElFeElLK3QxRW5FOVNzUFRmcmdUMWVYa0lveVFZL0VzcmhNQXR1ZFhIL3ZUQkgxakx1RzJjZW5Ubm1DbXINCkViWGpjS0NoelV5SW1aT01rWERpcXc4Y3ZwT3AvMlBWNUFkZzA2Ty9uVnNKOGRXTzQxUDBqbVA2UDZmYnRHYmZZbWJXMFc1QmpmSXQNCnRlcDNTcCtkV09JcldjQkFJKzB0S0lKRlBubFVraWFZNElCSXFEZnY4Tlo1WUJiZXJPZ096VzZzUkJjNEwwbmE0VVUrS3JrMlU4ODYNClVBYjNMdWpFVjBsc1lTRVkxUVN0ZUR3c09vQnJwK3V2RlJUcDJJbkJ1VGhzNHBGc2l2OWt1WGNsVnpEQUd5U2o0ZHpwMzBkOHRiUWsNCkNBVXc3QzI5Qzc5RnYxQzVxZlBybUFFU3JjaUl4cGcwWDQwS1BNYnAxWldWYmQ0PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpEaWdpQ2VydCBIaWdoIEFzc3VyYW5jZSBFViBSb290IENBDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUR4VENDQXEyZ0F3SUJBZ0lRQXF4Y0ptb0xRSnVQQzNueXJrWWxkekFOQmdrcWhraUc5dzBCQVFVRkFEQnNNUXN3Q1FZRFZRUUcNCkV3SlZVekVWTUJNR0ExVUVDaE1NUkdsbmFVTmxjblFnU1c1ak1Sa3dGd1lEVlFRTEV4QjNkM2N1WkdsbmFXTmxjblF1WTI5dE1Tc3cNCktRWURWUVFERXlKRWFXZHBRMlZ5ZENCSWFXZG9JRUZ6YzNWeVlXNWpaU0JGVmlCU2IyOTBJRU5CTUI0WERUQTJNVEV4TURBd01EQXcNCk1Gb1hEVE14TVRFeE1EQXdNREF3TUZvd2JERUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREVScFoybERaWEowSUVsdVl6RVoNCk1CY0dBMVVFQ3hNUWQzZDNMbVJwWjJsalpYSjBMbU52YlRFck1Da0dBMVVFQXhNaVJHbG5hVU5sY25RZ1NHbG5hQ0JCYzNOMWNtRnUNClkyVWdSVllnVW05dmRDQkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFNYk01WFBtKzlTNzVTMHQNCk1xYmY1WUUveWMwbFNiWnhLc1BWbERSbm9nb2NzRjlwcGtDeHhMZXlqOUNZcEtsQldUclQzSlRXUE50ME9LUkt6RTBsZ3ZkS3BWTVMNCk9PN3pTVzF4a1g1anRxdW1YOE9raFBoUFlsRysrTVhzMnppUzR3YmxDSkVNeENoQlZmdkxXb2tWZm5Ib05iOU5jZ2s5dmpvNFVGdDMNCk1SdU5zOGNrUlpxbnJHMEFGRm9FdDdvVDYxRUttRUZCSWs1bFlZZUJRVkNtZVZ5SjNobEtWOVV1NWwwY1V5eCttTTBhQmhha2FIUFENCk5BUVRYS0Z4MDFwOFZkdGVaT0UzaHpCV0JPVVJ0Q21BRXZGNU9ZaWlBaEY4SjJhM2lMZDQ4c29LcURpckNtVEN2MlpkbFlUQm9TVWUNCmgxMGFVQXNnRXN4QnUyNExVVGk0UzhzQ0F3RUFBYU5qTUdFd0RnWURWUjBQQVFIL0JBUURBZ0dHTUE4R0ExVWRFd0VCL3dRRk1BTUINCkFmOHdIUVlEVlIwT0JCWUVGTEUrdzJrRCtMOUhBZFNZSmhvSUF1OWpaQ3ZETUI4R0ExVWRJd1FZTUJhQUZMRSt3MmtEK0w5SEFkU1kNCkpob0lBdTlqWkN2RE1BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQWNHZ2FYM05lY256eUlaZ1lJVnlIYklVZjRLbWVxdnhneWRrQVENClY4R0s4M3JaRVdXT05mcWUvRVcxbnRsTU1VdTRrZWhETEk2emVNN2I0MU41Y2RibElaUUIybFdIbWlSazlvcG16TjZjTjgyb05MRnANCm15UElubmdpSzNCRDQxVkhNV0VaNzFqRmhTOU9NUGFnTVJZanlPZmlaUll6eTc4YUc2QTkrTXBlaXpHTFlBaUpMUXdHWEZLM3hQa0sNCm1ORVZYNThTdm53Mll6aTlSS1IvNUNZckNzU1hhUTNwak9MQUVGZTR5SFlTa1ZYeVNHbll2Q29DV3c5RTFDQXgyL1M2Y0NaZGtHQ2UNCnZFc1hDUysweXg1RGFNa0hKOEhTWFBmcUlibG9FcHc4bkwrZS9JQmNtMlBON0VlcUpTZG5vRGZ6QUlKOVZOZXArT2t1RTZOMzZCOUsNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ2VydHBsdXMgQ2xhc3MgMiBQcmltYXJ5IENBDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRGtqQ0NBbnFnQXdJQkFnSVJBSVc5Uy9QWTJ1TnA5cFRYWDhPbFJDTXdEUVlKS29aSWh2Y05BUUVGQlFBd1BURUxNQWtHQTFVRQ0KQmhNQ1JsSXhFVEFQQmdOVkJBb1RDRU5sY25Sd2JIVnpNUnN3R1FZRFZRUURFeEpEYkdGemN5QXlJRkJ5YVcxaGNua2dRMEV3SGhjTg0KT1Rrd056QTNNVGN3TlRBd1doY05NVGt3TnpBMk1qTTFPVFU1V2pBOU1Rc3dDUVlEVlFRR0V3SkdVakVSTUE4R0ExVUVDaE1JUTJWeQ0KZEhCc2RYTXhHekFaQmdOVkJBTVRFa05zWVhOeklESWdVSEpwYldGeWVTQkRRVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUA0KQURDQ0FRb0NnZ0VCQU54UWx0QVMrRFhTQ0hoNnRsSncvVy91ejdrUnkxMTM0ZXpwZmdTTjFzeHZjME5YWUt3ekNrVHNBMThjZ0NTUg0KNWFpUlZoS0M5K0FyOU51dVlTNkpFSTFyYkxxekFyM1ZOc1ZJTnlQaThGbzNVak1YRXVMUllFMitMMEVSNC9ZWEpReUxrY0FibVh1Wg0KVmcydjd0SzhSMWZqZVVsN05Ja25KSVRlc2V6cFdFNytUdDlhdmtHdHJBakZHQTd2MGxQdWJOQ2RFZ0VUamR5QVl2ZVZxVVNJU25GTw0KWUZXZTJ5TVplVllIREQ5akMxeXc0cjUrRmZ5VU0xaEJPSFRFNFkrTDN5YXNIN1dMTzdkRFdXdXdKS1p0a0l2RWN1cGRNNWkzeTk1ZQ0KZSsrVThScyt5c2tod2NXWUFxcWk5bHQzbS9WK2xsVTBIR2Rwd1BGQzQwZXMvQ2djWmxVQ0F3RUFBYU9CakRDQmlUQVBCZ05WSFJNRQ0KQ0RBR0FRSC9BZ0VLTUFzR0ExVWREd1FFQXdJQkJqQWRCZ05WSFE0RUZnUVU0M010MzhzT0tBemUzYk9reW5tNGpydm9NSWt3RVFZSg0KWUlaSUFZYjRRZ0VCQkFRREFnRUdNRGNHQTFVZEh3UXdNQzR3TEtBcW9DaUdKbWgwZEhBNkx5OTNkM2N1WTJWeWRIQnNkWE11WTI5dA0KTDBOU1RDOWpiR0Z6Y3pJdVkzSnNNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUUNuVk0rSVJCbkwzOVIvQU45V00ySzE5MUVCa092RA0KUDlHSVJPa2tYZS9uRkwwZ3Q1bzhBUDV0bjl1UTNOZjBZdGFMY0YzbjVRUklxV2g4eWZGQzgyeC94WHA4SFZHSXV0SUtQaWRkM2kxUg0KVHRNVFpHbmtMdVBUNTVzSm1hYmdsWnZPR3RkL3Zqek9Vck1SRmNFUEY4MER1NXdsRmJxaWRvbjhCdkVZMEpOTERueUN0NlgwOWwvKw0KN1VDbW5ZUjBPYm5jSG9VVzJpa2JoaU1BeWJ1SmZtNkFpQjR2RkxRREpLZ3lid09hUnl3d3ZsYkdwMElDY0J2cVFOaTZCUU53QjZTVw0KLy8xSU13cmgzS1dCa0p0TjNYM241N0xOWE1ocWxmaWw5bzNFWFhnSXZuc0cxa25QR1RaUUl5NEk1cDRGVFVjWTFSYnBzZGEyRU5XNw0KbDcraWpyUlUNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRFNUIFJvb3QgQ0EgWDMNCj09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURTakNDQWpLZ0F3SUJBZ0lRUksrd2dOYWpKN3FKTURtR0x2aEFhekFOQmdrcWhraUc5dzBCQVFVRkFEQS9NU1F3SWdZRFZRUUsNCkV4dEVhV2RwZEdGc0lGTnBaMjVoZEhWeVpTQlVjblZ6ZENCRGJ5NHhGekFWQmdOVkJBTVREa1JUVkNCU2IyOTBJRU5CSUZnek1CNFgNCkRUQXdNRGt6TURJeE1USXhPVm9YRFRJeE1Ea3pNREUwTURFeE5Wb3dQekVrTUNJR0ExVUVDaE1iUkdsbmFYUmhiQ0JUYVdkdVlYUjENCmNtVWdWSEoxYzNRZ1EyOHVNUmN3RlFZRFZRUURFdzVFVTFRZ1VtOXZkQ0JEUVNCWU16Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQUQNCmdnRVBBRENDQVFvQ2dnRUJBTit2NlpkUUNJTlh0TXhpWmZhUWd1ekgweXhyTU1wYjdObkRmY2RBd1JnVWkrRG9NM1pKS3VNL0lVbVQNCnJFNE9yejVJeTJYdS9OTWhEMlhTS3RreWo0emw5M2V3RW51MWxjQ0pvNm02N1hNdWVnd0dNb09pZm9vVU1NMFJvT0VxT0xsNUNqSDkNClVMMkFaZCszVVdPRHlPS0lZZXBMWVlIc1VtdTVvdUpMR2lpZlNLT2VETm9Kamo0WExoN2RJTjlieGlxS3F5NjljSzNGQ3hvbGtIUnkNCnhYdHFxelRXTUluLzVXZ1RlMVFMeU5hdTdGcWNraDQ5WkxPTXh0Ky95VUZ3N0JaeTFTYnNPRlU1UTlEOC9SaGNRUEdYNjlXYW00MGQNCnV0b2x1Y2JZMzhFVkFqcXIybTd4UGk3MVhBaWNQTmFEYWVRUW14a3F0aWxYNCtVOW01L3dBbDBDQXdFQUFhTkNNRUF3RHdZRFZSMFQNCkFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd0hRWURWUjBPQkJZRUZNU25zYVI3TEhINjIrRkxrSFgveEJWZ2hZa1ENCk1BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQ2pHaXliRndCY3FSN3VLR1kzT3IrRHh6OUx3d21nbFNCZDQ5bFpSTkkrRFQ2OWlrdWcNCmRCL09FSUtjZEJvZGZwZ2EzY3NUUzdNZ1JPU1I2Y3o4ZmFYYmF1WCs1djNnVHQyM0FEcTFjRW12OHVYckF2SFJBb3NaeTVRNlhrakUNCkdCNVlHVjhlQWxyd0RQR3hyYW5jV1lhTGJ1bVI5WWJLK3JsbU02cFpXODdpcHhaelI4c3J6Sm13TjBqUDQxWkw5YzhQREhJeWg4YncNClJMdFRjbTFEOVNaSW1sSm50MWlyL21kMmNYamJEYUpXRkJNNUpER0ZvcWdDV2pCSDRkMVFCN3dDQ1pBQTYyUmpZSnNXdklqSkV1YlMNCmZaR0wrVDB5aldXMDZYeXhWM2JxeGJZb09iOFZaUnpJOW5lV2FncU5kd3ZZa1FzRWpnZmJLYllLN3AyQ05UVVENCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRFNUIEFDRVMgQ0EgWDYNCj09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVDVENDQXZHZ0F3SUJBZ0lRRFY2WkN0YWR0M2pzMkFkV080WVYyVEFOQmdrcWhraUc5dzBCQVFVRkFEQmJNUXN3Q1FZRFZRUUcNCkV3SlZVekVnTUI0R0ExVUVDaE1YUkdsbmFYUmhiQ0JUYVdkdVlYUjFjbVVnVkhKMWMzUXhFVEFQQmdOVkJBc1RDRVJUVkNCQlEwVlQNCk1SY3dGUVlEVlFRREV3NUVVMVFnUVVORlV5QkRRU0JZTmpBZUZ3MHdNekV4TWpBeU1URTVOVGhhRncweE56RXhNakF5TVRFNU5UaGENCk1Gc3hDekFKQmdOVkJBWVRBbFZUTVNBd0hnWURWUVFLRXhkRWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkREVSTUE4R0ExVUUNCkN4TUlSRk5VSUVGRFJWTXhGekFWQmdOVkJBTVREa1JUVkNCQlEwVlRJRU5CSUZnMk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0MNCkFROEFNSUlCQ2dLQ0FRRUF1VDMxTE1tVTNIV0tsVjFqNklSM2RtYTVXWkZjUnQyU1BwLzVEZ08wUFdHU3ZTTW10V1B1a3RLZTFqekkNCkRaQmZaSUd4cUFnTlROajUwd1VvVXJRQkpjV1ZIQXgrUGhDRWRjL0JHWkZqeitpb2tZaTVRMUs3Z0xGVmlZc3grdEMzZHI1QlBUQ2ENCnBDSWxGM1BvSHVMVHJDcTlXemdoMVNwTDExVjk0enBWdmRkdGF3SlhhK1pIZkFqSWdycmVwNGM5b1cyNE1GYkNzd0tCWHkzMTRwb3cNCkdDaTRadFBMQVpadjZvcEZWZGJnbmY5bkt4Y0NwazRhYWhFTGZyZDc1NWpXakhadndUdmJVSk4rNWRDT0h6ZTR2YnJHbjJ6cGZEUHkNCk1qd21SL29uSkFMSmZoMWJpRUlUYWpWOGZUWHBMbWFSY3BQVk1pYkVkUFZUbzdOZG12WUp5d0lEQVFBQm80SElNSUhGTUE4R0ExVWQNCkV3RUIvd1FGTUFNQkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdIR01COEdBMVVkRVFRWU1CYUJGSEJyYVMxdmNITkFkSEoxYzNSa2MzUXUNClkyOXRNR0lHQTFVZElBUmJNRmt3VndZS1lJWklBV1VEQWdFQkFUQkpNRWNHQ0NzR0FRVUZCd0lCRmp0b2RIUndPaTh2ZDNkM0xuUnkNCmRYTjBaSE4wTG1OdmJTOWpaWEowYVdacFkyRjBaWE12Y0c5c2FXTjVMMEZEUlZNdGFXNWtaWGd1YUhSdGJEQWRCZ05WSFE0RUZnUVUNCkNYSUdUaGhERCtYV3pNTnFpekY3ZUkrb2c3Z3dEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBS1BZanRheTI4NEY1ekxOQWRNRUErVjINCjVGWXJuSm1RNkFnd2JOOTlQZTdsdjdVa1FJUko0ZEVvcnNUQ09sTXdpUEgxZDI1Unl2ci9tYThrWHh1Zy9mS3NoTXJmcWZCZkJDNnQNCkZyOGhseENCUGVQL2g0MHkzSlRsUjRwZWFoUEpsSlU5MHU3SU5KWFFnTlN0TWdpQVZEemd2VkpUMTFKOHNtay9mM3JQYW5USytnUXENCm5FeGFCcVhwSUsxRlpnOXA4ZDIvNmVNeWkvcmd3WVpOY2p3dTJKTjRDaXI0Mk5JblBSbUpYMXA3aWp2TUROcFJyc2NMOXl1d053WHMNCnZGY2o0ampTbTJqelZoS0lUMEo4dURIRXRkdmt5Q0UwNlVnUk5lNzZ4NUpYeFo4MDVNZjI5dzRMVEp4b2VIdHhNY2ZySHVCblFmTzMNCm9LZk41WG96Tm1yNm1pcz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KVFVSS1RSVVNUIENlcnRpZmljYXRlIFNlcnZpY2VzIFByb3ZpZGVyIFJvb3QgMQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEK3pDQ0F1T2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURDQnR6RS9NRDBHQTFVRUF3dzJWTU9jVWt0VVVsVlRWQ0JGDQpiR1ZyZEhKdmJtbHJJRk5sY25ScFptbHJZU0JJYVhwdFpYUWdVMkhFbjJ4aGVjU3hZOFN4YzhTeE1Rc3dDUVlEVlFRR0RBSlVVakVQDQpNQTBHQTFVRUJ3d0dRVTVMUVZKQk1WWXdWQVlEVlFRS0RFMG9ZeWtnTWpBd05TQlV3NXhTUzFSU1ZWTlVJRUpwYkdkcElNU3diR1YwDQphY1dmYVcwZ2RtVWdRbWxzYWNXZmFXMGdSOE84ZG1WdWJHbkVuMmtnU0dsNmJXVjBiR1Z5YVNCQkxzV2VMakFlRncwd05UQTFNVE14DQpNREkzTVRkYUZ3MHhOVEF6TWpJeE1ESTNNVGRhTUlHM01UOHdQUVlEVlFRREREWlV3NXhTUzFSU1ZWTlVJRVZzWld0MGNtOXVhV3NnDQpVMlZ5ZEdsbWFXdGhJRWhwZW0xbGRDQlRZY1NmYkdGNXhMRmp4TEZ6eExFeEN6QUpCZ05WQkFZTUFsUlNNUTh3RFFZRFZRUUhEQVpCDQpUa3RCVWtFeFZqQlVCZ05WQkFvTVRTaGpLU0F5TURBMUlGVERuRkpMVkZKVlUxUWdRbWxzWjJrZ3hMQnNaWFJweFo5cGJTQjJaU0JDDQphV3hweFo5cGJTQkh3N3gyWlc1c2FjU2ZhU0JJYVhwdFpYUnNaWEpwSUVFdXhaNHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DDQpBUThBTUlJQkNnS0NBUUVBeWxJRjFtTUQyQnhmM2RKN1hmSU1ZR0ZiYXp0MEszZ05mVVc5SW5Ub2pBUEJ4aEVxUFpXOHFaU3d1NUdYDQp5R2w4aE1XMGtXeHNFMnFrVmEya2hlaVZmck1BcndEQ0JSajFjSjAyaTY3TDVCdUJmNU9JKzJwVnUzMkZrczY2V0ovYk1zVzlYZThpDQpTaTlCQjM1SlliT0c3RTZtUVc2RXZBUHM5VHNjeUIvQzdxanU2aEpLalJUUDh3cmdVRG41Q0RYNEVWbXQ1eUxxUzhvVUJ0NUN1cktaDQo4eTFVaUJBRzZ1RWFQajFuSC92TyszeUM2QkZkU3NHNUZPcFUyV2FiZklsOUJKcGl5ZWxTUEo2Yzc5TDFKdVRtNVJoOGkyN2ZiTXg0DQpXMDl5c3N0Y1A0d0ZqZEZNaksyU3grRjRmMlZzU1FaUUxKNHl3dGRLeG5XS1dVNTFiMGRld1FJREFRQUJveEF3RGpBTUJnTlZIUk1FDQpCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQVY5VlgvTjVhQVdTR2svS0VWVENEMjFGL2FBeVQ4ejVBYTlDRUttdTQ2DQpzV3J2Ny9oZzBVdzJaa1VkODJZQ2RBUjdrakNvM2dwMkQrK1ZicjNKTitZYURheUpTRnZNZ3piQzlVWmNXWUpXdE5YK0k3VFlWQnhFDQpxOFNuNVJUT1BFRmhmRVBtemNTQkNZc2srMVFsMWhhb2xneG5CMit6VUVmakhDUW8zU3FZcEdIKzIrb1NON3dCR2pTRnZXNVA1NUZ5DQpCMFNGSGxqS1ZFVGQ5Nnk1eTRraGN0dVB3R2twbHlxanJoZ2pseHhCS290OEtzRjhrT2lwS01EVGtjYXRLSWRBYUxYLzdLZlMwemdZDQpuTk45YVYzd3hxVWVKQnVqUi94cEIyam41SnEwN1EraGg0Y0N6b2ZTU0U3aHZQL0w4WEtTUkdRREplcmVXMjZmeWZKT3JOM0gNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KVFVSS1RSVVNUIENlcnRpZmljYXRlIFNlcnZpY2VzIFByb3ZpZGVyIFJvb3QgMg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFUERDQ0F5U2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURDQnZqRS9NRDBHQTFVRUF3dzJWTU9jVWt0VVVsVlRWQ0JGDQpiR1ZyZEhKdmJtbHJJRk5sY25ScFptbHJZU0JJYVhwdFpYUWdVMkhFbjJ4aGVjU3hZOFN4YzhTeE1Rc3dDUVlEVlFRR0V3SlVVakVQDQpNQTBHQTFVRUJ3d0dRVzVyWVhKaE1WMHdXd1lEVlFRS0RGUlV3NXhTUzFSU1ZWTlVJRUpwYkdkcElNU3diR1YwYWNXZmFXMGdkbVVnDQpRbWxzYWNXZmFXMGdSOE84ZG1WdWJHbkVuMmtnU0dsNmJXVjBiR1Z5YVNCQkxzV2VMaUFvWXlrZ1MyRnp4TEZ0SURJd01EVXdIaGNODQpNRFV4TVRBM01UQXdOelUzV2hjTk1UVXdPVEUyTVRBd056VTNXakNCdmpFL01EMEdBMVVFQXd3MlZNT2NVa3RVVWxWVFZDQkZiR1ZyDQpkSEp2Ym1scklGTmxjblJwWm1scllTQklhWHB0WlhRZ1UySEVuMnhoZWNTeFk4U3hjOFN4TVFzd0NRWURWUVFHRXdKVVVqRVBNQTBHDQpBMVVFQnd3R1FXNXJZWEpoTVYwd1d3WURWUVFLREZSVXc1eFNTMVJTVlZOVUlFSnBiR2RwSU1Td2JHVjBhY1dmYVcwZ2RtVWdRbWxzDQphY1dmYVcwZ1I4TzhkbVZ1YkduRW4ya2dTR2w2YldWMGJHVnlhU0JCTHNXZUxpQW9ZeWtnUzJGenhMRnRJREl3TURVd2dnRWlNQTBHDQpDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3BObjdEa1VOTXd4bVlDTWpIV0h0UEZveWx6a2tCSDNNT3JIVVRwdnFlDQpMQ0RlMkpBT0N0RnAwaWY3cW5lZkoxSWw0c3RkMk5pRFVCZDlpcldDUHdTT3ROWHdTYWRrdHg0dVh5Q2NVSFZQcitHMVFSVDBtSktJDQp4K1hsWkVkaFIzbjl3Rkh4d1pubjNNNXErNisxQVREY1JoenZpdXlWNzl6L3J4QWM2NTNZc0twcWhSZ05GOGsrdi9HYjBBbUpRdjJnDQpRclNkaVZGVktjOGJjTHlFVkszQkV4K1k5QzUyWUl0ZFA1cXR5Z3kvcDFaYmozZTQxWjU1U1pJLzRQR1hKSHBzbXhjUGJlOVRtSkVyDQo1QSsrV1hrSGVMdVhsZlNmYWRSWWh3cXA0OHkyV0JtZkppR3h4Rm1Oc2tGMXdLMXB6cHdBQ1BJMi96N3dvUThhckJUOXBtQVBBZ01CDQpBQUdqUXpCQk1CMEdBMVVkRGdRV0JCVFpON05PQmYzWno1OFNGcTYyaVMvckpUcUlIREFQQmdOVkhROEJBZjhFQlFNREJ3WUFNQThHDQpBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFISmdscmZKM05ncFhpT0ZYN0t6TFhiN2lOY1gvbnR0DQpSYmoyaFd5Zkl2d3FFQ0xzcXJrdzlxdFkxamtRTVprcEFMMkpaa0g3ZE42UndSZ0xuN1ZoeTUwNnZ2V29sS01pVlc0WFNmL1NLZkU0DQpKbDN2cGFvNitYRjc1dHBZSGROMHdnSDZQbWxZWDYzTGFMNFVMcHRzd0xiY29DYjZkeHJpSk5vYU4rQm5yZEZ6Z3cybEdoMXVFcEorDQpoR0lBRjcyOEpSaFg4dGVwYjFtSXZEUzNMb1Y0blpiY0ZNTXNpbEtibG94U1pqMkdGb3RIdUZFSmpPcDl6WWh5czJBenNmQUtSTzhQDQo5UWszaUNRT0xHc2dPcUw2RWZKQU5aeEVhR003ckROdlk3d3N1L0xTeTNaOWZZallIY2dGSFc2OGxLbG1qSGR4eC9xUitpOVJudWs1DQpVcmJuQkVJPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpTd2lzc1NpZ24gR29sZCBDQSAtIEcyDQo9PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUZ1akNDQTZLZ0F3SUJBZ0lKQUx0QUhFUDFYayt3TUEwR0NTcUdTSWIzRFFFQkJRVUFNRVV4Q3pBSkJnTlZCQVlUQWtOSU1SVXcNCkV3WURWUVFLRXd4VGQybHpjMU5wWjI0Z1FVY3hIekFkQmdOVkJBTVRGbE4zYVhOelUybG5iaUJIYjJ4a0lFTkJJQzBnUnpJd0hoY04NCk1EWXhNREkxTURnek1ETTFXaGNOTXpZeE1ESTFNRGd6TURNMVdqQkZNUXN3Q1FZRFZRUUdFd0pEU0RFVk1CTUdBMVVFQ2hNTVUzZHANCmMzTlRhV2R1SUVGSE1SOHdIUVlEVlFRREV4WlRkMmx6YzFOcFoyNGdSMjlzWkNCRFFTQXRJRWN5TUlJQ0lqQU5CZ2txaGtpRzl3MEINCkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXIrVHVmb3NrRGhKdXFWQXRGa1E3a3BKY3lyaGRoSkpDRXlxOFpWZUNRRDVYSk0xUWl5VXENCnQyLzg3NkxRd0I4Q0pFb1RsbzhqRStZb1dBQ2pSOGNHcDRRaks3dTlsaXQvVmN5THdWY2ZEbUpsRDkwOVZvcHoycTUrYmJxQkhINUMNCmpDQTEyVU5OaFBxRTIxSXM4dzRuZHd0cnZ4RXZjbmlmTHRnKzVoZzNXaXB5K2RwaWtKS1Z5aCtjNmJNOEs4dnpBUk8vV3MvQnRRcGcNCnZkMjFtV1JUdUtDV3MyL2lKbmVSak9CaUVBS2ZOQStrMVpJelVkNitqYnFFZW1BOGF0dWZLK3plM2dFL2JrM2xVSWJMdEsvdFJFREYNCnlscU0ydElyZktqdXZxYmxDcW9PcGQ4RlVyZFZ4eUpkTW1xWGwyTVQyOG5iZVRaN2hUcEt4VktKK1NUbm5YZXBndjlWSEtWeGFTdlINCkFpVHlzeWJVYTlvRVZlWEJDc2R0TURlUUt1U2VGRE5lRmhkVnhWdTF5elNKa3ZHZEpvK2hCOVRHc25oUTJ3d01DM3dMakVIWHVlbmQNCmpJajNvMDJ5TXN6WUY5ck50ODVtbmRUOVh2KzlsejRwZGVkK3AySllyeVUwcFVISFBid05VTW9EQXc4SVdoK1ZjM2hpdjY5eUZHa08NCnBlVUREbmlPSmloQzhBY0xZaUFRWnpsRytxa0R6QVE0ZW1idklJTzFqRXBXanBFQS9JNWNndDZJb01QaWFHNTlqZTg4M1dYMFhheFINCjd5U0FycXBXbDIvNXJYM2FZVCtZZHp5bGtiWWNqQ2JhWmFJSmJjSGlWT081eWt4TWdJOTNlMkNhSHQrMjhrZ2VEcnBPVkcyWTRPR2kNCkdxSjNVTS9FWTVMc1J4bWQ2K1pyenNFQ0F3RUFBYU9CckRDQnFUQU9CZ05WSFE4QkFmOEVCQU1DQVFZd0R3WURWUjBUQVFIL0JBVXcNCkF3RUIvekFkQmdOVkhRNEVGZ1FVV3lWN2xxUmxVWDY0T2ZQQWVHWmU2RHJuOE80d0h3WURWUjBqQkJnd0ZvQVVXeVY3bHFSbFVYNjQNCk9mUEFlR1plNkRybjhPNHdSZ1lEVlIwZ0JEOHdQVEE3QmdsZ2hYUUJXUUVDQVFFd0xqQXNCZ2dyQmdFRkJRY0NBUllnYUhSMGNEb3YNCkwzSmxjRzl6YVhSdmNua3VjM2RwYzNOemFXZHVMbU52YlM4d0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dJQkFDZTY0NVI4OGE3QTNoZm0NCjVkalY5VlN3Zy9TN3pWNEZlMCtmZFdhdlBPaFdmdnh5ZURnRDJTdGlHd0M1K09sZ3pjek9VWXJIVURGdTRVcCtHQzlwV2JZOVpJRXINCjQ0T0U1aUtIam4zZzdnS1pZYmdlOUxncmlCSVdoTUl4a3ppV01hYTVPMU0vd3lTVFZsdHBrdXpGd2JzNEFPUHNGNm00M01kOEFZT2YNCk1rZTZVaUkwSFRKNkNWYW5mQ1UycVQxTDJzQ0Nid3E3RXNpSFN5Y1IrUjR0eDVNL250dGZKbXRTMlM2SzhSVEdSSTBWcWJlL3ZkNm0NCkd1NnVMZnRJZHhmK3UreXZHUFVxVWZBNWhKZVZiRzRid3l2RWRHQjVKYkFLSjkvZlh0STV6MFY5UWt2ZnN5d2V4Y1pkeWxVNm9KeHANCm1vL2E3N0t3UEorSGJCSXJaWEFWVWpFYUpNOXZNU05RSDR4UGp5UERkRUZqSEZXb0ZOMCs0RkZRei9FYk1GWU9rckNDaGRpRHl5SmsNCnZDMjRKZFZVb3JnRzZxMlNwQ1Nnd1lhMVNoTnFSODh1QzFhVlZNdk9tdHRxdEtheTIwRUloaWQzOTJxZ1Ftd0xPTTdYZFZBeWtzTGYNCkt6QWlTTkRWUVRnbFhhVHBYWi9HbEhYUVJmMHdsME9Qa0tzS3g0WnpZRXBwTGQ2bGVOY0cybXFlU3o1M09pQVRJZ0hRdjJpZVkyQnINCk5VMExiYnFoUGNDVDRIOGpzMVd0Y2lWT1J2blNGdSt3Wk1FQm51bktvR3FZRHMvWVlQSXZTYmprUXVFNE5SYjB5RzVQOTRGVzZMcWoNCnZpT3ZydjF2QStBQ096QjIraHR0UWM4QnNlbTR5V2IwMnliek9xUjA4a2trVzhtdzBGZkIrajU2NFpmSg0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpTd2lzc1NpZ24gU2lsdmVyIENBIC0gRzINCj09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGdlRDQ0E2V2dBd0lCQWdJSVR4dlVMMVM3TDBzd0RRWUpLb1pJaHZjTkFRRUZCUUF3UnpFTE1Ba0dBMVVFQmhNQ1EwZ3hGVEFUDQpCZ05WQkFvVERGTjNhWE56VTJsbmJpQkJSekVoTUI4R0ExVUVBeE1ZVTNkcGMzTlRhV2R1SUZOcGJIWmxjaUJEUVNBdElFY3lNQjRYDQpEVEEyTVRBeU5UQTRNekkwTmxvWERUTTJNVEF5TlRBNE16STBObG93UnpFTE1Ba0dBMVVFQmhNQ1EwZ3hGVEFUQmdOVkJBb1RERk4zDQphWE56VTJsbmJpQkJSekVoTUI4R0ExVUVBeE1ZVTNkcGMzTlRhV2R1SUZOcGJIWmxjaUJEUVNBdElFY3lNSUlDSWpBTkJna3Foa2lHDQo5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBeFBHSGY5TjRNZmM0eWZqRG1VTzh4L2U4TitkT2NicExqNlZ6SFZ4dW1LNERWNjQ0DQpOME12RnowZnlNNW9FTUY0cmhrREt4RDZMSG1EOXVpNWFMbFY4Z1JFcHpuNS9BU0xIdkdpVFNmNVlYdTZ0K1dpRTdicllUN1FiTkhtDQorL3BlN1IyMG5xQTFXNkdTeS9CSmt2NkZDZ1UrNXRrTDRrKzczSlUzL0pIcE1qVWkwUjg2VGllRm5iQVZsRExhWVExSFRXQkNycEpIDQo2SU5hVUZqcGlvdTVYYUhjM1psS0h6Wm51MGprZzdZMzYwZzZydzluanhjSDZBVEs3Mm94aDlUQXR2bVVjWHRuWkxpMmtVcENlMlV1DQpNR29NOVpEdWxlYnl6WUxzMmFGSzdQYXlTK1ZGaGVadGVKTUVMcHlDYlRhcHhERmtINGFEQ3lyME5RcDR5VlhQUWJCSDZUQ2ZtYjVoDQpxQWFFdVNoNlh6alpHNms0c0lOL2M4SERPMGdxZ2c4aG03ak1xRFhEaEJ1RHN6NitwSlZwQVRxSkFIZ0UyY24wbVJtclZuNWJpNFk1DQpGWkdrRUN3Sk1vQmdzNVBBS3JZWUM1MStqVW55RUVwLytkVkdMeG1TbzVtbkpxeTdqRHptRHJ4SEI5eHpVZkZ3WkM4SStiUkhIVEJzDQpST29wTjRXU2FHYThnemorZXprdTAxRHdIL3RlWUxhcHB2b25RZkdiR0hMeTlZUjBTc2xueEZTdVNHVGZqTkZ1c0IzaEI0OElIcG1jDQpjZWxNMktYM1J4SWZkTkZSbm9iendxSWpRQXR6MjB1bTUzTUdqTUdnNmNGWnJFYjY1aS80ejNHY1JtMjV4QldOT0hrRFJVanZ4RjNYDQpDTzZIT1NLR3NnMFBXRVAzY2FsSUx2M3ExaDhDQXdFQUFhT0JyRENCcVRBT0JnTlZIUThCQWY4RUJBTUNBUVl3RHdZRFZSMFRBUUgvDQpCQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVGNkROd2VSQnRqcGJPOHRGbmIwY3dwajZobGd3SHdZRFZSMGpCQmd3Rm9BVUY2RE53ZVJCDQp0anBiTzh0Rm5iMGN3cGo2aGxnd1JnWURWUjBnQkQ4d1BUQTdCZ2xnaFhRQldRRURBUUV3TGpBc0JnZ3JCZ0VGQlFjQ0FSWWdhSFIwDQpjRG92TDNKbGNHOXphWFJ2Y25rdWMzZHBjM056YVdkdUxtTnZiUzh3RFFZSktvWklodmNOQVFFRkJRQURnZ0lCQUhQR2dlQW4waTBQDQo0SlV3NHBwQmYxQXNYMTlpWWFtR2Fta1lESFJKMWwyRTZrRlNHRzlZclZCV0lHckd2U2hwV0pIY2tSRTFxVG9kdkJxbFlKN1lIMzlGDQprV25aZnJ0NGNzRUdEeXJPajRWd1lheWd6UXU0T1NsV2hESk9ocnM5eENyWjF4OXk3djVSb1NKQnNYRUNZeHFDc0dLclhsY1NIOS9MDQozWFdnd0YxNWtJd2I0RkRtM2pIK21IdHdYNldRMkszNEFyWnYwMkRkUUVzaXhUMnRPbnFmR2hwSGtYa3p1b0xjTW1rRGxtNGZTL0J4DQovdU5uY3FDeHYxeUw1UHFaSXNlRXVSdU5JNWMvN1NYZ3oyVzc5V0VFNzkwZXNscEJJbHFobjEwczZGdkpiYWtNREhpcVlNWldqd0ZhDQpER2k4YVJsNXhCOStsd1cveGVra1VWN1UxVXRUN2RraldqWURaYVBCQTYxQk1QTkdHNFdRcjJXMTFiSGtGbHQ0ZFIyWGVtMVpxU3FQDQplOTdEaDRrUW1VbHplTWc5dlZFMWRDclY4WDVwR3lxN083MGx1SnBhUFhKaGtHYUg3Z3pXVGRRUmRBdHEvZ3NEL0tOVlY0bitTc3V1DQpXeGNGeVBLTkl6RlRPTkl0YWorQ3VZMElhdmRlUVhSdXd4RitCNndwWUpFL09NcFhFQTI5TUMvSHBlWkJvTnF1QlllYW9LUmxiRXdKDQpESW02dU5PNXdKT0tNUHFONVpwckZRRk9aNnJhWWxZK2hBaG0wc1EyZmFjK0VQeUk0TlNBNVFDOXF2Tk9CcU42YXZsaWN1TUpUK3ViDQpEZ0VqOForN2ZOemNiQkdYSmJMeXRHTVUwZ1lxWjR5RDljN3FCOWlhYWg3czVBcTdLa3pyQ1dBNXpzcGkyQzV1DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRGZEQ0NBbVNnQXdJQkFnSVFHS3kxYXYxcHRoVTZZMnl2MnZyRW9UQU5CZ2txaGtpRzl3MEJBUVVGQURCWU1Rc3dDUVlEVlFRRw0KRXdKVlV6RVdNQlFHQTFVRUNoTU5SMlZ2VkhKMWMzUWdTVzVqTGpFeE1DOEdBMVVFQXhNb1IyVnZWSEoxYzNRZ1VISnBiV0Z5ZVNCRA0KWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVUQWVGdzB3TmpFeE1qY3dNREF3TURCYUZ3MHpOakEzTVRZeU16VTVOVGxhTUZneA0KQ3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEVlFRS0V3MUhaVzlVY25WemRDQkpibU11TVRFd0x3WURWUVFERXloSFpXOVVjblZ6ZENCUQ0KY21sdFlYSjVJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQg0KQ2dLQ0FRRUF2cmdWZS8vVWZIMW5yWU5rZThoQ1V5M2Y5b1FJSUdIV0FWbHFuRVFScis5Mi9aVit6bUV3dTNxRFh3SzlBV2JLN2hXTg0KYjZFd25MMmhoWjZVT3ZOV2lBQXh6OWp1YXBZQzJlMERqUHQxYmVmcXVGVVdCUmFhOU9CZXNZakFaSVZjRlUySXg3ZTY0SFhwclFVOQ0KbmNlSlNPQzdLTWdENFRDVFpGNVN3Rmx3SWpWWGlJcnhsUXFEMTd3eGN3RTA3ZTlHY2VCckFxZzFjbXVYbTJiZ3l4eDVYOWdhQkdnZQ0KUndMbW5XRGlOcGNCMzg0MWt0KytaOGR0ZDFrN2o1M1drQldVdkVJMEVNRTUrYkVuUG43V2luWEZzcStXMDZMZW0rU1l2bjNoNllHdA0KdG0vODF3N2E0RFN3RFJwMzUrTUltTzlZK3B5RXR6YXZ3dCtzMHZRUUJuQnhOUUlEQVFBQm8wSXdRREFQQmdOVkhSTUJBZjhFQlRBRA0KQVFIL01BNEdBMVVkRHdFQi93UUVBd0lCQmpBZEJnTlZIUTRFRmdRVUxOVlFRWmNWaS9DUE5tRmJTdnRyMlpuSk01SXdEUVlKS29aSQ0KaHZjTkFRRUZCUUFEZ2dFQkFGcHdmeXpkdHpSUDlZWlJxU2ErUzdpcThYRU4zR0hIb09vMEhucDNEd1ExNkNlUGJKQy9rUllrUmo1Sw0KVHM0ckZ0VUxVaDM4SDJlaUFrVXhUODd6K2dPbmVaMVRhdG5hWXpyNGdOZlRtZUdsNGI3VVZYR1lOVHEraytxdXJVS3lrRy9nL0NGTg0KTldNemlVbldtMDdLeCtkT0NRRDMyc2Z2bVdLWmQ3YVZJbDZLb0t2MHVIaVl5amdabWNseW5uak5TNnl2R2FCekVpMzh3a0c2Z1pIYQ0KRmxveHQvbTBjWUFTU0pseWMxcFpVOEZqVWpQdHA4blNPUUp3K3VDeFFtWXBxcHRSN1RCVUloUmYyYXNkd2VTVThQajFLL2ZxeW5oRw0KMXJpUi9hWU5LeG9VQVQ2QThFS2dsUWRlYmMzTVM2UkZqYXNTNkxQZVd1V2dmT2dQSWgxYTZWaz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KdGhhd3RlIFByaW1hcnkgUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFSURDQ0F3aWdBd0lCQWdJUU5FN1ZWeURWN2V4SjlDL09OOXNyYlRBTkJna3Foa2lHOXcwQkFRVUZBRENCcVRFTE1Ba0dBMVVFDQpCaE1DVlZNeEZUQVRCZ05WQkFvVERIUm9ZWGQwWlN3Z1NXNWpMakVvTUNZR0ExVUVDeE1mUTJWeWRHbG1hV05oZEdsdmJpQlRaWEoyDQphV05sY3lCRWFYWnBjMmx2YmpFNE1EWUdBMVVFQ3hNdktHTXBJREl3TURZZ2RHaGhkM1JsTENCSmJtTXVJQzBnUm05eUlHRjFkR2h2DQpjbWw2WldRZ2RYTmxJRzl1YkhreEh6QWRCZ05WQkFNVEZuUm9ZWGQwWlNCUWNtbHRZWEo1SUZKdmIzUWdRMEV3SGhjTk1EWXhNVEUzDQpNREF3TURBd1doY05Nell3TnpFMk1qTTFPVFU1V2pDQnFURUxNQWtHQTFVRUJoTUNWVk14RlRBVEJnTlZCQW9UREhSb1lYZDBaU3dnDQpTVzVqTGpFb01DWUdBMVVFQ3hNZlEyVnlkR2xtYVdOaGRHbHZiaUJUWlhKMmFXTmxjeUJFYVhacGMybHZiakU0TURZR0ExVUVDeE12DQpLR01wSURJd01EWWdkR2hoZDNSbExDQkpibU11SUMwZ1JtOXlJR0YxZEdodmNtbDZaV1FnZFhObElHOXViSGt4SHpBZEJnTlZCQU1UDQpGblJvWVhkMFpTQlFjbWx0WVhKNUlGSnZiM1FnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNzDQpvUEQ3Z0ZuVW5NZWt6NTJoV1hNSkVFVU1EU3h1YVBGc1cwaG9TVmszL0FzekdjSjNmOHdRTFpVMEhPYnJUUW1uSE5LNHlaYzJBcmVKDQoxQ1JmQnNETVJKU1VqUUppYit0YTNSR05LSnBjaEpBUWVnMjlkR1l2YWppZzR0VlVST3NkQjU4SHVtL3U2ZjFPQ3luMVBvU2dBZkdjDQpxL2djZm9tazZLSFljV1VObzFGNzdyelNJbUFOdVZ1ZDM3cjhVVnNMcjVpeTZTN3BCT2hpaDk0cnlOZE93VXhrSHQzUGgxaTZTay9LDQphQWNkSEoxS3h0VXZrY3g4Y1hJY3hjQm42ekw5eVpKY2xOcUZ3SnUvVTMwckNmU01uWkVmbDJwU3k5NEpOcVIzMkh1SFVFVFZQbTRwDQphZnM1U1NZZUNhV0FlMEF0NitnbmhjbitZZjErNW55WEhkV2RBZ01CQUFHalFqQkFNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEZ1lEDQpWUjBQQVFIL0JBUURBZ0VHTUIwR0ExVWREZ1FXQkJSN1cwWFByODdMZXYweGtocHF0dk5HNjFkSVVEQU5CZ2txaGtpRzl3MEJBUVVGDQpBQU9DQVFFQWVSSEFTN09SdHZ6dzZXZlVEVzVGdmxYb2s5TE9Bei90MmlXd0hWZkxIanAyb0V6c1VIYm9aSElNcEtueHVJdlcxb2VFDQp1ekxsUVJIQWQ5bXpZSjNyRzlYUmJrUkVxYVlCN0ZWaUhYZTRYSTVJU1h5Y08xY1JySzF6TjQ0dmVGeVFhRWZaWUdEbS9BYzlJaUFYDQp4UGNXNmNUWWN2bkljM3pmRmk4VnFUNzlhaWUyb2V0YXVwZ2YxZU5OWkFxZEU4aGh1dlU1SEllNnVMMTdJbi8yL3F4QWVlV3NFRzg5DQpqeHQ1ZG92RU43TWhHSVRsTmdEcll5Q1p1ZW4rTXdTN1FjakJBdmxFWXlDZWdjNUMwOVkvTEhiVFk1eFozWSttNFE2Z0xrSDNMcFZIDQp6N3o5TS9QMkMyRitmcEVyZ1VmQ0p6RHVweEJkTjQ5Y09TdmtCUEI3alZhTWFBPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KVmVyaVNpZ24gQ2xhc3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEc1DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRTB6Q0NBN3VnQXdJQkFnSVFHTnJSbmlaOTZMdEtJVmpOekdzN1NqQU5CZ2txaGtpRzl3MEJBUVVGQURDQnlqRUxNQWtHQTFVRQ0KQmhNQ1ZWTXhGekFWQmdOVkJBb1REbFpsY21sVGFXZHVMQ0JKYm1NdU1SOHdIUVlEVlFRTEV4WldaWEpwVTJsbmJpQlVjblZ6ZENCTw0KWlhSM2IzSnJNVG93T0FZRFZRUUxFekVvWXlrZ01qQXdOaUJXWlhKcFUybG5iaXdnU1c1akxpQXRJRVp2Y2lCaGRYUm9iM0pwZW1Waw0KSUhWelpTQnZibXg1TVVVd1F3WURWUVFERXp4V1pYSnBVMmxuYmlCRGJHRnpjeUF6SUZCMVlteHBZeUJRY21sdFlYSjVJRU5sY25ScA0KWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUMwZ1J6VXdIaGNOTURZeE1UQTRNREF3TURBd1doY05Nell3TnpFMk1qTTFPVFU1V2pDQg0KeWpFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBb1REbFpsY21sVGFXZHVMQ0JKYm1NdU1SOHdIUVlEVlFRTEV4WldaWEpwVTJsbg0KYmlCVWNuVnpkQ0JPWlhSM2IzSnJNVG93T0FZRFZRUUxFekVvWXlrZ01qQXdOaUJXWlhKcFUybG5iaXdnU1c1akxpQXRJRVp2Y2lCaA0KZFhSb2IzSnBlbVZrSUhWelpTQnZibXg1TVVVd1F3WURWUVFERXp4V1pYSnBVMmxuYmlCRGJHRnpjeUF6SUZCMVlteHBZeUJRY21sdA0KWVhKNUlFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUMwZ1J6VXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdw0KZ2dFS0FvSUJBUUN2SkFnSUtYbzFubUFNcXVkTE8wN2NmTHc4UlJ5N0srRCtLUUw1VndpalpJVVZKL1h4cmNneGlWMGk2Q3FxcGtLeg0Kai9pNVZiZXh0MHV6L285K0IxZnM3MFBiWm1JVlljOWdEYVRZM3ZqZ3cySUlQVlFUNjBuS1dWU0ZKdVVyanh1ZjYvV2hrY0l6U2RoRA0KWTJwU1M5S1A2SEJSVGRHSmFYdkhjUGF6M0JKMDIzdGRTMWJUbHI4VmQ2R3c5S0lsOHE4Y2ttY1k1ZlFHQk8rUXVlUUE1TjA2dFJuLw0KQXJyMFBPN2dpK3MzaSt6MDE2enk5dkE5cjkxMWtUTVpIUnhBeTNRa0dTR1QyUlQrckNwU3g0L1ZCRW5raldOSGlEeHBnOHYrUjcwcg0KZmsvRmxhNE9uZFRSUThCbmMrTVVDSDdsUDU5enVETUt6MTAvTkllV2l1NVQ2Q1VWQWdNQkFBR2pnYkl3Z2E4d0R3WURWUjBUQVFILw0KQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FRWXdiUVlJS3dZQkJRVUhBUXdFWVRCZm9WMmdXekJaTUZjd1ZSWUphVzFoWjJVdg0KWjJsbU1DRXdIekFIQmdVckRnTUNHZ1FVaitYVEdvYXNqWTVydzgrQWF0UklHQ3g3R1M0d0pSWWphSFIwY0RvdkwyeHZaMjh1ZG1WeQ0KYVhOcFoyNHVZMjl0TDNaemJHOW5ieTVuYVdZd0hRWURWUjBPQkJZRUZIL1RaYWZDM2V5NzhEQUo4ME01K2dLdk16RXpNQTBHQ1NxRw0KU0liM0RRRUJCUVVBQTRJQkFRQ1RKRW93WDJMUDJCcVlMejNxM0prdHZYZjJwWGtpT096RXA2QjRFcTFpRGtWd1pNWG5sMll0bUFsKw0KWDYvV3pDaGw4Z0dxQ0JwSDN2bjVmSkphQ0drZ0RkaytiVzQ4RFc3WTVnYVJRQmk1K01IdDM5dEJxdUNXSU1uTlpCVTRnY21VN3FLRQ0KS1FzVGI0N2JETjBsQXR1a2l4bEUwa0Y2QldsS1dFOWd5bjZDYWdzQ3FpVVhPYlhiZitlRVpTcVZpcjJHM2w2QkZvTXRFTXplL2FpQw0KS20wb0h3MEx4T1huR2lZWjRmUVJieEMxbGZ6blFnVXkyODZkVVY0b3RwNkYwMXZ2cFgxRlFIS090dzVyRGdiN016VkljYmlkSjR2RQ0KWlY4TmhuYWNSSHIybFZ6MlhUSUlNNlJVdGhnL2FGenlRa3FGT0ZTRFg5SG9MUEtzRWRhbzdXTnENCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KU2VjdXJlVHJ1c3QgQ0ENCj09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUR1RENDQXFDZ0F3SUJBZ0lRRFBDT1hBZ1dwYTFDZi9Eckp4aFowREFOQmdrcWhraUc5dzBCQVFVRkFEQklNUXN3Q1FZRFZRUUcNCkV3SlZVekVnTUI0R0ExVUVDaE1YVTJWamRYSmxWSEoxYzNRZ1EyOXljRzl5WVhScGIyNHhGekFWQmdOVkJBTVREbE5sWTNWeVpWUnkNCmRYTjBJRU5CTUI0WERUQTJNVEV3TnpFNU16RXhPRm9YRFRJNU1USXpNVEU1TkRBMU5Wb3dTREVMTUFrR0ExVUVCaE1DVlZNeElEQWUNCkJnTlZCQW9URjFObFkzVnlaVlJ5ZFhOMElFTnZjbkJ2Y21GMGFXOXVNUmN3RlFZRFZRUURFdzVUWldOMWNtVlVjblZ6ZENCRFFUQ0MNCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS3VrZ2VXVnpmWDJGSTdDVDhyVTRuaVZXSnhCNFEyWlFDUVgNCk9aRXpadW0rNFlPdllseUowZndrVzJHejRCRVJRUndkYnZDNHUvamVwNEc2cGtqR254Mjl2bzZwUVQ2NGxPMHBHdFNPMGdNZEErOXQNCkRXY2NWOWNHcmNySTlmNE9yMllsU0FTV0MxMmp1aGJEQ0UvUlJ2Z1VYUExJWGdHWmJmMkl6SWFvd1c4eFFteFNQbWpMOHhrMDM3dUgNCkdGYUFKc1RRM01CdjM5Nmd3cEVXb0dRUlMwUzhIdmJuK21QZVpxeDJwSEdqN0RhVWFIcDNwTEhuRGkrQmV1SzFjb2J2b211TDhBL2INCjAxay91bks4UkNTYzQzT3o5NjlYTDBJbW5hbDB1Z0JTOGt2TlUzeEhDemFGRG1hcENKY1dORmZCWnZlQTQrMXdWTWVUNEM0b0ZWbUgNCnVyc0NBd0VBQWFPQm5UQ0JtakFUQmdrckJnRUVBWUkzRkFJRUJoNEVBRU1BUVRBTEJnTlZIUThFQkFNQ0FZWXdEd1lEVlIwVEFRSC8NCkJBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVFqSzJGdm9FL2Y1ZFMzckQvZmRNUUIxYVE2OHdOQVlEVlIwZkJDMHdLekFwb0NlZ0pZWWoNCmFIUjBjRG92TDJOeWJDNXpaV04xY21WMGNuVnpkQzVqYjIwdlUxUkRRUzVqY213d0VBWUpLd1lCQkFHQ054VUJCQU1DQVFBd0RRWUoNCktvWklodmNOQVFFRkJRQURnZ0VCQUREdFQwcmhXRHBTY2x1MXBxTmxHS2E3VVR0MzZaM3EwNTljNEVWbGV3M0tXK0p3VUxLVUJSU3UNClNjZU5RUWNTYzVSK0RDTWgvYndRZjJBUVduTDFtQTZzN0xsLzNYcHZYZE1jOVArSUJXbENxUVZ4eUxlc0p1Z3V0SXhxLzNIY3VMSGYNCm1ieDhJVlFyNUZpaXUxY3BycDZwb3hrbUQ1a3VDTER2L1duUG1Sb0pqZU9ubnl2Sk5qUjdKTE40VEpVWHBBWW1IclprVWpaZllHZloNCm5NVUZkQXZuWnlQU0NQeUk2YTZMZitFdzlEZCsvY1l5MmkyZVJEQXdiTzRIM3RJMC9OTC9RUFpMOUdaR0JsU204aklLWXlZd2E1dlINCjNJdEh1dUc1MVdMUW9xRDBad1Y0S1dNYWJ3VFcrTVpNbzVxeE43U041U2hMSFo0c3dyaG92TzBDN2pFPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpTZWN1cmUgR2xvYmFsIENBDQo9PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUR2RENDQXFTZ0F3SUJBZ0lRQjFZaXBPalVpb2xOOUJQSThQanFwVEFOQmdrcWhraUc5dzBCQVFVRkFEQktNUXN3Q1FZRFZRUUcNCkV3SlZVekVnTUI0R0ExVUVDaE1YVTJWamRYSmxWSEoxYzNRZ1EyOXljRzl5WVhScGIyNHhHVEFYQmdOVkJBTVRFRk5sWTNWeVpTQkgNCmJHOWlZV3dnUTBFd0hoY05NRFl4TVRBM01UazBNakk0V2hjTk1qa3hNak14TVRrMU1qQTJXakJLTVFzd0NRWURWUVFHRXdKVlV6RWcNCk1CNEdBMVVFQ2hNWFUyVmpkWEpsVkhKMWMzUWdRMjl5Y0c5eVlYUnBiMjR4R1RBWEJnTlZCQU1URUZObFkzVnlaU0JIYkc5aVlXd2cNClEwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDdk5TN1lyR3hWYVFaeDVSTm9KTE5QMk13aFIvangNCllEaUppUVBwdmVwZVJsTUozRnoxV3VqM1JTb0M2ekZoMXlrelRNN0hmQW8zZmcrNk1wamhIWmV2ajhmY3lUaVc4OXNhL0ZIdGFNYlENCmJxUjhKTkd1UXNpV1VHTXU0UDUxL3Bpblgwa3VsZU01TTJTT0hxUmZrTkpuUExMWi9rRzVWYWNKam5JRkhvdmRSSVdDUXRCSndCMWcNCjhORVhMSlhyOXFYQmtxUEZ3cWNJWUExZ0JCQ1dlWjRXTk9hcHR2b2xSVG5JSG1YNWsvV3E4VkxjbVpnOXBZWWFERFV6K2t1bEJBWVYNCkhER0E3Nm9ZYThKNzE5ck8rVE1nMWZXOWFqTXRnUVQ3c0Z6VW5LUGlYQjNqcVVKMVhudlVkKzg1VkxySkNoZ2JFcGxKTDRoTC9WQmkNCjBYUG5qM3BEQWdNQkFBR2pnWjB3Z1pvd0V3WUpLd1lCQkFHQ054UUNCQVllQkFCREFFRXdDd1lEVlIwUEJBUURBZ0dHTUE4R0ExVWQNCkV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUVGSzlFQk1KQmZraUQyMDQ1QXV6c2hIcm16c21rTURRR0ExVWRId1F0TUNzd0thQW4NCm9DV0dJMmgwZEhBNkx5OWpjbXd1YzJWamRYSmxkSEoxYzNRdVkyOXRMMU5IUTBFdVkzSnNNQkFHQ1NzR0FRUUJnamNWQVFRREFnRUENCk1BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQmpHZ2hBZmFSZVV3MTMySHF1SHcwTFVSWUQ3eGg4eU9PdmFsaVRGR0NSc29UY2lFNisNCk9ZbzY4K2FDaVYwQk43T3JKS1FWRHBJMVdrcEVYazVYK25YT0gwak9adlE4UUNhU21Hd2I3aVJHREJlelVxWGJwWkdSenpmVGIrY24NCkNEcE9HUjg2cDFoY0Y4OTVQNHZrcDlNbUk1MG1EMWhwL0VkK3N0Q05pNU8vS1U5RGFYUjJaMHZQQjR6bUF2ZTE0YlJEdFVzdEZKLzUNCjNDWU52NlpIZEFiWWlORTZLVENFenRJNWdHSWJxTWRYU2J4cVZWRm5GVXErTlFmazFYV1lOM2t3Rk5zcG5XekZhY3hIVmFJdzk4eGMNCmY4TERtQnhyVGhhQTYzcDRaVVdpQUJxdkRBMVZaRFJJdUpLNThiUlFLZkpQSXgvYWJLd2ZST0hkSTNoUlc4Y1cNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ09NT0RPIENlcnRpZmljYXRpb24gQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRUhUQ0NBd1dnQXdJQkFnSVFUb0V0aW9KbDRBc0M3ajQxQWtibFBUQU5CZ2txaGtpRzl3MEJBUVVGQURDQmdURUxNQWtHQTFVRQ0KQmhNQ1IwSXhHekFaQmdOVkJBZ1RFa2R5WldGMFpYSWdUV0Z1WTJobGMzUmxjakVRTUE0R0ExVUVCeE1IVTJGc1ptOXlaREVhTUJnRw0KQTFVRUNoTVJRMDlOVDBSUElFTkJJRXhwYldsMFpXUXhKekFsQmdOVkJBTVRIa05QVFU5RVR5QkRaWEowYVdacFkyRjBhVzl1SUVGMQ0KZEdodmNtbDBlVEFlRncwd05qRXlNREV3TURBd01EQmFGdzB5T1RFeU16RXlNelU1TlRsYU1JR0JNUXN3Q1FZRFZRUUdFd0pIUWpFYg0KTUJrR0ExVUVDQk1TUjNKbFlYUmxjaUJOWVc1amFHVnpkR1Z5TVJBd0RnWURWUVFIRXdkVFlXeG1iM0prTVJvd0dBWURWUVFLRXhGRA0KVDAxUFJFOGdRMEVnVEdsdGFYUmxaREVuTUNVR0ExVUVBeE1lUTA5TlQwUlBJRU5sY25ScFptbGpZWFJwYjI0Z1FYVjBhRzl5YVhSNQ0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEwRUNMaTNMamtSdjNVY0ViVkFTWTA2bS93ZWFLWFR1SA0KKzd1SXpnM2pMejhHbHZDaUtWQ1pydHM3b1Zld2RGRnh6ZTFDa1UxQi9xbkkyR3FHZDBTN1dXYVhVRjYwMUN4d1JNL2FONVZDYVR3dw0KeEhHelV2QWhUYUhZdWpsOEhKNmpKSjN5Z3hhWXFoWjhRNXNWVzdldU5KSCsxR0ltR0VhYVArdkIrZkdRVit1c2VnMkwyM0l3YW1iVg0KNEVhamNOeG8yZjhFU0lsMzNyWHArMmR0UWVtOE9iMHkyV0lDOGJHb1BXNDNuT0l2NHRPaUpvdkd1RlZEaU9FalBxWFNKRGxxUjZzQQ0KMUtHenFTWCtEVCtuSGJyVFVjRUxwTnFzT085VlVDUUZaVWFUTkU4dGphM0cxQ0VaMG83S0JXRnhCM05INVlvWkVyMEVUYzVPbktWSQ0KckxzbTl3SURBUUFCbzRHT01JR0xNQjBHQTFVZERnUVdCQlFMV09XTHhrd1ZONlJBcVRDcEliNUhObHBXL3pBT0JnTlZIUThCQWY4RQ0KQkFNQ0FRWXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QkpCZ05WSFI4RVFqQkFNRDZnUEtBNmhqaG9kSFJ3T2k4dlkzSnNMbU52Ylc5aw0KYjJOaExtTnZiUzlEVDAxUFJFOURaWEowYVdacFkyRjBhVzl1UVhWMGFHOXlhWFI1TG1OeWJEQU5CZ2txaGtpRzl3MEJBUVVGQUFPQw0KQVFFQVBwaWVtL1liNmRjNXQzaXVIWElZU2RPSDVFT0M2ei9KcXZXb3RlOVZmQ0ZTWmZuVkRlRnM5RDZNazNPUkxnTEVUZ2R4YjhDUA0KT0dFSXFCNkJDc0F2SUM5Qmk1SGNTRVc4OGNiZXVuWnJNOGdBTFRGR1RPM25uYytJbFA4endGYm9KSVltdU5nNE9OOHFhOTBTek1jLw0KUnhkTW9zSUdsZ25XMi80L1BFWkIzMWppVmc4OE84RWNrelhaT0ZLczdzanNMakJPbERXMEpCOUxlR25hOGdJNHpKVlNrL0J3SlZtYw0KSUdmRTd2bUxWMkgwa25aOVA0U05WYmZvNWF6VjhmVVpWcVphKzVBY3I1UHI1UnpVWjVkZEJBNitDNE9tRjRPNU1CS2d4VE1WQmJrTg0KKzhjRmR1UFlTbzM4TkJlanhpRW92akJGTVI3SGVMNVlZVGlzTytJQlpRPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KTmV0d29yayBTb2x1dGlvbnMgQ2VydGlmaWNhdGUgQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRDVqQ0NBczZnQXdJQkFnSVFWOHN6YjhKY0Z1WkhGaGZqa0RGbzREQU5CZ2txaGtpRzl3MEJBUVVGQURCaU1Rc3dDUVlEVlFRRw0KRXdKVlV6RWhNQjhHQTFVRUNoTVlUbVYwZDI5eWF5QlRiMngxZEdsdmJuTWdUQzVNTGtNdU1UQXdMZ1lEVlFRREV5ZE9aWFIzYjNKcg0KSUZOdmJIVjBhVzl1Y3lCRFpYSjBhV1pwWTJGMFpTQkJkWFJvYjNKcGRIa3dIaGNOTURZeE1qQXhNREF3TURBd1doY05Namt4TWpNeA0KTWpNMU9UVTVXakJpTVFzd0NRWURWUVFHRXdKVlV6RWhNQjhHQTFVRUNoTVlUbVYwZDI5eWF5QlRiMngxZEdsdmJuTWdUQzVNTGtNdQ0KTVRBd0xnWURWUVFERXlkT1pYUjNiM0pySUZOdmJIVjBhVzl1Y3lCRFpYSjBhV1pwWTJGMFpTQkJkWFJvYjNKcGRIa3dnZ0VpTUEwRw0KQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURrdkg2U01HM0cySTRyQzd4R3p1QW5sdDdlK2ZvUzB6d3pjN01FTDd4eA0Kak9XZnRpSmdQbDlkemduL2dnd2JtbEZRR2lhSjNkVmhYUm5jRWc4dENxSkRYUmZRTkpJZzZuUFBPQ3dHSmdsNmN2ZjZVREw0d3BQVA0KYWFJanprR3h6T1RWSHpiUmlqcjRqR1BpRkZscDdRM1RmMnZvdUFQbFQycmxtR05wU0FXK0x2OHp0dW1YV1duNFp4bXVrMkdXUkJYVA0KY3JBL3ZHcDk3RWgvamNPcnFuRXJVMmxCVXpTMXNMbkZCZ3JFc0VYMVFWMXVpVVY3UFRzbWpIVEM1ZExSZmJJUjFQdFlNaUthZ01uYw0KL1F6cGYxNERsODQ3QUJTSEozQTRxWTV1c3lkMm1GSGdCZU1ocXhyVmhTSThLYldhRnNXQXFQUzdhekNQTDBZQ29yRU1JdURUQWdNQg0KQUFHamdaY3dnWlF3SFFZRFZSME9CQllFRkNFd3lmc0ExMDZZMm9lcUt0Q25MckZBTWFkTU1BNEdBMVVkRHdFQi93UUVBd0lCQmpBUA0KQmdOVkhSTUJBZjhFQlRBREFRSC9NRklHQTFVZEh3UkxNRWt3UjZCRm9FT0dRV2gwZEhBNkx5OWpjbXd1Ym1WMGMyOXNjM05zTG1Odg0KYlM5T1pYUjNiM0pyVTI5c2RYUnBiMjV6UTJWeWRHbG1hV05oZEdWQmRYUm9iM0pwZEhrdVkzSnNNQTBHQ1NxR1NJYjNEUUVCQlFVQQ0KQTRJQkFRQzdya3ZudDFmcmY2b3R0M05IaFdyQjVLVWQ1T2M4NmZSWlpYZTFlbHRhalNVMjRIcVhMampBVjJDRG1BYURuN2wyZW01UQ0KNExxSUxQeEZ6Qml3bVpWUkR1d2R1SWovaDFBY2dzTGo0REtBdjZBTFI4akRNZStaWnpLQVR4Y2hlUXhwWE41ZU5LNEN0U2JxVU45Lw0KR0dVc3lmSmo0YWtIL254eEgyc3pKR29lQmZjRmFNQnFFc3N1WG1ITHJpalRmc0swWnBFbVh6d3VKRi9MV0EvcktPeXZFWmJ6M0h0dg0Kd0tlSThsTjNzMkJlcnE0bzJqVXNielJGMHliaDN1eGJUeWRyRm55OVJBUVlnck9KZVJjUWNUMTZvaFpPOVFITnBHeGxhS0ZKZGx4RA0KeWRpOE5tZHNwWlMxMU15NXZXbzFWaUhlMk1Qcis4dWtZRXl3VmFDZ2UxZXkNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KV2VsbHNTZWN1cmUgUHVibGljIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRXZUQ0NBNldnQXdJQkFnSUJBVEFOQmdrcWhraUc5dzBCQVFVRkFEQ0JoVEVMTUFrR0ExVUVCaE1DVlZNeElEQWVCZ05WQkFvTQ0KRjFkbGJHeHpJRVpoY21kdklGZGxiR3h6VTJWamRYSmxNUnd3R2dZRFZRUUxEQk5YWld4c2N5QkdZWEpuYnlCQ1lXNXJJRTVCTVRZdw0KTkFZRFZRUUREQzFYWld4c2MxTmxZM1Z5WlNCUWRXSnNhV01nVW05dmRDQkRaWEowYVdacFkyRjBaU0JCZFhSb2IzSnBkSGt3SGhjTg0KTURjeE1qRXpNVGN3TnpVMFdoY05Nakl4TWpFME1EQXdOelUwV2pDQmhURUxNQWtHQTFVRUJoTUNWVk14SURBZUJnTlZCQW9NRjFkbA0KYkd4eklFWmhjbWR2SUZkbGJHeHpVMlZqZFhKbE1Sd3dHZ1lEVlFRTERCTlhaV3hzY3lCR1lYSm5ieUJDWVc1cklFNUJNVFl3TkFZRA0KVlFRRERDMVhaV3hzYzFObFkzVnlaU0JRZFdKc2FXTWdVbTl2ZENCRFpYSjBhV1pwWTJGMFpTQkJkWFJvYjNKcGRIa3dnZ0VpTUEwRw0KQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUR1YjdTOWVlS1BDQ0dlT0FSQkplK3JXeHhUa3F4dG50M0N4QzVGbEFNMQ0KaUdkMFYrUGZqTGluZG84Nzk2akUyeWxqRHBGb05vcVhqb3B4YUFrSDVPalVEay80MWl0TXBCYjU3ME9ZajdPZVV0OXRrVG1QT0wxMw0KaTBOajY3ZVQvREJNSEFHVHRoUDc5NkVmdnlYaGREY3NIcVJlUEdqNFM3OE51UjR1TnVpcDVLZjREOHVDZFh3MUxTTFd3cjhMODdUOA0KYkpWaEhsZlhCSUV5ZzFKNTVvTmp6N2ZMWTRzUjRyMWU2L2FON1pWeUtMU3NFbUxwU2pQbWd6S3VCWFdWdllTVjJ5cGNtNDR1RExpQg0KSzBIbU9GYWZTWnRzZHZxS1hmY0JlWUY4d1lOQUJmNXgvUXcvekU1Z0NRNWxSeEF2QWNBRlA0LzRzMEh2V2tKK1dlL1Nsd3hsQWdNQg0KQUFHamdnRTBNSUlCTURBUEJnTlZIUk1CQWY4RUJUQURBUUgvTURrR0ExVWRId1F5TURBd0xxQXNvQ3FHS0doMGRIQTZMeTlqY213dQ0KY0d0cExuZGxiR3h6Wm1GeVoyOHVZMjl0TDNkemNISmpZUzVqY213d0RnWURWUjBQQVFIL0JBUURBZ0hHTUIwR0ExVWREZ1FXQkJRbQ0KbFJrUTJlaWhsNUgvM0JuWnRRUSswbk1LYWpDQnNnWURWUjBqQklHcU1JR25nQlFtbFJrUTJlaWhsNUgvM0JuWnRRUSswbk1LYXFHQg0KaTZTQmlEQ0JoVEVMTUFrR0ExVUVCaE1DVlZNeElEQWVCZ05WQkFvTUYxZGxiR3h6SUVaaGNtZHZJRmRsYkd4elUyVmpkWEpsTVJ3dw0KR2dZRFZRUUxEQk5YWld4c2N5QkdZWEpuYnlCQ1lXNXJJRTVCTVRZd05BWURWUVFEREMxWFpXeHNjMU5sWTNWeVpTQlFkV0pzYVdNZw0KVW05dmRDQkRaWEowYVdacFkyRjBaU0JCZFhSb2IzSnBkSG1DQVFFd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFMa1ZzVVNSekNQSQ0KSzAxMzQvaWFleWNOelhLN21RREtmR1laVU1iVm1PMnJ2d05hNVUzbEhzaFBjWmVHMWVNZC9aREpQSFYzVjNwOStONzAxTlgzbGVaMA0KYmgwOHJueWQyd0lEQlN4eFN5VStCK05lbXZWbUZ5bUlHamlmejZwQkE0U1hhNU00ZXNvd1JCc2tSRFBRNU5IY0tEajBFME0xTlNsag0KcUh5aXRhMDRwTzJ0L2NhYUgvK1hjLzc3c3pXbms0YkdkcEVBNXF4UkZzUW5NbHpiYzlxbGsxZU9QbTAxSmdoWjFlZEUxM1lnWStlcw0KRTJmRGJiRndSbnpWbGhFOWlXOWRxS0hyalFyYXd4MHpiS1BxWnhtYW1YOUxQWU5SS2gzS0w0WU1vbjRRTFN2VUZwVUxCNm91RkpKSg0KdHlsdjJHMHhmZlg4b1JBSGg4NHZXZHcrV05zPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpDT01PRE8gRUNDIENlcnRpZmljYXRpb24gQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUNpVENDQWcrZ0F3SUJBZ0lRSDBldnFtSUFjRkJVVEFHZW0yT1pLakFLQmdncWhrak9QUVFEQXpDQmhURUxNQWtHQTFVRUJoTUMNClIwSXhHekFaQmdOVkJBZ1RFa2R5WldGMFpYSWdUV0Z1WTJobGMzUmxjakVRTUE0R0ExVUVCeE1IVTJGc1ptOXlaREVhTUJnR0ExVUUNCkNoTVJRMDlOVDBSUElFTkJJRXhwYldsMFpXUXhLekFwQmdOVkJBTVRJa05QVFU5RVR5QkZRME1nUTJWeWRHbG1hV05oZEdsdmJpQkINCmRYUm9iM0pwZEhrd0hoY05NRGd3TXpBMk1EQXdNREF3V2hjTk16Z3dNVEU0TWpNMU9UVTVXakNCaFRFTE1Ba0dBMVVFQmhNQ1IwSXgNCkd6QVpCZ05WQkFnVEVrZHlaV0YwWlhJZ1RXRnVZMmhsYzNSbGNqRVFNQTRHQTFVRUJ4TUhVMkZzWm05eVpERWFNQmdHQTFVRUNoTVINClEwOU5UMFJQSUVOQklFeHBiV2wwWldReEt6QXBCZ05WQkFNVElrTlBUVTlFVHlCRlEwTWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm8NCmIzSnBkSGt3ZGpBUUJnY3Foa2pPUFFJQkJnVXJnUVFBSWdOaUFBUURSM3N2ZGNtQ0ZZWDdkZVNSRnRTcllwbjFQbElMQnM1QkFIK1gNCjRRb2tQQjBCQk80OTBvMEpsd3pnZGVUNiszZUtLdlVEWUVzMml4WWpGcTBKY2ZSSzlDaFF0UDZJSEc0L2JDOHZDVmxicFZzTE01bmkNCnd6MkorV29zNzdMVEJ1bWpRakJBTUIwR0ExVWREZ1FXQkJSMWNhY1pTQm04blozcVFVZmZsTVJJZDVuVGVUQU9CZ05WSFE4QkFmOEUNCkJBTUNBUVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFLQmdncWhrak9QUVFEQXdOb0FEQmxBakVBN3dOYmVxeTNlQXB5dDRqZi83VkcNCkZBa0srcURtZlFqR0dvZTlHS2h6dlNiS1lBeWR6cG1mejF3UE1PRytGREhxQWpBVTlKTThTYWN6ZXBCR1I3TmpmUk9iVHJkdkdEZUENClUvN2RJT0ExbWpiUnh3RzU1dHpkOC84ZExEb1dWOW1TT2RZPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpJR0MvQQ0KPT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRUFqQ0NBdXFnQXdJQkFnSUZPUkZGRUpRd0RRWUpLb1pJaHZjTkFRRUZCUUF3Z1lVeEN6QUpCZ05WQkFZVEFrWlNNUTh3RFFZRA0KVlFRSUV3WkdjbUZ1WTJVeERqQU1CZ05WQkFjVEJWQmhjbWx6TVJBd0RnWURWUVFLRXdkUVRTOVRSMFJPTVE0d0RBWURWUVFMRXdWRQ0KUTFOVFNURU9NQXdHQTFVRUF4TUZTVWRETDBFeEl6QWhCZ2txaGtpRzl3MEJDUUVXRkdsblkyRkFjMmRrYmk1d2JTNW5iM1YyTG1aeQ0KTUI0WERUQXlNVEl4TXpFME1qa3lNMW9YRFRJd01UQXhOekUwTWpreU1sb3dnWVV4Q3pBSkJnTlZCQVlUQWtaU01ROHdEUVlEVlFRSQ0KRXdaR2NtRnVZMlV4RGpBTUJnTlZCQWNUQlZCaGNtbHpNUkF3RGdZRFZRUUtFd2RRVFM5VFIwUk9NUTR3REFZRFZRUUxFd1ZFUTFOVA0KU1RFT01Bd0dBMVVFQXhNRlNVZERMMEV4SXpBaEJna3Foa2lHOXcwQkNRRVdGR2xuWTJGQWMyZGtiaTV3YlM1bmIzVjJMbVp5TUlJQg0KSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXNoL1IwR0xGTXp2QUJJYUlzOXo0aVBmOTMwUGZlbzJhU1Z6Mg0KVHFyTUhMbWg2eWVKOGticE8wcHgxUjJPTGMvbXJhdGpVTWRVQzI0U3laQTJ4dGd2MnBHcWFNVnkvaGNLc2hkK2ViVXlpSERLY01DVw0KU283a1ZjMGRKNVMvem5JcTdGejVjeUQrdmZjdWlXZTR1MGR6RXZmUk5XazY4Z3E1cnY5R1FrYWl2NkdGR3ZtLzVQOUpoZmVqY0lZeQ0KSEYyZllQZXByYVgvejlFMCtYMWJGOGJjMWc0b2E4TGQ4ZlV6YUoxTy9JZDhOaExXbzREb1F3MVZZWlRxWkRkSDZuZkswTEpZQmNOZA0KZnJHb1JwQXhWczV3S3BheU1MaDM1bm5BdlNrNy9aUjNUTDBnelVFbDRDN0hHN3Z1cEFSQjBsMnRFbXFLbTBmN3lkMUdRT0dkUERQUQ0KdFFJREFRQUJvM2N3ZFRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUFzR0ExVWREd1FFQXdJQlJqQVZCZ05WSFNBRURqQU1NQW9HQ0NxQg0KZWdGNUFRRUJNQjBHQTFVZERnUVdCQlNqQlM4WVlGRENpUXJkS3lGUC80NU9xREF4TmpBZkJnTlZIU01FR0RBV2dCU2pCUzhZWUZEQw0KaVFyZEt5RlAvNDVPcURBeE5qQU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUFCZHdtMlBwM0ZVUm8vQzltT25UZ1hlUXAvd1lIRTRSSw0KcTg5dG9COVJsUGhKeTNRMkZMd1YzZHVKTDkyUG9GMTg5UkxybjU0NHBFZk1zNWJadnB3bHF3TitNdytWZ1EzOUZ1Q0l2amZ3YkYzUQ0KTVpzeUsxMFhaWk9ZWUx4dWo3R29QQjdaSFBPcEprTDVaQjNDNTVMMjlCNWFxaGxTWGEvb292ZGdvUGFOOEluMWJ1QUtCUUdWeVlzZw0KQ3JwYS9Kb3NQTDNEdDhsZGVDVUZQMVlVbXd6YSt6cEkvcGRwWHNvUWh2ZE9sZ1FJVGV5d3ZsM2NPNDVQd2YyYU5qU2FURlIrRndOSQ0KbFFnUkhBZHZoUWgrWFUzRW5kdjdyczZ5MGJPNGcyd2Rzck41OGRod21YN3dFd0xPWHQxUjA5ODJnYUViZUM5eHMvRlpURVlZS0t1Rg0KMG1CV1dnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KU2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBFViBSb290Q0ExDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRGZUQ0NBbVdnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFVRkFEQmdNUXN3Q1FZRFZRUUdFd0pLVURFbE1DTUdBMVVFQ2hNYw0KVTBWRFQwMGdWSEoxYzNRZ1UzbHpkR1Z0Y3lCRFR5NHNURlJFTGpFcU1DZ0dBMVVFQ3hNaFUyVmpkWEpwZEhrZ1EyOXRiWFZ1YVdOaA0KZEdsdmJpQkZWaUJTYjI5MFEwRXhNQjRYRFRBM01EWXdOakF5TVRJek1sb1hEVE0zTURZd05qQXlNVEl6TWxvd1lERUxNQWtHQTFVRQ0KQmhNQ1NsQXhKVEFqQmdOVkJBb1RIRk5GUTA5TklGUnlkWE4wSUZONWMzUmxiWE1nUTA4dUxFeFVSQzR4S2pBb0JnTlZCQXNUSVZObA0KWTNWeWFYUjVJRU52YlcxMWJtbGpZWFJwYjI0Z1JWWWdVbTl2ZEVOQk1UQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQw0KQVFvQ2dnRUJBTHgvN0ZlYkpPRCtuTHBDZWFtSWl2cUE0UFVIS1VQcWpnbzBObzBjK3FlMU9Yai9sM1gzTCtTcWF3U0VSTXFtNG1pTw0KL1ZWUVlnK2tjUTdPQnpndFFvVlFyVHlXYjR2Vm9nN1Aza21KUGRaa0xqamxIbXkxVjRxZTcwZ096WHBwRm9kRXRaRGtCcDJ1b1FTWA0KV0hudklFcUNhNHdpdit3ZkQrbUVjZTN4RHVTNEdCUE1WalpkMFpvZVVXczVibUIyaURRTDg3UFJzSjNLWWVKa0hjRkdCN2hqM1I0eg0KWmJPT0NWVlNQYlc5L3dmcnJXRlZHQ3lwYVpoS3FrREZNeFJsZEFENWtkNnZBMGpGUUZUY0Q0U1FhQ0RGa3BiY0x1VUNSYXJBWDFUNA0KYmVwSnoxMXNTNi92bXNKV1hNWTFWa0pxTUYvQ3EvYmlQVCt6eVJHUE1VelhuMGtDQXdFQUFhTkNNRUF3SFFZRFZSME9CQllFRkRWSw0KOVUydlA5ZUNPS3lyY1dVWGRZeWRWWlBtTUE0R0ExVWREd0VCL3dRRUF3SUJCakFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxRw0KU0liM0RRRUJCUVVBQTRJQkFRQ29oK25zK0VCblhjUEJac2RBUzVmOGh4T1FXc1R2b01wZmk3ZW50L0hXdFdTM2lyTzRHOHphKzZ4bQ0KaUVITzZQemsyeDZJcHUwblVCc0NNQ1JHZWY0RWgzQ1hRSFBSd01GWEdacHBwU2VacTUxaWhQWlJ3U3pKSXhYWUtMZXJKUk8xUnVHRw0KQXY4bWpNU0lraDFXL2hsbjhsWGtnS05ybkt0MzRWRnhEU0RiRUpyYnZYWjVCM2VaS0syYVh0cXhUMFFzTlk2bGxzZjlnL0JZeG5uVw0KbUh5b2pmNkdQZ2NXa3VGNzV4M3NNM1orUWk1S2hmbVJpV2lFQTRHbG01cSs0emZGVkt0V094Z3RRYVFNK0VMYm1hRGdjbSs3WGVFVw0KVDFNS1pQbE85TDlPVkwxNGJJanF2NXdUSk1Kd2FhSi9EOGc4clFqSnNKaEFveXJuaUlQdGQ0OTANCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KT0lTVEUgV0lTZUtleSBHbG9iYWwgUm9vdCBHQSBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEOFRDQ0F0bWdBd0lCQWdJUVFUMXl4L1JySDRGRGZmSFNLRlRmbWpBTkJna3Foa2lHOXcwQkFRVUZBRENCaWpFTE1Ba0dBMVVFDQpCaE1DUTBneEVEQU9CZ05WQkFvVEIxZEpVMlZMWlhreEd6QVpCZ05WQkFzVEVrTnZjSGx5YVdkb2RDQW9ZeWtnTWpBd05URWlNQ0FHDQpBMVVFQ3hNWlQwbFRWRVVnUm05MWJtUmhkR2x2YmlCRmJtUnZjbk5sWkRFb01DWUdBMVVFQXhNZlQwbFRWRVVnVjBsVFpVdGxlU0JIDQpiRzlpWVd3Z1VtOXZkQ0JIUVNCRFFUQWVGdzB3TlRFeU1URXhOakF6TkRSYUZ3MHpOekV5TVRFeE5qQTVOVEZhTUlHS01Rc3dDUVlEDQpWUVFHRXdKRFNERVFNQTRHQTFVRUNoTUhWMGxUWlV0bGVURWJNQmtHQTFVRUN4TVNRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1EQTFNU0l3DQpJQVlEVlFRTEV4bFBTVk5VUlNCR2IzVnVaR0YwYVc5dUlFVnVaRzl5YzJWa01TZ3dKZ1lEVlFRREV4OVBTVk5VUlNCWFNWTmxTMlY1DQpJRWRzYjJKaGJDQlNiMjkwSUVkQklFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXkwK3pBSnM5DQpOdDM1MFVscWF4QkpIK3pZSzdMRytES0JLVU9WVEpvWkl5RVZSZDdqeUJ4UlZWdXVrK2czL3l0cjZkVHF2aXJkcUZFcjEyYkRZVnhnDQpBc2oxem5KN083anlUbVVJbXMya2FobkJBYnR6cHRmMnc5M052S1NMdFpsaHVBR2lvOVJOMUFVOWthMzR0QWh4Wks5dzhSeHJmdmJEDQpkNTBrYzN2a0RJemgyVGJobVlzRm1RdnRSVEVKeXNJQTIvZHlvSmFxbFlmUWpzZTJZWE1OZG1hTTNCdTBZNktmZjVNVE1QR2hKOXZaDQoveXhWaUpHZzRFOEhzQ2hXakJnYmwwU09pZDNnRjI3bkt1K1BPUW94aElMWVFCUkpMbnBCNUtmKzQyVE13Vmx4U3l3aHAxdDk0QjNSDQpMb0didzlobzk3MldHNnh3c1JZVUM5dGd1U1lCQlFJREFRQUJvMUV3VHpBTEJnTlZIUThFQkFNQ0FZWXdEd1lEVlIwVEFRSC9CQVV3DQpBd0VCL3pBZEJnTlZIUTRFRmdRVXN3TityamE4c0huUjNKUW10aEcrSWJKcGhwUXdFQVlKS3dZQkJBR0NOeFVCQkFNQ0FRQXdEUVlKDQpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFFdWgvd3VIYnJQNXdVT3hTUE1vd0IwdXlRbEIrcFFBSEtTa3EwbFBqejBlNzAxdnZieWs5dkltDQpNTWtReWgySSszUVpINFZGdmJCc1VmazJmdHYxVERJNlFVOWJSOC9vQ3kyMnhCbWRkTVZIeGp0cUQ2d1UyenowYzV5cEJkOEEzSFI0DQordmcxWUZrQ0V4aDh2UHROc0NCdFE3dGdNSHBuTTF6Rm1kSDRMVGxTYy91TXFwY2xYSExaQ0I2clRqempnVEdmQTZiN3dQNHBpRlhhDQpoTlZRQTdiaWhLT21OcW9ST2dIaEdFdldSR2l6UGZsVGRJU3pScEZHbGdDM2dDeTI0ZU1RNHR1aTV5aVBBWlppRmo0QTR4eWxOb0VZDQpva3hTZHNBUm8yN21IYnJqV3I0MlU4VStkWStHYVNsWVU3V2N1MitmWE1VWTdOMHY0WmpKL0w3ZkNnMD0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KTWljcm9zZWMgZS1Temlnbm8gUm9vdCBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlIcURDQ0JwQ2dBd0lCQWdJUkFNeTQ1NzlPS1JyOW90eG1wUndzRHhFd0RRWUpLb1pJaHZjTkFRRUZCUUF3Y2pFTE1Ba0dBMVVFDQpCaE1DU0ZVeEVUQVBCZ05WQkFjVENFSjFaR0Z3WlhOME1SWXdGQVlEVlFRS0V3MU5hV055YjNObFl5Qk1kR1F1TVJRd0VnWURWUVFMDQpFd3RsTFZONmFXZHVieUJEUVRFaU1DQUdBMVVFQXhNWlRXbGpjbTl6WldNZ1pTMVRlbWxuYm04Z1VtOXZkQ0JEUVRBZUZ3MHdOVEEwDQpNRFl4TWpJNE5EUmFGdzB4TnpBME1EWXhNakk0TkRSYU1ISXhDekFKQmdOVkJBWVRBa2hWTVJFd0R3WURWUVFIRXdoQ2RXUmhjR1Z6DQpkREVXTUJRR0ExVUVDaE1OVFdsamNtOXpaV01nVEhSa0xqRVVNQklHQTFVRUN4TUxaUzFUZW1sbmJtOGdRMEV4SWpBZ0JnTlZCQU1UDQpHVTFwWTNKdmMyVmpJR1V0VTNwcFoyNXZJRkp2YjNRZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCDQpBUUR0eUFEVmdYdk5PQUJIek51RXdTRnBMSFNRRENIWlU0ZnRQa05FVTYrcitJQ2JQSGlOMUkydXVPL1RFZHlCNXM4N2xveldieFhHDQpkMzZoTCtCZmtyWW4xM2FhSFVNODZ0bnNMKzQ1ODJwblM0dUN6eUw0WlZYK0xNc3ZmVWg2UFhYNXFxQW51M2pDQnNwUnduNW1TNi9ODQpvcWROQW9JL2dxeUZ4dUVQa0VlWmxBcHhjcE1xeWFiQXZqeFdUSE9TSi9GcnRmWDkvREFGWUpMRzY1WitBWkhDYWJFZUhYdFRSYmpjDQpRUi9KaTNIV1ZCVGppMVI0UDc3MFlqdGI5YVBzMVpKMDRuUXc3d0hiNGRTcm1ac3FhL2k5cGh5R0kwSmY3RW5lbW90YjlISTZRTVZKDQpQcVcranFweDYyejY5UnJrYXYxN2ZWVkE3MWh1NXRuVnZDU3J3ZSszQWdNQkFBR2pnZ1EzTUlJRU16Qm5CZ2dyQmdFRkJRY0JBUVJiDQpNRmt3S0FZSUt3WUJCUVVITUFHR0hHaDBkSEJ6T2k4dmNtTmhMbVV0YzNwcFoyNXZMbWgxTDI5amMzQXdMUVlJS3dZQkJRVUhNQUtHDQpJV2gwZEhBNkx5OTNkM2N1WlMxemVtbG5ibTh1YUhVdlVtOXZkRU5CTG1OeWREQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01JSUJjd1lEDQpWUjBnQklJQmFqQ0NBV1l3Z2dGaUJnd3JCZ0VFQVlHb0dBSUJBUUV3Z2dGUU1DZ0dDQ3NHQVFVRkJ3SUJGaHhvZEhSd09pOHZkM2QzDQpMbVV0YzNwcFoyNXZMbWgxTDFOYVUxb3ZNSUlCSWdZSUt3WUJCUVVIQWdJd2dnRVVIb0lCRUFCQkFDQUFkQUJoQUc0QStnQnpBTzBBDQpkQUIyQU9FQWJnQjVBQ0FBNlFCeUFIUUFaUUJzQUcwQVpRQjZBT2tBY3dEcEFHZ0FaUUI2QUNBQTZRQnpBQ0FBWlFCc0FHWUFid0JuDQpBR0VBWkFEaEFITUE0UUJvQUc4QWVnQWdBR0VBSUFCVEFIb0Fid0JzQUdjQTRRQnNBSFFBWVFCMEFQTUFJQUJUQUhvQWJ3QnNBR2NBDQo0UUJzQUhRQVlRQjBBT0VBY3dCcEFDQUFVd0I2QUdFQVlnRGhBR3dBZVFCNkFHRUFkQUJoQUNBQWN3QjZBR1VBY2dCcEFHNEFkQUFnDQpBR3NBWlFCc0FHd0FJQUJsQUd3QWFnRGhBSElBYmdCcEFEb0FJQUJvQUhRQWRBQndBRG9BTHdBdkFIY0Fkd0IzQUM0QVpRQXRBSE1BDQplZ0JwQUdjQWJnQnZBQzRBYUFCMUFDOEFVd0JhQUZNQVdnQXZNSUhJQmdOVkhSOEVnY0F3Z2Iwd2dicWdnYmVnZ2JTR0lXaDBkSEE2DQpMeTkzZDNjdVpTMXplbWxuYm04dWFIVXZVbTl2ZEVOQkxtTnliSWFCam14a1lYQTZMeTlzWkdGd0xtVXRjM3BwWjI1dkxtaDFMME5PDQpQVTFwWTNKdmMyVmpKVEl3WlMxVGVtbG5ibThsTWpCU2IyOTBKVEl3UTBFc1QxVTlaUzFUZW1sbmJtOGxNakJEUVN4UFBVMXBZM0p2DQpjMlZqSlRJd1RIUmtMaXhNUFVKMVpHRndaWE4wTEVNOVNGVS9ZMlZ5ZEdsbWFXTmhkR1ZTWlhadlkyRjBhVzl1VEdsemREdGlhVzVoDQpjbmt3RGdZRFZSMFBBUUgvQkFRREFnRUdNSUdXQmdOVkhSRUVnWTR3Z1l1QkVHbHVabTlBWlMxemVtbG5ibTh1YUhXa2R6QjFNU013DQpJUVlEVlFRRERCcE5hV055YjNObFl5QmxMVk42YVdkdXc3TWdVbTl2ZENCRFFURVdNQlFHQTFVRUN3d05aUzFUZW1sbmJzT3pJRWhUDQpXakVXTUJRR0ExVUVDaE1OVFdsamNtOXpaV01nUzJaMExqRVJNQThHQTFVRUJ4TUlRblZrWVhCbGMzUXhDekFKQmdOVkJBWVRBa2hWDQpNSUdzQmdOVkhTTUVnYVF3Z2FHQUZNZWdTWFVXWVlUYk1VdUUwdkUzUUpEdlR0ejNvWGFrZERCeU1Rc3dDUVlEVlFRR0V3SklWVEVSDQpNQThHQTFVRUJ4TUlRblZrWVhCbGMzUXhGakFVQmdOVkJBb1REVTFwWTNKdmMyVmpJRXgwWkM0eEZEQVNCZ05WQkFzVEMyVXRVM3BwDQpaMjV2SUVOQk1TSXdJQVlEVlFRREV4bE5hV055YjNObFl5QmxMVk42YVdkdWJ5QlNiMjkwSUVOQmdoRUF6TGpudjA0cEd2MmkzR2FsDQpIQ3dQRVRBZEJnTlZIUTRFRmdRVXg2QkpkUlpoaE5zeFM0VFM4VGRBa085TzNQY3dEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBTk1UDQpuR1pqV1M3S1hIQU0vSU84VmJIMGpnZHNaaWZPd1RzZ3FSeTdSbFJ3N2xyTW9IZnFhRVFuNi9JcDNYZXAxZnZqMUtjRXhKVzRDK0ZFDQphR0FIUXpBeFFtSGw3dG5sSk5VYjMrRktHNnFmeDEvNGVoSHFFNU1BeW9wWXNlN3REazIwMTZnMkpuemdPc0hWVjRMeGRiYjlpVi9hDQo4Nmc0bnpVR0NNNGlsYjdOMWZ5K1c5NTVhOXg2cVdWbXZyRWxXbC90ZnRPc1JtMU05REtIdENBRTRHeDRzSGZSaFVaTHBoSzNkZWhLDQp5VlpzMTVLcm5mVkpPTkpQVStOVmtCSGJtSmJHU2ZJKzlKOGI0UGVJM0NWaW1VVFljNzgvTVBNTU56N1V3aWlBYzdFQnQ1MWFsaFFCDQpTNmtSblNscUx0QmRnY0RQc2lCRHh3UGdOMDVkQ3R4WklDVT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ2VydGlnbmENCj09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURxRENDQXBDZ0F3SUJBZ0lKQVA3YzR3RVB5VWovTUEwR0NTcUdTSWIzRFFFQkJRVUFNRFF4Q3pBSkJnTlZCQVlUQWtaU01SSXcNCkVBWURWUVFLREFsRWFHbHRlVzkwYVhNeEVUQVBCZ05WQkFNTUNFTmxjblJwWjI1aE1CNFhEVEEzTURZeU9URTFNVE13TlZvWERUSTMNCk1EWXlPVEUxTVRNd05Wb3dOREVMTUFrR0ExVUVCaE1DUmxJeEVqQVFCZ05WQkFvTUNVUm9hVzE1YjNScGN6RVJNQThHQTFVRUF3d0kNClEyVnlkR2xuYm1Fd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURJYVBISjF0YXpOSFVtZ2g3c3RMN3ENClhPRW03UkZIWWVHaWZCWjRRQ0hrWUo1YXlHUGh4TEdXa3Y4WWJXa2o0U3RpOTkzaU5pK1JCN2xJenc3c2ViWXM1elJMY0FnbG96eUgNCkd4bnlnUWNQT0pBWjB4SCtoclR5MFY0ZUhwYk5nR3pPT3pHVHR2S2cwS21WRW4ybG1zeHJ5SVJXaWpPcDV5SVZVeGJ3ekJmc1YxL3ANCm9ncVlDZDdqWDV4djNFampoUXNWV3FhNm42eEk0d215OS9ReTNsNDB2aHg0WFVKYnpnNGlqMDJRMTMweUdMTUxMR3Evamo4VUVZa2cNCkRuY1V0VDJVQ0lmM0pSN1ZzbUFBN0c4cUtDVnVLajRZWXhjbFB6NUVJQmIySnNnbHJnVkt0T2RqTFBPTUZsTitYUHNSR2dqQlJtS2YNCklyanh3bzFwM1BvNldBYmZBZ01CQUFHamdid3dnYmt3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVR3UzK1FUbVENCnRDUlp2Z0h5VXRWRjlsbzUzQkV3WkFZRFZSMGpCRjB3VzRBVUd1MytRVG1RdENSWnZnSHlVdFZGOWxvNTNCR2hPS1EyTURReEN6QUoNCkJnTlZCQVlUQWtaU01SSXdFQVlEVlFRS0RBbEVhR2x0ZVc5MGFYTXhFVEFQQmdOVkJBTU1DRU5sY25ScFoyNWhnZ2tBL3R6akFRL0oNClNQOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CRUdDV0NHU0FHRytFSUJBUVFFQXdJQUJ6QU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUENCmhRTWVrbkgyUXEvaG8yR2U2L1BBRC9LbDFOcVY1dGErYURZOWZtNGZUSXJ2MFE4aGJWNmxVbVBPRXZqdkt0cHY2emYrRXdMSHl6cysNCkltdmFZUzUvMUhJOTNURGhIa3hBR1l3UDE1elJnekI3bUZuY2ZjYTVEQ2xNb1RPaTYyYzZaWVRUbHVMdGRrVndqN1VyM3ZrajFrbHUNClBCUzF4cDgxSGxEUXdZOXFjRVFDWXN1dUhXaEJwNnBYNkZPcUI5SUc5dFVVQmd1UkEzVXNiSEsxWVpXYURZdTVEZWYxMzFUTjN1YlkNCjFna0lsMlBsd1M2d3QwUW13Q2JBcjFVd25qdlZOaW9aQlBSY0h2L1BMTGYvMFAySFFCSFZFU083U01BaHFhUW9MZjBWK0xCT0svUXcNCld5SDhFWkUwdmtIdmU1MlhkZitYbGNDV1dDL3F1MGJYdStUWkxnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQUMgUmFceEMzXHhBRHogQ2VydGljXHhDM1x4QTFtYXJhIFMuQS4NCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUdaakNDQkU2Z0F3SUJBZ0lQQjM1U2szdmdGZU5YOEdtTXkrd01NQTBHQ1NxR1NJYjNEUUVCQlFVQU1Ic3hDekFKQmdOVkJBWVQNCkFrTlBNVWN3UlFZRFZRUUtERDVUYjJOcFpXUmhaQ0JEWVcxbGNtRnNJR1JsSUVObGNuUnBabWxqWVdOcHc3TnVJRVJwWjJsMFlXd2cNCkxTQkRaWEowYVdQRG9XMWhjbUVnVXk1QkxqRWpNQ0VHQTFVRUF3d2FRVU1nVW1IRHJYb2dRMlZ5ZEdsanc2RnRZWEpoSUZNdVFTNHcNCkhoY05NRFl4TVRJM01qQTBOakk1V2hjTk16QXdOREF5TWpFME1qQXlXakI3TVFzd0NRWURWUVFHRXdKRFR6RkhNRVVHQTFVRUNndysNClUyOWphV1ZrWVdRZ1EyRnRaWEpoYkNCa1pTQkRaWEowYVdacFkyRmphY096YmlCRWFXZHBkR0ZzSUMwZ1EyVnlkR2xqdzZGdFlYSmgNCklGTXVRUzR4SXpBaEJnTlZCQU1NR2tGRElGSmh3NjE2SUVObGNuUnBZOE9oYldGeVlTQlRMa0V1TUlJQ0lqQU5CZ2txaGtpRzl3MEINCkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXEydUpvMVBNU0NNSSs4UFBVWllJTHJnSWVtMDhrQmVHcWVudExoTTBSN0xRY056SlBOQ04NCnl1NUxGNnZRaGJDbkl3VExxS0w4NVhYYlFNcGlpWTlRbmdFOUpsc1loQnpMZkRlM2ZlelRmM01ac0dxeTJJaUtMVVYwcVBlenVNRFUNCjJzMGlpWFJOV2hVNWN4aDBUN1hybWFmQkhvaTB3cE9RWTVmenA2Y1NzZ2tpQnpQWmtjME9uQjhPSU1mdXV6T05qOExTV0tkZi9XVTMNCjRvakMySStHZFY3NUxhZUhNL0o0TnkrTHZCMkdOem14bFBMWXZFcWNneGhhQnZ6ejFOUzZqQlVKSmZENXRvMEVmaGNTTTJ0WFNFeFANCjJ5WWU2OHlRNTR2NWFIeHdENk1xMERvNDN6ZVg0bHZlZ0dIVGdOaVJnMEphVEFTSmFCRThyRjlvZ0VITVlFTE9EVm9xREErYk1NQ20NCjhJYmJxMG5YbDIxSWkva0R3RkpubXhMM3d2SXVtR1ZDMmRhYTQ5QVpNUXl0aDlWWEFub3c2SVltKzQ4amlsU0g1TDg4N3V2RGRVaGYNCkhqbHZnV0pzeFMzRUYxUVp0emVObkRlUnlQWUwxZXBqYjRPc09NTHpQOTZhKytFallmRElKc3MyeUtIek1JK2tvNktoM1ZPejN2Q2ENCk1oK0RrWGt3d2FrZlU1dFRvaFZUUDkyZHN4QTdTSDJKRC96dEEvWDdKV1IxRGhjWkRZOEFGbWQ1ZWtEOExWa0gyWkQ2bXEwOTNJQ0sNCjVsdzFvbWRNRVd1eCtJQmtBQzF2SW1IRnJFc201Vm9RZ3B1a2czczA5NTZKa1NDWGpyZEN4MmJEME9tazF2VWdqY1REbGF4RUNwMWINCmN6d21QUzlLdnFmSnB4QWUrNTlRYWZNQ0F3RUFBYU9CNWpDQjR6QVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BNEdBMVVkRHdFQi93UUUNCkF3SUJCakFkQmdOVkhRNEVGZ1FVMFFuUTZkZk9lWFJVK1Rvd3MvUnRMQU1ERzJnd2dhQUdBMVVkSUFTQm1EQ0JsVENCa2dZRVZSMGcNCkFEQ0JpVEFyQmdnckJnRUZCUWNDQVJZZmFIUjBjRG92TDNkM2R5NWpaWEowYVdOaGJXRnlZUzVqYjIwdlpIQmpMekJhQmdnckJnRUYNCkJRY0NBakJPR2t4TWFXMXBkR0ZqYVc5dVpYTWdaR1VnWjJGeVlXNTA3V0Z6SUdSbElHVnpkR1VnWTJWeWRHbG1hV05oWkc4Z2MyVWcNCmNIVmxaR1Z1SUdWdVkyOXVkSEpoY2lCbGJpQnNZU0JFVUVNdU1BMEdDU3FHU0liM0RRRUJCUVVBQTRJQ0FRQmNsTFc0UlpGTmptRWYNCkF5Z1BVM3ptcEZtcHM0cDZ4YkQvQ0h3c28zRWNJUk5ub1pVU1FEV0RnNDkwMnpOYzhFbDJDb0ZTM1VuVW1qSXo3NXVueTNYbGVzdVgNCkVwQmN1bnZGbTkrN09TUEkvNWpPQ2swaUFVZ0hmb3JBMVNCQ2xFVHZ2M2VpaVdkSUcwQURCYUdKN005aTR6MGxkbWEvSnJlN0lyNXYNCi96bFhkTHA2eVFHVndaVlI2S3NzK0xHR0lPay95elZiMGhmcEt2NkRFeGRBN29oaVpWdlZPMkRwZXp5NHlkVi9OZ0lscW1qQ01SVzMNCk1HWHJmeDFJZWJIUE9lSkNnQmJUOVpNai9FeVh5Vm8zYkh3aTJFck4wbzQyZ3ptUmtCREk4Y2sxZmorNDA0SEdJR1FhdGxEQ0lhUjQNCjNOQXZPMlNUZFBDV2tQSHYrd2xhTkVDVzhEWVN3YU4wakpOK1FkNTNpK3lHMmRJUFB5M1J6RUNpaVdaSUhpQ3puQ05aYzZsRWM3d2sNCmVaQldON1BHS1g2akQvRXBPZTkrWENneWNEV3MycmpJZFdiOG0wdzVSNDRiYjV0TkFsUWlNKzlodXA0cGhPOU9Tek5IZHBkcXkzNWYNCi9SV21ua0pEVzJaYWlvZ045eGE1UDFGbEsyWnFpOUU0VXFMV1JoSDYvSm9jZEo2UGx3c0NUMlRHOVdqVFN5My9wRGNlaXorL1JMNWgNClJxR0VQUWduVElFZ2Q0a0k2bWRBWG13SVVWODBXb3lXYU0zWDk0bkNITk15QUs5U3k5TmdXeW82UjM1ck1ET2hZaWwvU3JuaExlY1UNCkl3NE9HRWZoZWZ3VlZkQ3gvQ1Z4WTNVekhDTXJyMXpaN1VkM1lBNDdEeDdTd054a0JZbjhlTlpjTENaRHFRPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KVEMgVHJ1c3RDZW50ZXIgQ2xhc3MgMiBDQSBJSQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFcWpDQ0E1S2dBd0lCQWdJT0xtb0FBUUFDSDlkU0lTd1JYRHN3RFFZSktvWklodmNOQVFFRkJRQXdkakVMTUFrR0ExVUVCaE1DDQpSRVV4SERBYUJnTlZCQW9URTFSRElGUnlkWE4wUTJWdWRHVnlJRWR0WWtneElqQWdCZ05WQkFzVEdWUkRJRlJ5ZFhOMFEyVnVkR1Z5DQpJRU5zWVhOeklESWdRMEV4SlRBakJnTlZCQU1USEZSRElGUnlkWE4wUTJWdWRHVnlJRU5zWVhOeklESWdRMEVnU1Vrd0hoY05NRFl3DQpNVEV5TVRRek9EUXpXaGNOTWpVeE1qTXhNakkxT1RVNVdqQjJNUXN3Q1FZRFZRUUdFd0pFUlRFY01Cb0dBMVVFQ2hNVFZFTWdWSEoxDQpjM1JEWlc1MFpYSWdSMjFpU0RFaU1DQUdBMVVFQ3hNWlZFTWdWSEoxYzNSRFpXNTBaWElnUTJ4aGMzTWdNaUJEUVRFbE1DTUdBMVVFDQpBeE1jVkVNZ1ZISjFjM1JEWlc1MFpYSWdRMnhoYzNNZ01pQkRRU0JKU1RDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDDQpBUW9DZ2dFQkFLdUFoNXVPOE1OOGg5Zm9KSUlSc3p6ZFEyTHUrTU5GMnVqaG9GL1JLckxxazJqZnRNaldRK25FZFZsLy9PRWQrREZ3DQpJeHVJbmllNWUvMDYwc21wNlJRdmtMNERVc0ZKemZiOTVBaG1DMWVLb2tLZ3VOVi9hVnlRTXJLWERjcEszRVkrQWxXSlUrTWFXc3MyDQp4Z2RXOTR6UEVmUk11ekJ3QkpXbDlqbU0vWE9CQ0gySlhqSWVJcWtpUlV1d1ppNHd6SjlsL2Z6TGdhbng0RHV2bzRiUmllckVSWGxRDQpYYTdwSVhTU1RZdFpnbytVNCtsSzhlZEpzQlRqOVdMTDFYSzlIN25TbjZETnFQb0J5TmtOMzlyOFI1Mnp5RlRmU1VyeElhbitHRTd1DQpTTlFadSs5OTVPS2R5MXUyYnYvanpWcm5kSUlGdW9BbE9NdmthWjZ2UWFvYWhQVUNBd0VBQWFPQ0FUUXdnZ0V3TUE4R0ExVWRFd0VCDQovd1FGTUFNQkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkRGdRV0JCVGpxMVJNZ0tIYlZrTzNrVXJMODRKNkUxd0lxekNCDQo3UVlEVlIwZkJJSGxNSUhpTUlIZm9JSGNvSUhaaGpWb2RIUndPaTh2ZDNkM0xuUnlkWE4wWTJWdWRHVnlMbVJsTDJOeWJDOTJNaTkwDQpZMTlqYkdGemMxOHlYMk5oWDBsSkxtTnliSWFCbjJ4a1lYQTZMeTkzZDNjdWRISjFjM1JqWlc1MFpYSXVaR1V2UTA0OVZFTWxNakJVDQpjblZ6ZEVObGJuUmxjaVV5TUVOc1lYTnpKVEl3TWlVeU1FTkJKVEl3U1Vrc1R6MVVReVV5TUZSeWRYTjBRMlZ1ZEdWeUpUSXdSMjFpDQpTQ3hQVlQxeWIyOTBZMlZ5ZEhNc1JFTTlkSEoxYzNSalpXNTBaWElzUkVNOVpHVS9ZMlZ5ZEdsbWFXTmhkR1ZTWlhadlkyRjBhVzl1DQpUR2x6ZEQ5aVlYTmxQekFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBak5mZmZ1NGJnQkN6Zy9YYkVlcHJTNmlTR05uM0J6bjFMTDRHDQpkWHBvVXhVYzZrcnRYdndqc2hPZzB3bi85dll1YTBGeGVjM2liZjJ1V1d1RkhiaE9JcHJ0WmpsdVM1VG1WZndMRzR0M3dWTVRab25aDQpLTmFMODBWS1k3Zjlld3RoWGJodHZzUGNXM25TN1libG9rMitYblI4YXUwV09COS9XSUZhR3VzeWlDMnk4emwzZ0s5ZXRtRjFLZHNqDQpUWWpLVUNqTGhkTFRFS0paYnRPVFZBQjZva2FWaGdXY3FSbVk1VEZ5REFEaVo5bEE0Q1F6ZTI4c3VWeXJaWjBzckhicU5abjFsN2tQDQpKT3pIZGlFb1phNVg2QWVJZFVwV29OSUZPcVRtalpLSUxQUHk0Y0hHWWR0QnhjZWI5dzRhVVVYQ1lXdmNaQ2NYakZxMzJuUW96WmZrDQp2UT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClRDIFRydXN0Q2VudGVyIENsYXNzIDMgQ0EgSUkNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRXFqQ0NBNUtnQXdJQkFnSU9Ta2NBQVFBQzVhQmQxajhBVWI4d0RRWUpLb1pJaHZjTkFRRUZCUUF3ZGpFTE1Ba0dBMVVFQmhNQw0KUkVVeEhEQWFCZ05WQkFvVEUxUkRJRlJ5ZFhOMFEyVnVkR1Z5SUVkdFlrZ3hJakFnQmdOVkJBc1RHVlJESUZSeWRYTjBRMlZ1ZEdWeQ0KSUVOc1lYTnpJRE1nUTBFeEpUQWpCZ05WQkFNVEhGUkRJRlJ5ZFhOMFEyVnVkR1Z5SUVOc1lYTnpJRE1nUTBFZ1NVa3dIaGNOTURZdw0KTVRFeU1UUTBNVFUzV2hjTk1qVXhNak14TWpJMU9UVTVXakIyTVFzd0NRWURWUVFHRXdKRVJURWNNQm9HQTFVRUNoTVRWRU1nVkhKMQ0KYzNSRFpXNTBaWElnUjIxaVNERWlNQ0FHQTFVRUN4TVpWRU1nVkhKMWMzUkRaVzUwWlhJZ1EyeGhjM01nTXlCRFFURWxNQ01HQTFVRQ0KQXhNY1ZFTWdWSEoxYzNSRFpXNTBaWElnUTJ4aGMzTWdNeUJEUVNCSlNUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQw0KQVFvQ2dnRUJBTFRndTFHN09WeUxCTVZNZVJ3amhqRVFZME5WSnovR1JjZWtQZXdKRFJvZUlNSldIdDRiTndjd0lpOXY4UWJ4cTYzVw0KeUt0aG95OUR4TEN5TGZ6RGxtbDdmb3Jrek1BNUVwQkNZTW5NTldqdTJsK1FWbC9OSEUxYldFbnJEZ0ZQWlBvc1BJbFkyQzh1NHJCbw0KNlNJN2RZbldSQnBsOGh1WEpoMG9iYXpvdlZrZEt5VDIxb1FEWm9na0FIaGc4ZmlyL2dLeWEvc2krelhtRnRHdDlpNFM1UG8xYXVVWg0KdVYzYk94NGErOVAvRlJRSTJBbHF1a1dkRkhsZ2ZhOUFpZ2R6czVPVzAzUTBqVG8zS2Q1YzdQWHVMakhDSU55KzhVOS9JMUxaVytKaw0KMlp5cUJ3aTFSYjNSMERIQnExU2ZxZExEWW1BRDhiczVTcEpLUFFxNW5jV2cvamNDQXdFQUFhT0NBVFF3Z2dFd01BOEdBMVVkRXdFQg0KL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZERnUVdCQlRVb3Z5ZnM4UFlBOU5YWEFlazBDU253UElBMURDQg0KN1FZRFZSMGZCSUhsTUlIaU1JSGZvSUhjb0lIWmhqVm9kSFJ3T2k4dmQzZDNMblJ5ZFhOMFkyVnVkR1Z5TG1SbEwyTnliQzkyTWk5MA0KWTE5amJHRnpjMTh6WDJOaFgwbEpMbU55YklhQm4yeGtZWEE2THk5M2QzY3VkSEoxYzNSalpXNTBaWEl1WkdVdlEwNDlWRU1sTWpCVQ0KY25WemRFTmxiblJsY2lVeU1FTnNZWE56SlRJd015VXlNRU5CSlRJd1NVa3NUejFVUXlVeU1GUnlkWE4wUTJWdWRHVnlKVEl3UjIxaQ0KU0N4UFZUMXliMjkwWTJWeWRITXNSRU05ZEhKMWMzUmpaVzUwWlhJc1JFTTlaR1UvWTJWeWRHbG1hV05oZEdWU1pYWnZZMkYwYVc5dQ0KVEdsemREOWlZWE5sUHpBTkJna3Foa2lHOXcwQkFRVUZBQU9DQVFFQU5tRGtjUGNHSUVQWkl4cEM4dmlqc3JsTmlyVHp3cHBWTVh6RQ0KTzJlYXROOU5Eb3FUU2hlTEc0M0tpZUhQT2g2c0hmR2NNclNPV1hhaVFZVWxONkFUMFBWOFR0WHFsdUp1Y3NHN0t2NXNidmlSbUViOA0KeVJ0WFcrcklHanMvc0ZHWVBBZmFMRmtCMm90RTZPRjAvYWRvM1ZTNmcwYnN5RWExK0srWHdEc0pISS9PY3BZOU0xWnd2SmJMMk5WOQ0KSUpxRG54cmNPZkhGY3FNUkEvMDdRbElwMitnQjk1dGVqTmFOaGs0Wityd2N2c1VocFllZWVDNDIyd2x4bzNJMCtHempCZ255WGxhbA0KMDkyWSt0VG1CdlR3dGlCalMrb3B2YXFDWmg3N2dhcW5ONjBUR09hU3c0SEJNN3VJSHFIbjRyUzlNV3dPVVQxdis1WldnT0kyRjlIYw0KNUE9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpUQyBUcnVzdENlbnRlciBVbml2ZXJzYWwgQ0EgSQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRDNUQ0NBc1dnQXdJQkFnSU9IYUlBQVFBQzdMZGdnSGlOdGdZd0RRWUpLb1pJaHZjTkFRRUZCUUF3ZVRFTE1Ba0dBMVVFQmhNQw0KUkVVeEhEQWFCZ05WQkFvVEUxUkRJRlJ5ZFhOMFEyVnVkR1Z5SUVkdFlrZ3hKREFpQmdOVkJBc1RHMVJESUZSeWRYTjBRMlZ1ZEdWeQ0KSUZWdWFYWmxjbk5oYkNCRFFURW1NQ1FHQTFVRUF4TWRWRU1nVkhKMWMzUkRaVzUwWlhJZ1ZXNXBkbVZ5YzJGc0lFTkJJRWt3SGhjTg0KTURZd016SXlNVFUxTkRJNFdoY05NalV4TWpNeE1qSTFPVFU1V2pCNU1Rc3dDUVlEVlFRR0V3SkVSVEVjTUJvR0ExVUVDaE1UVkVNZw0KVkhKMWMzUkRaVzUwWlhJZ1IyMWlTREVrTUNJR0ExVUVDeE1iVkVNZ1ZISjFjM1JEWlc1MFpYSWdWVzVwZG1WeWMyRnNJRU5CTVNZdw0KSkFZRFZRUURFeDFVUXlCVWNuVnpkRU5sYm5SbGNpQlZibWwyWlhKellXd2dRMEVnU1RDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRA0KZ2dFUEFEQ0NBUW9DZ2dFQkFLUjNJNVpFcjVEME1hY1E5Q2FIblBNNDJROWUzczlCNkRHdHhuU1JKSlo0SGdtZ201cVZTa3IxWW53Qw0KcU1xcysxb0Vkam5lWC9INXM3L3pBMWhWMHFxMzR3UWkwZmlVMmlJSUFJM1RmQ1pkekhkNTV5eDRPYWdtY3c2aVhTVnBoVTlWRHBydg0KeHJsRTRWYzkzeDlVSXVWdlphb3poRHJ6em5xK1ZaZXVqUklQRkRQaVVIRERTWWNUdkZIZTE1Z1NXdTg2Z3pPU0JuV0xrbndTYUh0dw0KYWcrMW03WjNXMGhabmVUdldxM3p3WjdVMTBWT3lsWTBJYncrRjF0dmR3eElBVU1wc04wL2xtN21sYW9Nd0NDMi9UNDJKNXpqWE05Tw0KZ2R3WnU1R1FmZXptbHdRZWs4d2lTZGVYaHJZVENqeERJM2QrOE56bXpTUWZPNE9iTkRxRE5PTUNBd0VBQWFOak1HRXdId1lEVlIwag0KQkJnd0ZvQVVrcVIxTEtTZXZvRkU2M244aXNXVnBlc1FkWE13RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQw0KQVlZd0hRWURWUjBPQkJZRUZKS2tkU3lrbnI2QlJPdDUvSXJGbGFYckVIVnpNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUUFvMHVDRw0KMWViNGUvQ1gzQ0pyTzVVVVZnOFJNS1dhVHpxd091QUd5MlgxN2NhWEovNGw4bGZtWHBXTVBtUmdGVnAvTHcwQnhiRmcvVVUxei9DeQ0KdndiWjcxcStzMklodE5lck5YeFRQcVluOGFFdDJob2puY3pkN0R3dG5pYzBYUS9DTm5tOHlVcGlMZTFyMlgxQlEzeTJxc3J0WWJFMw0KZ2hVSkdvb1dNTmpzeWRaSGNuaExFRVlVamw4T3IrekhMNnNRMTdieGJ1eUdzc0xvRFpKejNLTDBEenEvWVNNUWlaeElRRzV3QUxQVA0KdWpkRVdCRjZBbXFJOERjMDhCbnByTlJsYy9acGpHU1VPbm1GS2JBV0t3eUNQd2FjeC8wUUs1NFBMTGFlNHhXLzJUWWN1aVVhVWowYQ0KN0NJTUhPQ2tvajN3NkRuUGdjQjc3VjBmYjhYUUM5ZVkNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRGV1dHNjaGUgVGVsZWtvbSBSb290IENBIDINCj09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURuekNDQW9lZ0F3SUJBZ0lCSmpBTkJna3Foa2lHOXcwQkFRVUZBREJ4TVFzd0NRWURWUVFHRXdKRVJURWNNQm9HQTFVRUNoTVQNClJHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlJ6RWZNQjBHQTFVRUN4TVdWQzFVWld4bFUyVmpJRlJ5ZFhOMElFTmxiblJsY2pFak1DRUcNCkExVUVBeE1hUkdWMWRITmphR1VnVkdWc1pXdHZiU0JTYjI5MElFTkJJREl3SGhjTk9Ua3dOekE1TVRJeE1UQXdXaGNOTVRrd056QTUNCk1qTTFPVEF3V2pCeE1Rc3dDUVlEVlFRR0V3SkVSVEVjTUJvR0ExVUVDaE1UUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUnpFZk1CMEcNCkExVUVDeE1XVkMxVVpXeGxVMlZqSUZSeWRYTjBJRU5sYm5SbGNqRWpNQ0VHQTFVRUF4TWFSR1YxZEhOamFHVWdWR1ZzWld0dmJTQlMNCmIyOTBJRU5CSURJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNyQzZNMTRJc3BGTEVVaGE4OEVPUTUNCmJ6VmRTcTdkNm1HTmxVbjBiMlNqR21CbXBLbEFJb1RaMUtYbGVKTU9hQUd0dVUxY09zN1R1S2hDUU4vUG83cUNXV3FTRzZ3Y210b0kNCkt5VW4rV2tqUi9IZzZ5eDZtL1VUQXRCK05IekNuandBV2F2MTJnejFNandyckZEYTFzUGVnNVRLcUF5Wk1nNElTRlpiYXZ2YTRWaFkNCkFVbGZja0U4RlFZQmpsMnRxcmlUdE0yZTY2Zm9haTFTTk5zNjcxeDFVZHJiOHpINTduR1lNc1JVRlVRTStadFY3YTNmR0FpZ280YUsNClNlNVRCWThaVE5YZVdIbWIwbW9jUXF2RjFhZlBhQStXNU9GaG1IWmh5SkY4MWo0QTRwRlFoK0dkQ3VhdGw5SWR4anA5eTd6YUF6VFYNCmpsc0I5V29IdHhhMmJrcC9BZ01CQUFHalFqQkFNQjBHQTFVZERnUVdCQlF4dzNrYnV2VlQxeGZnaVhvdEYyd0tzeXVkTXpBUEJnTlYNCkhSTUVDREFHQVFIL0FnRUZNQTRHQTFVZER3RUIvd1FFQXdJQkJqQU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUFsR1JaclRsazV5bnINCkUvNWF3NHNUVjhnRUpQQjBkOEJnNDJmNzZZbW1nNytXZ254dTFNTTk3NTZBYnJzcHRKaDZzVHRVNnprWFIzNGFqZ3Y4SHpGWk1RU3kNCnpoZnpMTWRpTmxYaUl0aUpWYlNZU0twayt0WWNOdGhFZUZwYUl6cFhsL1Y2TUUrdW4ycE1TeXVPb0FQalB1Q3AxTko3MHJPbzRuSTgNCnJaNy9nRm5rbTBXMDlqdXd6VGtabURMbDZpRmhrT1F4SVk0MHNmY3ZOVXFGRU5ybmlqY2h2bGxqNFBLRmlERlQxRlFVaFhCNTlDNEcNCmR5ZDFMeCs0aXZuK3hicllOdVNEN09kbHQ3OWpXdk5HcjRHVU45UkJqTllqMWg3UDlXZ2JSR09pV3Jxbk5WbWg1WEFGbXc0alY1bVUNCkNtMjZPV01vaHBMekdJVFkrOUhQQlZaa1Z3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ29tU2lnbiBTZWN1cmVkIENBDQo9PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRHF6Q0NBcE9nQXdJQkFnSVJBTWNvUndtenVHeEZqQjM2SlBVMlR1a3dEUVlKS29aSWh2Y05BUUVGQlFBd1BERWJNQmtHQTFVRQ0KQXhNU1EyOXRVMmxuYmlCVFpXTjFjbVZrSUVOQk1SQXdEZ1lEVlFRS0V3ZERiMjFUYVdkdU1Rc3dDUVlEVlFRR0V3SkpUREFlRncwdw0KTkRBek1qUXhNVE0zTWpCYUZ3MHlPVEF6TVRZeE5UQTBOVFphTUR3eEd6QVpCZ05WQkFNVEVrTnZiVk5wWjI0Z1UyVmpkWEpsWkNCRA0KUVRFUU1BNEdBMVVFQ2hNSFEyOXRVMmxuYmpFTE1Ba0dBMVVFQmhNQ1NVd3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdw0KZ2dFS0FvSUJBUURHdFdoZkhaUVZ3NlFJVlMzam9GZDY3K2wwS3J1NWZGZEpHaEZlVHltSERFaldhdWVQMUg1WEpMa0dpZVFjUE9xcw0KNDlvaGdITWhDdTk1bUd3ZkNQK2hVSDN5bUJ2SlZHOCtwU2pzSVFRUFJic0hQYUhBK2lxWUhVNEdrL3YxaUR1clg4c1d2K2J6bmtxSA0KN1JucXdwOUQ1UEdCcFg4UVR6N1JTbUt0VXh2TGcvOEhaYVdTTFdhcFc3aGE5QjIwSVpGS0YzdWVNdjVXSkRteVZJUkQ5WVRDMkx4Qg0Ka015ZDFtamE2WUpRcVR0b3o3VmRBcFJnRnJGRDJVTmQzVjJIYnVxN3M4bHI5Z09VQ1hEZUZoRjZLK2gyajBrUW1IZTVZMXlMTTVkMQ0KOWd1TXNxdGIzblFnSlQvajh4SDVoMmlHTlhIREhZd3Q2K1VhckE5ejFZSlpRSURUQWdNQkFBR2pnYWN3Z2FRd0RBWURWUjBUQkFVdw0KQXdFQi96QkVCZ05WSFI4RVBUQTdNRG1nTjZBMWhqTm9kSFJ3T2k4dlptVmthWEl1WTI5dGMybG5iaTVqYnk1cGJDOWpjbXd2UTI5dA0KVTJsbmJsTmxZM1Z5WldSRFFTNWpjbXd3RGdZRFZSMFBBUUgvQkFRREFnR0dNQjhHQTFVZEl3UVlNQmFBRk1GTDdYQzI5ejU4QURzQQ0KajhjK0RrV2ZIbDNzTUIwR0ExVWREZ1FXQkJUQlMrMXd0dmMrZkFBN0FJL0hQZzVGbng1ZDdEQU5CZ2txaGtpRzl3MEJBUVVGQUFPQw0KQVFFQUZzL3VraE5RcTNzVW5qTzJRaUJxMUJXOUNhdjhjdWp2UjNxUXJGSEJaRTdwaUwxRFJZSGpaaU0vRW9aTkdlUUZzT1kzd28zYQ0KQmlqSkQ0bWtVNmwxUDdDVys2dE1NMVg1ZUNaR2J4czJtUHRDZHNHQ3VZN2UrMFg1WXh0aU96a0d5bmQ2cUR3SnoydzJQUThLUlV0cA0KRmhwRmZUTURaZmxTY1pBbWxheE1EUFdMa3ovTWRYU0ZtTHIvWW5wTkg0bitycjJVQUptL0VhWGM0SG5GRmd0OUFtRWQ2b1g1QWhWUA0KNTFxSlRoUnY0emRMaGZYQlBHSGcvUVZCc3BKL3d4MmcwSzVTWkdCckdNWW1uTmoxWk9RMkdtS2ZpZzgrLzIxT0dWWk9JSkZzbnpReg0KT2pSWFVEcHZnVjRHeHZVK2ZFNk9LODVsQmk1ZDBpcFRkRjdUYmllZWp3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ3liZXJ0cnVzdCBHbG9iYWwgUm9vdA0KPT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEb1RDQ0FvbWdBd0lCQWdJTEJBQUFBQUFCRDRXcUxVZ3dEUVlKS29aSWh2Y05BUUVGQlFBd096RVlNQllHQTFVRUNoTVBRM2xpDQpaWEowY25WemRDd2dTVzVqTVI4d0hRWURWUVFERXhaRGVXSmxjblJ5ZFhOMElFZHNiMkpoYkNCU2IyOTBNQjRYRFRBMk1USXhOVEE0DQpNREF3TUZvWERUSXhNVEl4TlRBNE1EQXdNRm93T3pFWU1CWUdBMVVFQ2hNUFEzbGlaWEowY25WemRDd2dTVzVqTVI4d0hRWURWUVFEDQpFeFpEZVdKbGNuUnlkWE4wSUVkc2IySmhiQ0JTYjI5ME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBDQorTWk4dlJSUVpoUC84Tk41N0NQeXR4ckhqb1h4RW5PbUdhb1EyNXlpWlhSYWR6NVJmVmIyM0NPMjFPMWZXTEUzVGRWSkRtNzFhb2ZXDQowb3pTSjhiaS96YWZtR1dnRTA3R0ttU2IxWkFTenhRRzlEdmoxQ2krNkE3NHEwNUlsRzJPbFRFUVhPMmlMYjNWT20yeUhMdGd3RVpMDQpBZlZKcm41R2l0QjBqYUVNQXM3dS9PZVB1R3RtODM5RUFMOW1KUlFyM1JBd0hRZVdQMDMyYTdpUHQzc01wVGpyM2tmYjFWMDUvSWluDQo4OWNxZFBIb1dxSTduMUM2cG94Rk5jSlFaWlhjWTRMdjNiOTNUWnhpeVdOekZ0QXBEMG1wU1BDenFyZHN4YWN3T1VCZHJzVGlYU1pUDQo4TTRjSXdoaHFKUVp1Z1JpUU93Zk9IQjNFZ1p4cHpBWVhTVW5wUUlEQVFBQm80R2xNSUdpTUE0R0ExVWREd0VCL3dRRUF3SUJCakFQDQpCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUzJDSHNOZXN5c0lFeUdWakplejZ0dWhTMXdWekEvQmdOVkhSOEVPREEyDQpNRFNnTXFBd2hpNW9kSFJ3T2k4dmQzZDNNaTV3ZFdKc2FXTXRkSEoxYzNRdVkyOXRMMk55YkM5amRDOWpkSEp2YjNRdVkzSnNNQjhHDQpBMVVkSXdRWU1CYUFGTFlJZXcxNnpLd2dUSVpXTWw3UHEyNkZMWEJYTUEwR0NTcUdTSWIzRFFFQkJRVUFBNElCQVFCVzd3b2pvRlJPDQpsWmZKK0luYVJjSFVvd0FsOUI4VHE3ZWpoVmhwd2pDdDJCV0tMZVBKellGYStITWpXcWQ4QmZQOUlqc08wUWJFMnpaTWN3U081YkFpDQo1TVh6THFYWkkrTzRUa29ncDI0Q0pKOGlZR2Q3aXgxeUNjVXhYT2w1bjRCSFBhMmhDd2NVUFVmL0Eya2FEQXRFNTJNbHAzK3l5YmgyDQpoTzBqOW4wSHEwViswOSt6dittS3RzMm9vbWNyVXRXM1pmQTVUR09na1htVFVnOVUzWU83bjlHUHAxTnp3OHYvTU94OEJMallSQitUDQpYM0VKSXJkdVB1b2NBMDZkR2lCaCs0RTM3Rjc4Q2tXcjErY1hWZENnNm1DYnB2YmpqRnNwd2daZ0ZKMHRsMHlwa3hXZFljUUJYMGpXDQpXTDFXTVJKT0VjZ2g0TE1Sa1dYYnRLYUlPTTVWDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCmVQS0kgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUZzRENDQTVpZ0F3SUJBZ0lRRmNpOVpVZGNyN2lYQUY3a0J0SzhuVEFOQmdrcWhraUc5dzBCQVFVRkFEQmVNUXN3Q1FZRFZRUUcNCkV3SlVWekVqTUNFR0ExVUVDZ3dhUTJoMWJtZG9kMkVnVkdWc1pXTnZiU0JEYnk0c0lFeDBaQzR4S2pBb0JnTlZCQXNNSVdWUVMwa2cNClVtOXZkQ0JEWlhKMGFXWnBZMkYwYVc5dUlFRjFkR2h2Y21sMGVUQWVGdzB3TkRFeU1qQXdNak14TWpkYUZ3MHpOREV5TWpBd01qTXgNCk1qZGFNRjR4Q3pBSkJnTlZCQVlUQWxSWE1TTXdJUVlEVlFRS0RCcERhSFZ1WjJoM1lTQlVaV3hsWTI5dElFTnZMaXdnVEhSa0xqRXENCk1DZ0dBMVVFQ3d3aFpWQkxTU0JTYjI5MElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TUlJQ0lqQU5CZ2txaGtpRzl3MEINCkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQTRTVVA3bzNiaUROMVo4MnRIMzA2VG0yZDB5OFU4Mk4weXdFaGFqZnFoRkFIU3laYkNVTnMNCklaNXF5TlVEOVdCcGo4endJdVFmNS9kcUlqRzNMQlh5NFA0QWFrUC9oMlhHdFJyQnAweHRJbkFoaWpIeWwzU0pDUkltSEo3SzJSS2kNCmxUemE2V2UvQ0tCazQ5WkN0MFh2bC9UMjlkZTFTaFVDV0gyWVdFdGd2TTNYRFpvVE0xUFJZZmw2MWRkNHM1b3o5d0NHemgxTmxEaXYNCnFPeDRVWENLWEJDRFVTSDNFVDAwaGw3bFNNMlhnWUkxVEJuc1pmWnJ4UVdoN2tjVDFyTWhKNVFRQ3Rra083cStSQk5HTUQrWFBOalgNCjEycnVPempqSzlTWERya2I1d2RKZnpjcStYZDR6MVR0VzBhZG80QU9rVVBCMWx0ZkZMcWZwbzBrUjBCWnYzSTRzalpzTi8rWjBWME8NCldRcXJhZmZBc2dSRmVsUUFycjVUOXJYbjRmZzhvekhTcWY0aFVtVEZwbWZ3ZFFjR2xCU0JWY1luNUFHUEY4RnFjZGUrUy91VVdIMSsNCkVUT3hRdmRpYkJqV3p3bG9QbjlzOWg2UFlxMmxZOXNKcHg4aVFrRWViNW1LUHRmNVAwQjZlYkNsQVpMU25UMElGYVVRQVMyek1uYW8NCmxRMnplcHI3QnhCNEVXL2hqOGU2RHlVYWRDcmxISmhCbWQ4aGgraVZCbW9LczJwSGRtWDJPcytQWWhjWmV3b296UnJTZ3g0aHh5eS8NCnZ2OWhhTGRuRzd0NFRZM09aK1hrd1k2M0kyYmluWkIxTkppcE5pdUttcFM1bmV6TWlySDRKWWxjV3JZdmpCOXRlU1NuVW1qRGhEWGkNClpvMWpEaVZOMVJteTVuazNweUtkVkRFQ0F3RUFBYU5xTUdnd0hRWURWUjBPQkJZRUZCNE05N1puOHVHU0pnbEZ3RlU1TG5jL1FrcWkNCk1Bd0dBMVVkRXdRRk1BTUJBZjh3T1FZRVp5b0hBQVF4TUM4d0xRSUJBREFKQmdVckRnTUNHZ1VBTUFjR0JXY3FBd0FBQkJSRnNNTEgNCkNsWjg3bHQ0REpYNUdGUEJwaHpZRURBTkJna3Foa2lHOXcwQkFRVUZBQU9DQWdFQUNiT0RVMWtCUHBWSnVmR0J1dmwySUNPMUoyQjANCjFHcVpORjVzQUZQWm4vS21zU1FIUkdvcXhxV09lQkxvUjlsWUd4TXFYbm1ibndvcVo2WWxQd1pwVm5QRGltWkkreW1CVjNRR3lwenENCktPZzRaeVlyOGRXMVAyV1QrRFpkam8yTlFDQ0hHZXJ2SjhBOXREa1BKWHRvVUhSVm5BeFpmVm85UVpRbFVnamdSeXdWTVJuVnZ3ZFYNCnhyc1N0WmYwWDRPRnVuSEIyV3lCRVhZS0NyQy9ncGYzNmozNit1d3RxU2lVTzFiZDBsRXVyc0M5Q0JXTWQxSTBsdGFick5NZGptRVANCk5YdWJyamxwQzJKZ1FDQTJqNi83TnU0dENFb2R1TCtiWFBqcXBSdWdjNmJZK0c3Z013UmZhS29uaCszWndaQ2M3YjNqYWpXdlk5K3INCkdObTY1dWxLNmxDS0QyR1RIdUl0R2VJd2xEV1NYUTYyQjY4WmdJOUhrRkZMTGszZGhlTFNDbElLRjVyOEdyQlFBdVVCbzJNM0lVeEUNCnhKdFJtUkVPYzV3R2oxUXVweWhlUkRtSFZpMDN2WVZFbE9FTVN5eWN3NUtGTkdITEQ3aWJTa05TL2pRNmZianBLZHgycWNndytCUngNCmdNWWVOa2gwSWtGY2g0TG9HSEdMUVlsRTUzNVlXNmk0alJQcHAyekRSKzJ6R3AxaXJvMkM2cFNlM1ZrUXc2M2Q0azNqTWRYSDdPankNCnNQNlNIaFlLR3Z6WjgvZ250c20rSGJSc1pKQi85T1RFVzljM3JrSU8zYVFhYjN5SVZNVVdidUY2YUM3NE9yOE5wRHlKTzNpblRtT0QNCkJDRUlaNDN5Z2tuUVcvMnh6UStEaE5RK0lJWDNTajByblAwcUNnbE42b0g0RVp3PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpUXHhjM1x4OWNceDQyXHhDNFx4QjBUQUsgVUVLQUUgS1x4QzNceEI2ayBTZXJ0aWZpa2EgSGl6bWV0IFNhXHhDNFx4OUZsYXlceGM0XHhiMVx4NjNceGM0XHhiMXNceGM0XHhiMSAtIFNceEMzXHhCQ3JceEMzXHhCQ20gMw0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRkZ6Q0NBLytnQXdJQkFnSUJFVEFOQmdrcWhraUc5dzBCQVFVRkFEQ0NBU3N4Q3pBSkJnTlZCQVlUQWxSU01SZ3dGZ1lEVlFRSA0KREE5SFpXSjZaU0F0SUV0dlkyRmxiR2t4UnpCRkJnTlZCQW9NUGxURHZISnJhWGxsSUVKcGJHbHRjMlZzSUhabElGUmxhMjV2Ykc5cQ0KYVdzZ1FYSmh4WjkweExGeWJXRWdTM1Z5ZFcxMUlDMGdWTU9jUXNTd1ZFRkxNVWd3UmdZRFZRUUxERDlWYkhWellXd2dSV3hsYTNSeQ0KYjI1cGF5QjJaU0JMY21sd2RHOXNiMnBwSUVGeVljV2ZkTVN4Y20xaElFVnVjM1JwZE1POGM4TzhJQzBnVlVWTFFVVXhJekFoQmdOVg0KQkFzTUdrdGhiWFVnVTJWeWRHbG1hV3RoYzNsdmJpQk5aWEpyWlhwcE1Vb3dTQVlEVlFRRERFRlV3NXhDeExCVVFVc2dWVVZMUVVVZw0KUzhPMmF5QlRaWEowYVdacGEyRWdTR2w2YldWMElGTmh4SjlzWVhuRXNXUEVzWFBFc1NBdElGUER2SExEdkcwZ016QWVGdzB3TnpBNA0KTWpReE1UTTNNRGRhRncweE56QTRNakV4TVRNM01EZGFNSUlCS3pFTE1Ba0dBMVVFQmhNQ1ZGSXhHREFXQmdOVkJBY01EMGRsWW5wbA0KSUMwZ1MyOWpZV1ZzYVRGSE1FVUdBMVVFQ2d3K1ZNTzhjbXRwZVdVZ1FtbHNhVzF6Wld3Z2RtVWdWR1ZyYm05c2IycHBheUJCY21IRg0KbjNURXNYSnRZU0JMZFhKMWJYVWdMU0JVdzV4Q3hMQlVRVXN4U0RCR0JnTlZCQXNNUDFWc2RYTmhiQ0JGYkdWcmRISnZibWxySUhabA0KSUV0eWFYQjBiMnh2YW1rZ1FYSmh4WjkweExGeWJXRWdSVzV6ZEdsMHc3eHp3N3dnTFNCVlJVdEJSVEVqTUNFR0ExVUVDd3dhUzJGdA0KZFNCVFpYSjBhV1pwYTJGemVXOXVJRTFsY210bGVta3hTakJJQmdOVkJBTU1RVlREbkVMRXNGUkJTeUJWUlV0QlJTQkx3N1pySUZObA0KY25ScFptbHJZU0JJYVhwdFpYUWdVMkhFbjJ4aGVjU3hZOFN4YzhTeElDMGdVOE84Y3NPOGJTQXpNSUlCSWpBTkJna3Foa2lHOXcwQg0KQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBaW0xTC94Q0lPc1AyZnBUbzZpQmtjSzRoZ2I0NmV6emI4UjFTZjFuNjh5Sk1sYUNRdkVoTw0KRWF2N3Q3V05lb01vakNaRzJFNlZRSWRobjhXZWJZR0hWMnlLTzdSbTZzeEEvT09xYkxMTEFkc3l2OUxyaGMraERWWERXemhYY0xoMQ0KeG5uUkZERHRHMWhiYSs4MThxRWhUc1hPZkpsZmJMbTRJcE5RcDgxTWNHcSthZ1YvRTV3ckh1citSODRFcFcrc2t5NThLNStlZVJPUg0KNk9xZXlqaDFqbUt3bFpNcTVkL3BYcGR1SUY5ZmhIcEVPUmxBSExwVksvc3dzb0h2aE9QYzdKZzRPUU9GQ0tsVUF3VXA4TW1QaStvTA0KaG1VWkVkUHBDU1BlYUpNRHlUWWNJVzdPakdieG1URFkxN1BESGZpQkxxaTlnZ3RtL29MTDRlQWFnc05BZ1FJREFRQUJvMEl3UURBZA0KQmdOVkhRNEVGZ1FVdllpSHlZLzJwQW9McXV2Ri9wRWpuYXRLaWpJd0RnWURWUjBQQVFIL0JBUURBZ0VHTUE4R0ExVWRFd0VCL3dRRg0KTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBQjE4K2ttUE5PbTNKcElXbWdWMDUwdlFiVGxzd3liMnpyZ3h2TVRmdkNyNA0KTjVFWTNBVElaSmtyR0cyQUExbkpydmhZMEQ3dHd5T2ZhVHlHT0J5ZTc5b25lTkdFTjNHS1BFczV6MzVGQnRZdDJJcE5lQkxXcmNMVA0KeTlMUVFmTW1Oa3FibFd3TTd1WFJReWRtd1lqM2VyTWdiT3F3YVN2SElPZ01BOFJCQlpuaVArUnIrS0NHZ2NlRXhoL1ZTNEVTc2hZaA0KTEJPaGdMSmVERW9UbmlEWVlrQ3JrT3BrU2krc0RRRVNlVVdvTDRjWmFNamloY2N3c25YNU9EK3l3Sk8wYStJRFJNNW5vTitKMXEyTQ0KZHFNVHc1UmhLMnZaYk1FSENpSUhoV3lGSkVhcHZqK0xlSVNDZmlRTW5mMkJOK01scU8wMlRwVXN5WnlRMnV5cFFqeXR0Z0k9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkJ1eXBhc3MgQ2xhc3MgMiBDQSAxDQo9PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEVXpDQ0FqdWdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCTE1Rc3dDUVlEVlFRR0V3Sk9UekVkTUJzR0ExVUVDZ3dVDQpRblY1Y0dGemN5QkJVeTA1T0RNeE5qTXpNamN4SFRBYkJnTlZCQU1NRkVKMWVYQmhjM01nUTJ4aGMzTWdNaUJEUVNBeE1CNFhEVEEyDQpNVEF4TXpFd01qVXdPVm9YRFRFMk1UQXhNekV3TWpVd09Wb3dTekVMTUFrR0ExVUVCaE1DVGs4eEhUQWJCZ05WQkFvTUZFSjFlWEJoDQpjM01nUVZNdE9UZ3pNVFl6TXpJM01SMHdHd1lEVlFRRERCUkNkWGx3WVhOeklFTnNZWE56SURJZ1EwRWdNVENDQVNJd0RRWUpLb1pJDQpodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUlzOEIwWFk5dC9teDhxNmpVUEZSNDJ3V3NFNDI1S0VISzhUMUE5dk5rWWd4QzdNDQpjWEEwb2pUVE55N1kzVHAzTDhEcktlaGMwcldwa1RTSElsbit6TnZubWErV3dhakhRTjJsRll4dXlIeVhBOHZtSVBMWGwxOHhvUzgzDQowcjd1dnFtdHFFeWVJV1pETzZpODh3bWpPTlZaSk1IQ1IzYXhpRnlDTzdzcnBnVFhqQWVQemRWQkhmQ3V1Q2tzbEZKZ05KUTcydUE0DQowWjB6UGhYMGt6TEZBTnExS1dZT09uZ1BJVkpmQXVXU2V5WFRraDR2RloyQjVKMk82TytKemhSTVZCMGNnUkpOY0tpK0VBVVhmaC9SDQp1RmRWN2MyN1VzS3dIbmpDVFRab3kxWW13VkxCdlhiM1dOVnlmaDlFZHJzQWlSMFduVkUxNzAzQ1Z1OXI0SXc3RGVrQ0F3RUFBYU5DDQpNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVUDQyYVdZdjhlM3VjbzY4NHNEbnRrSEdBMXNnd0RnWURWUjBQDQpBUUgvQkFRREFnRUdNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUUFWR240VGlybm9CNk5MSnpLeVFKSHlJZEZraGI1amF0TFBnY0lWDQoxWHArRENtc054NGNmSFpTbGRxMWZ5T2hLWGRseVRLZHFDNVdxMkIyemhhMGpYOTR3TldaVVlOL1h0bStES2hRN1NMSHJRVk1kdnZ0DQo3aDVIWlBiM0ozMWNLQTlGeFZ4aVhxYWFrWkczVXhjdTNLMWduWlprT2IxbmFMS3VCY3RONTE4ZlY0YlZJSndvKzI4VE9QWDJFWkwyDQpmWmxlSHd6b3EwUWtLWEpBUFRaU3I0eFlrSFBCN0dFc2VhSHNoN1UvMmszWklRQXczcERhRHRNYVNLaytoUXNVaTR5OFFaNXE5dzV3DQp3RFgzT2FKZFp0QjdXWitvUnhLYUp5T2tMWTRuZzVJZ29kY1ZmL0V1R083MFNIOHZmL0doR0xXaEM1U2dZaUF5bkIzMjFPKy9USWhvDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkJ1eXBhc3MgQ2xhc3MgMyBDQSAxDQo9PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEVXpDQ0FqdWdBd0lCQWdJQkFqQU5CZ2txaGtpRzl3MEJBUVVGQURCTE1Rc3dDUVlEVlFRR0V3Sk9UekVkTUJzR0ExVUVDZ3dVDQpRblY1Y0dGemN5QkJVeTA1T0RNeE5qTXpNamN4SFRBYkJnTlZCQU1NRkVKMWVYQmhjM01nUTJ4aGMzTWdNeUJEUVNBeE1CNFhEVEExDQpNRFV3T1RFME1UTXdNMW9YRFRFMU1EVXdPVEUwTVRNd00xb3dTekVMTUFrR0ExVUVCaE1DVGs4eEhUQWJCZ05WQkFvTUZFSjFlWEJoDQpjM01nUVZNdE9UZ3pNVFl6TXpJM01SMHdHd1lEVlFRRERCUkNkWGx3WVhOeklFTnNZWE56SURNZ1EwRWdNVENDQVNJd0RRWUpLb1pJDQpodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtTTzEzVFpLV1RlWHgrSGdKSHFUam5tR2NaRUM0RFZDNjlUQjRzU3ZlWm44QUt4DQppZlpnaXNSYnNFTFJ3Q0dveStHYjcyUlJ0cWZQRmZWMGdHZ0VrS0JZb3VaMHBsTlRWVWhqUDVKVzNTUk9qdmk2Sy8vek5JcWVLTmMwDQpuNnd2MWcveHBDKzlVckpKaFcwNU5mQkVNSk5HSlBPMjUxUDd2R0d2cWFNVSs4SVhGNFJzNEh5SStNa2NWeXp3UFg2VXZDV1RoT2lhDQpBSnBGQlVKWGdQUk96dG11T2ZiSVV4QU1aVHBIZTJEQzF2cVJ5Y1p4YkwyUmh6eVJoa21yOHcrZ2JDWjJYaHlzbTNIbGpieWJJUjZjDQoxamgrSklBVk1ZS1dzVW5UWWpkYmlBd0tZalQrcDBoK21iRXdpNUEzbFJ5b0g2VXNqZlJWeU52ZFdRckNyWGlnOUlzQ0F3RUFBYU5DDQpNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVT0JUbXlQQ3BwQVAwVGo0aW8xdnkxdUN0UUhRd0RnWURWUjBQDQpBUUgvQkFRREFnRUdNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUJBUUFCWjZPTXlTVTlFMk5kRm0vc29UNEpYSkVWS2lyWmdDRlBCZHk3DQpwWW1yRXpNcW5qaTNqRzhDY21QSGMzY2VDUWE2T3loN3BFZkpZV3NJQ0NEOGlnV0tIN3k2eHNMK3oyN3NFek54Wnk1cCtxa3NQMmJBDQpFbGxOQzFRQ2tvUzcyeEx2ZzNCd2VNaFQrdC9HeHYvY2lDOEh3RW1kTWxkZzAvTDJtU2xmNTZvQnpLd3pxQndLdTVIRUE2QnZ0alQ1DQpodE96ZGxTWTlFcUJzMU9kVFVEczVYY1RSYTlicWgvWUwweUNlLzRxeEZpN1QveWUvUU5sR2lvT3c2VWdGcFJyZWFhaUVyUzdHcVFqDQplbC93cm9RazVQTXIrNG9rb3llWVpkb3dkWGI4R1pIbzIrdWJQeksvUUpjSEpyck04NVNGU25vbms4K1FRdFM0V3hhbTU4dEFBOTE1DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkVCRyBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2FceEM0XHg5RmxheVx4YzRceGIxXHg2M1x4YzRceGIxc1x4YzRceGIxDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGNXpDQ0E4K2dBd0lCQWdJSVRLOXpRaHlPZEFJd0RRWUpLb1pJaHZjTkFRRUZCUUF3Z1lBeE9EQTJCZ05WQkFNTUwwVkNSeUJGDQpiR1ZyZEhKdmJtbHJJRk5sY25ScFptbHJZU0JJYVhwdFpYUWdVMkhFbjJ4aGVjU3hZOFN4YzhTeE1UY3dOUVlEVlFRS0RDNUZRa2NnDQpRbWxzYWNXZmFXMGdWR1ZyYm05c2IycHBiR1Z5YVNCMlpTQklhWHB0WlhSc1pYSnBJRUV1eFo0dU1Rc3dDUVlEVlFRR0V3SlVVakFlDQpGdzB3TmpBNE1UY3dNREl4TURsYUZ3MHhOakE0TVRRd01ETXhNRGxhTUlHQU1UZ3dOZ1lEVlFRRERDOUZRa2NnUld4bGEzUnliMjVwDQpheUJUWlhKMGFXWnBhMkVnU0dsNmJXVjBJRk5oeEo5c1lYbkVzV1BFc1hQRXNURTNNRFVHQTFVRUNnd3VSVUpISUVKcGJHbkZuMmx0DQpJRlJsYTI1dmJHOXFhV3hsY21rZ2RtVWdTR2w2YldWMGJHVnlhU0JCTHNXZUxqRUxNQWtHQTFVRUJoTUNWRkl3Z2dJaU1BMEdDU3FHDQpTSWIzRFFFQkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEdW9JUmgwRHBxWmhBeTJERTRmNmVuNWYyaDRmdVhkN2h4bHVnVGxrYURUN2J5DQpYM0pXYmhOZ3BRR1I0bHZGelZjZmQyTlIveTg5MjdrL3FxazE1M25ROWRBa3RpSHE2eU9VL2ltLys0bVJER1NhQlVvcnpBenU4VDJiDQpnbW1rVFBpYWIrY2kyaEM2WDVMOEdDY0txS3BFK2k0c3RQdEdtZ2dEZzNLcmlPUnFjc25sWlI5dUtnK2RzK2c3NUF4dWV0cFgvZGZyDQplWXRlSUFiVGRndHNBcFdqbHVUTGRsSFJLSjJoR3Z4RW9rM01lbmFvRFQyL0YwOGlpRkQ5cnJic2tGQktXNStWUWFyS0Q3Sksvb0NaDQpUcU5HRmF2NGMwSnF3bVoyc1FvbUZkMlRrdXpicVY5VUlsS1JjRjBUNmtqc2JnTnMyZDFzL09zTkEvK21neEtiOGFtVEQ4VW1UREd5DQpZNWxoY3VjcVpKblN1T2wxNG55cHFab2Fxc05XMnhDYVBJTlN0bnVXdDZ5SGQ2aTU4bWNMbEVPenJ6NXora0kyc1NYRkNqRW1OMVpuDQp1cU1MZmRiM2ljMW5vYmM2SG1aUDlxQlZGQ1ZNTERNTnBrR012UVF4YWhCeUNwME9MbmE5WHZOUmlZdW9QMVZ6djlzNnhpUUZscEpJDQpxa3VOS2dQbFY1RVE5R29vRlc1SGQ0UmNVWFNmR2VubUhtTVdPZU1SRmVOWUdrUzl5OFJzWnRlRUJ0OHc5RGVpUXlKNTBoQnMzN3ZtDQpFeEg4bllRS0UzdndPOUQ4b3dyWGllcVdmbzFJaFI1a1g5dFVvcXpWZWdKNWE5S0s4R2ZhWlhJTkZIRGs2WTU0anpKMGZGZnkxdGIwDQpOb2tiK0Nsc2k3bjJsOUdrTHFxK0N4bkNSZWx3WFFJREFKM1pvMk13WVRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCDQovd1FFQXdJQkJqQWRCZ05WSFE0RUZnUVU1ODdHVC93V1o1YjZTcU1Id1FTbnkycmUya2N3SHdZRFZSMGpCQmd3Rm9BVTU4N0dUL3dXDQpaNWI2U3FNSHdRU255MnJlMmtjd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dJQkFKdVltbDIrOHlnamRzWnM5My9tUUo3QU50eVZEUjJ0DQpGY1UyMk5VNTcvSWVJbDZ6Z3JSZHUwd2F5cElOMzBja0hyTWsycEdJNllOdzNaUFg2YnF6M3haYVB0N2d5UHZUL1d3cCtCVkdvR2dtDQp6Sk5Tcm9JQms1REtkOHBOU2UvaVd0a3F2VERPVExLQnRqRE9XVS9hV1IxcWVxUkZzSUltZ1laMjlmVVFBTGp1c3dub1Q0Y0NCNjRrDQpYUEJmckFvd3pJcEFvSE1Fd2Z1SkpQYWFIRnkzUEFwbk5nVUlNYk92MkFGb0t1QjRqM1RldUZHa2pHd2dQYUw3czlRSi9YdkNnS3FUDQpiQ21ZSWFpN0Z2T3BFbDkwdFllWThwVW0zelR2aWxPUmlGMGFsS00vZkNMNDE0aTZwb3lXcUQxU05HS2ZBQjVVVlVKbnhrMUdqN3NVDQpSVDBLbGhhT0VLR1htZFhUTUlYTTNyUnl0N3lLUEJncGFQM2NjUWZ1SkRscSt1MmxyRGd2K1I0UURnWnhHaEJNL25WKy94NVhPVUxLDQoxK0VWb1ZaVldSdlJvNjhSMkU3RHBTdnZrTC9BN0lJVFc0M1djaXlUVG85cUtkK0ZQTk1ONEtJWUVzeFZMMGUzcDVzQy9rSDJpRXh0DQoycWtCUjROa0oySVFndFlTZTE0REh6U3B5WkgrcjExdGhpZTNJNnAxR01vZzU3QVAxNGtPcG1jaVkvU0RRU3NHUzd0WTFkSFh0N2tRDQpZOWlKU3JTcTNSWmo5VzYrWUtINDdlaldrRThheHNXZ0tkT25JYWoxV2p6M3gwbWlJWnBLbFZJZ2xuS2Fac3YzMG9aRGZDSytsdm05DQpBYWhIM2VVN1FQbDFLNXNyUm1TR2pSNzBqL3NIZDlEcVNhSWNqVklVcGdxVA0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpjZXJ0U0lHTiBST09UIENBDQo9PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURPRENDQWlDZ0F3SUJBZ0lHSUFZRkZuQUNNQTBHQ1NxR1NJYjNEUUVCQlFVQU1Ec3hDekFKQmdOVkJBWVRBbEpQTVJFd0R3WUQNClZRUUtFd2hqWlhKMFUwbEhUakVaTUJjR0ExVUVDeE1RWTJWeWRGTkpSMDRnVWs5UFZDQkRRVEFlRncwd05qQTNNRFF4TnpJd01EUmENCkZ3MHpNVEEzTURReE56SXdNRFJhTURzeEN6QUpCZ05WQkFZVEFsSlBNUkV3RHdZRFZRUUtFd2hqWlhKMFUwbEhUakVaTUJjR0ExVUUNCkN4TVFZMlZ5ZEZOSlIwNGdVazlQVkNCRFFUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxjenVYN0kNCkpVcU90ZHUwS0J1cVY1RG8wU0xUWkxyVGsralVySVpoUUdwZ1YyaFVoRTI4YWxRQ0JmL2ZtNW9xcmwwSGowckRLSC92K3l2NmVmSEgNCnJmQVFVeVNRaTJiSnFJaXJyMXFqQU9tK3VrYnVXM043TEJlQ2dWNWlMS0VDWmJPOXhTc0Fmc1Q4QXpOWERlM2krczVkUmRZNHpUVzINCnNzSFFuSUZLcXVTeUFWd2RqMStaeExHdDI0Z2g2NUFJZ29Eek1LTkQ1cENDcmxVb1NlMWIxNmtRT0E3K2oweGJtMGJxUWZXd0NIVEQNCjBJZ3p0bnpYZE4vY2hORkREblU1b1NWQUtPcDR5dzRzTGptZGpJdHVGaHd2Sm9JUTR1TmxsQW9Fd0Y3M1hWdjRFT0xRdW5wTCs5NDMNCkFBQWFXeWpqMHB4elBqS0htS0hKVVMvWDNxd3pzMDhDQXdFQUFhTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEINCkFmOEVCQU1DQWNZd0hRWURWUjBPQkJZRUZPQ01tOXNsU2JQeGZJYldza0tIQzlCcm9ObmtNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0SUINCkFRQSswaHlKTGpYOCtIWGQ1bjlsaVBSeVRNa3MxekpPODkwWmVVZTlqanRia3c5UVNTUVRheFFHY3U4SjA2R2g0MENFeWVjWU1uUTgNClNHNFBuMHZVOXg3VGs0WmtWSmRqY2xEVlZjLzZJSk1Db3B2REk1Tk9GbFYyb0hCNWJjMGhIODh2TGJ3WjQ0Z3grRmthZ1FuSWw2WjANCngyREVXOHhYanJKMS9Sc0NDZHRaYjNLVGFmY3hRZGFJT0wrSHNyMFdlZm1xNUw2SUpkMWhKeU1jdFRFSEJEYTBHcEM5b0hSeFVJbHQNCnZCVGpENGF1OGFzK3g2QUp6S05JMGVEYlpPZVN0Yyt2Y2tOd2kvbkRoRHdUcW42U20xZFRrL3B3d3BFT01mbWJaMTNwbGpoZVg3TnoNClRvZ1ZaOTZlZGhCaUlMNVZhWlZEQURsTjl1NndXazVKUkZSWVgwS0QNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ05OSUMgUk9PVA0KPT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEVlRDQ0FqMmdBd0lCQWdJRVNUTUFBVEFOQmdrcWhraUc5dzBCQVFVRkFEQXlNUXN3Q1FZRFZRUUdFd0pEVGpFT01Bd0dBMVVFDQpDaE1GUTA1T1NVTXhFekFSQmdOVkJBTVRDa05PVGtsRElGSlBUMVF3SGhjTk1EY3dOREUyTURjd09URTBXaGNOTWpjd05ERTJNRGN3DQpPVEUwV2pBeU1Rc3dDUVlEVlFRR0V3SkRUakVPTUF3R0ExVUVDaE1GUTA1T1NVTXhFekFSQmdOVkJBTVRDa05PVGtsRElGSlBUMVF3DQpnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVE5mYy9jM2V0NkZ0ekY4TFJiKzFWdkc3cTZLUjVzbXpEDQpvKy9objdFN1NJWDFtbHdoSWhBc3hZTE8ydU9hYmpmaGh5emN1UXhhdW9oVjMvMnEyeDh4NmdIeDN6a0J3UlA5U0ZJaHhGWGYydGl6DQpWSGE2ZExHM2ZkZkE2UFpaeFUzSXZhMGZGTnJmV0VRbE1oa3F4MzUranE0NHNEQjdSM0lKTWZBdzI4TWJkaW03YVhaT1Yva2JaS0tUDQpWcmR2bVc3YkNnU2NFZU9BSDh0amxCQUtxZUZrZ2pINWpDZnRwcGtBOW5DVEdQaWhOSWFqM1hyQ0dIbjJlbVUxejVEcnZUT1RuMU9yDQpjenZtbXpRZ0x4M3ZxUjFqR3FDQTJ3TXYrU1lhaHRLTnU2bStVanFIWjBnTnY3U2cyQ2ErSTE5ek4zOG01cElFbzMvUElLZTM4enJLDQp5NW5MQWdNQkFBR2pjekJ4TUJFR0NXQ0dTQUdHK0VJQkFRUUVBd0lBQnpBZkJnTlZIU01FR0RBV2dCUmw4akd0S3ZmMzNWS1dDc2NDDQp3UTd2cHRVN0VUQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01Bc0dBMVVkRHdRRUF3SUIvakFkQmdOVkhRNEVGZ1FVWmZJeHJTcjM5OTFTDQpsZ3JIQXNFTzc2YlZPeEV3RFFZSktvWklodmNOQVFFRkJRQURnZ0VCQUVzMTdzemtyci9EYnEyZmxUdExQMXNlMzFjcG9sbktPT0s1DQpHditlNW00eTNSNnU2alczOVpPUlR0cEM0Y01YWUZEeTBWd211WUszNm0za25JVG5BM2tYcjVnOWxOdkh1Z0RudUw4QlY4RjNSVElNDQpPL0cwSEFpdy9WR2dvZDJhSFJNMm1tMjN4enk1NGNYWkYvcUQxVDBWb0R5N0hndml5SkEvcUlZTS9QbUxYb1hMVDF0TFloRkh4VVY4DQpCUzlCc1o0UWFSdVpsdUJWZWZ0T2hwbTRsTnFHT0dxVG8rZkxidVhmNmlGVmlaeDlmWCtZOVFDSjd1T0V3RnlXdGNWRzZrYmdoVlcyDQpHOGtTMXNITnpZRHpBZ0U4eUduTFJVaGoySlRRN0lVT08wNFJaZlNDaktZOXJpNGlsQW5JWE9vOGdWMFdLZ09YRmxVSjI0cEJncDVtDQpteEU9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkFwcGxpY2F0aW9uQ0EgLSBKYXBhbmVzZSBHb3Zlcm5tZW50DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEb0RDQ0FvaWdBd0lCQWdJQk1UQU5CZ2txaGtpRzl3MEJBUVVGQURCRE1Rc3dDUVlEVlFRR0V3SktVREVjTUJvR0ExVUVDaE1UDQpTbUZ3WVc1bGMyVWdSMjkyWlhKdWJXVnVkREVXTUJRR0ExVUVDeE1OUVhCd2JHbGpZWFJwYjI1RFFUQWVGdzB3TnpFeU1USXhOVEF3DQpNREJhRncweE56RXlNVEl4TlRBd01EQmFNRU14Q3pBSkJnTlZCQVlUQWtwUU1Sd3dHZ1lEVlFRS0V4TktZWEJoYm1WelpTQkhiM1psDQpjbTV0Wlc1ME1SWXdGQVlEVlFRTEV3MUJjSEJzYVdOaGRHbHZia05CTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCDQpDZ0tDQVFFQXAyM2dkRTZIajZVRzNtaWkyNGFaUzJRTmNmQUtCWnVPcXVITUx0SnFPOEY2dEpkaGpZcSt4cHFjQnJTR1VlUTNEblI0DQpmbCtLZjVTazEwY0kvVkJhVnVSb3JDaHpvSHZwZnhpU1FFOHRuZld1UkVoek5nYWVaQ3c3TkNQYlhDYmtjWG1QMUc1NUlybVR3Y3JODQp3VmJ0aUdyWG9Ea2hCRmNzb3ZXOFIwRlBYalFpbGJVZktXMWVTdk5OY3I1QlZpQ0gvT2xRUjljd0ZPNWNqRlc2V1kySC9DUGVrOUFFDQpqUDN2YmIzUWVzbWxPbXB5TThaS0RRVVhLaTE3c2FmWTF2Qys5RC9xRGlodFFXRWpkbmpEdUdXazgxcXV6TUtxMmVkWTNyWituWVZ1DQpueW9LYjU4REtUQ1hLQjI4dDg5VUtVNVJNZmtudGlnbS9xSmo1a0VXOERPWVJ3SURBUUFCbzRHZU1JR2JNQjBHQTFVZERnUVdCQlJVDQpXc3NtUDNITWxFWU5sbFBxYTBqUWsvNUNkVEFPQmdOVkhROEJBZjhFQkFNQ0FRWXdXUVlEVlIwUkJGSXdVS1JPTUV3eEN6QUpCZ05WDQpCQVlUQWtwUU1SZ3dGZ1lEVlFRS0RBL21sNlhtbkt6bG03M21sTC9sdXB3eEl6QWhCZ05WQkFzTUd1T0NvdU9EbCtPRHF1T0NzZU9EDQp2T09DdCtPRHArT0RzME5CTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFRkJRQURnZ0VCQURscVJIWjNPRHJzDQpvMmRHRC9tTEJxajdhcEF4em43czJ0R0pmSHJyTGd5OW1UTG5zQ1RXdy8vMXNvZ0poeXpqVk9HanBySUlDOENGcU1qU25ISDJIWjlnDQovRGd6RStHZTNBdGYyaFpRS1hzdmNKRVBtYm8wTkkyVmRNVitlS2xtWGIzS0lYZENFS3htSmozZWthdjlGZkJ2N1d4ZkVQanpGdllEDQppbytuRWhFTXkvMC9lY0djL1dMdW84OVVETkVyWHhjKzR6Ni93Q3MrQ1p2K2lLWit0SklYL0NPVWdiMXVwOFdNd3VzUlJkdjRRY21XDQpkdXB3WDNrU2ErU2pCMW9GN3lkSnp5R2Zpa3dKY0dhcEpzRXJFVTR6MGc3ODFtelNEakprYVArdEJYaGZBeDJvNDVDc0pPQVBRS2RMDQpyb3NvdDRMS0dBZm10MXQwNlNBWmY3SWJpVlE9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMw0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUQvakNDQXVhZ0F3SUJBZ0lRRmF4dWxCbXllVXRCOWllcHd4Z1BIekFOQmdrcWhraUc5dzBCQVFzRkFEQ0JtREVMTUFrR0ExVUUNCkJoTUNWVk14RmpBVUJnTlZCQW9URFVkbGIxUnlkWE4wSUVsdVl5NHhPVEEzQmdOVkJBc1RNQ2hqS1NBeU1EQTRJRWRsYjFSeWRYTjANCklFbHVZeTRnTFNCR2IzSWdZWFYwYUc5eWFYcGxaQ0IxYzJVZ2IyNXNlVEUyTURRR0ExVUVBeE10UjJWdlZISjFjM1FnVUhKcGJXRnkNCmVTQkRaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVNBdElFY3pNQjRYRFRBNE1EUXdNakF3TURBd01Gb1hEVE0zTVRJd01USXoNCk5UazFPVm93Z1pneEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFIWlc5VWNuVnpkQ0JKYm1NdU1Ua3dOd1lEVlFRTEV6QW8NCll5a2dNakF3T0NCSFpXOVVjblZ6ZENCSmJtTXVJQzBnUm05eUlHRjFkR2h2Y21sNlpXUWdkWE5sSUc5dWJIa3hOakEwQmdOVkJBTVQNCkxVZGxiMVJ5ZFhOMElGQnlhVzFoY25rZ1EyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnBkSGtnTFNCSE16Q0NBU0l3RFFZSktvWkkNCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnppWG1KWUhUTlhPVEl6K3V2TGg0eW4xRXJkQm9qcVpJNHhtS1U0a0I2WXp5NWoNCksvQkd2RVN5aWFIQUtBeEpjQ0dWbjJUQXBwTVNBbVVtaHNhbGlmRDYxNFNnY0s5UEdwYy9Ca1RWeWV0eUVIM2tNU2o3SEdIbUtBZEUNCmM1SWlhYWNEaUd5ZFk4aFMycGduNXdoTWNENjB5UkxCeFdlRFhUUHpBeEhzYXRCVDR0RzZObUNVZ0x0aFkyeGJGMzdmUUpRZXF3M0MNCklTaHdpUC9XSm14c1lBUWxUbFYrZmUrL2xFamV0eDNkY0kwRlg0aWxtL0xDN3VyUlFFRnRZamdkVmdiRkEwZFJJQm44ZXhBTERtS3UNCmRsVy9YM2UrUGtrQlV6MllKUU4ySkZvZHROdUo2bm5sdHJNN1A3cE1LRUYvQnF4cWpzSFE5Z1VkZmVaQ2h1T2wxVWNDQXdFQUFhTkMNCk1FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd0hRWURWUjBPQkJZRUZNUjV5bzZoVGdNZEhOeHINCjJ6RmJsRDQvTUg4dE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQXR4UlBQVm9CN2VuaTluNjRzbWVmdjJ0K1VYZ2xwcCtkdWFJeTkNCmNyNUhxUTZYRXJoSzhXVFRPZDhsTk5UQnpVNkI4QThFeENTek5KYkdwcW93MzJoaGM5ZjVqb1dKN3c1ZWxTaEtLaWVQRUk0dWZJYkUNCkFwN2FESGRsRGtRTmt2MzlzeFkyK2hFTkhZd09CNGxxS1ZiM2N2VGRGWngzTldaWHF4TlQySTdCUU1YWEV4WmFjc2UzYVFIRWVyR0QNCkFXaDlqVUdobEJqQkpWejg4UDZEQW9kOERRM1BMZ2hjU2tBTlB1eUJZZVlrMjhyZ0RpMEhzajVXM0kzMVFZVUhTSnNNQzh0SlAzM3MNCnQvM0xqV2VKR3F2dHV4NmpBQWdJRnlxQ1hERmRSb290RDRhYmRObEYrOVJBc1hxcWFDMkdzcGtpNGNFcng1ejQ4MStvZ2hMckdSRXQNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KdGhhd3RlIFByaW1hcnkgUm9vdCBDQSAtIEcyDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJQ2lEQ0NBZzJnQXdJQkFnSVFOZndtWE5tRVQ4azlKajFYbTY3WFZqQUtCZ2dxaGtqT1BRUURBekNCaERFTE1Ba0dBMVVFQmhNQw0KVlZNeEZUQVRCZ05WQkFvVERIUm9ZWGQwWlN3Z1NXNWpMakU0TURZR0ExVUVDeE12S0dNcElESXdNRGNnZEdoaGQzUmxMQ0JKYm1NdQ0KSUMwZ1JtOXlJR0YxZEdodmNtbDZaV1FnZFhObElHOXViSGt4SkRBaUJnTlZCQU1URzNSb1lYZDBaU0JRY21sdFlYSjVJRkp2YjNRZw0KUTBFZ0xTQkhNakFlRncwd056RXhNRFV3TURBd01EQmFGdzB6T0RBeE1UZ3lNelU1TlRsYU1JR0VNUXN3Q1FZRFZRUUdFd0pWVXpFVg0KTUJNR0ExVUVDaE1NZEdoaGQzUmxMQ0JKYm1NdU1UZ3dOZ1lEVlFRTEV5OG9ZeWtnTWpBd055QjBhR0YzZEdVc0lFbHVZeTRnTFNCRw0KYjNJZ1lYVjBhRzl5YVhwbFpDQjFjMlVnYjI1c2VURWtNQ0lHQTFVRUF4TWJkR2hoZDNSbElGQnlhVzFoY25rZ1VtOXZkQ0JEUVNBdA0KSUVjeU1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFb3RXY2dudVZuZkZTZUlmK2loYS9CZWJmb3dKUERRZkdBRkc2REFKUw0KTFNLa1FqbkUvby9xeWNHKzFFMy9uM3FlNHJGOG1xMm5oZ2x6aDlIbm11TjZwYXB1KzdxemNNQm5pS0kxMUtPYXNmMnR3dTh4K3FpNQ0KOC9zSXhwSFIreW1WbzBJd1FEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BNEdBMVVkRHdFQi93UUVBd0lCQmpBZEJnTlZIUTRFRmdRVQ0KbXRnQU1BRG5hMytGR082THRzNktEUGdSNGJzd0NnWUlLb1pJemowRUF3TURhUUF3WmdJeEFOMzQ0RmRIVzZmbUNzTzk5WUNLbHpVTg0KRzRrOFZJWjNLTXFoOUhuZXRlWTRzUEJsY0l4L0FsVEN2Ly9Zb1Q3Wnp3SXhBTVNObFB6Y1U5TGNuWGdXSHhVekkxTlM0MW94WFozSw0KcnIwVEtVUU5KMXVvNTJpY0V2ZFlQeTV5QWxlamo2RVVMZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EgLSBHMw0KPT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVLakNDQXhLZ0F3SUJBZ0lRWUFHWHQwYW42clMwbXRaTEwvZVErekFOQmdrcWhraUc5dzBCQVFzRkFEQ0JyakVMTUFrR0ExVUUNCkJoTUNWVk14RlRBVEJnTlZCQW9UREhSb1lYZDBaU3dnU1c1akxqRW9NQ1lHQTFVRUN4TWZRMlZ5ZEdsbWFXTmhkR2x2YmlCVFpYSjINCmFXTmxjeUJFYVhacGMybHZiakU0TURZR0ExVUVDeE12S0dNcElESXdNRGdnZEdoaGQzUmxMQ0JKYm1NdUlDMGdSbTl5SUdGMWRHaHYNCmNtbDZaV1FnZFhObElHOXViSGt4SkRBaUJnTlZCQU1URzNSb1lYZDBaU0JRY21sdFlYSjVJRkp2YjNRZ1EwRWdMU0JITXpBZUZ3MHcNCk9EQTBNREl3TURBd01EQmFGdzB6TnpFeU1ERXlNelU1TlRsYU1JR3VNUXN3Q1FZRFZRUUdFd0pWVXpFVk1CTUdBMVVFQ2hNTWRHaGgNCmQzUmxMQ0JKYm1NdU1TZ3dKZ1lEVlFRTEV4OURaWEowYVdacFkyRjBhVzl1SUZObGNuWnBZMlZ6SUVScGRtbHphVzl1TVRnd05nWUQNClZRUUxFeThvWXlrZ01qQXdPQ0IwYUdGM2RHVXNJRWx1WXk0Z0xTQkdiM0lnWVhWMGFHOXlhWHBsWkNCMWMyVWdiMjVzZVRFa01DSUcNCkExVUVBeE1iZEdoaGQzUmxJRkJ5YVcxaGNua2dVbTl2ZENCRFFTQXRJRWN6TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEENCk1JSUJDZ0tDQVFFQXNyOG5MUHZiMkZ2ZGVIc2JubmRtZ2NzK3ZIeXU4NllubWpTamFERnhPRE5pNVBOeFpubXhxV1dqcFl2VmoyQXQNClAwTE1xbXN5d0NQTExFSGQ1Ti84WVp6aWM3SWlsUkZER0YvRXRoOVhiQW9GV0NMSU5rdzZmS1hSejRhdmlLZEVBaE4wY1hNS1Fsa0MNCitCc1VhMExmYjErNmE0S2luVnZuU3IwZUFYTGJTM1RvTzM5L2ZSOEV0Q2FiNExSYXJFYzlWYmpYc0NaU0tBRXhRR2JZMlNTOTlpclkNCjdDRkpYSnYyZXVsL1ZUVitsbXVOazVNbnk1Szc2cXhBd0ovQytJRFBYZlJhM001MGhxWStiQXRUeXIyU3poa0djdVlNWERocHh3VFcNCnZHek9XL2IzYUp6Y0pSVklpS0hwcWZpWW5PRHoxVEVvWVJGc1o1YU5PWm5Md2tVa09RSURBUUFCbzBJd1FEQVBCZ05WSFJNQkFmOEUNCkJUQURBUUgvTUE0R0ExVWREd0VCL3dRRUF3SUJCakFkQmdOVkhRNEVGZ1FVcld5cWxHQ2M3ZVQvK2o0S2RDdGpBL2UyV2I4d0RRWUoNCktvWklodmNOQVFFTEJRQURnZ0VCQUJwQTJKVmxyQW1TaWNZNTlCRGxxUTVtVTExNDN2b2trYnZuUkZIZnhoWTBDdTlxUkZIcUt3ZUsNCkEzckQ2ejhLTEZJV29DdER1U1dRUDNDcE15VnRSUm9vT3lmUHFzTXBRaHZmTzB6QU16UmJRWWkvYXl0bHJ5anZzdlhEcW1iT2UxYnUNCnQ4akxaOEhKbkJvWXVNVERTUVB4WUE1UXpVYkY4M2Q1OTdZVjREamJ4eThvb0F3L2R5WjAyU1VTMmpIYUdoN2NLVUdSSWp4cHA3c0MNCjhyWmNKd09KOUFicW0rUnlndU9oQ2NIcEFCblRQdFJ3YTdweHBxcFlydlM3Nld5Mjc0Zk1tN3YvT2VaV1lkTUtwOFJjVEdCN0JYY20NCmVyL1lCMUlzWXZkd1k5azV2Rzhjd25uY2RpbXZ6c1VzWkFSZWlEWnVNZFJBR21JME5qODFBYTZzWTZBPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpHZW9UcnVzdCBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzINCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlDcmpDQ0FqV2dBd0lCQWdJUVBMTDBTQW9BNHY3ckpEdGVZRDdEYXpBS0JnZ3Foa2pPUFFRREF6Q0JtREVMTUFrR0ExVUVCaE1DDQpWVk14RmpBVUJnTlZCQW9URFVkbGIxUnlkWE4wSUVsdVl5NHhPVEEzQmdOVkJBc1RNQ2hqS1NBeU1EQTNJRWRsYjFSeWRYTjBJRWx1DQpZeTRnTFNCR2IzSWdZWFYwYUc5eWFYcGxaQ0IxYzJVZ2IyNXNlVEUyTURRR0ExVUVBeE10UjJWdlZISjFjM1FnVUhKcGJXRnllU0JEDQpaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVNBdElFY3lNQjRYRFRBM01URXdOVEF3TURBd01Gb1hEVE00TURFeE9ESXpOVGsxDQpPVm93Z1pneEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFIWlc5VWNuVnpkQ0JKYm1NdU1Ua3dOd1lEVlFRTEV6QW9ZeWtnDQpNakF3TnlCSFpXOVVjblZ6ZENCSmJtTXVJQzBnUm05eUlHRjFkR2h2Y21sNlpXUWdkWE5sSUc5dWJIa3hOakEwQmdOVkJBTVRMVWRsDQpiMVJ5ZFhOMElGQnlhVzFoY25rZ1EyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnBkSGtnTFNCSE1qQjJNQkFHQnlxR1NNNDlBZ0VHDQpCU3VCQkFBaUEySUFCQld4NlAwREZVUGxyT3VITnhGaTc5S0RObEo5UlZjTFNvMTdWRHM2Ymw4VkFzQlFwczhsTDMzS1NMakhVR01jDQpLaUVJZkpvMjJBdiswU2JGV0RFd0tDWHpYVjJqdUxhbHRKTHRiQ3lmNjkxRGlhSThTMGlSSFZEc0p0L1dZQzY5SWFOQ01FQXdEd1lEDQpWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBUVl3SFFZRFZSME9CQllFRkJWZk5WZFJWZnNsc3EwRGFmd0JvL3ErDQpFVlhWTUFvR0NDcUdTTTQ5QkFNREEyY0FNR1FDTUdTV1dhYm9DZDZMdXZwYWlJandINUhUUnFqeVNrd0NZL3RzWHpqYkxrR1RxUTdtDQpuZHd4SExLZ3B4Z2NlZUhITmdJd09sYXZtblJzOXZ1RDREUFRDRitobk1KYm4wYld0c3VSQm1PaUJ1Y3pyRDZvZ1JMUXk3clFrZ3UyDQpucGFxQkErSw0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpWZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRXVUQ0NBNkdnQXdJQkFnSVFRQnJFWkNHekV5RUREcnZrRWhyRkhUQU5CZ2txaGtpRzl3MEJBUXNGQURDQnZURUxNQWtHQTFVRQ0KQmhNQ1ZWTXhGekFWQmdOVkJBb1REbFpsY21sVGFXZHVMQ0JKYm1NdU1SOHdIUVlEVlFRTEV4WldaWEpwVTJsbmJpQlVjblZ6ZENCTw0KWlhSM2IzSnJNVG93T0FZRFZRUUxFekVvWXlrZ01qQXdPQ0JXWlhKcFUybG5iaXdnU1c1akxpQXRJRVp2Y2lCaGRYUm9iM0pwZW1Waw0KSUhWelpTQnZibXg1TVRnd05nWURWUVFERXk5V1pYSnBVMmxuYmlCVmJtbDJaWEp6WVd3Z1VtOXZkQ0JEWlhKMGFXWnBZMkYwYVc5dQ0KSUVGMWRHaHZjbWwwZVRBZUZ3MHdPREEwTURJd01EQXdNREJhRncwek56RXlNREV5TXpVNU5UbGFNSUc5TVFzd0NRWURWUVFHRXdKVg0KVXpFWE1CVUdBMVVFQ2hNT1ZtVnlhVk5wWjI0c0lFbHVZeTR4SHpBZEJnTlZCQXNURmxabGNtbFRhV2R1SUZSeWRYTjBJRTVsZEhkdg0KY21zeE9qQTRCZ05WQkFzVE1TaGpLU0F5TURBNElGWmxjbWxUYVdkdUxDQkpibU11SUMwZ1JtOXlJR0YxZEdodmNtbDZaV1FnZFhObA0KSUc5dWJIa3hPREEyQmdOVkJBTVRMMVpsY21sVGFXZHVJRlZ1YVhabGNuTmhiQ0JTYjI5MElFTmxjblJwWm1sallYUnBiMjRnUVhWMA0KYUc5eWFYUjVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXgyRTNYckVCTk50aTF4V2IvMWhhakNNag0KMW1DT2tkZVFtSU42NWxnWk9JekY5dVZraGJTaWNmdnR2Ym5helUwQXRNZ3RjNlhIYVhHVkh6azhza1FIbk9nTytrMUt4Q0hmS1dHUA0KTWlKaGdzV0hIMjZNZkY4V0lGRkUwWEJQVityakhPUE1lZTVZMkE3Q3MwV1R3Q3pubWhjcmV3QTNla0V6ZU9FejR2TVFHbitITEw3Mg0KOWZkQzR1Vy9oMktKWHdCTDM4WGQ1SFZFTWtFNkhuRnVhY3NMZFVZSTBjclNLNVhRei91NVFHdGtqRmROL0JNUmVZVHRYbFQyTko4SQ0KQWZNUUpRWVhTdHJ4SFhwbWE1aGdacVRaNzlJdWd2SHc3d25xUk1rVmF1SURialBUcko5VkFNZjJDR3FVdVYvYzREUHhoR0Q1V3ljUg0KdFB3VzhydFdhb0FsalFJREFRQUJvNEd5TUlHdk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RnWURWUjBQQVFIL0JBUURBZ0VHTUcwRw0KQ0NzR0FRVUZCd0VNQkdFd1g2RmRvRnN3V1RCWE1GVVdDV2x0WVdkbEwyZHBaakFoTUI4d0J3WUZLdzREQWhvRUZJL2wweHFHckkyTw0KYThQUGdHclVTQmdzZXhrdU1DVVdJMmgwZEhBNkx5OXNiMmR2TG5abGNtbHphV2R1TG1OdmJTOTJjMnh2WjI4dVoybG1NQjBHQTFVZA0KRGdRV0JCUzJkL3BwU0VlZlV4TFZ3dW9ITW5ZSDBaY0hHVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBU3ZqNHNBUG1MR2Q3NUpSMw0KWTh4dVRQbDlEZzNjeUxrMXVYQlBZL29rK215RGpFZWRPMlB6bXZsMk1wV1JzWGU4ckpxK3NlUXhJY2FCbFZaYURySEMxTEdtV2F6eA0KWTh1NFRCMVprRXJ2a0JZb0gxcXVFUHVCVURnTWJNenhQY1AxWStPejR5SEpKRG5wL1JWbVJ2UWJFZEJOYzZOOVJ2azk3YWhmWXRUeA0KUC9qZ2RGY3JHSjJCdE1RbzJwU1hwWERyckIyK0J4SHcxZHZkNVl6dzFUS3dnK1pYNG8rL3ZxR3F2ejBkdGRRNDZ0ZXdYRHBQYWorUA0Kd0dac1k2cnAyYVFXOUlIUmxSUU9mYzJWTk5uU2ozQnpnWHVjZnIyWVlkaEZoNWlReGV1R01NWTF2L0QvdzFXSWcwdnZCWklHY2ZLNA0KbUpPMzdNMkNZZkU0NWsrWG1DcGFqUT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClZlcmlTaWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHNA0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURoRENDQXdxZ0F3SUJBZ0lRTDREK0k0d09JZzlJWnhJb2tZZXNzekFLQmdncWhrak9QUVFEQXpDQnlqRUxNQWtHQTFVRUJoTUMNClZWTXhGekFWQmdOVkJBb1REbFpsY21sVGFXZHVMQ0JKYm1NdU1SOHdIUVlEVlFRTEV4WldaWEpwVTJsbmJpQlVjblZ6ZENCT1pYUjMNCmIzSnJNVG93T0FZRFZRUUxFekVvWXlrZ01qQXdOeUJXWlhKcFUybG5iaXdnU1c1akxpQXRJRVp2Y2lCaGRYUm9iM0pwZW1Wa0lIVnoNClpTQnZibXg1TVVVd1F3WURWUVFERXp4V1pYSnBVMmxuYmlCRGJHRnpjeUF6SUZCMVlteHBZeUJRY21sdFlYSjVJRU5sY25ScFptbGoNCllYUnBiMjRnUVhWMGFHOXlhWFI1SUMwZ1J6UXdIaGNOTURjeE1UQTFNREF3TURBd1doY05Nemd3TVRFNE1qTTFPVFU1V2pDQnlqRUwNCk1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBb1REbFpsY21sVGFXZHVMQ0JKYm1NdU1SOHdIUVlEVlFRTEV4WldaWEpwVTJsbmJpQlUNCmNuVnpkQ0JPWlhSM2IzSnJNVG93T0FZRFZRUUxFekVvWXlrZ01qQXdOeUJXWlhKcFUybG5iaXdnU1c1akxpQXRJRVp2Y2lCaGRYUm8NCmIzSnBlbVZrSUhWelpTQnZibXg1TVVVd1F3WURWUVFERXp4V1pYSnBVMmxuYmlCRGJHRnpjeUF6SUZCMVlteHBZeUJRY21sdFlYSjUNCklFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1SUMwZ1J6UXdkakFRQmdjcWhrak9QUUlCQmdVcmdRUUFJZ05pQUFTblZucDgNClV0cGttdzR0WE5oZXJKSTkvZ0htR1VvOUZBTkwrbUFuSU5tRGlXbjZWTWFhR0Y1VkttVGVCdmFOU2p1dEVEeGxQWkNJQkluZ01HR3oNCnJsMEJwM3ZlZkxLK3ltVmhBSWF1Mm85NzBJbXRUUjFabWtHeHZFZUEzSjVpdy9tamdiSXdnYTh3RHdZRFZSMFRBUUgvQkFVd0F3RUINCi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd2JRWUlLd1lCQlFVSEFRd0VZVEJmb1YyZ1d6QlpNRmN3VlJZSmFXMWhaMlV2WjJsbU1DRXcNCkh6QUhCZ1VyRGdNQ0dnUVVqK1hUR29hc2pZNXJ3OCtBYXRSSUdDeDdHUzR3SlJZamFIUjBjRG92TDJ4dloyOHVkbVZ5YVhOcFoyNHUNClkyOXRMM1p6Ykc5bmJ5NW5hV1l3SFFZRFZSME9CQllFRkxNV2tmM3VwbTdrdFM1Smo0ZDRnWURzNWJHMU1Bb0dDQ3FHU000OUJBTUQNCkEyZ0FNR1VDTUdZaERCZ21ZRm80ZTFaQzRLZjhOb1JSa1NBc2RrMURQY1FkaENQUXJOWjhOUWJPeldtOWtBM2JiRWhDSFE2cVFnSXgNCkFKdzlTRGtqT1ZnYUZSSlphcDd2MVZteUhWSXNtWEhOeHluZkd5cGhlM0hSM3ZQQTVRMDZTcW90cDlpR0t0MHVFQT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCk5ldExvY2sgQXJhbnkgKENsYXNzIEdvbGQpIEbDheKAmHRhbsODwrpzw4PCrXR2w4PCoW55DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFRlRDQ0F2MmdBd0lCQWdJR1NVRXM1QUFRTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUduTVFzd0NRWURWUVFHRXdKSVZURVJNQThHDQpBMVVFQnd3SVFuVmtZWEJsYzNReEZUQVRCZ05WQkFvTURFNWxkRXh2WTJzZ1MyWjBMakUzTURVR0ExVUVDd3d1VkdGdXc3cHp3NjEwDQpkc09oYm5scmFXRmt3N05ySUNoRFpYSjBhV1pwWTJGMGFXOXVJRk5sY25acFkyVnpLVEUxTURNR0ExVUVBd3dzVG1WMFRHOWpheUJCDQpjbUZ1ZVNBb1EyeGhjM01nUjI5c1pDa2dSc1dSZEdGdXc3cHp3NjEwZHNPaGJua3dIaGNOTURneE1qRXhNVFV3T0RJeFdoY05Namd4DQpNakEyTVRVd09ESXhXakNCcHpFTE1Ba0dBMVVFQmhNQ1NGVXhFVEFQQmdOVkJBY01DRUoxWkdGd1pYTjBNUlV3RXdZRFZRUUtEQXhPDQpaWFJNYjJOcklFdG1kQzR4TnpBMUJnTlZCQXNNTGxSaGJzTzZjOE90ZEhiRG9XNTVhMmxoWk1PemF5QW9RMlZ5ZEdsbWFXTmhkR2x2DQpiaUJUWlhKMmFXTmxjeWt4TlRBekJnTlZCQU1NTEU1bGRFeHZZMnNnUVhKaGJua2dLRU5zWVhOeklFZHZiR1FwSUViRmtYUmhic082DQpjOE90ZEhiRG9XNTVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXhDUmVjNzVMYlJURG9mVGpsNUJ1DQowakJGSGp6dVo5bGs0QnFLZjhvd3lvUGpJTUhqOURyVGxGOGFmRnR0dnpCUGhDZjJueDlKdk1hWkNwRHlEL1YvUTRRM1kxR0xlcVZ3DQovSHBZelk2YjdjTkdiSVJ3WGRyekFaQWovRTR3cVg3aEoyUG43V1E4b0xqSk0yUCtGcEQvc0xqOTE2akF3SlJEQzdiVldhYWVWdEFrDQpIM0I1cjlzNVZBMWxkZGtWUVpRQnIxN3M5bzN4LzYxay9pQ2ExMXpyL3FZZkNHU2ppM1pWclI0N0tHQXVoeVhvcXE4ZnhtUkdJTGR3DQpmenplU051V1U3YzVkK1FhNHNjV2hIYVhXeSs3R1JXRitHbUY5Wm1ucWZJMHA2bTJwZ1A4YjRZOVZIeDJCSnRyK1VCZEFEVEhMcGwxDQpuZVdJQTZwTitBUFNRbmJBR3dJREFLaUxvMFV3UXpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFRU1BNEdBMVVkRHdFQi93UUVBd0lCDQpCakFkQmdOVkhRNEVGZ1FVelBwbmsvQzJ1TkNsd0I3elUvMk1VOStEMTVZd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLdC83aHdXDQpxWnc4VVFDZ3dCRUlCYWVaNW04QmlGUmhidkc1R0sxS3JmNkJRQ09VTC90MWZDOG9TMklrZ1lJTDlXSHhIRzY0WVRqcmdmcGlvVHRhDQpZdE9VWmNUaDVtMkMrQzhsY0xJaEpzRnlVUitNTE1PRWtNTmFqN3JQOUtkbHBldVkwZnNGc2taMUZTTnFiNFZqTUlEdzFaNGZLUnpDDQpiTEJRV1YyUVd6dW9EVERQdjMxL3p2R2RnNzNKUm00Z3B2bGhVYm9oTDN1K3BSVmpvZFNWaC9HZXVmT0o4ejJGdUxqYnZyVzVLZm5hDQpOd1VBU1pRRGhFVG52ME14ejNXTEpkSDBwbVQxa3ZhckJlczk2YVVMTm1MYXpBWmZOb3UyWGpHNEt2dGU5bkhmUkNhZXhPWU5rYlF1DQpkWldBVVdwTE1LYXdZcUdUOFp2WXpzUmpkVDlaUjdFPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpTdGFhdCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQSAtIEcyDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUZ5akNDQTdLZ0F3SUJBZ0lFQUppV2pEQU5CZ2txaGtpRzl3MEJBUXNGQURCYU1Rc3dDUVlEVlFRR0V3Sk9UREVlTUJ3R0ExVUUNCkNnd1ZVM1JoWVhRZ1pHVnlJRTVsWkdWeWJHRnVaR1Z1TVNzd0tRWURWUVFERENKVGRHRmhkQ0JrWlhJZ1RtVmtaWEpzWVc1a1pXNGcNClVtOXZkQ0JEUVNBdElFY3lNQjRYRFRBNE1ETXlOakV4TVRneE4xb1hEVEl3TURNeU5URXhNRE14TUZvd1dqRUxNQWtHQTFVRUJoTUMNClRrd3hIakFjQmdOVkJBb01GVk4wWVdGMElHUmxjaUJPWldSbGNteGhibVJsYmpFck1Da0dBMVVFQXd3aVUzUmhZWFFnWkdWeUlFNWwNClpHVnliR0Z1WkdWdUlGSnZiM1FnUTBFZ0xTQkhNakNDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFNVloNCjUyOTFxajVMbkxXNHJKNEw1UG5aeXF0ZGo3VTVFSUxYcjFIZ08rRUFTR3JQMnVFR1F4R1pxaFFsRXEwaTZBQnRROFNwdU9VZmlVdG4NCnZXRkk3LzNTNEdDSTVia1lZQ2pEZHl1dHNEZXFOOTVrV1NwR1YrUkx1ZmczZk5VMjU0REJ0dlBVWjV1VzZNN1h4Z3BUMEd0Smx2T2oNCkN3VjNTUGNsNVhDc01CUWdKZU4vZFZybFNQaE9ld01IQlBxQ1lZZHU4RHZFcE1mUTlYUStwVjBhQ1BLYkpkTDJyQVFtUGxVNllpaWwNCmU3SXdyL2czd3RHNjFqajk5TzlKTURlWkppRkloUUdwNVJibjNKQlYzdy9vT00yWk55RlBYZlVpYjJyRkVoWmdGMVh5WldhbXB6Q1INCk9NRTRIWVlFaExvYUpYaGVuYS9NVUdEV0U0ZFM3V01mYldWOXdoVVlkTXJoZm1RcGpITFlGaE45QzBsSzhTZ2JJSFJyeFQzZHNLcEkNCkNUMHVncFROR21YWks0aWFtYndZZnAvdWZXWjhQcjJVdUlIT3paZ3dlTUZ2WjlDK1grQm83ZDdpc2Nrc1dYaVNxdDhyWUdQeTVWNjUNCjQ4cjZmMUNHUHFJMEdBd0phQ2dSSE9UaHVWdytSN295UHhqTVc0VDE4MnQweEhKMDRlT0xvRXE5aldZdjZxMDEyaURUaUlKaDhCSWkNCnRyelExYVRzcjFTSUpTUThwMjJ4Y2lrL1BsZW1mMVd2YmliRy91Zk1RRnhSUklFS2VONUt6bFcvSGRYWnQxYnY4SGIvQzNtMXI3MzcNCnFXbVJScGRvZ0JRMkhiTi91eW1ZTnFVZytvSmdZak9rN05hNkI2ZHV4YzhVcHVmV2tqVFlnZlg4SFYycVhCNzJvMDA3dVBjNUFnTUINCkFBR2pnWmN3Z1pRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pCU0JnTlZIU0FFU3pCSk1FY0dCRlVkSUFBd1B6QTlCZ2dyQmdFRkJRY0MNCkFSWXhhSFIwY0RvdkwzZDNkeTV3YTJsdmRtVnlhR1ZwWkM1dWJDOXdiMnhwWTJsbGN5OXliMjkwTFhCdmJHbGplUzFITWpBT0JnTlYNCkhROEJBZjhFQkFNQ0FRWXdIUVlEVlIwT0JCWUVGSkZvTW9jVkhZbml0ZkdzTmlnMGpRdDhZb2pyTUEwR0NTcUdTSWIzRFFFQkN3VUENCkE0SUNBUUNvUVVwbktwS0JnbEJ1NGRmWXN6azc4d0lWQ1ZCUjd5MjlKSHVJaGp2NXRMeVNDWmE1OXNDckkyQUdlWXdSVGxIU2VZQXoNCis1MUl2dXhCUTRFZmZrZEFIT1Y2Q01xcWkzV3RGTVRDNkdZOGdnZW41aWVDV3hqbUQyN1pVRDZLUWhncHhyUlcvRllRb0FVWHZRd2oNCmYvU1Q3WndhVWI3ZFJVRy9rU1MwSDR6cFg4OTdJWm1mbFo4NU9rWWNiUG5OZTV5UXpTaXB4NmxWdTZ4aU5HSTFFMHNVT2xXRHVZYU4NCmtxYkc5QWNsVk13V1Z4SktnbmpJRk5rWGdpWXRYU0FmZWE3KzFIQVdGcFdEMkRVNS8xSmRkUndXeFJOVnowZk1kV1ZTU3Q3d3NLZmsNCkNwWUwrNjNDNGlXRXN0M2t2WDVaYkp2dzhOam55dkxwbHpoK2liN00remtYWVQ5eTJ6cVIyR1VCR1IydFVLUlhDbnhMdkp4eGN5cEYNClVSbUZ6STc5UjZkMGxSMm8wYTlPRjdGcEpzS3FlRmRieFUybjVaNEZGNVRLc2wrZ1NSaU5OT2ttYkVnZXFtaVNCZUdDYzFxYjNBZGINCkNHMTluZGVOSWRuOEZDQ3F3a1hmUCtjQXNsSGt3dmdGdVhrYWpEVHpubHZrTjF0clN0OHNWNHBBV2phNjNYVkVDRGRDY0F6KzNGNGgNCm9LT0t3SkNjYU5wUTVrVVFSM2kyVHRKbHljTTMzK0ZDWTdCWE4wVXRlNHFjdndYcVpWVXo5emtReFNncUlYb2Jpc1FrK1Q4VnlKb1YNCklQVlZZcGJ0YlpOUXZPU3FlSzNaeXdwbGg2Wm13Y1NCbzNjNldCNEw3b09MblI3U1VxVE1IVyt3bUcyVU1iWDRjUXJjdWZ4OU1tRG0NCjY2K0tBUT09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkNBIERpc2lnDQo9PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFRHpDQ0F2ZWdBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCS01Rc3dDUVlEVlFRR0V3SlRTekVUTUJFR0ExVUVCeE1LDQpRbkpoZEdsemJHRjJZVEVUTUJFR0ExVUVDaE1LUkdsemFXY2dZUzV6TGpFUk1BOEdBMVVFQXhNSVEwRWdSR2x6YVdjd0hoY05NRFl3DQpNekl5TURFek9UTTBXaGNOTVRZd016SXlNREV6T1RNMFdqQktNUXN3Q1FZRFZRUUdFd0pUU3pFVE1CRUdBMVVFQnhNS1FuSmhkR2x6DQpiR0YyWVRFVE1CRUdBMVVFQ2hNS1JHbHphV2NnWVM1ekxqRVJNQThHQTFVRUF4TUlRMEVnUkdsemFXY3dnZ0VpTUEwR0NTcUdTSWIzDQpEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNTOWpIQmZZajltUUdwMkh2eWNYWHhNY2J6ZFdiNlVTaEdoSmQ0Tkx4cy9MeEZXWWdtDQpHRXJFTngraFNrUzk0M0VFOVVRWDRqLzhTRmh2WEo1NkNicFJOeUlqWmtNaHNEeGtvdmhxRlE0LzYxSGhWS25kQnBuWG1qeFVpemtEDQpQdy9GenNicmczSUNxQjl4OHkzNGRRamJZa3pvK3M3NTUyb2Z0bXMxZ3JyaWp4YVNmUVVNYkVZRFhjRHRhYjg2d1lxZzZJN1p1VVVvDQpod2pzdE1vVnZvTGR0VVNMTGEyR0RHaGliWVZXOHF3VVl6ckcwWm1zTkhoV1M4KzJyVCtNaXRjRTVlTjRUUFdHcXZXUCtqMXNjYU10DQp5bWZyYUh0dU02a01naWlvVEdvaFFCVWdEQ1piZzhLcEZoWEFKSUpkS3hhdHltUDJkQUN3MzBQRUVHQldaMk5GQWdNQkFBR2pnZjh3DQpnZnd3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVamJKSmFKMXlDQ1c1d0NmMVVKTldTRVp4K1k4d0RnWURWUjBQDQpBUUgvQkFRREFnRUdNRFlHQTFVZEVRUXZNQzJCRTJOaGIzQmxjbUYwYjNKQVpHbHphV2N1YzJ1R0ZtaDBkSEE2THk5M2QzY3VaR2x6DQphV2N1YzJzdlkyRXdaZ1lEVlIwZkJGOHdYVEF0b0N1Z0tZWW5hSFIwY0RvdkwzZDNkeTVrYVhOcFp5NXpheTlqWVM5amNtd3ZZMkZmDQpaR2x6YVdjdVkzSnNNQ3lnS3FBb2hpWm9kSFJ3T2k4dlkyRXVaR2x6YVdjdWMyc3ZZMkV2WTNKc0wyTmhYMlJwYzJsbkxtTnliREFhDQpCZ05WSFNBRUV6QVJNQThHRFN1QkhwR1Q1Z29BQUFBQkFRRXdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBRjAwZEdGTXJ6dlkvNTl0DQpXRFljUFF1QkRSSXJSaENBL2VjOEo5QjZ5S20yZm5Rd002TTZpbnQwd0hsNVFwTnQvN0VwRklLcklZd3ZGL2svSmkvMVdjYnZnQWEzDQpta2twN001K2NUeHFFRUhBOXRPYXNueGFrWnpBckZ2SVRWNzM0VlAvUTNmOG5rdG5iTmZ6ZzlHZzRIOGwzN2lZQzVveU9Hd3dvUFAvDQpDQlV6OTFCS2V6NmpQaUNwM0M5V2dBcnRRVkN3eWZUc3N1TW1SQUFPYjU0R3ZDS1dVM0JseEZBS1JtdWtMeWVCRWljVFh4Q2hkczZLDQplemZxd3psaEE1V1lPdWRzaUNVSS9IbG9EWWQ5WXZpMFgvdkYyRXk5V0x3L1ExdlVIZ0ZOUEdPK0krK016VnBRdUdoVStRcVpNeEVBDQo0WjdDUm5lQzlWa0dqQ0ZNaHduTjVhZz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KSnV1ci1TSw0KPT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFNWpDQ0E4NmdBd0lCQWdJRU80NUwvREFOQmdrcWhraUc5dzBCQVFVRkFEQmRNUmd3RmdZSktvWklodmNOQVFrQkZnbHdhMmxBDQpjMnN1WldVeEN6QUpCZ05WQkFZVEFrVkZNU0l3SUFZRFZRUUtFeGxCVXlCVFpYSjBhV1pwZEhObFpYSnBiV2x6YTJWemEzVnpNUkF3DQpEZ1lEVlFRREV3ZEtkWFZ5TFZOTE1CNFhEVEF4TURnek1ERTBNak13TVZvWERURTJNRGd5TmpFME1qTXdNVm93WFRFWU1CWUdDU3FHDQpTSWIzRFFFSkFSWUpjR3RwUUhOckxtVmxNUXN3Q1FZRFZRUUdFd0pGUlRFaU1DQUdBMVVFQ2hNWlFWTWdVMlZ5ZEdsbWFYUnpaV1Z5DQphVzFwYzJ0bGMydDFjekVRTUE0R0ExVUVBeE1IU25WMWNpMVRTekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DDQpnZ0VCQUlGeE5qNHpCOWJqTUkwVGZuY3lSc3ZQR2JKZ01VYVhodlNZUnFUQ1pVWFAwMEI4NDFvaXFCQjRNOHlJc2RPQlN2WmlGM3RmDQpUUW91ME0rTEkrNVBBazY3Nnc3S3ZSaGo2SUFjamVFY2pUM2cvMXRmNm1UbGwrZy9tWDhNQ2drekFCcFRweUhoT0V2V2d4dXRyMlRDDQorUng2akdaSVRXWWZHQXJpUHJzZkIyV1RoYmthc0xuRSt3MFI5dlhXK1J2SExDdTNHRkgrNEh2MnFFaXZiRHRQTCsvNDBVY2VKbGZ3DQpVUjB6bHYvdldUM2FUZEVWTk1mcVB4WkllNUVjZ0VNUFBiZ0ZQdEd6bGMzWXlnL0NRMmZidDVQZ0lvSXV2dlZvS0lPNXdUdHBleURhDQpUcHh0NGJyTmozcHNzQWtpMTRzTDJ4elZXaVpiRGNEcTVXRFFuLzQxM3o4Q0F3RUFBYU9DQWF3d2dnR29NQThHQTFVZEV3RUIvd1FGDQpNQU1CQWY4d2dnRVdCZ05WSFNBRWdnRU5NSUlCQ1RDQ0FRVUdDaXNHQVFRQnpoOEJBUUV3Z2ZZd2dkQUdDQ3NHQVFVRkJ3SUNNSUhEDQpIb0hBQUZNQVpRQmxBQ0FBY3dCbEFISUFkQUJwQUdZQWFRQnJBR0VBWVFCMEFDQUFid0J1QUNBQWRnRGtBR3dBYWdCaEFITUFkQUJoDQpBSFFBZFFCa0FDQUFRUUJUQUMwQWFRQnpBQ0FBVXdCbEFISUFkQUJwQUdZQWFRQjBBSE1BWlFCbEFISUFhUUJ0QUdrQWN3QnJBR1VBDQpjd0JyQUhVQWN3QWdBR0VBYkFCaEFHMEFMUUJUQUVzQUlBQnpBR1VBY2dCMEFHa0FaZ0JwQUdzQVlRQmhBSFFBYVFCa0FHVUFJQUJyDQpBR2tBYmdCdUFHa0FkQUJoQUcwQWFRQnpBR1VBYXdCek1DRUdDQ3NHQVFVRkJ3SUJGaFZvZEhSd09pOHZkM2QzTG5OckxtVmxMMk53DQpjeTh3S3dZRFZSMGZCQ1F3SWpBZ29CNmdISVlhYUhSMGNEb3ZMM2QzZHk1emF5NWxaUzlxZFhWeUwyTnliQzh3SFFZRFZSME9CQllFDQpGQVNxZWtlajVJbXZHczhLUUtjWVAyL3Y2WDIrTUI4R0ExVWRJd1FZTUJhQUZBU3Fla2VqNUltdkdzOEtRS2NZUDIvdjZYMitNQTRHDQpBMVVkRHdFQi93UUVBd0lCNWpBTkJna3Foa2lHOXcwQkFRVUZBQU9DQVFFQWU4RVlsRk9pQ2ZQK0ptZWFVT1REQlM4ck5YaVJUSHlvDQpFUkY1VEVsWnJNajNoV1ZjUnJzN0VLQUNyODFQdGN3Mkt1eGQvdStna2NtMmsyOThnRlRzeHdod0RZNzdndXdxWUhocE5qYlJ4WnlMDQphYlZBeUpSbGQvSlhJV1k3em9WQXRqTmpHcjk1SHZ4Y0hkTWRreHVMREYyRnZaa3dNaGdKa1ZMcGZLRzYvMlNTbXV6K05lNk1MNjc4DQpJSWJzU3Q0YmVESTNwb0hTbmE5YUVoYkttVnY4YjIwT3hhQWVoc21SMEZ5WWdsOWpESXBhcTlpVnBzekxpdGEvWkV1T3lvcXlzT2toDQpNcDZxcUlXWU5JRTVJVHVvT2xJeVBmWnJONFlHV2hXWTNQQVJadjQwSUxjRDlFRVFmVG1FZVpaeVk3YVdBdVZydWEwWlRidkdSTnMyDQp5eXFjamc9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpIb25na29uZyBQb3N0IFJvb3QgQ0EgMQ0KPT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRE1EQ0NBaGlnQXdJQkFnSUNBK2d3RFFZSktvWklodmNOQVFFRkJRQXdSekVMTUFrR0ExVUVCaE1DU0VzeEZqQVVCZ05WQkFvVA0KRFVodmJtZHJiMjVuSUZCdmMzUXhJREFlQmdOVkJBTVRGMGh2Ym1kcmIyNW5JRkJ2YzNRZ1VtOXZkQ0JEUVNBeE1CNFhEVEF6TURVeA0KTlRBMU1UTXhORm9YRFRJek1EVXhOVEEwTlRJeU9Wb3dSekVMTUFrR0ExVUVCaE1DU0VzeEZqQVVCZ05WQkFvVERVaHZibWRyYjI1bg0KSUZCdmMzUXhJREFlQmdOVkJBTVRGMGh2Ym1kcmIyNW5JRkJ2YzNRZ1VtOXZkQ0JEUVNBeE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRg0KQUFPQ0FROEFNSUlCQ2dLQ0FRRUFyUDg0dHVsbUFrbmpvclRoa1BsQWozbjU0cjE1L2dLOTdpU1NIU0wyMm9WeWFmN1hQd25VM1pHMQ0KQXB6UWpWcmhWY05RaHJrcEpzTGoyYUR4YVFNb0lJQkZJaTFXcHp0VWxWWWlXUjhvM3g4Z1BXMmlOcjRqb0xGdXRiRW5QemxUQ2Vxcg0KYXVoMHNzSmxYSTYvZk1ONGhNMmVGdnoxTGs4Z0tnaWZkL1BGSHNTYVVtWWVTRjdqRUFhUElwamhaWTRiWFNObU83aWxNbEhJaHFxaA0KcVo1L2RwVENwbXkzUWZEVnlBWTQ1dFFNNHZNN1RHMVFqTVNESjhFVGhGazlublYwdHRnQ1hqcVFlc0JDTm5Mc2FrM2M3OFFBM3hNWQ0KVjE4bWVNaldDbmwzdi9ldnQzYTVwUXVFRjEwUTZtL2hxNVVSWDIwOG8xeE5nMXZ5c3htS2dJc0xod0lEQVFBQm95WXdKREFTQmdOVg0KSFJNQkFmOEVDREFHQVFIL0FnRURNQTRHQTFVZER3RUIvd1FFQXdJQnhqQU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUFEa2JWUEs3aQ0KaDlsZWdZc0NtRUVJakV5ODJ0dnVKeHVDNTJwRjdCYUxUNFdnODdKd3ZWcVd1c3B1YmU1R2kyN25LaTZXc3hrejY3U2ZxTEkzN3Bpbw0KbDdZdXRtY24xS1pKL1J5VFpYYWVRaS9jSW15YVQvSmFGVG14Y2RjclVlaHRISmpBMlNyMG9ZSjcxY2xCb2lNQmREaFZpdys1TG1laQ0KSUFRMzJwd0wweGNoNEkrWGVUUnZoRWdDSURNYjVqUkVuNUZ3OUlCZWhFUENLZEpzRWhUa1lZMnNFSkNlaEZDNzhKWnZSWitLODhwcw0KVC9vUk9oVVZSc1BOSDROYkxVRVM3VkJuUVJNOUlhdVVpcXBPZk1HeCs2Zld0U2N2bDZ0dTRCM2kwUndzSDBUaS9MNlJvWno3MWlsVA0KYzRhZlU5aEREbDNXWTRKeEhZQjB5dmJpQW12WldnPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KU2VjdXJlU2lnbiBSb290Q0ExMQ0KPT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEYlRDQ0FsV2dBd0lCQWdJQkFUQU5CZ2txaGtpRzl3MEJBUVVGQURCWU1Rc3dDUVlEVlFRR0V3SktVREVyTUNrR0ExVUVDaE1pDQpTbUZ3WVc0Z1EyVnlkR2xtYVdOaGRHbHZiaUJUWlhKMmFXTmxjeXdnU1c1akxqRWNNQm9HQTFVRUF4TVRVMlZqZFhKbFUybG5iaUJTDQpiMjkwUTBFeE1UQWVGdzB3T1RBME1EZ3dORFUyTkRkYUZ3MHlPVEEwTURnd05EVTJORGRhTUZneEN6QUpCZ05WQkFZVEFrcFFNU3N3DQpLUVlEVlFRS0V5SktZWEJoYmlCRFpYSjBhV1pwWTJGMGFXOXVJRk5sY25acFkyVnpMQ0JKYm1NdU1Sd3dHZ1lEVlFRREV4TlRaV04xDQpjbVZUYVdkdUlGSnZiM1JEUVRFeE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBL1hlcXBSeVFCVHZMDQpUSnN6aTFvVVJhVG5rQmJSMzFmU0lSQ2tGLzNmck5ZZnArVGJmUGZzMzdnRDJwUlkvVjF5Zkl3L1h3Rm5kQldXNHdJOGg5dXV5d0dPDQp3dk5teG9WRjlBTEdPclZpc3EvNm5MK2s1dFNBTUpqekRiYVRqNm5VMkRieXNQeUt5aXloRlRPVk1kckFHL0x1WXBtR1l6Ky8zWk1xDQpnNmgydVJNZnQ4NU9Rb1dQSXVjdUd2S1ZDYklGdFVST2Q2RWd2YW55VGdwOVVLMzFCUTFGVDBaeC9TZytVL3NFMkMzWFpSMUtHL3JQDQpPN0F4bWpWdXlJc0cwd0NSOHBRSVpVeXhOQVlBZW9uaThNY0RXYy9WMXVpbk1yUG1tRUNHeGMwbkVvdk1lODYzRVR4aVlBY2pQaXRBDQpicFNBQ1cyMnMyOTNielVJVVBzQ2g4VStpUUlEQVFBQm8wSXdRREFkQmdOVkhRNEVGZ1FVVy9oTlQ3S2xodFE2MHZGam1xQytDZlpYDQp0OTR3RGdZRFZSMFBBUUgvQkFRREFnRUdNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBS0NoDQpPQlptTHFkV0h5R2NCdm9kN2JraXhUZ20yRTVQN0tOL2VkNUdJYUdIZDQ4SENKcXlwTVd2RHpLWUMzeG1LYmFiZlNWU1NVT3JUQzRyDQpibnB3cnhZTzR3SnMrMExtR0oxRjJGWEk2RHZkNStIMExnc2NORnhzV0VyN2pJaFFYNVVjdisycklyVmxzNFc2bmcrNHJlVjZHNHBRDQpPaDI5RGJ4N1ZGQUx1VUt2VmFBWWdhMWxtZSsrNUp5L3hJV3JRYkpVYjl3bHplMTQ0bzRNalFsSjNXTjdXbW1XQWlHb3ZWSlo2WDAxDQp5OGhTeW4rQi90bHIwL2NSN1NYZitPZjVwUHB5bDRSVERhWFFNaGhSZGxrVWJBL3I3RitBakhWRGc4T0ZtUDlNbmkwTjVIZURrMDYxDQpsZ2VMS0JPYmpCbU5RU2RKUU83ZTVpTkVPZHloSXRhNkEvST0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQUNFRElDT00gUm9vdA0KPT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGdFRDQ0E1MmdBd0lCQWdJSVlZM0hoanNCZ2dVd0RRWUpLb1pJaHZjTkFRRUZCUUF3UkRFV01CUUdBMVVFQXd3TlFVTkZSRWxEDQpUMDBnVW05dmRERU1NQW9HQTFVRUN3d0RVRXRKTVE4d0RRWURWUVFLREFaRlJFbERUMDB4Q3pBSkJnTlZCQVlUQWtWVE1CNFhEVEE0DQpNRFF4T0RFMk1qUXlNbG9YRFRJNE1EUXhNekUyTWpReU1sb3dSREVXTUJRR0ExVUVBd3dOUVVORlJFbERUMDBnVW05dmRERU1NQW9HDQpBMVVFQ3d3RFVFdEpNUTh3RFFZRFZRUUtEQVpGUkVsRFQwMHhDekFKQmdOVkJBWVRBa1ZUTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGDQpBQU9DQWc4QU1JSUNDZ0tDQWdFQS81S1Y0V2dHZHJRc3lGaEl5djJBVkNsVll5VC9rR1diRUhWN3cycmJZZ0lCOGhpR3RYeGFPTEhrDQpXTG43MDlndG43MHlONzhzRlcyK3RmUWgwaE9SMlFldEFRWFc4NzEzemw5Q2dRcjVhdU9EQUtnckxsVVRZNEhLUnh4N1hCWlhlaHVEDQpZQVE2UG1YRHpRSGUzcVRXRExxTzN0a0U3aGRXSXB1UFkvMU5GZ3UzZTNlTStTVzEwVzJaRWk1UEdyam02Z1NTcmowUnVWRkNQWWV3DQpNWVd2ZVZxYy91ZE9YcEpQUS95ck9xMmxFaVptdWVJTTE1ak8xRmlsbFVBS3QwU2RFM1Fyd3FYckloV1lFTmlMeFFTZkhZOWc1UVliDQptOCs1ZWFBOW9pTS9RajlyK2h3RGV6Q056bXpBditZYlg3OW51SVFaMVJYdmU4dVFOakZpeWJ3Q3EwWmZtLzRhYUpRMFBaQ09yZmJrDQpIUWwvU29nNFA3NW4vVFNXOVIyOE1IVExPTzdWYkt2VS9QUUF0d0JiaFRJV2RqUHAyS09ablFVQXFoYm04NEY5YjMycWhtMnRGWFRUDQp4S0p4cXZRVWZlY3l1Qis4MWZGT3ZXOFhBam5YRHBWQ09zY0FQdWttWXhIcUM5RksveGlkc3RkN0x6clpsdnZvSHBLdUUxWEkyU2YyDQozRWdic0NUQmhlTjNuWnFrOHd3UkhRM0l0QlR1dFlKWENiOGdXSDh2SWlQWWNNdDViTWxMOHFrcXlQeUhLOWNhVVBnbjZDOUQ0enE5DQoyRmR4L2M2bVVsdjUzVTN0NWZadmllMjdrNXgySVhYd2trd3A5eStjQVM3K1VFYWVaQXdVc3dkYnhjSnpiUEVIWEVVa0ZEV3VnL0ZxDQpUWWw2K3JQWUxXYndOb2YxSzFNQ0F3RUFBYU9CcWpDQnB6QVBCZ05WSFJNQkFmOEVCVEFEQVFIL01COEdBMVVkSXdRWU1CYUFGS2F6DQo0U3NyU2JiWGM2R3FsUFVCNTNObFRLeFFNQTRHQTFVZER3RUIvd1FFQXdJQmhqQWRCZ05WSFE0RUZnUVVwclBoS3l0SnR0ZHpvYXFVDQo5UUhuYzJWTXJGQXdSQVlEVlIwZ0JEMHdPekE1QmdSVkhTQUFNREV3THdZSUt3WUJCUVVIQWdFV0kyaDBkSEE2THk5aFkyVmthV052DQpiUzVsWkdsamIyMW5jbTkxY0M1amIyMHZaRzlqTUEwR0NTcUdTSWIzRFFFQkJRVUFBNElDQVFET0xBdFNVV0ltZlF3bmc0L0Y5dHFnDQphSHRQa2w3cXBITXlFVk5Fc2tUTG5ld1BlVUt6RUtiSERaM0x0dm8vT256cXY0aFRHenozZ3ZvRk5UUGhOYWhYd09mOWpVOC9rekpQDQplR1lEZHdkWTZaWElmajdRZVFDTThodFJNNXU4bE9rNmUyNVNMVEtlSTZSRis3WXVFN0NMR0xIZHp0VWRwMEovVmI3N1c3dEgxUHdrDQp6UVN1bGdVVjFxek9NUFBLQzhXNjRpTGdwcTBpNUFMdWRCRi9UUDk0SFRYYTVnSTA2eGdTWVhjR0NSWmo2aGl0b29jZjhzZUFDUWwxDQpUaENvanoyR3VIVVJ3Q1JpaXBaN1NrWHA3Rm5Gdm11RDV1SG9yTFV3SHY0RkI0RDU0U01OVUk4Rm1QOHNYK2c3dHEzUGdiVWhoOG9JDQpLaU1uTUNBcnorMlVXNnl5ZXRMSEtLR0tDNXROU2l4dGhUOEpjanhuNHRuY0I3cnJaWHRhQVdQV2tGdFBGMlk5ZndzWm81TmpFRklxDQpueFFXV09MY3BmU2hGb3NPa1l1QnlwdFordGhya1FkbFZWOVNINjg2KzVEZGFhVmJuRzBPTExiNnpxeWxmREpLWjBEY01EUWozZGNFDQpJMmJ3L0ZXQXAvdG1HWUkxWjJKd09WNXZ4K3FRUUVRSUhyaXkxdHZ1V2FjTkdIazB2RlFZWGxQS05GSHRSUXJtanNlQ05qNm5PR09wDQpNQ3dYRUdDU24xV0hFbGtRd2c5bmFSSE1UaDUrU3BxdHIwQ29kYXhXa0hTNG9KeWxlVy9jNlJySWFRWHB1dm9EczN6azRFN0N6cDNvDQp0a1lOYm41WE9tZVV3c3NmbkhkS1owNXBoa09UT1B1MjIwK0RrZFJnZmtzK0t6Z0hWWmhlcEE9PQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpWZXJpc2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUNQRENDQWFVQ0VEeVJNY3NmOXRBYkRwcTQwRVMvRXI0d0RRWUpLb1pJaHZjTkFRRUZCUUF3WHpFTE1Ba0dBMVVFQmhNQ1ZWTXgNCkZ6QVZCZ05WQkFvVERsWmxjbWxUYVdkdUxDQkpibU11TVRjd05RWURWUVFMRXk1RGJHRnpjeUF6SUZCMVlteHBZeUJRY21sdFlYSjUNCklFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TUI0WERUazJNREV5T1RBd01EQXdNRm9YRFRJNE1EZ3dNakl6TlRrMU9Wb3cNClh6RUxNQWtHQTFVRUJoTUNWVk14RnpBVkJnTlZCQW9URGxabGNtbFRhV2R1TENCSmJtTXVNVGN3TlFZRFZRUUxFeTVEYkdGemN5QXoNCklGQjFZbXhwWXlCUWNtbHRZWEo1SUVObGNuUnBabWxqWVhScGIyNGdRWFYwYUc5eWFYUjVNSUdmTUEwR0NTcUdTSWIzRFFFQkFRVUENCkE0R05BRENCaVFLQmdRREpYRm1lOGh1S0FSUzBFTjhFUU52alY2OXFSVUNQaEF3TDBUUFoyUkhQN2dKWUh5WDNLcWhFQmFyc0F4OTQNCmY1NlR1Wm9BcWlOOTFxeUZvbU5GeDNJbnpQUk14blZ4MGpudlQwTHdkZDhLa01hT0lHK1lEL2lzSTE5d0tUYWt5WWJuc1pvZ3kxT2wNCmhlYzl2bjJhL2lSRk05eDJGZTBQb25Ga1RHVXVnV2hGcHdJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQlFVQUE0R0JBQkJ5VXFrRkZCa3kNCkNFSHd4V3NLekg0UElSbk41R2ZjWDZrYjVzcm9jNTBpMkpodWN3TmhrY1Y4c0VWQWJrU2RqYkN4bG5SaExRMnBSZEtra2lyV21uV1gNCmJqOVQvVVdaWUIyb0swejVYcWNKMkhVdzE5SmxZRDFuMWtoVmRXay9rZlZJQzBkcEltbUNscjdKeURpR1Nub3NjeGxJYVU1cmZHVy8NCkQveHd6b2lRDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCk1pY3Jvc2VjIGUtU3ppZ25vIFJvb3QgQ0EgMjAwOQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUVDakNDQXZLZ0F3SUJBZ0lKQU1KK1F3Uk9SejhaTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUdDTVFzd0NRWURWUVFHRXdKSVZURVINCk1BOEdBMVVFQnd3SVFuVmtZWEJsYzNReEZqQVVCZ05WQkFvTURVMXBZM0p2YzJWaklFeDBaQzR4SnpBbEJnTlZCQU1NSGsxcFkzSnYNCmMyVmpJR1V0VTNwcFoyNXZJRkp2YjNRZ1EwRWdNakF3T1RFZk1CMEdDU3FHU0liM0RRRUpBUllRYVc1bWIwQmxMWE42YVdkdWJ5NW8NCmRUQWVGdzB3T1RBMk1UWXhNVE13TVRoYUZ3MHlPVEV5TXpBeE1UTXdNVGhhTUlHQ01Rc3dDUVlEVlFRR0V3SklWVEVSTUE4R0ExVUUNCkJ3d0lRblZrWVhCbGMzUXhGakFVQmdOVkJBb01EVTFwWTNKdmMyVmpJRXgwWkM0eEp6QWxCZ05WQkFNTUhrMXBZM0p2YzJWaklHVXQNClUzcHBaMjV2SUZKdmIzUWdRMEVnTWpBd09URWZNQjBHQ1NxR1NJYjNEUUVKQVJZUWFXNW1iMEJsTFhONmFXZHVieTVvZFRDQ0FTSXcNCkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPbjRqL05qcmRxRzJLZmdRdnZQa2Q2bUp2aVpwV053clp1dXlqTkENCmZXMldicUVPUk83aEU1MlVRbEthdlhXRmRDeW9EaDJUdGhpM2pDeW96L3RjY2JuYTdQN29mby9rTHgyeXFIV0gyTGVoNVR2UG1VcEcNCjBJTVpmY0NoRWh5VmJVcjAyTWVsVFRNdWhUbEFkWDRVZklBU21GREhRV2U0b0lCaFZLWnNUaC9nblE0SDZjbTZNK2Yrd0ZVb0xBS0ENCnB4bjFudHhWVXdPWGV3ZEkvNW43TjRva3hGbk1VQkJqanFxcEdyQ0VHb2I1WDd1eFVHNmswUXJNMVhGK0g2Y2JmUFZUYmlKZnl5dm0NCjFIeGRydGJDeGt6bEJRSFo3VmY4d1NONS9QcklKSU9WODdWcVVRSFFkOWJwRXFINUdvUDdnaHU1c0pmMGRnWXpRMG1nL3d1MStyVUMNCkF3RUFBYU9CZ0RCK01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RnWURWUjBQQVFIL0JBUURBZ0VHTUIwR0ExVWREZ1FXQkJUTEQ4YmYNClFrUE1QY3UxU0NPaEducW1LcnMwYURBZkJnTlZIU01FR0RBV2dCVExEOGJmUWtQTVBjdTFTQ09oR25xbUtyczBhREFiQmdOVkhSRUUNCkZEQVNnUkJwYm1adlFHVXRjM3BwWjI1dkxtaDFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURKMFE1ZUx0WE1zM3creS93OS93MG8NCmxaTUV5TC9helhtNFE1RHdwTDd2OHU4aG1MelUxRjBHOXU1QzdEQnNvS3FweXZHdml2by9DM05xUHVvdVFINGZybFJoZWVzdUNEZlgNCkkvT01uNzRkc2VHa2RkdWc0bFFVc2JvY0thUVk5aEs2b2hRVTR6RTF5RUQvdCtBRmRsZkJIRm55K0wvazdTVmlYSVR3Zm40ZnM3NzUNCnR5RVJ6QU1CVm5DbkVKSWVHelNCSHEyY0dzTUVQTzBDWWRZZUJ2TmZPb2Z5Sy9GRmgrVTlyTkhIVjRTOWE2N2MyUG0yRzJKd0N6MDINCnlVTHlNdGQ2WWViUzJ6M1B5S25KbTl6YldFVFhieml2ZjNqVG82MGFkYm9jd1RaOGp4NXRITU4xUnE0MUJhYjJYRDBoN2xid3lZSWkNCkxYcFVxM0REZlNKbGduQ1cNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KRS1HdXZlbiBLb2sgRWxla3Ryb25payBTZXJ0aWZpa2EgSGl6bWV0IFNhZ2xheWljaXNpDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRHRqQ0NBcDZnQXdJQkFnSVFSSm1OUE1BREo3MmNkcFc1NnR1c3RUQU5CZ2txaGtpRzl3MEJBUVVGQURCMU1Rc3dDUVlEVlFRRw0KRXdKVVVqRW9NQ1lHQTFVRUNoTWZSV3hsYTNSeWIyNXBheUJDYVd4bmFTQkhkWFpsYm14cFoya2dRUzVUTGpFOE1Eb0dBMVVFQXhNeg0KWlMxSGRYWmxiaUJMYjJzZ1JXeGxhM1J5YjI1cGF5QlRaWEowYVdacGEyRWdTR2w2YldWMElGTmhaMnhoZVdsamFYTnBNQjRYRFRBMw0KTURFd05ERXhNekkwT0ZvWERURTNNREV3TkRFeE16STBPRm93ZFRFTE1Ba0dBMVVFQmhNQ1ZGSXhLREFtQmdOVkJBb1RIMFZzWld0MA0KY205dWFXc2dRbWxzWjJrZ1IzVjJaVzVzYVdkcElFRXVVeTR4UERBNkJnTlZCQU1UTTJVdFIzVjJaVzRnUzI5cklFVnNaV3QwY205dQ0KYVdzZ1UyVnlkR2xtYVd0aElFaHBlbTFsZENCVFlXZHNZWGxwWTJsemFUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQw0KQVFvQ2dnRUJBTU1TSUo2d1hnQmxqVTVHdTRCYzZTd0dsOVh6Y3Nsd3VlZExaWURCUzc1K1BOZFVNWlRlMVJLNlV4WUM2bGhqNzF2WQ0KOCswcUdxcHhTS1BjRUMxZlgrdGNTNXlXQ0VJbEtCSE1pbHBpQVZEVjZ3bFRML2pEai82ei9QMmRvdU5mZmI3dEMrQmc2Mm5zTSszWQ0KamZzU1NZTUF5WXVYakR0ektqS3pFdmU1VGZMMFRXM0g1dFltTndqeTJmMXJYS1BsU0Z4WXZFSytBMXFCdWh3MURBRFQ5U04rY1RBSQ0KSmpqY0pSRkhMZk82SXhDbHY3d0M5ME5leC82d04xQ1pldytUenVaRExNTitEZkljUTJaZ3kyRXhSNGVqVDY2OVZteE12THo0QmNwaw0KOU9rMG9TeTFjK0hDUHVqSXlUUWxDRnp6N2FiSGxKK3RpRU1sMStFNVlQNnNPVmtDQXdFQUFhTkNNRUF3RGdZRFZSMFBBUUgvQkFRRA0KQWdFR01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZKL3VSTE9VMWZxUlR5N1pWWm9FVnRzdHhOdWxNQTBHQ1NxRw0KU0liM0RRRUJCUVVBQTRJQkFRQi9YN2xUVzJNOWRUTG4rc1IwR3N0RzMwWnBIRkxQcWsvQ2FPdi9nS2xSNkQxaWQ0azlDblU1OFc1ZA0KRjRkdmFBWEJsR3paWGQvYXNsbkxwUkNLeXN3NXpaL3JUdDVTL3d6dzlKS3A4bXhUcTV2U1I2QWZkUGVibXZFdkZaOTZaREFZQnp3cQ0KRDJmSy9BK0pZWjFscFR6bHZCTmJDTnZqLysyN0JydHFCckY2VDJYR2d2MGVuSXUxRGU1SXU3aTlxZ2kwKzZOOHk1L05rSFpjaHBaNA0KVndwbStWZ2FuZjJYS1dEZUVhYVFIQmtjN2dHV0lqUTBMcEg1dDhRbjBYdm12L3VBUkZvVzVldmcxQW80dk9TUjQ5WHJYTUdzM3h0cQ0KZko3bGRkSzJsNGZiekljclF6cUVDSytyUE52M1BHWXhockNkVTNudCtDUGVRdU10Z3ZFUDVmcVgNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KR2xvYmFsU2lnbiBSb290IENBIC0gUjMNCj09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURYekNDQWtlZ0F3SUJBZ0lMQkFBQUFBQUJJVmhUQ0tJd0RRWUpLb1pJaHZjTkFRRUxCUUF3VERFZ01CNEdBMVVFQ3hNWFIyeHYNClltRnNVMmxuYmlCU2IyOTBJRU5CSUMwZ1VqTXhFekFSQmdOVkJBb1RDa2RzYjJKaGJGTnBaMjR4RXpBUkJnTlZCQU1UQ2tkc2IySmgNCmJGTnBaMjR3SGhjTk1Ea3dNekU0TVRBd01EQXdXaGNOTWprd016RTRNVEF3TURBd1dqQk1NU0F3SGdZRFZRUUxFeGRIYkc5aVlXeFQNCmFXZHVJRkp2YjNRZ1EwRWdMU0JTTXpFVE1CRUdBMVVFQ2hNS1IyeHZZbUZzVTJsbmJqRVRNQkVHQTFVRUF4TUtSMnh2WW1Gc1UybG4NCmJqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU13bGRwQjVCbmdpRnZYQWc3YUV5aWllL1FWMkVjV3QNCmlITDhSZ0pEeDdLS25RUmZKTXN1UytGZ2drYmhVcXNNZ1Vkd2JOMWswZXYxTEtNUGdqME1LNjZYMTdZVWhoQjV1enNUZ0hlTUNPRkoNCjBtcGlMeDllK3BabzM0a25sVGlmQnRjK3ljc21XUTF6M3JESTZTWU9neFhHNzF1TDBnUmd5a21tS1BacE8vYkx5Q2lSNVoyS1lWYzMNCnJIUVUzSFRnT3U1eUx5NmMrOUM3di9VOUFPRUdNK2lDSzY1VHBqb1djNHpkUVE0Z09zQzBwNkhwc2srUUxqSmc2VmZMdVFTU2FHamwNCk9DWmdkYktmZC8rUkZPK3VJRW44clVBVlNORUNNV0VaWHJpWDc2MTN0MlNhZXI5ZndSUHZtMkw3RFd6Z1ZHa1dxUVBhYnVtRGszRjINCnhtbUZnaGNDQXdFQUFhTkNNRUF3RGdZRFZSMFBBUUgvQkFRREFnRUdNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdIUVlEVlIwT0JCWUUNCkZJL3dTMytvTGtVa3JrMVErbU9haTk3aTNSdThNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJMUU52QVVLcit5QXp2OTVaVVJVbTcNCmxnQUpRYXl6RTRhR0tBY3p5bXZtZExtNkFDMnVwQXJUOWZIeEQ0cS9jMmRLZzhkRWUzamdyMjVzYndNcGpqTTVSY09PNUxsWGJLcjgNCkVwYnNVOFl0NUNSc3VaUmorOXhUYUdkV1BvTzR6elVodzhsby9zN2F3bE9xekpDSzZmQmRSb3lWM1hwWUtCb3ZIZDdOQURkQmorMUUNCmJkZFRLSmQrODJjRUhoWFhpcGEwMDk1TUo2Uk1HM056ZHZRWG1jSWZlZzdqTFFpdENod3MvenlyVlE0UGtYNDI2OE5YU2I3aExpMTgNCllJdkRRVkVUSTUzTzl6SnJsQUdvbWVjc014ODZPeVhTaGtET095eUdlTWxoTHhTNjd0dFZiOStFN2dVSlRiMG8ySExPMDJKUVpSN3INCmtwZURNZG16dGNwSFdEOWYNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KVEMgVHJ1c3RDZW50ZXIgVW5pdmVyc2FsIENBIElJSQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlENFRDQ0FzbWdBd0lCQWdJT1l5VUFBUUFDRkkwekZRTGtiUFF3RFFZSktvWklodmNOQVFFRkJRQXdlekVMTUFrR0ExVUVCaE1DDQpSRVV4SERBYUJnTlZCQW9URTFSRElGUnlkWE4wUTJWdWRHVnlJRWR0WWtneEpEQWlCZ05WQkFzVEcxUkRJRlJ5ZFhOMFEyVnVkR1Z5DQpJRlZ1YVhabGNuTmhiQ0JEUVRFb01DWUdBMVVFQXhNZlZFTWdWSEoxYzNSRFpXNTBaWElnVlc1cGRtVnljMkZzSUVOQklFbEpTVEFlDQpGdzB3T1RBNU1Ea3dPREUxTWpkYUZ3MHlPVEV5TXpFeU16VTVOVGxhTUhzeEN6QUpCZ05WQkFZVEFrUkZNUnd3R2dZRFZRUUtFeE5VDQpReUJVY25WemRFTmxiblJsY2lCSGJXSklNU1F3SWdZRFZRUUxFeHRVUXlCVWNuVnpkRU5sYm5SbGNpQlZibWwyWlhKellXd2dRMEV4DQpLREFtQmdOVkJBTVRIMVJESUZSeWRYTjBRMlZ1ZEdWeUlGVnVhWFpsY25OaGJDQkRRU0JKU1Vrd2dnRWlNQTBHQ1NxR1NJYjNEUUVCDQpBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREMycHhpc0xseEVyQUx5QnBYc3E2REZKbXpORXVia0tMRjUrY3ZBcUJOTGFUNmhkcWJKWVV0DQpRQ2dnYmVyZ3ZiRklneUlwUko5T2crNDFVUk56ZE5XODhqQm1sRlBBUURZdkRJUmx6Zzl1d2xpVDZDd0xPdW5CanZ2eWE4bzg0cHhPDQpqdVQ1ZmRNbm54dlZaM2lITFg4TFI3UEg2TWxJZks4dnpBclpRZStmL3ByaHNxNzVVN1hsNlVhZllPUGZqZE4vKzVaK3M3VnkrRXV0DQpDSG5OYVlsQUovVXF3YTFEN0tSVHlHRzI5OUo1S21jWWRraHRXeVVCMFNiRnQxZHBJeFZiWVlxdDhCc3QyYTljOFNhUWFhblZERUQxDQpNNEJEajV5amRpcEZ0SysvZno2SFAzYkZ6U3JlSU1VV1dNdjVHL1VQeXcwUlVtUzQwblppZDRQeFdKLy9BZ01CQUFHall6QmhNQjhHDQpBMVVkSXdRWU1CYUFGRmJuNFZzbFE0RGc5b3poY2J5TzVZQXZ4RWppTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RGdZRFZSMFBBUUgvDQpCQVFEQWdFR01CMEdBMVVkRGdRV0JCUlc1K0ZiSlVPQTRQYU00WEc4anVXQUw4Ukk0akFOQmdrcWhraUc5dzBCQVFVRkFBT0NBUUVBDQpnOGV2Nm45TkNqdzVzV2krZTIySkx1bXpDZWNZVjQyRm1oZnpka0pRRXcvSGtHOHpyY1ZKWUN0c1NWZ1oxT0srdDcrclNieVV5S3UrDQpLR3dXYU9ESWwwWWdvR2huWUlnNUlGSFlhQUVSenFmMkVRZjI3T3lzR2greVptNVdaMkI2ZEY3QWJaYzJyclVOWFdaendDVXlSZGhLDQpCZ2VQeExjSHNVMEdEZUdsNi9SMXlycWMwTDJ6MHpJa1RPNSs0bllFUzBsVDJQTHBWRFA4NVhFZlBSUmNsa3Z4T3ZJQXUyeTArcFpWDQpDSWdKd2N5UkdTbXdJQzMveXppa1FPRVh2bmxoZ1A4SEE0Wk1UbnNHbnhHR2pZbnVKOFRiNHJ3WmpndkR3eFBITFFOak85UG81S0lxDQp3b0lJbEJaVThPOGZKNUFsdUEwT0tCdEhkMGU5SEtnbDhaUzBaZz09DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkF1dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIEZpcm1hcHJvZmVzaW9uYWwgQ0lGIEE2MjYzNDA2OA0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUdGRENDQS95Z0F3SUJBZ0lJVSt3Nzd2dXlTRjh3RFFZSktvWklodmNOQVFFRkJRQXdVVEVMTUFrR0ExVUVCaE1DUlZNeFFqQkENCkJnTlZCQU1NT1VGMWRHOXlhV1JoWkNCa1pTQkRaWEowYVdacFkyRmphVzl1SUVacGNtMWhjSEp2Wm1WemFXOXVZV3dnUTBsR0lFRTINCk1qWXpOREEyT0RBZUZ3MHdPVEExTWpBd09ETTRNVFZhRncwek1ERXlNekV3T0RNNE1UVmFNRkV4Q3pBSkJnTlZCQVlUQWtWVE1VSXcNClFBWURWUVFERERsQmRYUnZjbWxrWVdRZ1pHVWdRMlZ5ZEdsbWFXTmhZMmx2YmlCR2FYSnRZWEJ5YjJabGMybHZibUZzSUVOSlJpQkINCk5qSTJNelF3Tmpnd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUURLbG11TzZ2ajc4YUkxNEg5TTJ1REQNClV0ZDl0aERJQWw2elF5ckVUMnF5eWh4ZEtKcDRFUnBwV1ZldnRTQkM1SXNQNXQ5YnBnT1NML1VSNUdMWE1uRTQyUVFNY2FzOVVYNFANCkI5OWpCVnpwdjVSdndTbUN3TFRhVWJEQlBMdXROMHBjeXZGTE5nNGtxNy9EaEhmOXFGRDBzZWZHTDlJdFdZMTZDazZXYVZJQ3FqYVkNCjdQejZGSU1NTngvSmtqZC8xNEV0NWNTNTRENDAvbWYwUG1iUjAvUkF6MTVpTkE5d0JqNGdHRnJPOTNJYkpXeVRkQlNUbzNPeERxcUgNCkVDTlpYeUFGR1VmdGFJNlNFc3BkL05ZcnNwSThJTS9oWDY4Z3ZxQjJmM2JsN0JxR1lUTSs1M3UwUDZBUGpxSzVhbSs1aHladlFXeUkNCnBsRDlhbU1MOVpNV0d4bVBzdTJibThtUTlRRU0zeGs5RHo0NEk4a3Zqd3pSQXY0YlZkWk8wSTA4cjArazgvNnZLdE1GblhrSW9jdFgNCk1iU2N5SkN5Wi9RWUZwTTYvRWZZMFhpV01SKzZLd3hmWFptdFk0bGFKQ0IyMk4vOXEwNm1JcXFkWHVZbmluMW9LYVBuaXJqYUVic1gNCkxabWRFeVJHOThYaTJKK09mOGVQZEcxYXN1aHk5YXp1SkJDdEx4VGEveTJhUm5GSHZrTGZ1d0hiOUgvVEtJOHhXVnZUeVFLbXRGTEsNCmJwZjdROFVJSm0rSzlMdjlueWlxRGRWRjh4TTZIZGpBZUk5Qlp6d2VsR1N1ZXd2RjZOa0JpRGthbDRaa1FkVTdod3h1K2cvR3ZVZ1UNCnZ6bE4xSjVCdG8rV0hXT1drOW1WQm5neGFKNDNCanVBaVVWaE9TUEhHMFNqRmVVYytKSXd1d0lEQVFBQm80SHZNSUhzTUJJR0ExVWQNCkV3RUIvd1FJTUFZQkFmOENBUUV3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZERnUVdCQlJsemV1ck5SNEFQbjdWZE1BY3RITkgNCkRocGtMekNCcGdZRFZSMGdCSUdlTUlHYk1JR1lCZ1JWSFNBQU1JR1BNQzhHQ0NzR0FRVUZCd0lCRmlOb2RIUndPaTh2ZDNkM0xtWnANCmNtMWhjSEp2Wm1WemFXOXVZV3d1WTI5dEwyTndjekJjQmdnckJnRUZCUWNDQWpCUUhrNEFVQUJoQUhNQVpRQnZBQ0FBWkFCbEFDQUENCmJBQmhBQ0FBUWdCdkFHNEFZUUJ1QUc4QWRnQmhBQ0FBTkFBM0FDQUFRZ0JoQUhJQVl3QmxBR3dBYndCdUFHRUFJQUF3QURnQU1BQXgNCkFEY3dEUVlKS29aSWh2Y05BUUVGQlFBRGdnSUJBQmQ5b1BtMDNjWEY2NjFMSkxXaEFxdmRwWWhLc2c5VlN5dFhqRHZsTWQzK3hETHgNCjUxdGtsall5R095bE1uZlg0MFMyd0JFcWdMazlhbTU4bTlPdC9NUFdvK1prS1h6UjRUZ2VnaXYvSjJXdit4WVZ4QzV4aE9XMS8vcWsNClI3MWtNcnYySllTaUowTDFJTERDRXhBUnpSQVZ1a0tRS3RKRTRaWW02ekZJRXYwcTJza0d6M1FlcVV2Vmh5ajVlVFNTUGk1RTZQYVANClQ0ODFQeVd6T2R4aktwQnJJRi9FVWhKT2x5d3FySjJYM2tqeW8yYmJ3dEtEbGFabXA1NGxEK2tMTTVGbENsckQyVlFTM2EvRFRnNGYNCkpsNE4zTE9ON05XQmNON1NUeVFGODJ4TzlVeEpabzNSLzlJTEpVRkkvbEdFeGtLdmdBVFAwSDVrU2VUeTM2THNzVXpBS2gzbnRMRmwNCm9zUzg4WmowcW5BSFk3UzQyanRNK2tBaU1Gc1JwdkFGRHNZQ0EwaXJocHVGM2R2ZDZxSjJnSE45OVp3RXhFV041N2tjaTU3cTEzWFINCmNySGVkVVRuUW4zaVYydDkzSm04UFlNbzZvQ1RqY1ZNWmNGd2diZzQvRU14c3ZZRE5FZXlyUHNpQnNzZTNSZEhIRjltdWRNYW90b1INCnNhUzhJOG5rdm9mL3VaUzIrRjBnU3RSZjU3MW9lMlh5RlI3U09xa3Q2ZGhySkt5WFdFUkhyVmtZOFNGbGNON09OR0NvUVBIelBLVEQNCktDT00vaWN6UTBDZ0Z6enI2anV3Y3FhanVVcExYaFpJOUxLOHlJeVN4WjJmckhJMnZEU0FOR3VwaTVMQXVCZnQ3SFpUOVNRQmpMTWkNCjZFdDhWY2FkK3FNVXUyV0ZibTVQRW40S1BKMlYNCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KSXplbnBlLmNvbQ0KPT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGOFRDQ0E5bWdBd0lCQWdJUUFMQzNXaFpJWDcvaHkvV0wxeG5tZlRBTkJna3Foa2lHOXcwQkFRc0ZBREE0TVFzd0NRWURWUVFHDQpFd0pGVXpFVU1CSUdBMVVFQ2d3TFNWcEZUbEJGSUZNdVFTNHhFekFSQmdOVkJBTU1Da2w2Wlc1d1pTNWpiMjB3SGhjTk1EY3hNakV6DQpNVE13T0RJNFdoY05NemN4TWpFek1EZ3lOekkxV2pBNE1Rc3dDUVlEVlFRR0V3SkZVekVVTUJJR0ExVUVDZ3dMU1ZwRlRsQkZJRk11DQpRUzR4RXpBUkJnTlZCQU1NQ2tsNlpXNXdaUzVqYjIwd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUURKDQowM3JLRHg2c3A0Ym9GbVZxc2NJYlJUSnhsZG4rRUZ2TXIrZWxlUUdQaWNQSzhsVng5M2UrZDVUemNxUXNSTmlla3BzVU9xSG5KSkFLDQpDbGFPeGRnbWxPSFpTT0V0UHRvS2N0MmptUlhhZ2FLSDlIdHVKbmVKV0szVzZ3eXlRWHB6Ym0zYmVuaEI2UWlJRW42SExtWVJZMnhVDQorenlkY3NDOEx2L0N0OTBOZHVNNjEvZTBhTDZpOWVPQmJzRkdiMTJONEUzR1ZGV0pHak14Q3JGWHVhT0ttTVBzT3pURmxVRnBmblhDDQpQQ0RGWWJwUlI2QWdrSk9oa0V2elRueUZSVlNhMFFVbVFiQzFUUjB6dnNRRHlDVjh3WERiTy9RSkxWUW5TS3d2NGNTc1Bzakxra3hUDQpPVGNqN05NQitlQUpSRTFOWk1EaERWcUhJcnl0RzZQK0pyVVY4NmY4aEJucDdLR0l0RVJwaElQemlkRjBCcW5NQzliQzNpZUZVQ2JLDQpGN2pKZW9kV0xCb0JIbXkrRTYwUXJMVWs5VGlSb2RaTDJ2RzcwdDVIdGZHOGdmWlphODhaVSttTkZjdEt5Nmx2Uk9VYlFjL2hocWZLDQowR3FmdkV5TkJqTmFvb1hsa0RXZ1lsd1dUdkRqb3ZvREdyUXNjYk5ZTE41N0M5c2FEK3ZlSVI4R2R3WURzTW52bWZ6QXVVOExoaWorDQowcm5xNDlxbHcwZHBFdURiOFBZWmkrMTdjTmNDMXUySEdDZ3NCQ1JNZCtSSWlockdPNXJVRDhyNmRkSUJRRnFOZWIrTHowdlBxaGJCDQpsZVN0VElvK0Y1SFVzV0xsZ3VXQUJLUURmbzIvMm4raUQ1ZFBETk1OKzlmUjVYSitITWgzLzF1YUQ3ZXVCVWJsOGFnVzdFZWtGd0lEDQpBUUFCbzRIMk1JSHpNSUd3QmdOVkhSRUVnYWd3Z2FXQkQybHVabTlBYVhwbGJuQmxMbU52YmFTQmtUQ0JqakZITUVVR0ExVUVDZ3crDQpTVnBGVGxCRklGTXVRUzRnTFNCRFNVWWdRVEF4TXpNM01qWXdMVkpOWlhKakxsWnBkRzl5YVdFdFIyRnpkR1ZwZWlCVU1UQTFOU0JHDQpOaklnVXpneFF6QkJCZ05WQkFrTU9rRjJaR0VnWkdWc0lFMWxaR2wwWlhKeVlXNWxieUJGZEc5eVltbGtaV0VnTVRRZ0xTQXdNVEF4DQpNQ0JXYVhSdmNtbGhMVWRoYzNSbGFYb3dEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd0hRWURWUjBPDQpCQllFRkIwY1pRNm84aVY3dEpIUDVMR3g1cjFWZEd3Rk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQ0FRQjRwZ3dXU3A5TWlEckF5dzZsDQpGbjJmdVVoZkdJOE5ZamIyelJscnJLdlY5cEY5cm5IelA3TU9lSVdibGFRbklVZENTbnhJT3ZWRmZMTU1qbEY0ckpVVDNzYjlmYmdhDQprRXlya2dQSDdVSUJ6Zy9Zc2ZxaWt1RmdiYTU2YXdtcXhpbnVhRWxuTUlBa2VqRVdPVnQrOFJ3dTNXd0pyZkl4d1lKT3VidjV2cjhxDQpoVC9BUUtNNldmeFpTendvSk51MEZYV3VEWWk2TG5QQXZWaUg1VUx5NjE3dUhqQWltY3MzMGNRaGJJSHN2bTBtNWh6a1FpQ2VSN0NzDQpnMWx3TERYV3J6WTB0TTA3K0RLbzcrTjRpZnVOUlN6YW5MaCtRQnhoNXo2aWtpeEw4czM2bUxZcC8vUHllNmtmTHFDVFZ5dmVoUVA1DQphVGZMbm5ocUJiVEZNWGlKN0hxbmhlRzVlenpldmg1NWhNNmZjQTVad2pVdWtDb3gyZVJGZWtHa0xoT2JOQTVtZTBtclpKZlFSc041DQpuWEpRWTZhWVd3YTlTRzNZT1lOdzZEWHdCZEdxdk9QYnlBTHFmUDJDMnNKYlVqV3VtRHF0dWpXVEk2Y2ZTTjAxUnBpeUVHamtwVEhDDQpDbGd1R1lFUXlWQjEvT3BhRnM0UjErN3ZVSWd0WWY4L1FuTUZsRVBWamp4T0FUb1pwUjlHVG5mUVhlV0JJaUdIL3BSOWhOaVRyZFpvDQpRMGl5Mit0ekpPZVJmMVNrdG9BK25hTThUSExDVjhTZzFNdzRKODdWQnA2aVNObnBuODZDY0RhVG1qdmZsaUhqV2JjTTJwRTM4UDFaDQpXck9aeUdsc1F5WUJOV05nVllrRE9uWFl1a3JaVlAvdTNvRFlMZEU0MVY0dEM1aDlQbXpiL0NhSXh3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAtIDIwMDgNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUhUekNDQlRlZ0F3SUJBZ0lKQUtQYVFuNmtzYTdhTUEwR0NTcUdTSWIzRFFFQkJRVUFNSUd1TVFzd0NRWURWUVFHRXdKRlZURkQNCk1FRUdBMVVFQnhNNlRXRmtjbWxrSUNoelpXVWdZM1Z5Y21WdWRDQmhaR1J5WlhOeklHRjBJSGQzZHk1allXMWxjbVpwY20xaExtTnYNCmJTOWhaR1J5WlhOektURVNNQkFHQTFVRUJSTUpRVGd5TnpRek1qZzNNUnN3R1FZRFZRUUtFeEpCUXlCRFlXMWxjbVpwY20xaElGTXUNClFTNHhLVEFuQmdOVkJBTVRJRU5vWVcxaVpYSnpJRzltSUVOdmJXMWxjbU5sSUZKdmIzUWdMU0F5TURBNE1CNFhEVEE0TURnd01URXkNCk1qazFNRm9YRFRNNE1EY3pNVEV5TWprMU1Gb3dnYTR4Q3pBSkJnTlZCQVlUQWtWVk1VTXdRUVlEVlFRSEV6cE5ZV1J5YVdRZ0tITmwNClpTQmpkWEp5Wlc1MElHRmtaSEpsYzNNZ1lYUWdkM2QzTG1OaGJXVnlabWx5YldFdVkyOXRMMkZrWkhKbGMzTXBNUkl3RUFZRFZRUUYNCkV3bEJPREkzTkRNeU9EY3hHekFaQmdOVkJBb1RFa0ZESUVOaGJXVnlabWx5YldFZ1V5NUJMakVwTUNjR0ExVUVBeE1nUTJoaGJXSmwNCmNuTWdiMllnUTI5dGJXVnlZMlVnVW05dmRDQXRJREl3TURnd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUMNCkFRQ3ZBTXR3Tnl1QVdrbzZiSGlVZmFOL0doLzJOZFc5MjhzTlJISStKcktRVXJwak95aFliNld6YlpTbTg5MWtERlgyOXVmeUlpS0ENClh1Rml4cllwNFlGczhyL2xmVEpxVktBeUdWbitINHZYUFdDR2hTUnY0eEd6ZHo0Z2xqVWhhN01JMlhBdVpQZUVrbFBXRHJDUWlvcmoNCmg0MEcwNzJRRHVLWm9SdUdEdHFhQ3JzTFlWQUdVdkdlZjNic3l3L1FIZzNQbVRBOUhNUkZFRmlzMXRQbzErWHF4UUVIZDlaUjVnTi8NCmlraWxUV2gxdWVtOG5rNFpjZlV5UzV4dFlCa0wrOHlkZGR5L0pzMlBrM2c1ZVhOZUpRN0tYT3QzRWdmTFpFRkhjcE9yVU1QckNYWmsNCk5OSTV0M1lSQ1ExMlJjU3ByajFxcjdWOVpTK1VXQkRzWEh5dmZ1SzJHTm5RbTA1YVNkK3BaZ3ZNUE1aNGZLZWNIZVBPamxPK0JkNWcNCkQydmxHdHMvNCtFaHlTbkI4ZXNIbkZJYkFVUlJQSHNsMThUbFVsUmRKUWZLRmlDNHJlUkI3bm9JL3Bsdmc2YVJBckJzTmxWcTUzMzENCmx1YktnZGFYOFpTRDZlMndzV3NTYVI2cysxMnB4WmpwdEZ0WWVyNDlva1E2WTFuVUN5WGVHMCs5NVFHZXpkSXAxWjhYR1FwdnZ3eVENCjB3bGYyZU9LTmN4NVdrMFpONUszeE1HdHIvUjVKSnF5QVF1eHIxeVc4NEF5KzF3OW1QR2dQMHJldnErVUx0bFZtaGR1WUoxamJMaGoNCnlhNkJYQmcxNEpDN3ZqeFBOeUs1ZnV2UG5uY2hwajA0Z2Z0STJqRTlLK09KOWRDMXZYN2dVTVFTaWJNam1oQXhoZHV1Yis4NE14aDINCkVRSURBUUFCbzRJQmJEQ0NBV2d3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCRERBZEJnTlZIUTRFRmdRVStTU3NEN0sxK0huQSttQ0kNCkc4VFpUUUtlRnhrd2dlTUdBMVVkSXdTQjJ6Q0IySUFVK1NTc0Q3SzErSG5BK21DSUc4VFpUUUtlRnhtaGdiU2tnYkV3Z2E0eEN6QUoNCkJnTlZCQVlUQWtWVk1VTXdRUVlEVlFRSEV6cE5ZV1J5YVdRZ0tITmxaU0JqZFhKeVpXNTBJR0ZrWkhKbGMzTWdZWFFnZDNkM0xtTmgNCmJXVnlabWx5YldFdVkyOXRMMkZrWkhKbGMzTXBNUkl3RUFZRFZRUUZFd2xCT0RJM05ETXlPRGN4R3pBWkJnTlZCQW9URWtGRElFTmgNCmJXVnlabWx5YldFZ1V5NUJMakVwTUNjR0ExVUVBeE1nUTJoaGJXSmxjbk1nYjJZZ1EyOXRiV1Z5WTJVZ1VtOXZkQ0F0SURJd01EaUMNCkNRQ2oya0orcExHdTJqQU9CZ05WSFE4QkFmOEVCQU1DQVFZd1BRWURWUjBnQkRZd05EQXlCZ1JWSFNBQU1Db3dLQVlJS3dZQkJRVUgNCkFnRVdIR2gwZEhBNkx5OXdiMnhwWTNrdVkyRnRaWEptYVhKdFlTNWpiMjB3RFFZSktvWklodmNOQVFFRkJRQURnZ0lCQUpBU3J5STENCndxTTU4QzdlNmJYcGVIeEl2ajk5UlpKZTZkcXhHZndXUEorMFcyYWVhdWZEdVYySTZBK3R6eU1QM2lVNlhzeFBwY0cxTGF3azBsZ0gNCjNxTFBhWVJnTStnUURST3BJOUNGNVk1N3BwNDljaE55TS9XcWZjWmpId2owL2dGL0pNOHJMRlFKM3VJcmJaTEdPVThXNmp4K2VrYlUNClJXcEdxT3QxZ2xhbnE2QjhhQk16OXAwdzhHOG5PU1FqS3BEOWtDazE4cFBmTktYRzkvanZqQTlpU255dTAvVlUrSTIybWxhSEZvSTYNCk02dGFJZ2ozZ3JycUx1QkhtclMxUmFNRk85bmNMa1ZBTytyY2YrZzc2OUhzSnRnMXBEREZPcXhYbnJOMnBTQjcrUjVLQldJQnBpaDENCllKZVNEVzQrVFRkRERaSVZuQmdpelZHWm9Da2FQRitLTWpOYk1NZUpMMGVZRDZNRHh2YnhyTjh5OE5tQkd1U2N2ZmFBRlBEUkxMbUYNCjlkaWpzY2lsSWVVY0U1ZnVEcjNmS2Fudk5GTmIwK1JxRTRRR3RqSUN4Rkt1SXRMY3NpRkNHdHBBOENuSjdBb01YT0xRdXN4STB6Y0sNCnpCSUtpbm13UFFOL2FVdjBOQ0I5c3pUcWprdGs5VDc5c3lObkZRMEV1UEF0d1FsUlBMSnNGZkNsSTllRGRPVGxMc24rbUNkQ3hxdkcNCm5yRFFXemlsbTFEZWZoaVl0VVU3OW5tMDZQY2Fld2FEKzlDTDJydkh2UmlyQ0c4OGdHdEFQeGtadW1XSzVyN1ZYTk0yMSs5QVVpUmcNCk9HY0VNZXlQODRMRzNybFY4enN4a1ZyY3RRZ1ZyWFlsQ2cxN0xvZmlES1lHdkNZUWJUZWQ3TjE0akh5QXhmRFpkMGpRDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkdsb2JhbCBDaGFtYmVyc2lnbiBSb290IC0gMjAwOA0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUhTVENDQlRHZ0F3SUJBZ0lKQU1uTjArblZmU1BPTUEwR0NTcUdTSWIzRFFFQkJRVUFNSUdzTVFzd0NRWURWUVFHRXdKRlZURkQNCk1FRUdBMVVFQnhNNlRXRmtjbWxrSUNoelpXVWdZM1Z5Y21WdWRDQmhaR1J5WlhOeklHRjBJSGQzZHk1allXMWxjbVpwY20xaExtTnYNCmJTOWhaR1J5WlhOektURVNNQkFHQTFVRUJSTUpRVGd5TnpRek1qZzNNUnN3R1FZRFZRUUtFeEpCUXlCRFlXMWxjbVpwY20xaElGTXUNClFTNHhKekFsQmdOVkJBTVRIa2RzYjJKaGJDQkRhR0Z0WW1WeWMybG5iaUJTYjI5MElDMGdNakF3T0RBZUZ3MHdPREE0TURFeE1qTXgNCk5EQmFGdzB6T0RBM016RXhNak14TkRCYU1JR3NNUXN3Q1FZRFZRUUdFd0pGVlRGRE1FRUdBMVVFQnhNNlRXRmtjbWxrSUNoelpXVWcNClkzVnljbVZ1ZENCaFpHUnlaWE56SUdGMElIZDNkeTVqWVcxbGNtWnBjbTFoTG1OdmJTOWhaR1J5WlhOektURVNNQkFHQTFVRUJSTUoNClFUZ3lOelF6TWpnM01Sc3dHUVlEVlFRS0V4SkJReUJEWVcxbGNtWnBjbTFoSUZNdVFTNHhKekFsQmdOVkJBTVRIa2RzYjJKaGJDQkQNCmFHRnRZbVZ5YzJsbmJpQlNiMjkwSUMwZ01qQXdPRENDQWlJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dJUEFEQ0NBZ29DZ2dJQkFNRGYNClZ0UGtPcHQyUmJRVDIvL0J0aG1MTjBFWWxWSkg2eGVkS1lpT05Xd0dNaTVIWXZOSkJMOTlSRGF4Y2N5OVdnbHoxZG1GUlArUlZ5WGYNClhqYU9jTkZjY1VNZDJkcnZYTkw3RzcwNnRjdXRvOHhFcHcydUlSVS91WHBia25YWXBCSTRpUm1LdDREUzRqSnZWcHlSMW9nUUM3TjANClpKSjBZUFAyenhoUFlMSWowTWM3em1GTG1ZL0NETkJBc3BqY0RhaE9vN2tLcm1DZ3JVVlNZN3BtdldqZytiNGFxSUc3SGtGNGRkUEINCi9nQlZzSWRVNkNlUU5SMU1NNjJYL0pjdW1JUy9MTW1qdjlHWUVSVHRZL2pLbUloWUY1bnRSUU9YZmp5R0hvaU12dktSaEk5bE5OZ0ENClRIMjNNUmRhS1hvS0dDUXdvemUxZXFrQmZTYlcrUTZPV2ZIOUd6TzFLVHNYTzBHMklkM1V3RDJsbjU4ZlExREp1N3hzZXBlWTdzMk0NCkgvdWNVYTZMY0wwbm4zSEFhNng5a0dibzExMDZEYkRWd28zVnlKMmR3VzNRMEw5UjVPUDR3emcycnRhbmRlYXZoRU5kazVJTWFnZmUNCk94MllJdGFzd1RYYm82QWwvM0sxZGgzZWJla3NaaXhTaE5CRmtzNGM1ZVV6SGR3SFUxU2pxb0k3bWpjdjNOMmdaT25tM2IydS9HU0YNCkhUeW55UWJlaFA5cjZHc2FQTVdpczBMN2l3aytYd2hTeDJMRTFBVnh2OFJrNVBpaGcrZytFcHVvSHRRMlRTOXg5bzBvOW9PcEU5SmgNCndaRzdTTUEwajBHTVMwemJhUkwvVUpTY0lJTlpjKzE4b2ZMeC9kMzNTZE5EV0tCV1k4bzlQZVUxVmxucERzb2d6Q3RMa3lrUEFnTUINCkFBR2pnZ0ZxTUlJQlpqQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRU1NQjBHQTFVZERnUVdCQlM1Q2NxY0h0dlRiRHBycnUxVThWdVQNCkJqVXVYakNCNFFZRFZSMGpCSUhaTUlIV2dCUzVDY3FjSHR2VGJEcHJydTFVOFZ1VEJqVXVYcUdCc3FTQnJ6Q0JyREVMTUFrR0ExVUUNCkJoTUNSVlV4UXpCQkJnTlZCQWNUT2sxaFpISnBaQ0FvYzJWbElHTjFjbkpsYm5RZ1lXUmtjbVZ6Y3lCaGRDQjNkM2N1WTJGdFpYSm0NCmFYSnRZUzVqYjIwdllXUmtjbVZ6Y3lreEVqQVFCZ05WQkFVVENVRTRNamMwTXpJNE56RWJNQmtHQTFVRUNoTVNRVU1nUTJGdFpYSm0NCmFYSnRZU0JUTGtFdU1TY3dKUVlEVlFRREV4NUhiRzlpWVd3Z1EyaGhiV0psY25OcFoyNGdVbTl2ZENBdElESXdNRGlDQ1FESnpkUHANCjFYMGp6akFPQmdOVkhROEJBZjhFQkFNQ0FRWXdQUVlEVlIwZ0JEWXdOREF5QmdSVkhTQUFNQ293S0FZSUt3WUJCUVVIQWdFV0hHaDANCmRIQTZMeTl3YjJ4cFkza3VZMkZ0WlhKbWFYSnRZUzVqYjIwd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dJQkFJQ0lmM0Rla2lqWkJaUkcNCi81QlhxZkV2M3hvTmEvcDhEaHhKSkhrbjJFYXFieWxaVW9od0V1cmRQZldiVTFSdjRXQ2lxQW01N090WmZNWTE4ZHdZNmZGbjVhKzYNClJlQUozc3BFRDhJWERuZVJSWG96WDErV0xHaUx3VWVQbUpzOXdPekw5ZFdDa29RMTBiNDJPRlp5TVZ0SExhb1hwR05SNndvQnJYL3MNCmRaN0xvUi94ZnhLeHVlUmtmMmZXSXlyMHVEbGRtT2docCtHOVBVSWFkSnB3cjJoc1VGMUp6Ly83RGwzbUxFZlhnVHBaQUxWemEyTWcNCjlqRkZDRGtPOUhCK1FIQmFQOUJyUXFsMFBTZ3ZBbTExY3BVSmpVaGp4c1lqVjVLVFhqWEJqZmtLOXl5ZFloejJyWHpkcGpFZXRySEgNCmZvVW0rcVJxdGRwak1OSHZremV5Wmk5OUJmZm50MHVZbERYQTJUb3B3WjJ5VURNZFNxbGFwc2tENyszMDU2aHVpclJYaE91a1A5RHUNCnFxcUhXMlBvaytKcnFOUzRjbmhyRyswNTVGM0xtNnFIMVU5T0FQN1phcDg4TVE4b0FnRjltT2luc0tKa25ubjRTUElWcWN6bXlFVHINClAzaVo4bnR4UGp6eG1LZkZHQkkvNXJzb00wTHBSUXA4YmZLR2VTL0ZnaGw5Q1lsOHNsUjJpSzdld2ZQTTRXN2JNZGFUcnBtZzd5VnENCmM1aUpXem91RTRnZXY4Q1NsRFFiNHllM2l4NXZRdi9uNlRlYlVCMHRvdmtDN3N0WVdEcHh2R2pqcXNHdkhDZ2ZvdHdqWlQrQjZxNloNCjA5Z3d6eE1OVHhYSmhMeW5TQzM0TUNOMzJFWkxlVzMyak8wNmYyQVJlUFRwbTY3VlZNQjBnTkVMUXAvQg0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpHbyBEYWRkeSBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUR4VENDQXEyZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBRENCZ3pFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVkJBZ1QNCkIwRnlhWHB2Ym1FeEV6QVJCZ05WQkFjVENsTmpiM1IwYzJSaGJHVXhHakFZQmdOVkJBb1RFVWR2UkdGa1pIa3VZMjl0TENCSmJtTXUNCk1URXdMd1lEVlFRREV5aEhieUJFWVdSa2VTQlNiMjkwSUVObGNuUnBabWxqWVhSbElFRjFkR2h2Y21sMGVTQXRJRWN5TUI0WERUQTUNCk1Ea3dNVEF3TURBd01Gb1hEVE0zTVRJek1USXpOVGsxT1Zvd2dZTXhDekFKQmdOVkJBWVRBbFZUTVJBd0RnWURWUVFJRXdkQmNtbDYNCmIyNWhNUk13RVFZRFZRUUhFd3BUWTI5MGRITmtZV3hsTVJvd0dBWURWUVFLRXhGSGIwUmhaR1I1TG1OdmJTd2dTVzVqTGpFeE1DOEcNCkExVUVBeE1vUjI4Z1JHRmtaSGtnVW05dmRDQkRaWEowYVdacFkyRjBaU0JCZFhSb2IzSnBkSGtnTFNCSE1qQ0NBU0l3RFFZSktvWkkNCmh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTDl4WWdqeCtsazA5eHZKR0tQM2dFbFk2U0tERTZiRklFTUJPNFR4NW9WSm55ZnENCjlvUWJUcUMwMjNDWXh6SUJzUVUrQjA3dTlQcFBMMWt3SXVlckdWWnI0b0FIL1BNV2RZQTVVWHZsK1RXMmRFNnBqWUlUNUxZL3FRT0QNCitxSytpaFZxZjk0THc3WVpGQVhLNnNPb0JKUTdSbnd5RGZNQVppTElqV2x0Tm93UkdMZlRzaHhndERqNkFvek8wOTFHQjk0S1B1dGQNCmZNaDgrN0FyVTZTU1ltbFJKUVZoR2tTQmpDeXBRNVlqMzZ3Nmdab09LY1VjcWVsZEhyYWVuakFLT2M3eGlJRDdTMTNNTXV5RllrTWwNCk5BSldKd0dSdER0d0tqOXVzZWljaUFGOW45VDUyMU50WUoyL0xPZFlxN2hmUnZ6T3hCc0RQQW5yU1RGY2FVYXo0RWNDQXdFQUFhTkMNCk1FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZd0hRWURWUjBPQkJZRUZEcWFoUWNRWnlpMjcvYTkNCkJVRnVJTUdVMmcvZU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ1oyMTE1MWZtWFdXY0RZZkYrT3dZeGRTMmhJSTVQWlllMDk2YWMNCnZOanBMOURiV3U3UGRJeHp0RGhDMmdWNytBSjF1UDJsc2RldTl0ZmVFOHRURUg2S1J0R1grcmN1S3hHcmtMQW5nUG5vbjFycE41K3INCjVOOXNzNFVYblQzWkpFOTVrVFhXWHdUcmdJT3JtZ0l0dFJEMDJKREhCSE5BN1hJbG9LbWY3SjZyYUJLWlY4YVBFam9KcEwxRS9RWVYNCk44R2I1REtqN1RqbzJHVHpMSDRVL0FMcW44My9CMmdYMnlLUU9DMTZqZEZVOFdualh6UEtlajE3Q3VQS2YxODU1ZUoxdXNWMkdEUE8NCkxQQXZUSzMzc2VmT1Q2akVtMHBVQnNWL2ZkVUlEK0ljL240WHVLeGU5dFFXc2tNSkRFMzJwMnUwbVlSbHlucUk0dUpFdmx6MzZoejENCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KU3RhcmZpZWxkIFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IC0gRzINCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUQzVENDQXNXZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBRENCanpFTE1Ba0dBMVVFQmhNQ1ZWTXhFREFPQmdOVkJBZ1QNCkIwRnlhWHB2Ym1FeEV6QVJCZ05WQkFjVENsTmpiM1IwYzJSaGJHVXhKVEFqQmdOVkJBb1RIRk4wWVhKbWFXVnNaQ0JVWldOb2JtOXMNCmIyZHBaWE1zSUVsdVl5NHhNakF3QmdOVkJBTVRLVk4wWVhKbWFXVnNaQ0JTYjI5MElFTmxjblJwWm1sallYUmxJRUYxZEdodmNtbDANCmVTQXRJRWN5TUI0WERUQTVNRGt3TVRBd01EQXdNRm9YRFRNM01USXpNVEl6TlRrMU9Wb3dnWTh4Q3pBSkJnTlZCQVlUQWxWVE1SQXcNCkRnWURWUVFJRXdkQmNtbDZiMjVoTVJNd0VRWURWUVFIRXdwVFkyOTBkSE5rWVd4bE1TVXdJd1lEVlFRS0V4eFRkR0Z5Wm1sbGJHUWcNClZHVmphRzV2Ykc5bmFXVnpMQ0JKYm1NdU1USXdNQVlEVlFRREV5bFRkR0Z5Wm1sbGJHUWdVbTl2ZENCRFpYSjBhV1pwWTJGMFpTQkINCmRYUm9iM0pwZEhrZ0xTQkhNakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMM3R3UVA4OW8vOEFyRnYNClc1OUkyWjE1NHFLM0EyRldHTU5IdHRmS1BUVXVpVVAzb1dtYjNvb2EvUk1nbkxSSmR6SXBWdjI1N0l6ZEl2cHkzQ2RobCs3MldvVHMNCmJobTVpU3pjaEZ2VmRQdHJYOFdKcFJCU2lVWlY5TGgxSE9aLzVGU3VTL2hWY2xjQ0dmZ1hjVm5ySGlnSGRNV2RTTDVzdFBTa3NQTmsNCk4zbVN3T3hHWG4vaGJWTk1ZcS9OSHd0anV6cWQrL3g1QUpoaGRNOG1na0JqODdKeWFoa05tY3JVRG5YTU4vdUxpY0ZaOFdKL1g3TmYNClpURDRwN2ROZGxvZWRsNDB3T2lXVnBtS3MvQi9wTTI5M0RJeGZKSFA0RjhSK0d1cVNWelJtWlRSb3VOald3bDJ0VlppNFV0MEhaYlUNCkp0UUlCRm5RbUE0TzV0Nzh3K3dma1BFQ0F3RUFBYU5DTUVBd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUMNCkFRWXdIUVlEVlIwT0JCWUVGSHdNTWgrbjJUQi94SDFvbzJLb29jNnJCMXNuTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBUldmb2wNClR3TnZsSms3bWgrQ2hUblVkZ1dVWHVFb2syMWlYUW5Db0tqVXNIVTQ4VFJxbmVTZmlvWW1VZVlzMGNZdGJwVWdTcElCN0xpS1ozc3gNCjRtY3VqSlVESmk1RG5Vb3g5ZzYxREx1MzRqZC9Jcm9Bb3c1N1V2dHJ1enZFMDNsUlRzMlE5R2NIR2NnOFJub05BWDNGV09kdDVvVXcNCkY1b2t4QkRnQlBmZzhuL1VxZ3IvUWgwMzdaVGxaRmtTSUhjNDB6SStPSUYxbG5QNmFJK3h5ODRmeGV6Nm5IN1Bmckh4QnkyMi9ML0sNCnBML1Fsd1ZLdk9vWUtBS1F2VlI0Q1NGeDA5RjlIZGtXc0tsaFBkQUtBQ0w4eDN2TENXUkZDenRBZ2ZkOWZETDFtTXBZam4wcTdwQloNCmMyVDVOblJlSmFIMVpnVXVmemtWcVNyN1VJdU9oV24wDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClN0YXJmaWVsZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAtIEcyDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEN3pDQ0F0ZWdBd0lCQWdJQkFEQU5CZ2txaGtpRzl3MEJBUXNGQURDQm1ERUxNQWtHQTFVRUJoTUNWVk14RURBT0JnTlZCQWdUDQpCMEZ5YVhwdmJtRXhFekFSQmdOVkJBY1RDbE5qYjNSMGMyUmhiR1V4SlRBakJnTlZCQW9USEZOMFlYSm1hV1ZzWkNCVVpXTm9ibTlzDQpiMmRwWlhNc0lFbHVZeTR4T3pBNUJnTlZCQU1UTWxOMFlYSm1hV1ZzWkNCVFpYSjJhV05sY3lCU2IyOTBJRU5sY25ScFptbGpZWFJsDQpJRUYxZEdodmNtbDBlU0F0SUVjeU1CNFhEVEE1TURrd01UQXdNREF3TUZvWERUTTNNVEl6TVRJek5UazFPVm93Z1pneEN6QUpCZ05WDQpCQVlUQWxWVE1SQXdEZ1lEVlFRSUV3ZEJjbWw2YjI1aE1STXdFUVlEVlFRSEV3cFRZMjkwZEhOa1lXeGxNU1V3SXdZRFZRUUtFeHhUDQpkR0Z5Wm1sbGJHUWdWR1ZqYUc1dmJHOW5hV1Z6TENCSmJtTXVNVHN3T1FZRFZRUURFekpUZEdGeVptbGxiR1FnVTJWeWRtbGpaWE1nDQpVbTl2ZENCRFpYSjBhV1pwWTJGMFpTQkJkWFJvYjNKcGRIa2dMU0JITWpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDDQpBUW9DZ2dFQkFOVU1Pc1FxK1U3aTliNFpsMStPaUZPeEh6L0x6NThnRTIwcE9zZ1BmVHozYTNZNFk5azJZS2liWGx3QWdMSXZXWC8yDQpoL2tsUTRibmFSdFNtcERoY2VQWUxRMU9iL2JJU2RtMjh4cFdyaXUyZEJUcnovc200eHE2SFpZdWFqdFlsSWxIVnY4bG9KTndVNFBhDQpoSFFVdzJlZUJHZzYzNDVBV2gxS1RzOURrVHZuVnRZQWNNdFM3bnQ5cmpybnZESDVSZmJDWU04VFdRSXJnTXcwUjkrNTNwQmxiUUxQDQpMSkdtcHVmZWhSaEpmR1pPb3pwdHFiWHVOQzY2RFFPNE05OUg2N0ZyalNYWm04NkIwVVZHTXBad2g5NENEa2xEaGJac2M3dGs2bUZCDQpyTW5VVk4rSEw4Y2lzaWJNbjFsVWFKLzh2aW92eEZVY2RVQmdGNFVDVlRtTGZ3VUNBd0VBQWFOQ01FQXdEd1lEVlIwVEFRSC9CQVV3DQpBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBUVl3SFFZRFZSME9CQllFRkp4ZkFOK3FBZGN3S3ppSW9yaHRTcHp5RVpHRE1BMEdDU3FHDQpTSWIzRFFFQkN3VUFBNElCQVFCTE5xYUVkMm5kT3htZlp5TUlidzVoeWYyRTNGL1lOb0hOMkJ0QkxaOWczY2NhYU5uUmJvYmhpQ1BQDQpFOTVEeitJMHN3U2RIeW5Wdi9oZXlOWEJ2ZTZTYnpKMDhwR0NMNzJDUW5xdEtyY2dmVTI4ZWxVU3doWHF2ZmRxbFM1c2RKL1BITFR5DQp4UUdqaGRCeVBxMXpxd3ViZFF4dFJiZU9sS3lXTjdXZzBJOFZSdzdqNklQZGovM3ZRUUYzekNlcFlvVXo4amNJNzNIUGR3YmV5QmtkDQppRURQZlVZZC94N0g0YzcvSTl2RytvMVZUcWtDNTBjUlJqNzAvYjE3S1NhN3FXRmlOeWkyTFNyMkVJWmt5WENuMHEyM0tYQjU2anphDQpZeVdmL1dpM01PeHcrM1dLdDIxZ1o3SWV5TG5wMktodkFvdG5EVTBtVjNIYUlQekJTbENOc1NpNg0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpBZmZpcm1UcnVzdCBDb21tZXJjaWFsDQo9PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSURURENDQWpTZ0F3SUJBZ0lJZDNjR0p5YXBzWHd3RFFZSktvWklodmNOQVFFTEJRQXdSREVMTUFrR0ExVUVCaE1DVlZNeEZEQVMNCkJnTlZCQW9NQzBGbVptbHliVlJ5ZFhOME1SOHdIUVlEVlFRRERCWkJabVpwY20xVWNuVnpkQ0JEYjIxdFpYSmphV0ZzTUI0WERURXcNCk1ERXlPVEUwTURZd05sb1hEVE13TVRJek1URTBNRFl3Tmxvd1JERUxNQWtHQTFVRUJoTUNWVk14RkRBU0JnTlZCQW9NQzBGbVptbHkNCmJWUnlkWE4wTVI4d0hRWURWUVFEREJaQlptWnBjbTFVY25WemRDQkRiMjF0WlhKamFXRnNNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUYNCkFBT0NBUThBTUlJQkNnS0NBUUVBOWh0UFp3Y3JvUlgxQmlMTEh3R3k0M05GQmtSSkxMdEpKUlRXenNPM3F5eFB4a0V5bEZmNkVxZGINCkR1S1BIeDZHR2FlcXRTMjVYdzJLd3ErRk5Ya3lMYnNjWWpmeXNWdEtQY3JOY1YvcFFyNlU2TWplK1NKSVpNYmxxOFlyYmEwRjhQclYNCkM4K2E1ZkJRcElzN1I2VWpXM3A2K0RNL3VPK1psK01nd2RZb2ljK1UrN2xGN2VOQUZ4SFVkUEFMTWVJckptcWJURmV1ckNBK3VrVjYNCkJmTzltMmtWcm4xT0lHUEVOWFk2QndMSk4vM0hSKzdvOFhZZGN4WHlsNlMxeUhwNTJVS3FLMzljL3M0bVQ2Tm1nVFd2UkxwVUhod3cNCk1tV2Q1anlUWGxCT2V1TTYxRzdNR3Z2NTBqZXVKQ3FyVndNaUtBMUpkWCszS05wMXY0N2ozQTU1TVFJREFRQUJvMEl3UURBZEJnTlYNCkhRNEVGZ1FVblpQR1U0dGV5cTgvbng0UDVabVZ2Q1QybEk4d0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUMNCkFRWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRmlzOUFRT3pjQU4vd3I5MUxvV1h5bTllMmlaV0VuU3RCMDNUWDhuZlVZR1hVUEcNCmhpNCtjN0ltZlUrVHFiYkVLcHFySVpjVXNkNk0wNnVKRmRockpOVHhGcTdZcEZ6VWYxR083UmdCc1pOanZiejRZWUNhbnJIT1FuRGkNCnFYMEdKWDBub2Y1djdMTWVKTnJqUzFVYUFEczF0RHZaMTEwdy9ZRVRpZkxDQml2dFo4U095VU95WEdzVmlRSzhZdnhPOHJVenFySnYNCjB3cWlVT1AyTytndVJNTGJaamlwTTFaSThXMGJNNDBOakQ5Z041M1R5bTErTkg0Tm4zSjJpeHVmY3YxU05VRkZBcFl2SExLYWMwa2gNCnNVbEhSVWUwNzJvMEVjbE5tc3hadDlZQ25scE9aYldVcmh2ZktiQVc4YjhBbmdjNkYyUzFCTFVqSVprS2xUdVhmTzg9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkFmZmlybVRydXN0IE5ldHdvcmtpbmcNCj09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRFREQ0NBalNnQXdJQkFnSUlmRThFT1J6VW1TMHdEUVlKS29aSWh2Y05BUUVGQlFBd1JERUxNQWtHQTFVRUJoTUNWVk14RkRBUw0KQmdOVkJBb01DMEZtWm1seWJWUnlkWE4wTVI4d0hRWURWUVFEREJaQlptWnBjbTFVY25WemRDQk9aWFIzYjNKcmFXNW5NQjRYRFRFdw0KTURFeU9URTBNRGd5TkZvWERUTXdNVEl6TVRFME1EZ3lORm93UkRFTE1Ba0dBMVVFQmhNQ1ZWTXhGREFTQmdOVkJBb01DMEZtWm1seQ0KYlZSeWRYTjBNUjh3SFFZRFZRUUREQlpCWm1acGNtMVVjblZ6ZENCT1pYUjNiM0pyYVc1bk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRg0KQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0SVRNTXhjdWE1UnNhMkZTb091anozbVVUT1dVZ0puTFZXUkVaWTluWk9JRzQxdzNTZll2bTRTRQ0KSGkzeVlKMHdUc3lFaGVJc3p4NmUvamFyTTNjMVJOZzFsaG85TnVoNkR0alZSNkZxYVl2Wi9MczZybmxhMWZUV2NidWFrQ05ybXJlSQ0KZEljTUhsKzVuaTM2cTFNcjNMdDJQcE5NQ0FpTUhxSWpITlJxclNLNm1RRXViV1hMdmlSbVZTUkxRRVN4RzlmaHdvWEEzaEEvUGUyNA0KL1BIeEkxUGN2MldYYjluNVFIR05mYjJWMU02K29GNG5JOTc5cHRBbURnQXA2enhHOEQxZ3Z6OVEwdHdtUVZHZUZEZENCS053VjZnYg0KaCswdCtudnVqQXJqcVdhSkdjdEIrZDFFTm1IUDRuZEd5SDMyOUpLQk52M2JOUEZ5ZnZNTUZyMjBGUUlEQVFBQm8wSXdRREFkQmdOVg0KSFE0RUZnUVVCeC9TNTV6YXdtNmlRTFN3ZWxBUVVIVEV5TDB3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQw0KQVFZd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFJbFhzaFo2cU1MOTF0bWJtelRDbkxReUZFMm5wTi9zdnFlKytFUGJrVGZPdERJdQ0KVUZVYU5VNTJRM0VnNzVOM1RoVndMb2ZEd1IxdDNNdTFKOVFzVnRGU1V6cEUwblBJeEJzRlpWcGlrcHp1UVkweDIrYzA2bGtoMVFGNg0KMTJTNFpEbk55ZTJ2N1VzRFNLZWdtUUdBM0dXak5xNWxXVWhQZ2t2SVpmRlhIZVZaTGdvL2JOalI5ZVVKdEd4VUFBcmdGVTJIZFcyMw0KV0paYTNXM1NBS0QwbTBpK3d6ZWt1amJnZkllRmx4b1ZvdDR1b2x1OXJ4ajVrRkROY0ZuNEoyZEh5OGVnQnpwOTBTeGRiQms2WnJWOQ0KL1pGdmdyRytDSlBiRkVmeG9qZkhSWjQ4eDNldlpLaVQzL1pwZzRKZzhrbENOTzFhQUZTRkhCWTJrZ3hjK3FhdHY5cz0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQWZmaXJtVHJ1c3QgUHJlbWl1bQ0KPT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlGUmpDQ0F5NmdBd0lCQWdJSWJZd1VSckdtQ3U0d0RRWUpLb1pJaHZjTkFRRU1CUUF3UVRFTE1Ba0dBMVVFQmhNQ1ZWTXhGREFTDQpCZ05WQkFvTUMwRm1abWx5YlZSeWRYTjBNUnd3R2dZRFZRUUREQk5CWm1acGNtMVVjblZ6ZENCUWNtVnRhWFZ0TUI0WERURXdNREV5DQpPVEUwTVRBek5sb1hEVFF3TVRJek1URTBNVEF6Tmxvd1FURUxNQWtHQTFVRUJoTUNWVk14RkRBU0JnTlZCQW9NQzBGbVptbHliVlJ5DQpkWE4wTVJ3d0dnWURWUVFEREJOQlptWnBjbTFVY25WemRDQlFjbVZ0YVhWdE1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBDQpNSUlDQ2dLQ0FnRUF4QkxmcVYvK1FkM2Q5WitLNC9hczRUeDRtcnpZOEg5Nm9ETXEzSTBnVzY0dGIrZVQyVFp3YW1qUGpsR2poVnRuDQpCS0FRSkc5ZEtJTEJsMWZZU0NrVHR1RytrVTNmaFF4VEdKb2VKS0pQai9DaWhRdkw5Q2wvMHFSWTdpWk55YXFvZTVyWitqamVSRmNWDQo1ZmlNeU5sSTRnMFdKeDBleUlPRkpiZTZxbFZCekFNaVN5MlJqWXZtaWE5bXgrbi9LK2s4ck5yU3M4UGhhSnlKK0hvQVZ0NzBWWlZzDQorN3BrM1dLTDN3dDNNdXRpekNhYW03dXFZb05NdEFaNk1NZ3B2KzBHVFplNUhNUXhLOVZmdkZNU0Y1eVpWeWxtZDJFaE1RY3VKVW1kDQpHUEx1OHl0eGpMVzZPUWRKZC96dkxwS1FCWTB0TDNkNzcwTy9OYnVhMlBsenB5enkwRmZ1S0U0bVg0K1FhQWt2dVBqY0J1a3VtajVSDQpwOUVpeEFxbk9FaHNzL24vZmF1R1YrTzYxb1Y0ZDdwRDZraC85dGkrSTIwZXY5RTJiRmhjOGU2a0dWUWE5UVBTZHViaGpMMDhzOU5JDQpTK0xJK0grU3FIWkduRUpsUHFRZXdRY0RXa1l0dUpmenQ5V3lWU0h2dXR4TUFKZjdGSlVuTTcvb1EwZEcwZ2laRm1BN21uN1M1dTA0DQo2dXdCSGp4SVZra0p4MHczQUo2SURzQno0VzltNlhKSE1ENFE1UXNEeVpwQ0FHekZsSDVoeElyZmY0SWFDMW5FV1RKM3M3eGdhVlk1DQovYlFHZXl6V1pEYlp2VWp0aEI5K3BTS1BLcmhDOUlLMzFGT1FlRTR0R3YyQmIwVFhPd0YwbGtMZ0FPSXVhK3JGN25Lc3U3Lys2cXFvDQorTnoyc25tS3RtY0NBd0VBQWFOQ01FQXdIUVlEVlIwT0JCWUVGSjNBWjZZTUl0a205VVdycG1WU0VTZllSYXhqTUE4R0ExVWRFd0VCDQovd1FGTUFNQkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01BMEdDU3FHU0liM0RRRUJEQVVBQTRJQ0FRQ3pWMDBRWWs0NjVLenF1Qnl2DQpNaVBJczBsYVVaeDJLSTE1cWxkR0Y5WDFVdmEzUk9nSVJMOFloTklMZ00zRkV2MEFWUVZoaDBIY3RTU2VQTVRZeVB0d25pOTRsb01nDQpOdDU4RDJrVGlLVjFOcGdJcHNiZnJNN2pXTmEzUHQ2NjgrczBRTmlpZ2ZWNFB5L1ZwZnpab3RSZUJBNFhyZjVCOE9XeWN2cEVnak5DDQo2QzFZOTFhTVlqKzZRckNjREZ4K0xtVW1YRk5QQUxKNGZxRU5tUzJOdUIyT29zU3cvV0RRTUtTT3lBUmlxY1R0TmQ1NmwrME9PRjZTDQpMNU53cGFtY2I2ZDlFeDEreGdoSXNWNW42MUVJSmVubUpXdFNLWkdjMGpsekNGZmVtUWEwVzUwUUJ1SENBS2k0SEVvQ0NoVFF3VUhLDQorNHcxSVgyQ09QS3BWSkVaTlpPVWJXbzZ4YkxRdTRtR2sraWJ5UTg2cDNxNG9mQjRSdnI4TnkvbGlvVHozLzRFMmFGb29DOGs0Z21WDQpCdFdWeXVFa2x1dDg5cE1GdSsxejZTM1JkVG5YNXlUYjJFNWZRNCtlMEJRNXYxVndTSmxYTWJTYzdrcVlBNVl3SDJBRzdoc2ovb0ZnDQpJeHBIWW9XbHpCazBnRyt6ckJyam4vQjdTSzNWQWRsbnRxbHlrK290WnJXeXVPUTlQTEx2VEl6cTZ3ZS9xeldhVllhOEdLYTFxRjYwDQpnMnhyYVVEVG45enh3MmxydWVGdENmVHhxbEIyQ25wOWVoZWhWWlpDbVRFSjNXQVJqUVV3ZnVhT1J0R2RGTnJIRitRRmxvekVKTFViDQp6eFFIc2tENG81NUJocndFMEd1V3lDcUFOUDIvN3dhajNWakZoVDArai82ZUtlQzJ1QWxvR1J3WVF3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQWZmaXJtVHJ1c3QgUHJlbWl1bSBFQ0MNCj09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUIvakNDQVlXZ0F3SUJBZ0lJZEpjbGlzYy9lbFF3Q2dZSUtvWkl6ajBFQXdNd1JURUxNQWtHQTFVRUJoTUNWVk14RkRBU0JnTlYNCkJBb01DMEZtWm1seWJWUnlkWE4wTVNBd0hnWURWUVFEREJkQlptWnBjbTFVY25WemRDQlFjbVZ0YVhWdElFVkRRekFlRncweE1EQXgNCk1qa3hOREl3TWpSYUZ3MDBNREV5TXpFeE5ESXdNalJhTUVVeEN6QUpCZ05WQkFZVEFsVlRNUlF3RWdZRFZRUUtEQXRCWm1acGNtMVUNCmNuVnpkREVnTUI0R0ExVUVBd3dYUVdabWFYSnRWSEoxYzNRZ1VISmxiV2wxYlNCRlEwTXdkakFRQmdjcWhrak9QUUlCQmdVcmdRUUENCklnTmlBQVFOTUY0YkZaMEQwS0Y1TmJjNlBKSjZ5aFVjeldMem5DWmNCejNsVlBxajFzd1M2dlFVWCtpT0dhc3ZMa2ptckJoRGVLelENCk44TzlzczBzNWtmaUd1Wmp1RDB1TDNqRVQ5djBENlJvVEZWeWE1VWRUaGhDbFhqTU56eVI0cHRsS3ltalFqQkFNQjBHQTFVZERnUVcNCkJCU2FyeWw2d0JFMU5TWlJNQUREYXY1QTFhN1dQREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTRHQTFVZER3RUIvd1FFQXdJQkJqQUsNCkJnZ3Foa2pPUFFRREF3Tm5BREJrQWpBWENmT0hpRkJhcjhqQVFyOUhYL1ZzYW9iZ3hDZDA1RGhUMXdWL0d6VGp4aSt6eWdrOE41M1gNCjU3aEc4ZjJoNG5FQ01FSlpoMFBVVWQrNjB3a3lXczZJZmxjOW5GOUNhL1VITGJYd2dwUDVXVyt1WlBwWTVZc2U0Mk8rdFlITmJ3S00NCmVRPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KQ2VydHVtIFRydXN0ZWQgTmV0d29yayBDQQ0KPT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEdXpDQ0FxT2dBd0lCQWdJREJFVEFNQTBHQ1NxR1NJYjNEUUVCQlFVQU1INHhDekFKQmdOVkJBWVRBbEJNTVNJd0lBWURWUVFLDQpFeGxWYm1sNlpYUnZJRlJsWTJodWIyeHZaMmxsY3lCVExrRXVNU2N3SlFZRFZRUUxFeDVEWlhKMGRXMGdRMlZ5ZEdsbWFXTmhkR2x2DQpiaUJCZFhSb2IzSnBkSGt4SWpBZ0JnTlZCQU1UR1VObGNuUjFiU0JVY25WemRHVmtJRTVsZEhkdmNtc2dRMEV3SGhjTk1EZ3hNREl5DQpNVEl3TnpNM1doY05Namt4TWpNeE1USXdOek0zV2pCK01Rc3dDUVlEVlFRR0V3SlFUREVpTUNBR0ExVUVDaE1aVlc1cGVtVjBieUJVDQpaV05vYm05c2IyZHBaWE1nVXk1QkxqRW5NQ1VHQTFVRUN4TWVRMlZ5ZEhWdElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1DQpNU0l3SUFZRFZRUURFeGxEWlhKMGRXMGdWSEoxYzNSbFpDQk9aWFIzYjNKcklFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DDQpBUThBTUlJQkNnS0NBUUVBNC90OW8zSzZ3dkRKRklmMWF3Rk80VzVBQjdwdEoxMS85MXN0czFySFVWK3JwREttWVllMmJnK0cwakFDDQpsL2pYYVZlaEdEbGRhbVI1eGdGWnJEd3hTamg4MGdUU1N5am9JRjg3QjZMTVRYUGI4NjVQeDFiVldxZVdpZnJ6cTJqVUk0WlpKODhKDQpKN3lzYm5LREhEQnkzK0NpNmRMaGRIVVp2U3FlZXhWVUJCdlhRem10VlNqRjRocTc5TURrcmpoSk04eDJoWjg1UmRLa252SVNqRkg0DQpmT1F0Zi9Xc1grc1duN0V0MGJyTWtVSjNUQ1hKa0RodjIvRE0rNDRlbDFrKzFXQk81Z1VvN1VsNUUwdTZTTnN2K1hMVE9jcitIOWcwDQpjdlcwUU04eEFjUHMzaEV0RjEwZnVGRFJYaG1uYWQ0SE15aktVSlg1cDFUTFZJWlFSYW41U1FJREFRQUJvMEl3UURBUEJnTlZIUk1CDQpBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlFJZHMzTEIvOGs5c1hON2J1UXZPS0VOMFoxOXpBT0JnTlZIUThCQWY4RUJBTUNBUVl3DQpEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBS2FvclNMT0FUMm1vLzlpMEVpZGkxNXlzSGhFNDl3Y3J3bjlJMGo2dlNyRXVWVUV0UkNqDQpqU2ZlQzRKajBPN2VERGQ1UVZzaXNyQ2FRVnltY09EVTBIZkxJOU1BNEd4V0wrRnBEUTNacXI4aGdWRFpCcVdvLzVVMzBLcis0clAxDQptUzFGaElybFFnblhkQUl2OTRuWW1lbThKOVJIamJvTlJoeDN6eFNrSExta01jU2NLSFFETlA4ekdTYWw2UTEwdHo2WHhuYm9KNWFqDQpadDNocnZKQlc4cVlWb056Y09TR0d0SXhRYm92dmkwVFduWnZUdWhPZ1E0L1d3TWlvQksrWmxnUlNzc0R4TFFxS2kyV0YrQTVWTHhJDQowM1lublpvdEJxYko3RG5TcTl1Zm1nc25BalVwc1VDVjUvbm9uRldJR1ViV3R6VDFmczQ1bXRrNDhWSDNUeXc9DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkNlcnRpbm9taXMgLSBBdXRvcml0w4PCqSBSYWNpbmUNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUZuRENDQTRTZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRVUZBREJqTVFzd0NRWURWUVFHRXdKR1VqRVRNQkVHQTFVRUNoTUsNClEyVnlkR2x1YjIxcGN6RVhNQlVHQTFVRUN4TU9NREF3TWlBME16TTVPVGc1TURNeEpqQWtCZ05WQkFNTUhVTmxjblJwYm05dGFYTWcNCkxTQkJkWFJ2Y21sMHc2a2dVbUZqYVc1bE1CNFhEVEE0TURreE56QTRNamcxT1ZvWERUSTRNRGt4TnpBNE1qZzFPVm93WXpFTE1Ba0cNCkExVUVCaE1DUmxJeEV6QVJCZ05WQkFvVENrTmxjblJwYm05dGFYTXhGekFWQmdOVkJBc1REakF3TURJZ05ETXpPVGs0T1RBek1TWXcNCkpBWURWUVFEREIxRFpYSjBhVzV2YldseklDMGdRWFYwYjNKcGRNT3BJRkpoWTJsdVpUQ0NBaUl3RFFZSktvWklodmNOQVFFQkJRQUQNCmdnSVBBRENDQWdvQ2dnSUJBSjJGbjRiVDQ2L0hzbXR1TStDZXQwSTBWWjM1Z2I1ajJDTjJEcGRVelpsTUd2RTV4NGpZRjFBTW5tSGENCndFNVYzdWRhdUhwT2Q0Y041YmpyK3A1ZWV4N0V6eWgweDVQMUZNWWlLQVQ1a2NPckozTnFEaTVOOHk0b0gzRGZWUzlPN2NkeGJ3bHkNCkx1M1ZNcGZROFZoMzBXQzhUbDdibW9UMlIyRkZLL1pRcG45cWNTZEloRFdlclA1cHFaNTZYalVsK3JTblNUVjNscWMyVytITjN5TncNCjJGMU1wUWlEOGFZa09CT283Qytvb1dmSHBpMkdSKzZLL095YkRuVDBLMGtDZTVCMWpQeVpPUUU1MWtxSjVaNTJxejZXS0RnbWk5Mk4NCmpNRDJBUjV2cFRFU09IMlZ3bkh1N1hTdTVEYWlRM1hWOFFDYjR1VFh6RUlEUzNoNjVYMjd1SzR1SUpQVDVHSGZjZUYyWjVjL3R0OXENCmMxcGtJdVZDMjgrQkE1UFk5T01RNEhMMkFIQ3M4TUY2RHdWL3p6UnBSYldUNUJuYlVoWWpCWWtPalVqa0pXK3plTDlpOVFmNmxTVEMNCmxyTG9veVBDWFFQOHc5UGxmTWwxSTlmMDliemU1Ti9OZ0wrUmlIMm5FN1E1dWl5NnZkRnJ6UE9sS08xRW5uMVNvMitXTGhsK0hQTmINCnh4YU91MkI5ZDJaSFZJSUFFV0JzTXNHb09CdnJicGdUMXU0NDlmQ2ZEdS8rTVlIQjBpU1ZMMU42YWFMd0Q0WkZqbGlDSzB3aTFGNmcNCjUzMG1KMGpmSlVhTlNpaDhocDc1bXhwWnVXVy9CZDIyUWwwOTVnQklnbDRnOXhHQzNzclluK1kzUnlZZTYzajNZY05CWkZnQ1FmbmENCjROSDQrZWo5VWppMjlZbmZBZ01CQUFHald6QlpNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEcNCkExVWREZ1FXQkJRTmpMWmgya1M0MFJSOXc3NTlYa2p3enNwcXNEQVhCZ05WSFNBRUVEQU9NQXdHQ2lxQmVnRldBZ0lBQVFFd0RRWUoNCktvWklodmNOQVFFRkJRQURnZ0lCQUNRK1lBWitIZTg2UHR2cXJ4eWFMQUVMOU1XMTJVa3g5RjFCallrTVR2OXNvdjMvNGdiSU9aL3gNCldxbmRJbGdWcUlyVHNlWXlDWUlEYk5jL0NNZjR1Ym9BYmJuVy9GSXlYYVIvcERHVXU3Wk1PSDhvTURYL255TlR0N2J1RkhBQVFDdmENClI2czBmbDZuVmpCaEs0dERyUDIyaUNqMWE3WStZRXE2UXBBMFo0M3E2MTlGVkRzWHJJdmt4bVVQN3RDTVhXWTV6aktuMkJDWHdINDANCm5KK1U4L2FHSDg4YmM2MlVlWWRvY01NenBYRG4yTlU0bEc5amVldS9DZzRJNThVdkQwS2dLeFJBL3lIZ0JjVW40WVFSRTdyV2hoMUINCkN4TWppZFBKQytpS3VucWpvM00zTllCOUVyZ3pkMEE0d1BwZU1OTHl0cU94MXFLVmw0R2JVdTFwVFArQTVGUGJWRnNEYlZSZnNianYNCkpMMXZueEhEeDJUQ0R5aGloV1plR251eXQrK3VOY2taTTZpNEo5c3pWYjlvNFhWSVJGYjd6ZE5JdTBlSk9xeHA5WURHNUVSUUwxVEUNCnFrUEZNVEZZdlpiRjZuVnNtbld4VGZqM2wvK1dGdktYVGVqMjh4SDVPbjJLT0c0RXkrSFRSUldxcGRFZG5WMWo2Q1RtTmhUaWg2MGINCldmVkVtL3ZYZDN3ZkFYQmlvU0Fhb3NVYUtQUWhBKzR1MmNHQTZyblpndFpiZHNMTE83WFNBUENqRHVHdGJrRDMyNkMwMEVhdUZkZEUNCndrMDErZElMOGhmMnJHYlZKTEpQMFJ5WndHNzFmZXQwQkxqNVRYY0oxN1RQQnpBSjhiZ0FWdGtYRmhZS0s0YmZqd0VaR3VXN2dtUC8NCnZndDJGbDQzTitiWWRKZWltVVY1DQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNClJvb3QgQ0EgR2VuZXJhbGl0YXQgVmFsZW5jaWFuYQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUdpekNDQlhPZ0F3SUJBZ0lFTzBYbGFEQU5CZ2txaGtpRzl3MEJBUVVGQURCb01Rc3dDUVlEVlFRR0V3SkZVekVmTUIwR0ExVUUNCkNoTVdSMlZ1WlhKaGJHbDBZWFFnVm1Gc1pXNWphV0Z1WVRFUE1BMEdBMVVFQ3hNR1VFdEpSMVpCTVNjd0pRWURWUVFERXg1U2IyOTANCklFTkJJRWRsYm1WeVlXeHBkR0YwSUZaaGJHVnVZMmxoYm1Fd0hoY05NREV3TnpBMk1UWXlNalEzV2hjTk1qRXdOekF4TVRVeU1qUTMNCldqQm9NUXN3Q1FZRFZRUUdFd0pGVXpFZk1CMEdBMVVFQ2hNV1IyVnVaWEpoYkdsMFlYUWdWbUZzWlc1amFXRnVZVEVQTUEwR0ExVUUNCkN4TUdVRXRKUjFaQk1TY3dKUVlEVlFRREV4NVNiMjkwSUVOQklFZGxibVZ5WVd4cGRHRjBJRlpoYkdWdVkybGhibUV3Z2dFaU1BMEcNCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFER0txdFhFVGN2SW9yS0EzUWR5dTB0b2d1OE0xSkFKa2UrV21tbU8zSTINCkYwem8zN2k3TDNiaFFFWjBaUUtRVWdpMC82aU13ZURIaVZZUU9UUHZhTFJmWDlwdEk2R0pYaUtqU2did0ovQlh1ZmpwVGpKM0NqOUINClpQUHJaZTUyL2xTcWZSMGdydlBYZE1JS1gvVUlLRklJekZWZDBnL2Jtb0dsdTZHendaVE5WT0F5ZFRHUkdtS3kzblhpejArSjJaR1ENCkQwRWJ0RnBLZDcxbmcrQ1Q1MTZuRE9lQjAvUlNyRk95QThkRUp2dDU1Y3MwWUZBUWV4dmJhOWRIcTE5OGFNcHVuVUVERU81cm1YdGUNCkphakNxK1RBODF5YzQ3N09NVXhrSGw2QW92V0RmZ3pXeW94VmpyN2d2a2tIRDZNa1FYcFlIWVRxV0JMSTRiZnQ3NVBlbEFneEFnTUINCkFBR2pnZ003TUlJRE56QXlCZ2dyQmdFRkJRY0JBUVFtTUNRd0lnWUlLd1lCQlFVSE1BR0dGbWgwZEhBNkx5OXZZM053TG5CcmFTNW4NCmRtRXVaWE13RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQWpDQ0FqUUdBMVVkSUFTQ0Fpc3dnZ0luTUlJQ0l3WUtLd1lCQkFHL1ZRSUINCkFEQ0NBaE13Z2dIb0JnZ3JCZ0VGQlFjQ0FqQ0NBZG9lZ2dIV0FFRUFkUUIwQUc4QWNnQnBBR1FBWVFCa0FDQUFaQUJsQUNBQVF3QmwNCkFISUFkQUJwQUdZQWFRQmpBR0VBWXdCcEFQTUFiZ0FnQUZJQVlRRHRBSG9BSUFCa0FHVUFJQUJzQUdFQUlBQkhBR1VBYmdCbEFISUENCllRQnNBR2tBZEFCaEFIUUFJQUJXQUdFQWJBQmxBRzRBWXdCcEFHRUFiZ0JoQUM0QURRQUtBRXdBWVFBZ0FFUUFaUUJqQUd3QVlRQnkNCkFHRUFZd0JwQVBNQWJnQWdBR1FBWlFBZ0FGQUFjZ0RoQUdNQWRBQnBBR01BWVFCekFDQUFaQUJsQUNBQVF3QmxBSElBZEFCcEFHWUENCmFRQmpBR0VBWXdCcEFQTUFiZ0FnQUhFQWRRQmxBQ0FBY2dCcEFHY0FaUUFnQUdVQWJBQWdBR1lBZFFCdUFHTUFhUUJ2QUc0QVlRQnQNCkFHa0FaUUJ1QUhRQWJ3QWdBR1FBWlFBZ0FHd0FZUUFnQUhBQWNnQmxBSE1BWlFCdUFIUUFaUUFnQUVFQWRRQjBBRzhBY2dCcEFHUUENCllRQmtBQ0FBWkFCbEFDQUFRd0JsQUhJQWRBQnBBR1lBYVFCakFHRUFZd0JwQVBNQWJnQWdBSE1BWlFBZ0FHVUFiZ0JqQUhVQVpRQnUNCkFIUUFjZ0JoQUNBQVpRQnVBQ0FBYkFCaEFDQUFaQUJwQUhJQVpRQmpBR01BYVFEekFHNEFJQUIzQUdVQVlnQWdBR2dBZEFCMEFIQUENCk9nQXZBQzhBZHdCM0FIY0FMZ0J3QUdzQWFRQXVBR2NBZGdCaEFDNEFaUUJ6QUM4QVl3QndBSE13SlFZSUt3WUJCUVVIQWdFV0dXaDANCmRIQTZMeTkzZDNjdWNHdHBMbWQyWVM1bGN5OWpjSE13SFFZRFZSME9CQllFRkhzMTAwRFNISGdaWnU5MEVDamNQayt5ZUFUOE1JR1YNCkJnTlZIU01FZ1kwd2dZcUFGSHMxMDBEU0hIZ1padTkwRUNqY1BrK3llQVQ4b1d5a2FqQm9NUXN3Q1FZRFZRUUdFd0pGVXpFZk1CMEcNCkExVUVDaE1XUjJWdVpYSmhiR2wwWVhRZ1ZtRnNaVzVqYVdGdVlURVBNQTBHQTFVRUN4TUdVRXRKUjFaQk1TY3dKUVlEVlFRREV4NVMNCmIyOTBJRU5CSUVkbGJtVnlZV3hwZEdGMElGWmhiR1Z1WTJsaGJtR0NCRHRGNVdnd0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFDUmgNClR2VzF5RUlDS3JOY2RhM0ZiY3JubEQrbGFKV0l3VlRBRUdtaUVpOFlQeVZRcUh4SzZzWUoyZlIxeGtEYXIxQ2RQYVVXdTIweHhzZHoNCkNraitJSEx0Yjh6b2cyRVdScEFCbFV0OWpwcFNDUy8yYnh6a29YSFBqQ3BhRjNPRFIwMFBOdnNFVFVsUjRoVEpaR0g3MUJUZzlKNjMNCk5JOEtKcjJYWFBSNU9rb3dHY3l0VDZDWWlyUXhseXJpYzIxK2VMajRpSWxQc1NLUlpFdjFVTjREMitYRmR1Y1RablYrWmZzQm41T0gNCmlKMzVSbGQ4VFdDdm1ITVRJNlFna1lINjBHRm11SDNScjladkhtdzk2Ukg5cWZtQ0lvYVpNM0ZhNmhsWFBaSE5xY0NqYmdjVHBzbnQNCitHaWpuc05hY2dtSEtOSEVjOFJ6R0Y5UWRSWXhuN2ZvZk1NPQ0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0KDQpBLVRydXN0LW5RdWFsLTAzDQo9PT09PT09PT09PT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUR6ekNDQXJlZ0F3SUJBZ0lEQVd3ZU1BMEdDU3FHU0liM0RRRUJCUVVBTUlHTk1Rc3dDUVlEVlFRR0V3SkJWREZJTUVZR0ExVUUNCkNndy9RUzFVY25WemRDQkhaWE11SUdZdUlGTnBZMmhsY21obGFYUnpjM2x6ZEdWdFpTQnBiU0JsYkdWcmRISXVJRVJoZEdWdWRtVnkNCmEyVm9jaUJIYldKSU1Sa3dGd1lEVlFRTERCQkJMVlJ5ZFhOMExXNVJkV0ZzTFRBek1Sa3dGd1lEVlFRRERCQkJMVlJ5ZFhOMExXNVINCmRXRnNMVEF6TUI0WERUQTFNRGd4TnpJeU1EQXdNRm9YRFRFMU1EZ3hOekl5TURBd01Gb3dnWTB4Q3pBSkJnTlZCQVlUQWtGVU1VZ3cNClJnWURWUVFLREQ5QkxWUnlkWE4wSUVkbGN5NGdaaTRnVTJsamFHVnlhR1ZwZEhOemVYTjBaVzFsSUdsdElHVnNaV3QwY2k0Z1JHRjANClpXNTJaWEpyWldoeUlFZHRZa2d4R1RBWEJnTlZCQXNNRUVFdFZISjFjM1F0YmxGMVlXd3RNRE14R1RBWEJnTlZCQU1NRUVFdFZISjENCmMzUXRibEYxWVd3dE1ETXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDdFBXRnVBL09RTzhCQkM0U0ENCnpld3FvNTFydTI3Q1FvVDNVUlRob0tndFVhTlI4dDRqOERSRS81VHJ6QVVqbFVDNUIzaWxKZllLdlVXRzZObTl3QVNPaFVSaDczK24NCnlmckJKY3lGTEdNL0JXQnpTUVhnWUhpVkVFdmMrUkZaem5GL1FKdUtxaVRmQzBMaTIxYThTdEtsREp1M1F6N2RnOU1tRUFMUDZpUEUNClNVN2wwK20waUtzTXJtS1MxR1dIMldyWDlJV2Y1RE1pSmFYbHlETzZ3OGRCM0YvR2Fzd0FEbTB5cUxhSE5nQmlkNXNlSHpUTGtEeDQNCmlIUUY2M24xazNGbHlwM0hheGd0UFZ4TzU5WDRQekY5ajRmc0NpSXZJK24rdTMzSjRQVHM2M3pFc01NdFlyV2FjZGF4YXVqczJlM1YNCmN1eStWd0hPQlZXZjN0RmdpQkN6QWdNQkFBR2pOakEwTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RVFZRFZSME9CQW9FQ0VScWxXZFYNCmVSRlBNQTRHQTFVZER3RUIvd1FFQXdJQkJqQU5CZ2txaGtpRzl3MEJBUVVGQUFPQ0FRRUFWZFJVMFZsSVhMT1RoYXEvWXkva2dNNDANCm96UmlQdmJZN21lSU1RUURid3ZVQi90T2RRL1RMdFBBRjhmR0tPd0dEUkVrRGc2bFhiK01zaE9XY2R6VXpnNE5DbWd5YkxsQk1SbXINCnNRZDdUWmpUWExEUjhLZENvTFhFanEvKzhULzA3MDlHQUhickF2djVuZEpBbHNlSU9yaWZFWG56Z0dXb3ZSL1RlSUdnVVV3M3RLWmQNCkpYRFJac2xvK1M0UkZHanhWSmdJckNhU0Q5NkpudFQ2czNrcjBxTjUxT3lMcklkVGFFSk1VVkYwSGhzbkx1UDFIeWwwVGUydjkrR1MNCm1ZSG92anJIRjFEMnQ4YjhtN0NLYTlhSUE1R1BCbmM2aFFMZG1OVkRlRC9HTUJXc20ydkxWN2VKVVlzNjZNbUVETnV4VUNBS0drcTYNCmFocTk3QnZJeFlTYXpRPT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KVFdDQSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5DQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRGV6Q0NBbU9nQXdJQkFnSUJBVEFOQmdrcWhraUc5dzBCQVFVRkFEQmZNUXN3Q1FZRFZRUUdFd0pVVnpFU01CQUdBMVVFQ2d3Sg0KVkVGSlYwRk9MVU5CTVJBd0RnWURWUVFMREFkU2IyOTBJRU5CTVNvd0tBWURWUVFERENGVVYwTkJJRkp2YjNRZ1EyVnlkR2xtYVdOaA0KZEdsdmJpQkJkWFJvYjNKcGRIa3dIaGNOTURnd09ESTRNRGN5TkRNeldoY05NekF4TWpNeE1UVTFPVFU1V2pCZk1Rc3dDUVlEVlFRRw0KRXdKVVZ6RVNNQkFHQTFVRUNnd0pWRUZKVjBGT0xVTkJNUkF3RGdZRFZRUUxEQWRTYjI5MElFTkJNU293S0FZRFZRUUREQ0ZVVjBOQg0KSUZKdmIzUWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhrd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSw0KQW9JQkFRQ3dmbks0cEFPVTVxZmVDVGlSU2hGQWg2ZDhXV1FVZTdVUkVOMyt2OVhBdTFiaWhTWDBOWElQK0ZQUVFlRkVBY0swSE1NeA0KUWhaSGhUTWlkcklLYncvbEpWQlBoWWErdjVndUVHY2V2aEVGaGdXUXhGblFmSGdRc0lCY3QrSEhLM1hMZkordXRkR2RJemRqcDl4Qw0Kb2kyU0JCdFF3WHU0UGh2SlZnU0xMMUticmFsVzZjSC9yYWxZaHpDMmdmZVhSZndaVnpzcmIrUkg5SmxGL2gzeCtKZWppQjAzSEZ5UA0KNEhZbG1sRDRvRlQvUkpCMkk5SXl4c09yQnIvOCs3L3pyWDJTWWdKYktkTTFvNU9hUTJSZ1hiTDZNdjg3Qks5TlFHcjV4K1B2SS8xcg0KeStVUGl6Z043Z3I4L2crWW56QXgzV3hTWmZtTGdiNGk0UnhZQTdxUkc0a0hBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQg0KQmpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJScU9Gc21qZDZMV3ZKUGVsU0RHUmpqQ0RXbXVqQU5CZ2txaGtpRw0KOXcwQkFRVUZBQU9DQVFFQVBOVjNQZHJmaWJxSERBaFVhaUJRa3I2d1FUMjVKbVNEQ2kvb1FNQ1hLQ2VDTUVySmsvOXE1NllBZjRsQw0KbXRZUjVWUE9MOHp5MmdYRS91SlF4RHFHZmN6YWZoQUpPNUkxS2xPeS91c3JCZGxzWGViUTc5TnFacDRWS0lWNjZJSUFyQjZuQ1dsVw0KUXROb1VSaStWSnEvUkVHNlNiNGd1bWxjN3JoM3pjNXNINjJEbGhoOURyVVVPWVR4S09rdG81NTdIbnB5V29PemVXL3Z0UHpRQ3FWWQ0KVDBiZisyMTVXZktFSWxLdUQ4ejdmRHZuYXNwSFljTjYrTk9TQkIrNElJVGhObFFXeDBEZU80cHozTi9HQ1V6ZjdOci8xRk5Db2NueQ0KWWgwaWd6eVh4ZmtaWWllc1pTTFgwenpHNVk2eVU4eEp6cnd3L25zT001RDc3ZElVa1I4SHJ3PT0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KU2VjdXJpdHkgQ29tbXVuaWNhdGlvbiBSb290Q0EyDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQ0KTUlJRGR6Q0NBbCtnQXdJQkFnSUJBREFOQmdrcWhraUc5dzBCQVFzRkFEQmRNUXN3Q1FZRFZRUUdFd0pLVURFbE1DTUdBMVVFQ2hNYw0KVTBWRFQwMGdWSEoxYzNRZ1UzbHpkR1Z0Y3lCRFR5NHNURlJFTGpFbk1DVUdBMVVFQ3hNZVUyVmpkWEpwZEhrZ1EyOXRiWFZ1YVdOaA0KZEdsdmJpQlNiMjkwUTBFeU1CNFhEVEE1TURVeU9UQTFNREF6T1ZvWERUSTVNRFV5T1RBMU1EQXpPVm93WFRFTE1Ba0dBMVVFQmhNQw0KU2xBeEpUQWpCZ05WQkFvVEhGTkZRMDlOSUZSeWRYTjBJRk41YzNSbGJYTWdRMDh1TEV4VVJDNHhKekFsQmdOVkJBc1RIbE5sWTNWeQ0KYVhSNUlFTnZiVzExYm1sallYUnBiMjRnVW05dmRFTkJNakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQg0KQU5BVk9WS3hVck82eFZtQ3hGMVNyanBEWllCTHgvS1d2TnMybDlhbVpJeW9YdkRqQ2h6MzM1YzlTNjcyWGV3aHRVR3J6YmwrZHArKw0KK1Q0Mk5LQTd3Zll4RVVWMGt6MVhnTVg1aVpuSzVhdHExTFhhUVpBUXdkYldRb25Ddi9RNEVwVk1WQVgzTnVSRmczc1VaZGJjREUzUg0KM240TXF6dkVGYjQ2VnFaYWIzWnBVcWw2dWNqcmFwcGRVdEF0Q21zMUZna1FoTkJxeWpvR0FEZEg1SDVYVHorTDYyZTRpS3JGdmxOVg0Kc3BIRWZibXdoUmtHZUM3YllScjZoZlZLa2FIbkZ0V09vam5mbExod0h5Zy9pL3hBWG1PRFBJTXFHcGxyejk1WmFqdjhieGJYSC8xSw0KRU90T2doWTZyQ2NNVS9HdDFTU3dhd05Rd1MwOEZ0MUVOQ2NhZGZzQ0F3RUFBYU5DTUVBd0hRWURWUjBPQkJZRUZBcUZxWGRsQlpoOA0KUUlINEQ1Y3NPUEVLN0R6UE1BNEdBMVVkRHdFQi93UUVBd0lCQmpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQg0KQ3dVQUE0SUJBUUJNT3FORXJMbEZzY2VUZnNnTENrTGZaT29jN2xsc0NMcUpYMnJLU3BXZWVvOEh4ZHBGY29KeERqclN6RytudEtFag0KdS9Za244c1gvb3ltenNMUzI4eU4vSEg4QXluQmJGMHpYMlMyWlR1SmJ4aDJlUFhjb2tnZkdUK09rK3Z4K2hmdXpVN2pCQkpWMXVYaw0KM2ZzK0JYemlIVjdHcDd5WFQyZzY5ZWt1Q2tPMnIxZGNZbWg4dC8yamlvU2dyR0srS3dtSE5QQnFBYnViS1ZZOC9nQTN6eU5zOFU2cQ0KdG5SR0VteVI3alRWN0pxUjUwUytrREZ5MVVrQzlnTGw5Qi9yZk5tV1Zhbi83SXI1bVVmL05Wb0NxZ1RMaWx1SGNTbVJ2YVMwZWcyOQ0KbXZWWEl3QUhJUmMvU2puUkJVa0xwN1kzZ2FWZGpLb3pYb0VvZktkOUorc0FybzAzDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tDQoNCkVDLUFDQw0KPT09PT09DQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0NCk1JSUZWakNDQkQ2Z0F3SUJBZ0lRN2lzOTY5UWgzaFNvWXF3RTg5M0VBVEFOQmdrcWhraUc5dzBCQVFVRkFEQ0I4ekVMTUFrR0ExVUUNCkJoTUNSVk14T3pBNUJnTlZCQW9UTWtGblpXNWphV0VnUTJGMFlXeGhibUVnWkdVZ1EyVnlkR2xtYVdOaFkybHZJQ2hPU1VZZ1VTMHcNCk9EQXhNVGMyTFVrcE1TZ3dKZ1lEVlFRTEV4OVRaWEoyWldseklGQjFZbXhwWTNNZ1pHVWdRMlZ5ZEdsbWFXTmhZMmx2TVRVd013WUQNClZRUUxFeXhXWldkbGRTQm9kSFJ3Y3pvdkwzZDNkeTVqWVhSalpYSjBMbTVsZEM5MlpYSmhjbkpsYkNBb1l5a3dNekUxTURNR0ExVUUNCkN4TXNTbVZ5WVhKeGRXbGhJRVZ1ZEdsMFlYUnpJR1JsSUVObGNuUnBabWxqWVdOcGJ5QkRZWFJoYkdGdVpYTXhEekFOQmdOVkJBTVQNCkJrVkRMVUZEUXpBZUZ3MHdNekF4TURjeU16QXdNREJhRncwek1UQXhNRGN5TWpVNU5UbGFNSUh6TVFzd0NRWURWUVFHRXdKRlV6RTcNCk1Ea0dBMVVFQ2hNeVFXZGxibU5wWVNCRFlYUmhiR0Z1WVNCa1pTQkRaWEowYVdacFkyRmphVzhnS0U1SlJpQlJMVEE0TURFeE56WXQNClNTa3hLREFtQmdOVkJBc1RIMU5sY25abGFYTWdVSFZpYkdsamN5QmtaU0JEWlhKMGFXWnBZMkZqYVc4eE5UQXpCZ05WQkFzVExGWmwNCloyVjFJR2gwZEhCek9pOHZkM2QzTG1OaGRHTmxjblF1Ym1WMEwzWmxjbUZ5Y21Wc0lDaGpLVEF6TVRVd013WURWUVFMRXl4S1pYSmgNCmNuRjFhV0VnUlc1MGFYUmhkSE1nWkdVZ1EyVnlkR2xtYVdOaFkybHZJRU5oZEdGc1lXNWxjekVQTUEwR0ExVUVBeE1HUlVNdFFVTkQNCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBc3lMSFQrS1hRcFdJUjROQTloMFg4NE56SkI1Ujg1aUsNCnc1SzQvMENRQlhDSFlNa0FxYldVWlJraUZSZkNRMnhtUkpvTkJENDViNlZMZXFwanQ0cEVuZGxqa1lSbTRDZ1B1a0xqYm83M0ZDZVQNCmFlNlJEcU5mRHJIclpxSnlUeElUaG1WNlB0dFBCL1NuQ1dEYU9rS1p4N0ovc3hhVkhNZjVOTFdVaGRXWlhxQklvSDduRjJXNG9uVzQNCkh2UGxRbjJ2N2ZPS1NHUmRnaFNUMk1Eay83TlFjdkoyOXJOZFFsQjUwSlErYXd3QXZ0aHJEazRxN0Q3U3pJS2lHR1V6RTNlZW1sMGENCkU5akQyejNJbDNydWNPMm41bnpiY2M4dGxHTGZiZGIxT0w0L3BZVUtHYmlvMkFsMVFuREU2dS9MRHNnMHFCSWltQXk0RTVTMlMrencNCjBKRG5Kd0lEQVFBQm80SGpNSUhnTUIwR0ExVWRFUVFXTUJTQkVtVmpYMkZqWTBCallYUmpaWEowTG01bGREQVBCZ05WSFJNQkFmOEUNCkJUQURBUUgvTUE0R0ExVWREd0VCL3dRRUF3SUJCakFkQmdOVkhRNEVGZ1FVb01PTFJLbzNwVVcvbDRCYTBmRjRvcHZwWFkwd2Z3WUQNClZSMGdCSGd3ZGpCMEJnc3JCZ0VFQWZWNEFRTUJDakJsTUN3R0NDc0dBUVVGQndJQkZpQm9kSFJ3Y3pvdkwzZDNkeTVqWVhSalpYSjANCkxtNWxkQzkyWlhKaGNuSmxiREExQmdnckJnRUZCUWNDQWpBcEdpZFdaV2RsZFNCb2RIUndjem92TDNkM2R5NWpZWFJqWlhKMExtNWwNCmRDOTJaWEpoY25KbGJDQXdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBS0JJVzRJQjlrMUl1RGxWTlp5QWVsT1oxVnIvc1hFN3pEa0oNCmxGN1cydSsrQVZ0ZDB4N1kvWDFQemFCQjREU1R2OHZpaHB3M2twQldITnpyS1FYbHhKN0hOZCtLRE0zRklVUHBxb2psTmNBWlFtTmENCkFsNmtTQmc2aFcvY25idy9uWnpCaDdoNllRanBkd3QvY0t0NjNkbVhMR1FlaGIrOGRKYWh3M29TN0F3YWJvTU1QT2h5UnAvN1NOVmUNCmwrYXhvZmprNzBZbGxKeUoyMms0dnV4Y0RsYkhaVkhsVUlpSXYwTFZLejNsK2JxZUxyUEs5SE9TQWd1K1RHYnJJUDY1eTdXWmYrYTINCkUvcktTMDNaN2xOR0JqdkdUcTJUV29GK2JDcExhZ1ZGalBJaHBER1FoMnhsbkoybFlKVTZVbi8xMGFzSWJ2UHVXL21JUFg2NGIyNEQNCjVFST0NCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0NCg0KSGVsbGVuaWMgQWNhZGVtaWMgYW5kIFJlc2VhcmNoIEluc3RpdHV0aW9ucyBSb290Q0EgMjAxMQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlFTVRDQ0F4bWdBd0lCQWdJQkFEQU5CZ2txaGtpRzl3MEJBUVVGQURDQmxURUxNQWtHQTFVRUJoTUNSMUl4UkRCQ0JnTlZCQW9UDQpPMGhsYkd4bGJtbGpJRUZqWVdSbGJXbGpJR0Z1WkNCU1pYTmxZWEpqYUNCSmJuTjBhWFIxZEdsdmJuTWdRMlZ5ZEM0Z1FYVjBhRzl5DQphWFI1TVVBd1BnWURWUVFERXpkSVpXeHNaVzVwWXlCQlkyRmtaVzFwWXlCaGJtUWdVbVZ6WldGeVkyZ2dTVzV6ZEdsMGRYUnBiMjV6DQpJRkp2YjNSRFFTQXlNREV4TUI0WERURXhNVEl3TmpFek5EazFNbG9YRFRNeE1USXdNVEV6TkRrMU1sb3dnWlV4Q3pBSkJnTlZCQVlUDQpBa2RTTVVRd1FnWURWUVFLRXp0SVpXeHNaVzVwWXlCQlkyRmtaVzFwWXlCaGJtUWdVbVZ6WldGeVkyZ2dTVzV6ZEdsMGRYUnBiMjV6DQpJRU5sY25RdUlFRjFkR2h2Y21sMGVURkFNRDRHQTFVRUF4TTNTR1ZzYkdWdWFXTWdRV05oWkdWdGFXTWdZVzVrSUZKbGMyVmhjbU5vDQpJRWx1YzNScGRIVjBhVzl1Y3lCU2IyOTBRMEVnTWpBeE1UQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCDQpBS2xUQU9NdXB2YU8rbURZTFpVKytDd3FWRTdOdVlSaGxGaFBqejJMNUVQemRZbU5VZVRETjlLS2lFMTVIcmNTM1VONFNvcVM1dGRJDQoxUStrT2lsRU5iZ0g5bWdkVmMwNFVmQ01KREdGcjRQSmZlbDNyKzBhZTUwWCtiT2RPRkFQcGxwNWtZQ3ZONjZtMHpIN3RTWUpuVHhhDQo3MUhGSzkrV1hlc3lIZ0xhY0Vuc2JnekltamVOOS9FMllFc21MSUtlMEhqekRROWpwRkV3NGZrckp4SUgyT3E5R0dLWXNGazNmYjd1DQo4eUJSUWxxRDc1TzZhUlh4WXAyZm1UbUNvYmQwTG92VXhRdDdML0RJQ3RvOWVRcWFreHlsS0hKemtVT2FwOUZOaFlTNXFYU1BGRURIDQozTjZzUVdSc3RCbWJBbU50SkdTUFJMSWw2czVkZEF4ak1seU5oK1VDQXdFQUFhT0JpVENCaGpBUEJnTlZIUk1CQWY4RUJUQURBUUgvDQpNQXNHQTFVZER3UUVBd0lCQmpBZEJnTlZIUTRFRmdRVXBwRkMvUk5oU2lPZUNLUXA1ZGdUQkNQdVFTVXdSd1lEVlIwZUJFQXdQcUE4DQpNQVdDQXk1bmNqQUZnZ011WlhVd0JvSUVMbVZrZFRBR2dnUXViM0puTUFXQkF5NW5jakFGZ1FNdVpYVXdCb0VFTG1Wa2RUQUdnUVF1DQpiM0puTUEwR0NTcUdTSWIzRFFFQkJRVUFBNElCQVFBZjczbEI0WHR1UDdLTWhqZENTazRjTng2Tlpyb2tnY2xQRWc4aHdBT1hoaVZ0DQpYZE1pS2Foc29nMnA2ejBHVzVrNng4ekRtalIvcXc3SVRoemgrdVRjelEyK3Z5VCtiT2Ryd2czSUJwNU9qV0VvcG1yOTVmWmk2aGc4DQpUcUJUbmJJNm5PdWxuSkVXdGsyQzRBd0ZTS2xzOWN6NHk1MUp0UEFDcGYxd0ErMktJYVd1RTRaSnd6Tnp2b2M3ZElzWFJTWk1GcEdEDQovbWQ5elUxalovcnpBeEtXZUFhTnNXZnRqaisrbjA4QzliTUpML05NaDk4cXk1VjhBY3lzTm5xL29uTjY5NC9CdFpxaEZMS1BNNThODQo3eUxjWm51RXZVVVhCajA4eXJsM05JL0s2czgvTVQ3amlPT0FTU1hJbDdXZG1wbE5zRHo0U2dDYlpOMmZPVXZSSjllNA0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ0K
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/cacert.pem,importbuddy/lib/requestcore/cacert.pem
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/index.php,importbuddy/lib/requestcore/index.php
PD9waHAgLy8gU2lsZW5jZSBpcyBnb2xkZW4u
###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/index.php,importbuddy/lib/requestcore/index.php
###PACKDATA,FILE_START,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php

###PACKDATA,FILE_END,/destinations/_s3lib/aws-sdk/lib/requestcore/requestcore.class.php,importbuddy/lib/requestcore/requestcore.class.php
###PACKDATA,END
*/









